#ifndef _BF706_DEVICE_
#define _BF706_DEVICE_


#ifdef __cplusplus
 extern "C" {
#endif

#if !(defined(__ASSEMBLY__))
#include <stdint.h>

#ifndef __IO
#define __IO volatile
#endif

#ifndef __cplusplus
typedef volatile const uint32_t RoReg;	 /**< Read only 32-bit register (volatile const unsigned int) */
typedef volatile const uint16_t RoReg16; /**< Read only 16-bit register (volatile const unsigned int) */
typedef volatile const uint8_t	RoReg8;	 /**< Read only	 8-bit register (volatile const unsigned int) */
#else
typedef volatile	   uint32_t RoReg;	 /**< Read only 32-bit register (volatile const unsigned int) */
typedef volatile	   uint16_t RoReg16; /**< Read only 16-bit register (volatile const unsigned int) */
typedef volatile	   uint8_t	RoReg8;	 /**< Read only	 8-bit register (volatile const unsigned int) */
#endif
typedef volatile	   uint32_t WoReg;	 /**< Write only 32-bit register (volatile unsigned int) */
typedef volatile	   uint16_t WoReg16; /**< Write only 16-bit register (volatile unsigned int) */
typedef volatile	   uint32_t WoReg8;	 /**< Write only  8-bit register (volatile unsigned int) */
typedef volatile	   uint32_t RwReg;	 /**< Read-Write 32-bit register (volatile unsigned int) */
typedef volatile	   uint16_t RwReg16; /**< Read-Write 16-bit register (volatile unsigned int) */
typedef volatile	   uint8_t	RwReg8;	 /**< Read-Write  8-bit register (volatile unsigned int) */
#define CAST(type, value) ((type *)(value))
#define REG_ACCESS(type, address) (*(type*)(address)) /**< C code: Register value */
#else
#define CAST(type, value) (value)
#define REG_ACCESS(type, address) (address) /**< Assembly code: Register address */
#endif

#if (defined(__ASSEMBLY__))
#define DISPATCHER_PUSH 		[--sp] = ( R7:0, P5:0 );		[--SP] = RETS;		[--SP] = ASTAT

#define DISPATCHER_POP 		ASTAT = [SP++];		RETS  = [SP++];		( R7 : 0, P5 : 0) = [ SP ++ ];

#define HI(x) (x >> 16)
#define LO(x) (x & 0xFFFF)

#define LOADIMM32REG(R,VAL) R##.L = LO(VAL); R##.H = HI(VAL);

#endif




#if !(defined(__ASSEMBLY__))
/* ----- L1DM_SRAM_BASE_ADDR : (32) L1DM SRAM Base Address Register ----- */
typedef union {
	struct {
		uint32_t :22;			/*!< bit	0..21	Reserved	*/
		uint32_t ADDR:10;			/*!< bit	22..31	Address Value	*/
		uint32_t :10;			/*!< bit	22..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_SRAM_BASE_ADDR_Type;
#define REG_L1DM_SRAM_BASE_ADDR		(*(RwReg *)0x1FC00000UL)

#else
#define REG_L1DM_SRAM_BASE_ADDR		(0x1FC00000) /**< \brief (L1DM) L1DM SRAM Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCTL : (32) L1DM Data Memory Control Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ENCPLB:1;			/*!< bit	1	Enable CPLB Operations	*/
		uint32_t CFG:2;			/*!< bit	2..3	Configure as Cache or SRAM	*/
		uint32_t DCBS:1;			/*!< bit	4	Data Cache Bank Select	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t CBYPASS:1;			/*!< bit	8	Cache Bypass	*/
		uint32_t RDCHK:1;			/*!< bit	9	Read Parity Check	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t ENX:1;			/*!< bit	16	Enable Extended Data Access	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCTL_Type;
#define REG_L1DM_DCTL		(*(RwReg *)0x1FC00004UL)

#else
#define REG_L1DM_DCTL		(0x1FC00004) /**< \brief (L1DM) L1DM Data Memory Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DSTAT : (32) L1DM Data Memory CPLB Status Register ----- */
typedef union {
	struct {
		uint32_t FAULT:16;			/*!< bit	0..15	Fault Associated CPLB	*/
		uint32_t RW:1;			/*!< bit	16	Read or Write Access	*/
		uint32_t MODE:1;			/*!< bit	17	Mode During Access	*/
		uint32_t DAG:1;			/*!< bit	18	DAG Access	*/
		uint32_t ILLADDR:1;			/*!< bit	19	Illegal Address	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DSTAT_Type;
#define REG_L1DM_DSTAT		(*(RwReg *)0x1FC00008UL)

#else
#define REG_L1DM_DSTAT		(0x1FC00008) /**< \brief (L1DM) L1DM Data Memory CPLB Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_FAULT_ADDR : (32) L1DM Data Memory CPLB Fault Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_FAULT_ADDR_Type;
#define REG_L1DM_DCPLB_FAULT_ADDR		(*(RwReg *)0x1FC0000CUL)

#else
#define REG_L1DM_DCPLB_FAULT_ADDR		(0x1FC0000C) /**< \brief (L1DM) L1DM Data Memory CPLB Fault Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DFLT : (32) L1DM Data Memory CPLB Default Settings Register ----- */
typedef union {
	struct {
		uint32_t SYSCPROPS:3;			/*!< bit	0..2	System Cacheability Properties	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t SYSEOM:1;			/*!< bit	4	System Exception On Miss	*/
		uint32_t SYSUREAD:1;			/*!< bit	5	System User Mode Read	*/
		uint32_t SYSUWRITE:1;			/*!< bit	6	System User Mode Write	*/
		uint32_t SYSSWRITE:1;			/*!< bit	7	System Supervisor Mode Write	*/
		uint32_t L1EOM:1;			/*!< bit	8	L1 Exception On Miss	*/
		uint32_t L1UREAD:1;			/*!< bit	9	L1 User Mode Read	*/
		uint32_t L1UWRITE:1;			/*!< bit	10	L1 User Mode Write	*/
		uint32_t L1SWRITE:1;			/*!< bit	11	L1 Supervisor Mode Write	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DFLT_Type;
#define REG_L1DM_DCPLB_DFLT		(*(RwReg *)0x1FC00010UL)

#else
#define REG_L1DM_DCPLB_DFLT		(0x1FC00010) /**< \brief (L1DM) L1DM Data Memory CPLB Default Settings Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DPERR_STAT : (32) L1DM Data Memory Parity Error Status Register ----- */
typedef union {
	struct {
		uint32_t LOCATION:3;			/*!< bit	0..2	Location Memory	*/
		uint32_t ADDRESS:19;			/*!< bit	3..21	Address Value	*/
		uint32_t PORT:2;			/*!< bit	22..23	Port Error Source	*/
		uint32_t BYTELOC:8;			/*!< bit	24..31	Byte Location	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DPERR_STAT_Type;
#define REG_L1DM_DPERR_STAT		(*(RwReg *)0x1FC00014UL)

#else
#define REG_L1DM_DPERR_STAT		(0x1FC00014) /**< \brief (L1DM) L1DM Data Memory Parity Error Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR0 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR0_Type;
#define REG_L1DM_DCPLB_ADDR0		(*(RwReg *)0x1FC00100UL)

#else
#define REG_L1DM_DCPLB_ADDR0		(0x1FC00100) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR1 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR1_Type;
#define REG_L1DM_DCPLB_ADDR1		(*(RwReg *)0x1FC00104UL)

#else
#define REG_L1DM_DCPLB_ADDR1		(0x1FC00104) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR2 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR2_Type;
#define REG_L1DM_DCPLB_ADDR2		(*(RwReg *)0x1FC00108UL)

#else
#define REG_L1DM_DCPLB_ADDR2		(0x1FC00108) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR3 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR3_Type;
#define REG_L1DM_DCPLB_ADDR3		(*(RwReg *)0x1FC0010CUL)

#else
#define REG_L1DM_DCPLB_ADDR3		(0x1FC0010C) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR4 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR4_Type;
#define REG_L1DM_DCPLB_ADDR4		(*(RwReg *)0x1FC00110UL)

#else
#define REG_L1DM_DCPLB_ADDR4		(0x1FC00110) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR5 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR5_Type;
#define REG_L1DM_DCPLB_ADDR5		(*(RwReg *)0x1FC00114UL)

#else
#define REG_L1DM_DCPLB_ADDR5		(0x1FC00114) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR6 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR6_Type;
#define REG_L1DM_DCPLB_ADDR6		(*(RwReg *)0x1FC00118UL)

#else
#define REG_L1DM_DCPLB_ADDR6		(0x1FC00118) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR7 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR7_Type;
#define REG_L1DM_DCPLB_ADDR7		(*(RwReg *)0x1FC0011CUL)

#else
#define REG_L1DM_DCPLB_ADDR7		(0x1FC0011C) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR8 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR8_Type;
#define REG_L1DM_DCPLB_ADDR8		(*(RwReg *)0x1FC00120UL)

#else
#define REG_L1DM_DCPLB_ADDR8		(0x1FC00120) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR9 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR9_Type;
#define REG_L1DM_DCPLB_ADDR9		(*(RwReg *)0x1FC00124UL)

#else
#define REG_L1DM_DCPLB_ADDR9		(0x1FC00124) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR10 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR10_Type;
#define REG_L1DM_DCPLB_ADDR10		(*(RwReg *)0x1FC00128UL)

#else
#define REG_L1DM_DCPLB_ADDR10		(0x1FC00128) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR11 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR11_Type;
#define REG_L1DM_DCPLB_ADDR11		(*(RwReg *)0x1FC0012CUL)

#else
#define REG_L1DM_DCPLB_ADDR11		(0x1FC0012C) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR12 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR12_Type;
#define REG_L1DM_DCPLB_ADDR12		(*(RwReg *)0x1FC00130UL)

#else
#define REG_L1DM_DCPLB_ADDR12		(0x1FC00130) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR13 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR13_Type;
#define REG_L1DM_DCPLB_ADDR13		(*(RwReg *)0x1FC00134UL)

#else
#define REG_L1DM_DCPLB_ADDR13		(0x1FC00134) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR14 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR14_Type;
#define REG_L1DM_DCPLB_ADDR14		(*(RwReg *)0x1FC00138UL)

#else
#define REG_L1DM_DCPLB_ADDR14		(0x1FC00138) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_ADDR15 : (32) L1DM Data Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address Value	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_ADDR15_Type;
#define REG_L1DM_DCPLB_ADDR15		(*(RwReg *)0x1FC0013CUL)

#else
#define REG_L1DM_DCPLB_ADDR15		(0x1FC0013C) /**< \brief (L1DM) L1DM Data Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA0 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA0_Type;
#define REG_L1DM_DCPLB_DATA0		(*(RwReg *)0x1FC00200UL)

#else
#define REG_L1DM_DCPLB_DATA0		(0x1FC00200) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA1 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA1_Type;
#define REG_L1DM_DCPLB_DATA1		(*(RwReg *)0x1FC00204UL)

#else
#define REG_L1DM_DCPLB_DATA1		(0x1FC00204) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA2 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA2_Type;
#define REG_L1DM_DCPLB_DATA2		(*(RwReg *)0x1FC00208UL)

#else
#define REG_L1DM_DCPLB_DATA2		(0x1FC00208) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA3 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA3_Type;
#define REG_L1DM_DCPLB_DATA3		(*(RwReg *)0x1FC0020CUL)

#else
#define REG_L1DM_DCPLB_DATA3		(0x1FC0020C) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA4 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA4_Type;
#define REG_L1DM_DCPLB_DATA4		(*(RwReg *)0x1FC00210UL)

#else
#define REG_L1DM_DCPLB_DATA4		(0x1FC00210) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA5 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA5_Type;
#define REG_L1DM_DCPLB_DATA5		(*(RwReg *)0x1FC00214UL)

#else
#define REG_L1DM_DCPLB_DATA5		(0x1FC00214) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA6 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA6_Type;
#define REG_L1DM_DCPLB_DATA6		(*(RwReg *)0x1FC00218UL)

#else
#define REG_L1DM_DCPLB_DATA6		(0x1FC00218) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA7 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA7_Type;
#define REG_L1DM_DCPLB_DATA7		(*(RwReg *)0x1FC0021CUL)

#else
#define REG_L1DM_DCPLB_DATA7		(0x1FC0021C) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA8 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA8_Type;
#define REG_L1DM_DCPLB_DATA8		(*(RwReg *)0x1FC00220UL)

#else
#define REG_L1DM_DCPLB_DATA8		(0x1FC00220) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA9 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA9_Type;
#define REG_L1DM_DCPLB_DATA9		(*(RwReg *)0x1FC00224UL)

#else
#define REG_L1DM_DCPLB_DATA9		(0x1FC00224) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA10 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA10_Type;
#define REG_L1DM_DCPLB_DATA10		(*(RwReg *)0x1FC00228UL)

#else
#define REG_L1DM_DCPLB_DATA10		(0x1FC00228) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA11 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA11_Type;
#define REG_L1DM_DCPLB_DATA11		(*(RwReg *)0x1FC0022CUL)

#else
#define REG_L1DM_DCPLB_DATA11		(0x1FC0022C) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA12 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA12_Type;
#define REG_L1DM_DCPLB_DATA12		(*(RwReg *)0x1FC00230UL)

#else
#define REG_L1DM_DCPLB_DATA12		(0x1FC00230) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA13 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA13_Type;
#define REG_L1DM_DCPLB_DATA13		(*(RwReg *)0x1FC00234UL)

#else
#define REG_L1DM_DCPLB_DATA13		(0x1FC00234) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA14 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA14_Type;
#define REG_L1DM_DCPLB_DATA14		(*(RwReg *)0x1FC00238UL)

#else
#define REG_L1DM_DCPLB_DATA14		(0x1FC00238) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1DM_DCPLB_DATA15 : (32) L1DM Data Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	Valid CPLB	*/
		uint32_t LOCK:1;			/*!< bit	1	Lock CPLB	*/
		uint32_t UREAD:1;			/*!< bit	2	User Mode Read	*/
		uint32_t UWRITE:1;			/*!< bit	3	User Mode Write	*/
		uint32_t SWRITE:1;			/*!< bit	4	Supervisor Mode Write	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t DIRTY:1;			/*!< bit	7	Dirty CPLB	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CPROPS:3;			/*!< bit	12..14	Cacheability Properties	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1DM_DCPLB_DATA15_Type;
#define REG_L1DM_DCPLB_DATA15		(*(RwReg *)0x1FC0023CUL)

#else
#define REG_L1DM_DCPLB_DATA15		(0x1FC0023C) /**< \brief (L1DM) L1DM Data Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO L1DM_SRAM_BASE_ADDR_Type		SRAM_BASE_ADDR;		/**< \brief L1DM SRAM Base Address Register */
	__IO L1DM_DCTL_Type		DCTL;		/**< \brief L1DM Data Memory Control Register */
	__IO L1DM_DSTAT_Type		DSTAT;		/**< \brief L1DM Data Memory CPLB Status Register */
	__IO L1DM_DCPLB_FAULT_ADDR_Type		DCPLB_FAULT_ADDR;		/**< \brief L1DM Data Memory CPLB Fault Address Register */
	__IO L1DM_DCPLB_DFLT_Type		DCPLB_DFLT;		/**< \brief L1DM Data Memory CPLB Default Settings Register */
	__IO L1DM_DPERR_STAT_Type		DPERR_STAT;		/**< \brief L1DM Data Memory Parity Error Status Register */
		 RoReg8		Reserved1[0xe8];		
	__IO L1DM_DCPLB_ADDR0_Type		DCPLB_ADDR0;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR1_Type		DCPLB_ADDR1;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR2_Type		DCPLB_ADDR2;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR3_Type		DCPLB_ADDR3;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR4_Type		DCPLB_ADDR4;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR5_Type		DCPLB_ADDR5;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR6_Type		DCPLB_ADDR6;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR7_Type		DCPLB_ADDR7;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR8_Type		DCPLB_ADDR8;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR9_Type		DCPLB_ADDR9;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR10_Type		DCPLB_ADDR10;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR11_Type		DCPLB_ADDR11;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR12_Type		DCPLB_ADDR12;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR13_Type		DCPLB_ADDR13;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR14_Type		DCPLB_ADDR14;		/**< \brief L1DM Data Memory CPLB Address Registers */
	__IO L1DM_DCPLB_ADDR15_Type		DCPLB_ADDR15;		/**< \brief L1DM Data Memory CPLB Address Registers */
		 RoReg8		Reserved2[0xc0];		
	__IO L1DM_DCPLB_DATA0_Type		DCPLB_DATA0;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA1_Type		DCPLB_DATA1;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA2_Type		DCPLB_DATA2;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA3_Type		DCPLB_DATA3;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA4_Type		DCPLB_DATA4;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA5_Type		DCPLB_DATA5;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA6_Type		DCPLB_DATA6;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA7_Type		DCPLB_DATA7;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA8_Type		DCPLB_DATA8;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA9_Type		DCPLB_DATA9;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA10_Type		DCPLB_DATA10;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA11_Type		DCPLB_DATA11;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA12_Type		DCPLB_DATA12;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA13_Type		DCPLB_DATA13;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA14_Type		DCPLB_DATA14;		/**< \brief L1DM Data Memory CPLB Data Registers */
	__IO L1DM_DCPLB_DATA15_Type		DCPLB_DATA15;		/**< \brief L1DM Data Memory CPLB Data Registers */
} L1Dm;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICTL : (32) L1IM Instruction Memory Control Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ENCPLB:1;			/*!< bit	1	Enable ICPLB	*/
		uint32_t CFG:1;			/*!< bit	2	Configure L1 code memory as cache	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CBYPASS:1;			/*!< bit	8	Cache Bypass	*/
		uint32_t RDCHK:1;			/*!< bit	9	Read Parity Checking	*/
		uint32_t :3;			/*!< bit	10..12	Reserved	*/
		uint32_t CPRIORST:1;			/*!< bit	13	Cache Line Priority Reset	*/
		uint32_t :18;			/*!< bit	14..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICTL_Type;
#define REG_L1IM_ICTL		(*(RwReg *)0x1FC01004UL)

#else
#define REG_L1IM_ICTL		(0x1FC01004) /**< \brief (L1IM) L1IM Instruction Memory Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ISTAT : (32) L1IM Instruction Memory CPLB Status Register ----- */
typedef union {
	struct {
		uint32_t FAULT:16;			/*!< bit	0..15	Fault Status	*/
		uint32_t :1;			/*!< bit	16	Reserved	*/
		uint32_t MODE:1;			/*!< bit	17	Access Mode	*/
		uint32_t :1;			/*!< bit	18	Reserved	*/
		uint32_t ILLADDR:1;			/*!< bit	19	Illegal Address	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ISTAT_Type;
#define REG_L1IM_ISTAT		(*(RwReg *)0x1FC01008UL)

#else
#define REG_L1IM_ISTAT		(0x1FC01008) /**< \brief (L1IM) L1IM Instruction Memory CPLB Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_FAULT_ADDR : (32) L1IM Instruction Memory CPLB Fault Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_FAULT_ADDR_Type;
#define REG_L1IM_ICPLB_FAULT_ADDR		(*(RwReg *)0x1FC0100CUL)

#else
#define REG_L1IM_ICPLB_FAULT_ADDR		(0x1FC0100C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Fault Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DFLT : (32) L1IM Instruction Memory CPLB Default Settings Register ----- */
typedef union {
	struct {
		uint32_t SYSCPROPS:2;			/*!< bit	0..1	Default cacheability properties for system space	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t SYSEOM:1;			/*!< bit	4	Access exception on Instruction CPLB miss to System space	*/
		uint32_t SYSUREAD:1;			/*!< bit	5	System user mode read access default	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t L1EOM:1;			/*!< bit	8	Access exception on Instruction CPLB miss to L1 memory space	*/
		uint32_t L1UREAD:1;			/*!< bit	9	L1 user mode read access default	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DFLT_Type;
#define REG_L1IM_ICPLB_DFLT		(*(RwReg *)0x1FC01010UL)

#else
#define REG_L1IM_ICPLB_DFLT		(0x1FC01010) /**< \brief (L1IM) L1IM Instruction Memory CPLB Default Settings Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_IPERR_STAT : (32) L1IM Instruction Parity Error Status Register ----- */
typedef union {
	struct {
		uint32_t LOCATION:3;			/*!< bit	0..2	Parity Error Location	*/
		uint32_t ADDRESS:19;			/*!< bit	3..21	Parity Error Address	*/
		uint32_t PORT:2;			/*!< bit	22..23	Parity Error Port	*/
		uint32_t BYTELOC:8;			/*!< bit	24..31	Parity Error Bytes	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_IPERR_STAT_Type;
#define REG_L1IM_IPERR_STAT		(*(RwReg *)0x1FC01014UL)

#else
#define REG_L1IM_IPERR_STAT		(0x1FC01014) /**< \brief (L1IM) L1IM Instruction Parity Error Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR0 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR0_Type;
#define REG_L1IM_ICPLB_ADDR0		(*(RwReg *)0x1FC01100UL)

#else
#define REG_L1IM_ICPLB_ADDR0		(0x1FC01100) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR1 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR1_Type;
#define REG_L1IM_ICPLB_ADDR1		(*(RwReg *)0x1FC01104UL)

#else
#define REG_L1IM_ICPLB_ADDR1		(0x1FC01104) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR2 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR2_Type;
#define REG_L1IM_ICPLB_ADDR2		(*(RwReg *)0x1FC01108UL)

#else
#define REG_L1IM_ICPLB_ADDR2		(0x1FC01108) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR3 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR3_Type;
#define REG_L1IM_ICPLB_ADDR3		(*(RwReg *)0x1FC0110CUL)

#else
#define REG_L1IM_ICPLB_ADDR3		(0x1FC0110C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR4 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR4_Type;
#define REG_L1IM_ICPLB_ADDR4		(*(RwReg *)0x1FC01110UL)

#else
#define REG_L1IM_ICPLB_ADDR4		(0x1FC01110) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR5 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR5_Type;
#define REG_L1IM_ICPLB_ADDR5		(*(RwReg *)0x1FC01114UL)

#else
#define REG_L1IM_ICPLB_ADDR5		(0x1FC01114) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR6 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR6_Type;
#define REG_L1IM_ICPLB_ADDR6		(*(RwReg *)0x1FC01118UL)

#else
#define REG_L1IM_ICPLB_ADDR6		(0x1FC01118) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR7 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR7_Type;
#define REG_L1IM_ICPLB_ADDR7		(*(RwReg *)0x1FC0111CUL)

#else
#define REG_L1IM_ICPLB_ADDR7		(0x1FC0111C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR8 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR8_Type;
#define REG_L1IM_ICPLB_ADDR8		(*(RwReg *)0x1FC01120UL)

#else
#define REG_L1IM_ICPLB_ADDR8		(0x1FC01120) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR9 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR9_Type;
#define REG_L1IM_ICPLB_ADDR9		(*(RwReg *)0x1FC01124UL)

#else
#define REG_L1IM_ICPLB_ADDR9		(0x1FC01124) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR10 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR10_Type;
#define REG_L1IM_ICPLB_ADDR10		(*(RwReg *)0x1FC01128UL)

#else
#define REG_L1IM_ICPLB_ADDR10		(0x1FC01128) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR11 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR11_Type;
#define REG_L1IM_ICPLB_ADDR11		(*(RwReg *)0x1FC0112CUL)

#else
#define REG_L1IM_ICPLB_ADDR11		(0x1FC0112C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR12 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR12_Type;
#define REG_L1IM_ICPLB_ADDR12		(*(RwReg *)0x1FC01130UL)

#else
#define REG_L1IM_ICPLB_ADDR12		(0x1FC01130) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR13 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR13_Type;
#define REG_L1IM_ICPLB_ADDR13		(*(RwReg *)0x1FC01134UL)

#else
#define REG_L1IM_ICPLB_ADDR13		(0x1FC01134) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR14 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR14_Type;
#define REG_L1IM_ICPLB_ADDR14		(*(RwReg *)0x1FC01138UL)

#else
#define REG_L1IM_ICPLB_ADDR14		(0x1FC01138) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_ADDR15 : (32) L1IM Instruction Memory CPLB Address Registers ----- */
typedef union {
	struct {
		uint32_t :10;			/*!< bit	0..9	Reserved	*/
		uint32_t ADDR:22;			/*!< bit	10..31	Address for match	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_ADDR15_Type;
#define REG_L1IM_ICPLB_ADDR15		(*(RwReg *)0x1FC0113CUL)

#else
#define REG_L1IM_ICPLB_ADDR15		(0x1FC0113C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Address Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA0 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA0_Type;
#define REG_L1IM_ICPLB_DATA0		(*(RwReg *)0x1FC01200UL)

#else
#define REG_L1IM_ICPLB_DATA0		(0x1FC01200) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA1 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA1_Type;
#define REG_L1IM_ICPLB_DATA1		(*(RwReg *)0x1FC01204UL)

#else
#define REG_L1IM_ICPLB_DATA1		(0x1FC01204) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA2 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA2_Type;
#define REG_L1IM_ICPLB_DATA2		(*(RwReg *)0x1FC01208UL)

#else
#define REG_L1IM_ICPLB_DATA2		(0x1FC01208) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA3 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA3_Type;
#define REG_L1IM_ICPLB_DATA3		(*(RwReg *)0x1FC0120CUL)

#else
#define REG_L1IM_ICPLB_DATA3		(0x1FC0120C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA4 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA4_Type;
#define REG_L1IM_ICPLB_DATA4		(*(RwReg *)0x1FC01210UL)

#else
#define REG_L1IM_ICPLB_DATA4		(0x1FC01210) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA5 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA5_Type;
#define REG_L1IM_ICPLB_DATA5		(*(RwReg *)0x1FC01214UL)

#else
#define REG_L1IM_ICPLB_DATA5		(0x1FC01214) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA6 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA6_Type;
#define REG_L1IM_ICPLB_DATA6		(*(RwReg *)0x1FC01218UL)

#else
#define REG_L1IM_ICPLB_DATA6		(0x1FC01218) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA7 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA7_Type;
#define REG_L1IM_ICPLB_DATA7		(*(RwReg *)0x1FC0121CUL)

#else
#define REG_L1IM_ICPLB_DATA7		(0x1FC0121C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA8 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA8_Type;
#define REG_L1IM_ICPLB_DATA8		(*(RwReg *)0x1FC01220UL)

#else
#define REG_L1IM_ICPLB_DATA8		(0x1FC01220) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA9 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA9_Type;
#define REG_L1IM_ICPLB_DATA9		(*(RwReg *)0x1FC01224UL)

#else
#define REG_L1IM_ICPLB_DATA9		(0x1FC01224) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA10 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA10_Type;
#define REG_L1IM_ICPLB_DATA10		(*(RwReg *)0x1FC01228UL)

#else
#define REG_L1IM_ICPLB_DATA10		(0x1FC01228) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA11 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA11_Type;
#define REG_L1IM_ICPLB_DATA11		(*(RwReg *)0x1FC0122CUL)

#else
#define REG_L1IM_ICPLB_DATA11		(0x1FC0122C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA12 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA12_Type;
#define REG_L1IM_ICPLB_DATA12		(*(RwReg *)0x1FC01230UL)

#else
#define REG_L1IM_ICPLB_DATA12		(0x1FC01230) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA13 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA13_Type;
#define REG_L1IM_ICPLB_DATA13		(*(RwReg *)0x1FC01234UL)

#else
#define REG_L1IM_ICPLB_DATA13		(0x1FC01234) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA14 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA14_Type;
#define REG_L1IM_ICPLB_DATA14		(*(RwReg *)0x1FC01238UL)

#else
#define REG_L1IM_ICPLB_DATA14		(0x1FC01238) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L1IM_ICPLB_DATA15 : (32) L1IM Instruction Memory CPLB Data Registers ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	CPLB Valid	*/
		uint32_t LOCK:1;			/*!< bit	1	CPLB Lock	*/
		uint32_t UREAD:1;			/*!< bit	2	Allow User Read	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t CPRIO:1;			/*!< bit	8	Cache Line Priority	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t CPROPS:2;			/*!< bit	12..13	Cachablity properties	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t PSIZE:4;			/*!< bit	16..19	Page Size	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L1IM_ICPLB_DATA15_Type;
#define REG_L1IM_ICPLB_DATA15		(*(RwReg *)0x1FC0123CUL)

#else
#define REG_L1IM_ICPLB_DATA15		(0x1FC0123C) /**< \brief (L1IM) L1IM Instruction Memory CPLB Data Registers */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO L1IM_ICTL_Type		ICTL;		/**< \brief L1IM Instruction Memory Control Register */
	__IO L1IM_ISTAT_Type		ISTAT;		/**< \brief L1IM Instruction Memory CPLB Status Register */
	__IO L1IM_ICPLB_FAULT_ADDR_Type		ICPLB_FAULT_ADDR;		/**< \brief L1IM Instruction Memory CPLB Fault Address Register */
	__IO L1IM_ICPLB_DFLT_Type		ICPLB_DFLT;		/**< \brief L1IM Instruction Memory CPLB Default Settings Register */
	__IO L1IM_IPERR_STAT_Type		IPERR_STAT;		/**< \brief L1IM Instruction Parity Error Status Register */
		 RoReg8		Reserved1[0xe8];		
	__IO L1IM_ICPLB_ADDR0_Type		ICPLB_ADDR0;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR1_Type		ICPLB_ADDR1;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR2_Type		ICPLB_ADDR2;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR3_Type		ICPLB_ADDR3;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR4_Type		ICPLB_ADDR4;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR5_Type		ICPLB_ADDR5;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR6_Type		ICPLB_ADDR6;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR7_Type		ICPLB_ADDR7;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR8_Type		ICPLB_ADDR8;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR9_Type		ICPLB_ADDR9;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR10_Type		ICPLB_ADDR10;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR11_Type		ICPLB_ADDR11;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR12_Type		ICPLB_ADDR12;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR13_Type		ICPLB_ADDR13;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR14_Type		ICPLB_ADDR14;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
	__IO L1IM_ICPLB_ADDR15_Type		ICPLB_ADDR15;		/**< \brief L1IM Instruction Memory CPLB Address Registers */
		 RoReg8		Reserved2[0xc0];		
	__IO L1IM_ICPLB_DATA0_Type		ICPLB_DATA0;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA1_Type		ICPLB_DATA1;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA2_Type		ICPLB_DATA2;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA3_Type		ICPLB_DATA3;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA4_Type		ICPLB_DATA4;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA5_Type		ICPLB_DATA5;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA6_Type		ICPLB_DATA6;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA7_Type		ICPLB_DATA7;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA8_Type		ICPLB_DATA8;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA9_Type		ICPLB_DATA9;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA10_Type		ICPLB_DATA10;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA11_Type		ICPLB_DATA11;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA12_Type		ICPLB_DATA12;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA13_Type		ICPLB_DATA13;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA14_Type		ICPLB_DATA14;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
	__IO L1IM_ICPLB_DATA15_Type		ICPLB_DATA15;		/**< \brief L1IM Instruction Memory CPLB Data Registers */
} L1Im;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT0 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT0_Type;
#define REG_ICU_EVT0		(*(RwReg *)0x1FC02000UL)

#else
#define REG_ICU_EVT0		(0x1FC02000) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT1 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT1_Type;
#define REG_ICU_EVT1		(*(RwReg *)0x1FC02004UL)

#else
#define REG_ICU_EVT1		(0x1FC02004) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT2 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT2_Type;
#define REG_ICU_EVT2		(*(RwReg *)0x1FC02008UL)

#else
#define REG_ICU_EVT2		(0x1FC02008) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT3 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT3_Type;
#define REG_ICU_EVT3		(*(RwReg *)0x1FC0200CUL)

#else
#define REG_ICU_EVT3		(0x1FC0200C) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT4 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT4_Type;
#define REG_ICU_EVT4		(*(RwReg *)0x1FC02010UL)

#else
#define REG_ICU_EVT4		(0x1FC02010) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT5 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT5_Type;
#define REG_ICU_EVT5		(*(RwReg *)0x1FC02014UL)

#else
#define REG_ICU_EVT5		(0x1FC02014) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT6 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT6_Type;
#define REG_ICU_EVT6		(*(RwReg *)0x1FC02018UL)

#else
#define REG_ICU_EVT6		(0x1FC02018) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT7 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT7_Type;
#define REG_ICU_EVT7		(*(RwReg *)0x1FC0201CUL)

#else
#define REG_ICU_EVT7		(0x1FC0201C) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT8 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT8_Type;
#define REG_ICU_EVT8		(*(RwReg *)0x1FC02020UL)

#else
#define REG_ICU_EVT8		(0x1FC02020) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT9 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT9_Type;
#define REG_ICU_EVT9		(*(RwReg *)0x1FC02024UL)

#else
#define REG_ICU_EVT9		(0x1FC02024) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT10 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT10_Type;
#define REG_ICU_EVT10		(*(RwReg *)0x1FC02028UL)

#else
#define REG_ICU_EVT10		(0x1FC02028) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT11 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT11_Type;
#define REG_ICU_EVT11		(*(RwReg *)0x1FC0202CUL)

#else
#define REG_ICU_EVT11		(0x1FC0202C) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT12 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT12_Type;
#define REG_ICU_EVT12		(*(RwReg *)0x1FC02030UL)

#else
#define REG_ICU_EVT12		(0x1FC02030) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT13 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT13_Type;
#define REG_ICU_EVT13		(*(RwReg *)0x1FC02034UL)

#else
#define REG_ICU_EVT13		(0x1FC02034) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT14 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT14_Type;
#define REG_ICU_EVT14		(*(RwReg *)0x1FC02038UL)

#else
#define REG_ICU_EVT14		(0x1FC02038) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT15 : (32) Event Vector Table Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT15_Type;
#define REG_ICU_EVT15		(*(RwReg *)0x1FC0203CUL)

#else
#define REG_ICU_EVT15		(0x1FC0203C) /**< \brief (ICU) Event Vector Table Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_EVT_OVERRIDE : (32) Event Vector Table Override Register ----- */
typedef union {
	struct {
		uint32_t IVG7:1;			/*!< bit	0	IVG 7 Override	*/
		uint32_t IVG8:1;			/*!< bit	1	IVG 8 Override	*/
		uint32_t IVG9:1;			/*!< bit	2	IVG 9 Override	*/
		uint32_t IVG10:1;			/*!< bit	3	IVG 10 Override	*/
		uint32_t IVG11:1;			/*!< bit	4	IVG 11 Override	*/
		uint32_t IVG12:1;			/*!< bit	5	IVG 12 Override	*/
		uint32_t IVG13:1;			/*!< bit	6	IVG 13 Override	*/
		uint32_t IVG14:1;			/*!< bit	7	IVG 14 Override	*/
		uint32_t IVG15:1;			/*!< bit	8	IVG 15 Override	*/
		uint32_t :6;			/*!< bit	9..14	Reserved	*/
		uint32_t IVG1:1;			/*!< bit	15	IVG 1 Override	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_EVT_OVERRIDE_Type;
#define REG_ICU_EVT_OVERRIDE		(*(RwReg *)0x1FC02100UL)

#else
#define REG_ICU_EVT_OVERRIDE		(0x1FC02100) /**< \brief (ICU) Event Vector Table Override Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_IMASK : (32) Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t UNMASKABLE:5;			/*!< bit	0..4	Unmaskable Vectors	*/
		uint32_t IVHW:1;			/*!< bit	5	IV HW Error Mask	*/
		uint32_t IVTMR:1;			/*!< bit	6	IV TMR Mask	*/
		uint32_t IVG7:1;			/*!< bit	7	IVG 7 Mask	*/
		uint32_t IVG8:1;			/*!< bit	8	IVG 8 Mask	*/
		uint32_t IVG9:1;			/*!< bit	9	IVG 9 Mask	*/
		uint32_t IVG10:1;			/*!< bit	10	IVG 10 Mask	*/
		uint32_t IVG11:1;			/*!< bit	11	IVG 11 Mask	*/
		uint32_t IVG12:1;			/*!< bit	12	IVG 12 Mask	*/
		uint32_t IVG13:1;			/*!< bit	13	IVG 13 Mask	*/
		uint32_t IVG14:1;			/*!< bit	14	IVG 14 Mask	*/
		uint32_t IVG15:1;			/*!< bit	15	IVG 15 Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_IMASK_Type;
#define REG_ICU_IMASK		(*(RwReg *)0x1FC02104UL)

#else
#define REG_ICU_IMASK		(0x1FC02104) /**< \brief (ICU) Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_IPEND : (32) Interrupt Pending Register ----- */
typedef union {
	struct {
		uint32_t EMU:1;			/*!< bit	0	IV Emulator Pending	*/
		uint32_t RST:1;			/*!< bit	1	IV Reset Pending	*/
		uint32_t NMI:1;			/*!< bit	2	IV NMI Pending	*/
		uint32_t EVX:1;			/*!< bit	3	IV Exception Pending	*/
		uint32_t IRPTEN:1;			/*!< bit	4	IV Global Enable Pending	*/
		uint32_t IVHW:1;			/*!< bit	5	IV HW Error Pending	*/
		uint32_t IVTMR:1;			/*!< bit	6	IV TMR Interrupt Pending	*/
		uint32_t IVG7:1;			/*!< bit	7	IVG 7 Pending	*/
		uint32_t IVG8:1;			/*!< bit	8	IVG 8 Pending	*/
		uint32_t IVG9:1;			/*!< bit	9	IVG 9 Pending	*/
		uint32_t IVG10:1;			/*!< bit	10	IVG 10 Pending	*/
		uint32_t IVG11:1;			/*!< bit	11	IVG 11 Pending	*/
		uint32_t IVG12:1;			/*!< bit	12	IVG 12 Pending	*/
		uint32_t IVG13:1;			/*!< bit	13	IVG 13 Pending	*/
		uint32_t IVG14:1;			/*!< bit	14	IVG 14 Pending	*/
		uint32_t IVG15:1;			/*!< bit	15	IVG 15 Pending	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_IPEND_Type;
#define REG_ICU_IPEND		(*(RwReg *)0x1FC02108UL)

#else
#define REG_ICU_IPEND		(0x1FC02108) /**< \brief (ICU) Interrupt Pending Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_ILAT : (32) Interrupt Latch Register ----- */
typedef union {
	struct {
		uint32_t EMU:1;			/*!< bit	0	IV Emulator Latch	*/
		uint32_t RST:1;			/*!< bit	1	IV Reset Latch	*/
		uint32_t NMI:1;			/*!< bit	2	IV NMI Latch	*/
		uint32_t EVX:1;			/*!< bit	3	IV Exception Latch	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t IVHW:1;			/*!< bit	5	IV HW Error Latch	*/
		uint32_t IVTMR:1;			/*!< bit	6	IV TMR Latch	*/
		uint32_t IVG7:1;			/*!< bit	7	IVG 7 Latch	*/
		uint32_t IVG8:1;			/*!< bit	8	IVG 8 Latch	*/
		uint32_t IVG9:1;			/*!< bit	9	IVG 9 Latch	*/
		uint32_t IVG10:1;			/*!< bit	10	IVG 10 Latch	*/
		uint32_t IVG11:1;			/*!< bit	11	IVG 11 Latch	*/
		uint32_t IVG12:1;			/*!< bit	12	IVG 12 Latch	*/
		uint32_t IVG13:1;			/*!< bit	13	IVG 13 Latch	*/
		uint32_t IVG14:1;			/*!< bit	14	IVG 14 Latch	*/
		uint32_t IVG15:1;			/*!< bit	15	IVG 15 Latch	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_ILAT_Type;
#define REG_ICU_ILAT		(*(RwReg *)0x1FC0210CUL)

#else
#define REG_ICU_ILAT		(0x1FC0210C) /**< \brief (ICU) Interrupt Latch Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_CID : (32) ICU Context ID Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_CID_Type;
#define REG_ICU_CID		(*(RwReg *)0x1FC02114UL)

#else
#define REG_ICU_CID		(0x1FC02114) /**< \brief (ICU) ICU Context ID Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- ICU_CEC_SID : (32) System ID Register ----- */
typedef union {
	struct {
		uint32_t SID:8;			/*!< bit	0..7	System Interrupt ID Value	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} ICU_CEC_SID_Type;
#define REG_ICU_CEC_SID		(*(RwReg *)0x1FC02118UL)

#else
#define REG_ICU_CEC_SID		(0x1FC02118) /**< \brief (ICU) System ID Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO ICU_EVT0_Type		EVT0;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT1_Type		EVT1;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT2_Type		EVT2;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT3_Type		EVT3;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT4_Type		EVT4;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT5_Type		EVT5;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT6_Type		EVT6;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT7_Type		EVT7;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT8_Type		EVT8;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT9_Type		EVT9;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT10_Type		EVT10;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT11_Type		EVT11;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT12_Type		EVT12;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT13_Type		EVT13;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT14_Type		EVT14;		/**< \brief Event Vector Table Registers */
	__IO ICU_EVT15_Type		EVT15;		/**< \brief Event Vector Table Registers */
		 RoReg8		Reserved1[0xc0];		
	__IO ICU_EVT_OVERRIDE_Type		EVT_OVERRIDE;		/**< \brief Event Vector Table Override Register */
	__IO ICU_IMASK_Type		IMASK;		/**< \brief Interrupt Mask Register */
	__IO ICU_IPEND_Type		IPEND;		/**< \brief Interrupt Pending Register */
	__IO ICU_ILAT_Type		ILAT;		/**< \brief Interrupt Latch Register */
		 RoReg8		Reserved2[0x04];		
	__IO ICU_CID_Type		CID;		/**< \brief ICU Context ID Register */
	__IO ICU_CEC_SID_Type		CEC_SID;		/**< \brief System ID Register */
} Icu;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- TMR_TCNTL : (32) Timer Control Register ----- */
typedef union {
	struct {
		uint32_t PWR:1;			/*!< bit	0	Timer Low Power Control	*/
		uint32_t EN:1;			/*!< bit	1	Timer enable	*/
		uint32_t AUTORLD:1;			/*!< bit	2	Timer auto reload	*/
		uint32_t INT:1;			/*!< bit	3	Timer generated interrupt (sticky)	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TMR_TCNTL_Type;
#define REG_TMR_TCNTL		(*(RwReg *)0x1FC03000UL)

#else
#define REG_TMR_TCNTL		(0x1FC03000) /**< \brief (TMR) Timer Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TMR_TPERIOD : (32) Timer Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TMR_TPERIOD_Type;
#define REG_TMR_TPERIOD		(*(RwReg *)0x1FC03004UL)

#else
#define REG_TMR_TPERIOD		(0x1FC03004) /**< \brief (TMR) Timer Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TMR_TSCALE : (32) Timer Scale Register ----- */
typedef union {
	struct {
		uint32_t SCALE:8;			/*!< bit	0..7	Scaling factor	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TMR_TSCALE_Type;
#define REG_TMR_TSCALE		(*(RwReg *)0x1FC03008UL)

#else
#define REG_TMR_TSCALE		(0x1FC03008) /**< \brief (TMR) Timer Scale Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TMR_TCOUNT : (32) Timer Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TMR_TCOUNT_Type;
#define REG_TMR_TCOUNT		(*(RwReg *)0x1FC0300CUL)

#else
#define REG_TMR_TCOUNT		(0x1FC0300C) /**< \brief (TMR) Timer Count Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO TMR_TCNTL_Type		TCNTL;		/**< \brief Timer Control Register */
	__IO TMR_TPERIOD_Type		TPERIOD;		/**< \brief Timer Period Register */
	__IO TMR_TSCALE_Type		TSCALE;		/**< \brief Timer Scale Register */
	__IO TMR_TCOUNT_Type		TCOUNT;		/**< \brief Timer Count Register */
} Tmr;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- DBG_DSPID : (32) DSP Identification Register ----- */
typedef union {
	struct {
		uint32_t COREID:8;			/*!< bit	0..7	Core ID	*/
		uint32_t :8;			/*!< bit	8..15	Reserved	*/
		uint32_t MAJOR:8;			/*!< bit	16..23	Major Architectural Change	*/
		uint32_t COMPANY:8;			/*!< bit	24..31	Analog Devices, Inc.	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DBG_DSPID_Type;
#define REG_DBG_DSPID		(*(RwReg *)0x1FC05000UL)

#else
#define REG_DBG_DSPID		(0x1FC05000) /**< \brief (DBG) DSP Identification Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO DBG_DSPID_Type		DSPID;		/**< \brief DSP Identification Register */
} Dbg;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIACTL : (32) Watchpoint Instruction Address Control Register 01 ----- */
typedef union {
	struct {
		uint32_t PWR:1;			/*!< bit	0	Power	*/
		uint32_t ENIR01:1;			/*!< bit	1	Enable Instruction Range 01	*/
		uint32_t INVIR01:1;			/*!< bit	2	Invert Instruction Range 01	*/
		uint32_t ENIA0:1;			/*!< bit	3	Enable WPIA0	*/
		uint32_t ENIA1:1;			/*!< bit	4	Enable WPIA1	*/
		uint32_t ENCNT0:1;			/*!< bit	5	Enable Counter for WPIA0	*/
		uint32_t ENCNT1:1;			/*!< bit	6	Enable Counter for WPIA1	*/
		uint32_t ACT0:1;			/*!< bit	7	Action field for WPIA0	*/
		uint32_t ACT1:1;			/*!< bit	8	Action field for WPIA1	*/
		uint32_t ENIR23:1;			/*!< bit	9	Enable Instruction Range 23	*/
		uint32_t INVIR23:1;			/*!< bit	10	Invert Instruction Range 23	*/
		uint32_t ENIA2:1;			/*!< bit	11	Enable WPIA2	*/
		uint32_t ENIA3:1;			/*!< bit	12	Enable WPIA3	*/
		uint32_t ENCNT2:1;			/*!< bit	13	Enable Counter for WPIA2	*/
		uint32_t ENCNT3:1;			/*!< bit	14	Enable Counter for WPIA3	*/
		uint32_t ACT2:1;			/*!< bit	15	Action field for WPIA2	*/
		uint32_t ACT3:1;			/*!< bit	16	Action field for WPIA3	*/
		uint32_t ENIR45:1;			/*!< bit	17	Enable Instruction Range 45	*/
		uint32_t INVIR45:1;			/*!< bit	18	Invert Instruction Range 45	*/
		uint32_t ENIA4:1;			/*!< bit	19	Enable WPIA4	*/
		uint32_t ENIA5:1;			/*!< bit	20	Enable WPIA5	*/
		uint32_t ENCNT4:1;			/*!< bit	21	Enable Counter for WPIA4	*/
		uint32_t ENCNT5:1;			/*!< bit	22	Enable Counter for WPIA5	*/
		uint32_t ACT4:1;			/*!< bit	23	Action field for WPIA4	*/
		uint32_t ACT5:1;			/*!< bit	24	Action field for WPIA5	*/
		uint32_t WPAND:1;			/*!< bit	25	And Triggers	*/
		uint32_t :6;			/*!< bit	26..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIACTL_Type;
#define REG_WP_WPIACTL		(*(RwReg *)0x1FC07000UL)

#else
#define REG_WP_WPIACTL		(0x1FC07000) /**< \brief (WP) Watchpoint Instruction Address Control Register 01 */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIA0 : (32) Watchpoint Instruction Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIA0_Type;
#define REG_WP_WPIA0		(*(RwReg *)0x1FC07040UL)

#else
#define REG_WP_WPIA0		(0x1FC07040) /**< \brief (WP) Watchpoint Instruction Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIA1 : (32) Watchpoint Instruction Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIA1_Type;
#define REG_WP_WPIA1		(*(RwReg *)0x1FC07044UL)

#else
#define REG_WP_WPIA1		(0x1FC07044) /**< \brief (WP) Watchpoint Instruction Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIA2 : (32) Watchpoint Instruction Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIA2_Type;
#define REG_WP_WPIA2		(*(RwReg *)0x1FC07048UL)

#else
#define REG_WP_WPIA2		(0x1FC07048) /**< \brief (WP) Watchpoint Instruction Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIA3 : (32) Watchpoint Instruction Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIA3_Type;
#define REG_WP_WPIA3		(*(RwReg *)0x1FC0704CUL)

#else
#define REG_WP_WPIA3		(0x1FC0704C) /**< \brief (WP) Watchpoint Instruction Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIA4 : (32) Watchpoint Instruction Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIA4_Type;
#define REG_WP_WPIA4		(*(RwReg *)0x1FC07050UL)

#else
#define REG_WP_WPIA4		(0x1FC07050) /**< \brief (WP) Watchpoint Instruction Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIA5 : (32) Watchpoint Instruction Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIA5_Type;
#define REG_WP_WPIA5		(*(RwReg *)0x1FC07054UL)

#else
#define REG_WP_WPIA5		(0x1FC07054) /**< \brief (WP) Watchpoint Instruction Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIACNT0 : (32) Watchpoint Instruction Address Count Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIACNT0_Type;
#define REG_WP_WPIACNT0		(*(RwReg *)0x1FC07080UL)

#else
#define REG_WP_WPIACNT0		(0x1FC07080) /**< \brief (WP) Watchpoint Instruction Address Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIACNT1 : (32) Watchpoint Instruction Address Count Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIACNT1_Type;
#define REG_WP_WPIACNT1		(*(RwReg *)0x1FC07084UL)

#else
#define REG_WP_WPIACNT1		(0x1FC07084) /**< \brief (WP) Watchpoint Instruction Address Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIACNT2 : (32) Watchpoint Instruction Address Count Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIACNT2_Type;
#define REG_WP_WPIACNT2		(*(RwReg *)0x1FC07088UL)

#else
#define REG_WP_WPIACNT2		(0x1FC07088) /**< \brief (WP) Watchpoint Instruction Address Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIACNT3 : (32) Watchpoint Instruction Address Count Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIACNT3_Type;
#define REG_WP_WPIACNT3		(*(RwReg *)0x1FC0708CUL)

#else
#define REG_WP_WPIACNT3		(0x1FC0708C) /**< \brief (WP) Watchpoint Instruction Address Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIACNT4 : (32) Watchpoint Instruction Address Count Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIACNT4_Type;
#define REG_WP_WPIACNT4		(*(RwReg *)0x1FC07090UL)

#else
#define REG_WP_WPIACNT4		(0x1FC07090) /**< \brief (WP) Watchpoint Instruction Address Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPIACNT5 : (32) Watchpoint Instruction Address Count Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPIACNT5_Type;
#define REG_WP_WPIACNT5		(*(RwReg *)0x1FC07094UL)

#else
#define REG_WP_WPIACNT5		(0x1FC07094) /**< \brief (WP) Watchpoint Instruction Address Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPDACTL : (32) Watchpoint Data Address Control Register ----- */
typedef union {
	struct {
		uint32_t ENR:1;			/*!< bit	0	Enable Range Comparison	*/
		uint32_t INVR:1;			/*!< bit	1	Invert Range Comparision	*/
		uint32_t ENDA0:1;			/*!< bit	2	Enable WPDA0	*/
		uint32_t ENDA1:1;			/*!< bit	3	Enable WPDA1	*/
		uint32_t ENCNT0:1;			/*!< bit	4	Enable WPDA0 Counter	*/
		uint32_t ENCNT1:1;			/*!< bit	5	Enable WPDA1 Counter	*/
		uint32_t SRC0:2;			/*!< bit	6..7	DAG Source for WPDA0	*/
		uint32_t ACC0:2;			/*!< bit	8..9	Access type for WPDA0	*/
		uint32_t SRC1:2;			/*!< bit	10..11	DAG Source for WPDA1	*/
		uint32_t ACC1:2;			/*!< bit	12..13	Access type for WPDA1	*/
		uint32_t :18;			/*!< bit	14..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPDACTL_Type;
#define REG_WP_WPDACTL		(*(RwReg *)0x1FC07100UL)

#else
#define REG_WP_WPDACTL		(0x1FC07100) /**< \brief (WP) Watchpoint Data Address Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPDA0 : (32) Watchpoint Data Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPDA0_Type;
#define REG_WP_WPDA0		(*(RwReg *)0x1FC07140UL)

#else
#define REG_WP_WPDA0		(0x1FC07140) /**< \brief (WP) Watchpoint Data Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPDA1 : (32) Watchpoint Data Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPDA1_Type;
#define REG_WP_WPDA1		(*(RwReg *)0x1FC07144UL)

#else
#define REG_WP_WPDA1		(0x1FC07144) /**< \brief (WP) Watchpoint Data Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPDACNT0 : (32) Watchpoint Data Address Count Value Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPDACNT0_Type;
#define REG_WP_WPDACNT0		(*(RwReg *)0x1FC07180UL)

#else
#define REG_WP_WPDACNT0		(0x1FC07180) /**< \brief (WP) Watchpoint Data Address Count Value Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPDACNT1 : (32) Watchpoint Data Address Count Value Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPDACNT1_Type;
#define REG_WP_WPDACNT1		(*(RwReg *)0x1FC07184UL)

#else
#define REG_WP_WPDACNT1		(0x1FC07184) /**< \brief (WP) Watchpoint Data Address Count Value Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WP_WPSTAT : (32) Watchpoint Status Register ----- */
typedef union {
	struct {
		uint32_t IA0:1;			/*!< bit	0	WPIA0 or WPIA0:1 range match	*/
		uint32_t IA1:1;			/*!< bit	1	WPIA1 match	*/
		uint32_t IA2:1;			/*!< bit	2	WPIA2 or WPIA2:3 range match	*/
		uint32_t IA3:1;			/*!< bit	3	WPIA3 match	*/
		uint32_t IA4:1;			/*!< bit	4	WPIA4 or WPIA4:5 range match	*/
		uint32_t IA5:1;			/*!< bit	5	WPIA5 match	*/
		uint32_t DA0:1;			/*!< bit	6	WPDA0 or WPDA0:1 range match	*/
		uint32_t DA1:1;			/*!< bit	7	WPDA1 match	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WP_WPSTAT_Type;
#define REG_WP_WPSTAT		(*(RwReg *)0x1FC07200UL)

#else
#define REG_WP_WPSTAT		(0x1FC07200) /**< \brief (WP) Watchpoint Status Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO WP_WPIACTL_Type		WPIACTL;		/**< \brief Watchpoint Instruction Address Control Register 01 */
		 RoReg8		Reserved1[0x3c];		
	__IO WP_WPIA0_Type		WPIA0;		/**< \brief Watchpoint Instruction Address Register */
	__IO WP_WPIA1_Type		WPIA1;		/**< \brief Watchpoint Instruction Address Register */
	__IO WP_WPIA2_Type		WPIA2;		/**< \brief Watchpoint Instruction Address Register */
	__IO WP_WPIA3_Type		WPIA3;		/**< \brief Watchpoint Instruction Address Register */
	__IO WP_WPIA4_Type		WPIA4;		/**< \brief Watchpoint Instruction Address Register */
	__IO WP_WPIA5_Type		WPIA5;		/**< \brief Watchpoint Instruction Address Register */
		 RoReg8		Reserved2[0x28];		
	__IO WP_WPIACNT0_Type		WPIACNT0;		/**< \brief Watchpoint Instruction Address Count Register */
	__IO WP_WPIACNT1_Type		WPIACNT1;		/**< \brief Watchpoint Instruction Address Count Register */
	__IO WP_WPIACNT2_Type		WPIACNT2;		/**< \brief Watchpoint Instruction Address Count Register */
	__IO WP_WPIACNT3_Type		WPIACNT3;		/**< \brief Watchpoint Instruction Address Count Register */
	__IO WP_WPIACNT4_Type		WPIACNT4;		/**< \brief Watchpoint Instruction Address Count Register */
	__IO WP_WPIACNT5_Type		WPIACNT5;		/**< \brief Watchpoint Instruction Address Count Register */
		 RoReg8		Reserved3[0x68];		
	__IO WP_WPDACTL_Type		WPDACTL;		/**< \brief Watchpoint Data Address Control Register */
		 RoReg8		Reserved4[0x3c];		
	__IO WP_WPDA0_Type		WPDA0;		/**< \brief Watchpoint Data Address Register */
	__IO WP_WPDA1_Type		WPDA1;		/**< \brief Watchpoint Data Address Register */
		 RoReg8		Reserved5[0x38];		
	__IO WP_WPDACNT0_Type		WPDACNT0;		/**< \brief Watchpoint Data Address Count Value Register */
	__IO WP_WPDACNT1_Type		WPDACNT1;		/**< \brief Watchpoint Data Address Count Value Register */
		 RoReg8		Reserved6[0x78];		
	__IO WP_WPSTAT_Type		WPSTAT;		/**< \brief Watchpoint Status Register */
} Wp;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- PF_PFCTL : (32) Control Register ----- */
typedef union {
	struct {
		uint32_t PWR:1;			/*!< bit	0	Power	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t EVENT0:1;			/*!< bit	2	Emulator or Exception Event 0	*/
		uint32_t ENA0:2;			/*!< bit	3..4	Enable Monitor 0	*/
		uint32_t MON0:8;			/*!< bit	5..12	Monitor 0 Events	*/
		uint32_t EVENT1:1;			/*!< bit	13	Emulator or Exception Event 1	*/
		uint32_t ENA1:2;			/*!< bit	14..15	Enable Monitor 1	*/
		uint32_t MON1:8;			/*!< bit	16..23	Monitor 1 Events	*/
		uint32_t CNT0:1;			/*!< bit	24	Count Occurrences or Stalls 0	*/
		uint32_t CNT1:1;			/*!< bit	25	Count Occurrences or Stalls 1	*/
		uint32_t :6;			/*!< bit	26..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PF_PFCTL_Type;
#define REG_PF_PFCTL		(*(RwReg *)0x1FC08000UL)

#else
#define REG_PF_PFCTL		(0x1FC08000) /**< \brief (PF) Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PF_PFCNTR0 : (32) Counter 0 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PF_PFCNTR0_Type;
#define REG_PF_PFCNTR0		(*(RwReg *)0x1FC08100UL)

#else
#define REG_PF_PFCNTR0		(0x1FC08100) /**< \brief (PF) Counter 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PF_PFCNTR1 : (32) Counter 1 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PF_PFCNTR1_Type;
#define REG_PF_PFCNTR1		(*(RwReg *)0x1FC08104UL)

#else
#define REG_PF_PFCNTR1		(0x1FC08104) /**< \brief (PF) Counter 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PF_PFCTL_Type		PFCTL;		/**< \brief Control Register */
		 RoReg8		Reserved1[0xfc];		
	__IO PF_PFCNTR0_Type		PFCNTR0;		/**< \brief Counter 0 Register */
	__IO PF_PFCNTR1_Type		PFCNTR1;		/**< \brief Counter 1 Register */
} Pf;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- OPT_FEATURE0 : (32) OPT Feature Core 0  Register ----- */
typedef union {
	struct {
		uint32_t BPRED:1;			/*!< bit	0	Branch Predictor	*/
		uint32_t :7;			/*!< bit	1..7	Reserved	*/
		uint32_t ICACHE:1;			/*!< bit	8	Instruction Cache	*/
		uint32_t DCACHE1:1;			/*!< bit	9	Data Cache 1	*/
		uint32_t DCACHE2:1;			/*!< bit	10	Data Cache 2	*/
		uint32_t L1PARITY:1;			/*!< bit	11	L1 Parity	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} OPT_FEATURE0_Type;
#define REG_OPT_FEATURE0		(*(RwReg *)0x1FC09000UL)

#else
#define REG_OPT_FEATURE0		(0x1FC09000) /**< \brief (OPT) OPT Feature Core 0  Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO OPT_FEATURE0_Type		FEATURE0;		/**< \brief OPT Feature Core 0  Register */
} Opt;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- BP_CFG : (32) BP Configuration Register ----- */
typedef union {
	struct {
		uint32_t CLRBP:1;			/*!< bit	0	Clear Branch Prediction	*/
		uint32_t CLRNFL:1;			/*!< bit	1	Clear Not Found Learn	*/
		uint32_t CLRDFL:1;			/*!< bit	2	Clear Duplicate Found Learn	*/
		uint32_t RAMADR:7;			/*!< bit	3..9	RAM Address	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t JUMPCCEN:1;			/*!< bit	16	JUMP Condition Code Enable	*/
		uint32_t JUMPEN:1;			/*!< bit	17	JUMP Enable	*/
		uint32_t RTSEN:1;			/*!< bit	18	RTS Enable	*/
		uint32_t :2;			/*!< bit	19..20	Reserved	*/
		uint32_t CALL32EN:1;			/*!< bit	21	Call 32-Bit Enable	*/
		uint32_t CALL64EN:1;			/*!< bit	22	Call 64-Bit Enable	*/
		uint32_t :1;			/*!< bit	23	Reserved	*/
		uint32_t STMOUTVAL:8;			/*!< bit	24..31	Store Timeout Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} BP_CFG_Type;
#define REG_BP_CFG		(*(RwReg *)0x1FC0A000UL)

#else
#define REG_BP_CFG		(0x1FC0A000) /**< \brief (BP) BP Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- BP_STAT : (32) BP Status Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t NFL:1;			/*!< bit	1	Not Found Learn	*/
		uint32_t DFL:1;			/*!< bit	2	Duplicate Found Learn	*/
		uint32_t PCADR:7;			/*!< bit	3..9	PC Address	*/
		uint32_t BPACCTYP:1;			/*!< bit	10	BP Access Type	*/
		uint32_t BPIDLE:1;			/*!< bit	11	BP Idle State	*/
		uint32_t BPPRD:1;			/*!< bit	12	BP Predict State	*/
		uint32_t BPCHK:1;			/*!< bit	13	BP Check State	*/
		uint32_t BPPRC:1;			/*!< bit	14	BP Processes State	*/
		uint32_t BPLRN:1;			/*!< bit	15	BP Learn State	*/
		uint32_t BPUPDBRCC:1;			/*!< bit	16	BP Update BRCC State	*/
		uint32_t BPUIMSP:1;			/*!< bit	17	BP Update Instruction Mispredict State	*/
		uint32_t BPAMSP:1;			/*!< bit	18	BP Address Mispredict State	*/
		uint32_t :2;			/*!< bit	19..20	Reserved	*/
		uint32_t RAMWT:1;			/*!< bit	21	BP RAM Wait State	*/
		uint32_t ST0FULL:1;			/*!< bit	22	Store Buffer 0 Full	*/
		uint32_t ST1FULL:1;			/*!< bit	23	Store Buffer 1 Full	*/
		uint32_t STMOUTCNTR:8;			/*!< bit	24..31	Store Buffer Timeout Count	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} BP_STAT_Type;
#define REG_BP_STAT		(*(RwReg *)0x1FC0A004UL)

#else
#define REG_BP_STAT		(0x1FC0A004) /**< \brief (BP) BP Status Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO BP_CFG_Type		CFG;		/**< \brief BP Configuration Register */
	__IO BP_STAT_Type		STAT;		/**< \brief BP Status Register */
} Bp;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- RCU0_CTL : (32) RCU0 Control Register ----- */
typedef union {
	struct {
		uint32_t SYSRST:1;			/*!< bit	0	System Reset	*/
		uint32_t RSTOUTASRT:1;			/*!< bit	1	Reset Out Assert	*/
		uint32_t RSTOUTDSRT:1;			/*!< bit	2	Reset Out Deassert	*/
		uint32_t :5;			/*!< bit	3..7	Reserved	*/
		uint32_t SRSTREQEN:1;			/*!< bit	8	System Reset Request Enabled	*/
		uint32_t CRSTREQEN:1;			/*!< bit	9	Core Reset Request Enabled	*/
		uint32_t :21;			/*!< bit	10..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_CTL_Type;
#define REG_RCU0_CTL		(*(RwReg *)0x20000000UL)

#else
#define REG_RCU0_CTL		(0x20000000) /**< \brief (RCU0) RCU0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_STAT : (32) RCU0 Status Register ----- */
typedef union {
	struct {
		uint32_t HWRST:1;			/*!< bit	0	Hardware Reset	*/
		uint32_t HBRST:1;			/*!< bit	1	Hibernate Reset	*/
		uint32_t SSRST:1;			/*!< bit	2	System Source Reset	*/
		uint32_t SWRST:1;			/*!< bit	3	Software Reset	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t RSTOUT:1;			/*!< bit	5	Reset Out Status	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t BMODE:4;			/*!< bit	8..11	Boot Mode	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	16	Address Error	*/
		uint32_t LWERR:1;			/*!< bit	17	Lock Write Error	*/
		uint32_t RSTOUTERR:1;			/*!< bit	18	Reset Out Error	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_STAT_Type;
#define REG_RCU0_STAT		(*(RwReg *)0x20000004UL)

#else
#define REG_RCU0_STAT		(0x20000004) /**< \brief (RCU0) RCU0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_CRCTL : (32) RCU0 Core Reset Control Register ----- */
typedef union {
	struct {
		uint32_t CR0:1;			/*!< bit	0	Core Reset n	*/
		uint32_t :30;			/*!< bit	1..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_CRCTL_Type;
#define REG_RCU0_CRCTL		(*(RwReg *)0x20000008UL)

#else
#define REG_RCU0_CRCTL		(0x20000008) /**< \brief (RCU0) RCU0 Core Reset Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_CRSTAT : (32) RCU0 Core Reset Status Register ----- */
typedef union {
	struct {
		uint32_t CR0:1;			/*!< bit	0	Core Reset n	*/
		uint32_t :31;			/*!< bit	1..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_CRSTAT_Type;
#define REG_RCU0_CRSTAT		(*(RwReg *)0x2000000CUL)

#else
#define REG_RCU0_CRSTAT		(0x2000000C) /**< \brief (RCU0) RCU0 Core Reset Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_SIDIS : (32) RCU0 System Interface Disable Register ----- */
typedef union {
	struct {
		uint32_t SI0:1;			/*!< bit	0	System Interface n	*/
		uint32_t :30;			/*!< bit	1..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_SIDIS_Type;
#define REG_RCU0_SIDIS		(*(RwReg *)0x20000010UL)

#else
#define REG_RCU0_SIDIS		(0x20000010) /**< \brief (RCU0) RCU0 System Interface Disable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_SISTAT : (32) RCU0 System Interface Status Register ----- */
typedef union {
	struct {
		uint32_t SI0:1;			/*!< bit	0	System Interface n	*/
		uint32_t :31;			/*!< bit	1..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_SISTAT_Type;
#define REG_RCU0_SISTAT		(*(RwReg *)0x20000014UL)

#else
#define REG_RCU0_SISTAT		(0x20000014) /**< \brief (RCU0) RCU0 System Interface Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_SVECT_LCK : (32) RCU0 SVECT Lock Register ----- */
typedef union {
	struct {
		uint32_t SVECT0:1;			/*!< bit	0	Software Vector Register n	*/
		uint32_t :30;			/*!< bit	1..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_SVECT_LCK_Type;
#define REG_RCU0_SVECT_LCK		(*(RwReg *)0x20000018UL)

#else
#define REG_RCU0_SVECT_LCK		(0x20000018) /**< \brief (RCU0) RCU0 SVECT Lock Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_BCODE : (32) RCU0 Boot Code Register ----- */
typedef union {
	struct {
		uint32_t NOKERNEL:1;			/*!< bit	0	Do Not Execute the Boot Kernel	*/
		uint32_t NOVECTINIT:1;			/*!< bit	1	Do Not Vector to the Application	*/
		uint32_t HALT:1;			/*!< bit	2	Execute No Boot Routine	*/
		uint32_t HBTOVW:1;			/*!< bit	3	Execute Wakeup Functionality	*/
		uint32_t NOMEMINIT:1;			/*!< bit	4	Do Not Perform Memory Initialization	*/
		uint32_t NOCACHE:1;			/*!< bit	5	Do Not Perform Cache Initialization and Do Not Enable Cache	*/
		uint32_t NOFAULTS:1;			/*!< bit	6	Do Not Perform Fault Initialization	*/
		uint32_t :2;			/*!< bit	7..8	Reserved	*/
		uint32_t NOPREBOOT:1;			/*!< bit	9	Do Not Perform Customer Preboot	*/
		uint32_t NOHOOK:1;			/*!< bit	10	Do Not Execute Hook Routine	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t NOL2CONFIG:1;			/*!< bit	12	No L2 Config	*/
		uint32_t IDLEONENTRY:1;			/*!< bit	13	Enter Idle State at Startup	*/
		uint32_t :3;			/*!< bit	14..16	Reserved	*/
		uint32_t NOCORE1:1;			/*!< bit	17	No Core 1 Present	*/
		uint32_t NOCORE2:1;			/*!< bit	18	No Core 2 Present	*/
		uint32_t NOCORE3:1;			/*!< bit	19	No Core 3 Present	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_BCODE_Type;
#define REG_RCU0_BCODE		(*(RwReg *)0x2000001CUL)

#else
#define REG_RCU0_BCODE		(0x2000001C) /**< \brief (RCU0) RCU0 Boot Code Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_SVECT0 : (32) RCU0 Software Vector Register 0 ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_SVECT0_Type;
#define REG_RCU0_SVECT0		(*(RwReg *)0x20000020UL)

#else
#define REG_RCU0_SVECT0		(0x20000020) /**< \brief (RCU0) RCU0 Software Vector Register 0 */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_MSG : (32) RCU0 Message Register ----- */
typedef union {
	struct {
		uint32_t :16;			/*!< bit	0..15	Reserved	*/
		uint32_t C0L1INIT:1;			/*!< bit	16	Indicates that the Core 0 L1 Resource is Initialized	*/
		uint32_t :5;			/*!< bit	17..21	Reserved	*/
		uint32_t L2INIT:1;			/*!< bit	22	Indicates that the L2 Resource is Initialized	*/
		uint32_t L3INIT:1;			/*!< bit	23	Indicates that the L3 Resource is Initialized	*/
		uint32_t HALTONAPP:1;			/*!< bit	24	Generate an Emulation Exception Prior to an Application Call	*/
		uint32_t HALTONINIT:1;			/*!< bit	25	Generate an Emulation Exception Prior to an Initcode Call	*/
		uint32_t HALTONCALL:1;			/*!< bit	26	Generate an Emulation Exception Prior to a Callback Call	*/
		uint32_t HALTONERR:1;			/*!< bit	27	Generate an Emulation Exception Prior to an Error Call	*/
		uint32_t CALLAPP:1;			/*!< bit	28	Flag Set by the Boot Code Prior to an Application Call	*/
		uint32_t CALLINIT:1;			/*!< bit	29	Flag Set by the Boot Code Prior to an Initcode Call	*/
		uint32_t CALLBACK:1;			/*!< bit	30	Flag Set by the Boot Code Prior to a Callback Call	*/
		uint32_t CALLERR:1;			/*!< bit	31	Flag Set by the Boot Code Prior to an Error Call	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_MSG_Type;
#define REG_RCU0_MSG		(*(RwReg *)0x20000060UL)

#else
#define REG_RCU0_MSG		(0x20000060) /**< \brief (RCU0) RCU0 Message Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_MSG_SET : (32) RCU0 Message Set Bits Register ----- */
typedef union {
	struct {
		uint32_t SET0:1;			/*!< bit	0	Set Message Bits	*/
		uint32_t SET1:1;			/*!< bit	1	Set Message Bits	*/
		uint32_t SET2:1;			/*!< bit	2	Set Message Bits	*/
		uint32_t SET3:1;			/*!< bit	3	Set Message Bits	*/
		uint32_t SET4:1;			/*!< bit	4	Set Message Bits	*/
		uint32_t SET5:1;			/*!< bit	5	Set Message Bits	*/
		uint32_t SET6:1;			/*!< bit	6	Set Message Bits	*/
		uint32_t SET7:1;			/*!< bit	7	Set Message Bits	*/
		uint32_t SET8:1;			/*!< bit	8	Set Message Bits	*/
		uint32_t SET9:1;			/*!< bit	9	Set Message Bits	*/
		uint32_t SET10:1;			/*!< bit	10	Set Message Bits	*/
		uint32_t SET11:1;			/*!< bit	11	Set Message Bits	*/
		uint32_t SET12:1;			/*!< bit	12	Set Message Bits	*/
		uint32_t SET13:1;			/*!< bit	13	Set Message Bits	*/
		uint32_t SET14:1;			/*!< bit	14	Set Message Bits	*/
		uint32_t SET15:1;			/*!< bit	15	Set Message Bits	*/
		uint32_t SET16:1;			/*!< bit	16	Set Message Bits	*/
		uint32_t SET17:1;			/*!< bit	17	Set Message Bits	*/
		uint32_t SET18:1;			/*!< bit	18	Set Message Bits	*/
		uint32_t SET19:1;			/*!< bit	19	Set Message Bits	*/
		uint32_t SET20:1;			/*!< bit	20	Set Message Bits	*/
		uint32_t SET21:1;			/*!< bit	21	Set Message Bits	*/
		uint32_t SET22:1;			/*!< bit	22	Set Message Bits	*/
		uint32_t SET23:1;			/*!< bit	23	Set Message Bits	*/
		uint32_t SET24:1;			/*!< bit	24	Set Message Bits	*/
		uint32_t SET25:1;			/*!< bit	25	Set Message Bits	*/
		uint32_t SET26:1;			/*!< bit	26	Set Message Bits	*/
		uint32_t SET27:1;			/*!< bit	27	Set Message Bits	*/
		uint32_t SET28:1;			/*!< bit	28	Set Message Bits	*/
		uint32_t SET29:1;			/*!< bit	29	Set Message Bits	*/
		uint32_t SET30:1;			/*!< bit	30	Set Message Bits	*/
		uint32_t SET31:1;			/*!< bit	31	Set Message Bits	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_MSG_SET_Type;
#define REG_RCU0_MSG_SET		(*(RwReg *)0x20000064UL)

#else
#define REG_RCU0_MSG_SET		(0x20000064) /**< \brief (RCU0) RCU0 Message Set Bits Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_MSG_CLR : (32) RCU0 Message Clear Bits Register ----- */
typedef union {
	struct {
		uint32_t CLR0:1;			/*!< bit	0	Clear MSG Register Bits	*/
		uint32_t CLR1:1;			/*!< bit	1	Clear MSG Register Bits	*/
		uint32_t CLR2:1;			/*!< bit	2	Clear MSG Register Bits	*/
		uint32_t CLR3:1;			/*!< bit	3	Clear MSG Register Bits	*/
		uint32_t CLR4:1;			/*!< bit	4	Clear MSG Register Bits	*/
		uint32_t CLR5:1;			/*!< bit	5	Clear MSG Register Bits	*/
		uint32_t CLR6:1;			/*!< bit	6	Clear MSG Register Bits	*/
		uint32_t CLR7:1;			/*!< bit	7	Clear MSG Register Bits	*/
		uint32_t CLR8:1;			/*!< bit	8	Clear MSG Register Bits	*/
		uint32_t CLR9:1;			/*!< bit	9	Clear MSG Register Bits	*/
		uint32_t CLR10:1;			/*!< bit	10	Clear MSG Register Bits	*/
		uint32_t CLR11:1;			/*!< bit	11	Clear MSG Register Bits	*/
		uint32_t CLR12:1;			/*!< bit	12	Clear MSG Register Bits	*/
		uint32_t CLR13:1;			/*!< bit	13	Clear MSG Register Bits	*/
		uint32_t CLR14:1;			/*!< bit	14	Clear MSG Register Bits	*/
		uint32_t CLR15:1;			/*!< bit	15	Clear MSG Register Bits	*/
		uint32_t CLR16:1;			/*!< bit	16	Clear MSG Register Bits	*/
		uint32_t CLR17:1;			/*!< bit	17	Clear MSG Register Bits	*/
		uint32_t CLR18:1;			/*!< bit	18	Clear MSG Register Bits	*/
		uint32_t CLR19:1;			/*!< bit	19	Clear MSG Register Bits	*/
		uint32_t CLR20:1;			/*!< bit	20	Clear MSG Register Bits	*/
		uint32_t CLR21:1;			/*!< bit	21	Clear MSG Register Bits	*/
		uint32_t CLR22:1;			/*!< bit	22	Clear MSG Register Bits	*/
		uint32_t CLR23:1;			/*!< bit	23	Clear MSG Register Bits	*/
		uint32_t CLR24:1;			/*!< bit	24	Clear MSG Register Bits	*/
		uint32_t CLR25:1;			/*!< bit	25	Clear MSG Register Bits	*/
		uint32_t CLR26:1;			/*!< bit	26	Clear MSG Register Bits	*/
		uint32_t CLR27:1;			/*!< bit	27	Clear MSG Register Bits	*/
		uint32_t CLR28:1;			/*!< bit	28	Clear MSG Register Bits	*/
		uint32_t CLR29:1;			/*!< bit	29	Clear MSG Register Bits	*/
		uint32_t CLR30:1;			/*!< bit	30	Clear MSG Register Bits	*/
		uint32_t CLR31:1;			/*!< bit	31	Clear MSG Register Bits	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_MSG_CLR_Type;
#define REG_RCU0_MSG_CLR		(*(RwReg *)0x20000068UL)

#else
#define REG_RCU0_MSG_CLR		(0x20000068) /**< \brief (RCU0) RCU0 Message Clear Bits Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RCU0_REVID : (32) RCU0 Revision ID Register ----- */
typedef union {
	struct {
		uint32_t REV:4;			/*!< bit	0..3	Incremental Version ID	*/
		uint32_t MAJOR:4;			/*!< bit	4..7	Major Version ID	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RCU0_REVID_Type;
#define REG_RCU0_REVID		(*(RwReg *)0x20000070UL)

#else
#define REG_RCU0_REVID		(0x20000070) /**< \brief (RCU0) RCU0 Revision ID Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO RCU0_CTL_Type		CTL;		/**< \brief RCU0 Control Register */
	__IO RCU0_STAT_Type		STAT;		/**< \brief RCU0 Status Register */
	__IO RCU0_CRCTL_Type		CRCTL;		/**< \brief RCU0 Core Reset Control Register */
	__IO RCU0_CRSTAT_Type		CRSTAT;		/**< \brief RCU0 Core Reset Status Register */
	__IO RCU0_SIDIS_Type		SIDIS;		/**< \brief RCU0 System Interface Disable Register */
	__IO RCU0_SISTAT_Type		SISTAT;		/**< \brief RCU0 System Interface Status Register */
	__IO RCU0_SVECT_LCK_Type		SVECT_LCK;		/**< \brief RCU0 SVECT Lock Register */
	__IO RCU0_BCODE_Type		BCODE;		/**< \brief RCU0 Boot Code Register */
	__IO RCU0_SVECT0_Type		SVECT0;		/**< \brief RCU0 Software Vector Register 0 */
		 RoReg8		Reserved1[0x3c];		
	__IO RCU0_MSG_Type		MSG;		/**< \brief RCU0 Message Register */
	__IO RCU0_MSG_SET_Type		MSG_SET;		/**< \brief RCU0 Message Set Bits Register */
	__IO RCU0_MSG_CLR_Type		MSG_CLR;		/**< \brief RCU0 Message Clear Bits Register */
		 RoReg8		Reserved2[0x04];		
	__IO RCU0_REVID_Type		REVID;		/**< \brief RCU0 Revision ID Register */
} Rcu0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR0 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR0_Type;
#define REG_TRU0_SSR0		(*(RwReg *)0x20001000UL)

#else
#define REG_TRU0_SSR0		(0x20001000) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR1 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR1_Type;
#define REG_TRU0_SSR1		(*(RwReg *)0x20001004UL)

#else
#define REG_TRU0_SSR1		(0x20001004) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR2 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR2_Type;
#define REG_TRU0_SSR2		(*(RwReg *)0x20001008UL)

#else
#define REG_TRU0_SSR2		(0x20001008) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR3 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR3_Type;
#define REG_TRU0_SSR3		(*(RwReg *)0x2000100CUL)

#else
#define REG_TRU0_SSR3		(0x2000100C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR4 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR4_Type;
#define REG_TRU0_SSR4		(*(RwReg *)0x20001010UL)

#else
#define REG_TRU0_SSR4		(0x20001010) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR5 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR5_Type;
#define REG_TRU0_SSR5		(*(RwReg *)0x20001014UL)

#else
#define REG_TRU0_SSR5		(0x20001014) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR6 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR6_Type;
#define REG_TRU0_SSR6		(*(RwReg *)0x20001018UL)

#else
#define REG_TRU0_SSR6		(0x20001018) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR7 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR7_Type;
#define REG_TRU0_SSR7		(*(RwReg *)0x2000101CUL)

#else
#define REG_TRU0_SSR7		(0x2000101C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR8 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR8_Type;
#define REG_TRU0_SSR8		(*(RwReg *)0x20001020UL)

#else
#define REG_TRU0_SSR8		(0x20001020) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR9 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR9_Type;
#define REG_TRU0_SSR9		(*(RwReg *)0x20001024UL)

#else
#define REG_TRU0_SSR9		(0x20001024) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR10 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR10_Type;
#define REG_TRU0_SSR10		(*(RwReg *)0x20001028UL)

#else
#define REG_TRU0_SSR10		(0x20001028) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR11 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR11_Type;
#define REG_TRU0_SSR11		(*(RwReg *)0x2000102CUL)

#else
#define REG_TRU0_SSR11		(0x2000102C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR12 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR12_Type;
#define REG_TRU0_SSR12		(*(RwReg *)0x20001030UL)

#else
#define REG_TRU0_SSR12		(0x20001030) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR13 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR13_Type;
#define REG_TRU0_SSR13		(*(RwReg *)0x20001034UL)

#else
#define REG_TRU0_SSR13		(0x20001034) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR14 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR14_Type;
#define REG_TRU0_SSR14		(*(RwReg *)0x20001038UL)

#else
#define REG_TRU0_SSR14		(0x20001038) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR15 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR15_Type;
#define REG_TRU0_SSR15		(*(RwReg *)0x2000103CUL)

#else
#define REG_TRU0_SSR15		(0x2000103C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR16 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR16_Type;
#define REG_TRU0_SSR16		(*(RwReg *)0x20001040UL)

#else
#define REG_TRU0_SSR16		(0x20001040) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR17 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR17_Type;
#define REG_TRU0_SSR17		(*(RwReg *)0x20001044UL)

#else
#define REG_TRU0_SSR17		(0x20001044) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR18 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR18_Type;
#define REG_TRU0_SSR18		(*(RwReg *)0x20001048UL)

#else
#define REG_TRU0_SSR18		(0x20001048) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR19 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR19_Type;
#define REG_TRU0_SSR19		(*(RwReg *)0x2000104CUL)

#else
#define REG_TRU0_SSR19		(0x2000104C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR20 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR20_Type;
#define REG_TRU0_SSR20		(*(RwReg *)0x20001050UL)

#else
#define REG_TRU0_SSR20		(0x20001050) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR21 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR21_Type;
#define REG_TRU0_SSR21		(*(RwReg *)0x20001054UL)

#else
#define REG_TRU0_SSR21		(0x20001054) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR22 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR22_Type;
#define REG_TRU0_SSR22		(*(RwReg *)0x20001058UL)

#else
#define REG_TRU0_SSR22		(0x20001058) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR23 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR23_Type;
#define REG_TRU0_SSR23		(*(RwReg *)0x2000105CUL)

#else
#define REG_TRU0_SSR23		(0x2000105C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR24 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR24_Type;
#define REG_TRU0_SSR24		(*(RwReg *)0x20001060UL)

#else
#define REG_TRU0_SSR24		(0x20001060) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR25 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR25_Type;
#define REG_TRU0_SSR25		(*(RwReg *)0x20001064UL)

#else
#define REG_TRU0_SSR25		(0x20001064) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR26 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR26_Type;
#define REG_TRU0_SSR26		(*(RwReg *)0x20001068UL)

#else
#define REG_TRU0_SSR26		(0x20001068) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR27 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR27_Type;
#define REG_TRU0_SSR27		(*(RwReg *)0x2000106CUL)

#else
#define REG_TRU0_SSR27		(0x2000106C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR28 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR28_Type;
#define REG_TRU0_SSR28		(*(RwReg *)0x20001070UL)

#else
#define REG_TRU0_SSR28		(0x20001070) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR29 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR29_Type;
#define REG_TRU0_SSR29		(*(RwReg *)0x20001074UL)

#else
#define REG_TRU0_SSR29		(0x20001074) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR30 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR30_Type;
#define REG_TRU0_SSR30		(*(RwReg *)0x20001078UL)

#else
#define REG_TRU0_SSR30		(0x20001078) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR31 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR31_Type;
#define REG_TRU0_SSR31		(*(RwReg *)0x2000107CUL)

#else
#define REG_TRU0_SSR31		(0x2000107C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR32 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR32_Type;
#define REG_TRU0_SSR32		(*(RwReg *)0x20001080UL)

#else
#define REG_TRU0_SSR32		(0x20001080) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR33 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR33_Type;
#define REG_TRU0_SSR33		(*(RwReg *)0x20001084UL)

#else
#define REG_TRU0_SSR33		(0x20001084) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR34 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR34_Type;
#define REG_TRU0_SSR34		(*(RwReg *)0x20001088UL)

#else
#define REG_TRU0_SSR34		(0x20001088) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR35 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR35_Type;
#define REG_TRU0_SSR35		(*(RwReg *)0x2000108CUL)

#else
#define REG_TRU0_SSR35		(0x2000108C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR36 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR36_Type;
#define REG_TRU0_SSR36		(*(RwReg *)0x20001090UL)

#else
#define REG_TRU0_SSR36		(0x20001090) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR37 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR37_Type;
#define REG_TRU0_SSR37		(*(RwReg *)0x20001094UL)

#else
#define REG_TRU0_SSR37		(0x20001094) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR38 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR38_Type;
#define REG_TRU0_SSR38		(*(RwReg *)0x20001098UL)

#else
#define REG_TRU0_SSR38		(0x20001098) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR39 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR39_Type;
#define REG_TRU0_SSR39		(*(RwReg *)0x2000109CUL)

#else
#define REG_TRU0_SSR39		(0x2000109C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR40 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR40_Type;
#define REG_TRU0_SSR40		(*(RwReg *)0x200010A0UL)

#else
#define REG_TRU0_SSR40		(0x200010A0) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR41 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR41_Type;
#define REG_TRU0_SSR41		(*(RwReg *)0x200010A4UL)

#else
#define REG_TRU0_SSR41		(0x200010A4) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR42 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR42_Type;
#define REG_TRU0_SSR42		(*(RwReg *)0x200010A8UL)

#else
#define REG_TRU0_SSR42		(0x200010A8) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR43 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR43_Type;
#define REG_TRU0_SSR43		(*(RwReg *)0x200010ACUL)

#else
#define REG_TRU0_SSR43		(0x200010AC) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR44 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR44_Type;
#define REG_TRU0_SSR44		(*(RwReg *)0x200010B0UL)

#else
#define REG_TRU0_SSR44		(0x200010B0) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR45 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR45_Type;
#define REG_TRU0_SSR45		(*(RwReg *)0x200010B4UL)

#else
#define REG_TRU0_SSR45		(0x200010B4) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR46 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR46_Type;
#define REG_TRU0_SSR46		(*(RwReg *)0x200010B8UL)

#else
#define REG_TRU0_SSR46		(0x200010B8) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR47 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR47_Type;
#define REG_TRU0_SSR47		(*(RwReg *)0x200010BCUL)

#else
#define REG_TRU0_SSR47		(0x200010BC) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR48 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR48_Type;
#define REG_TRU0_SSR48		(*(RwReg *)0x200010C0UL)

#else
#define REG_TRU0_SSR48		(0x200010C0) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR49 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR49_Type;
#define REG_TRU0_SSR49		(*(RwReg *)0x200010C4UL)

#else
#define REG_TRU0_SSR49		(0x200010C4) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR50 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR50_Type;
#define REG_TRU0_SSR50		(*(RwReg *)0x200010C8UL)

#else
#define REG_TRU0_SSR50		(0x200010C8) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR51 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR51_Type;
#define REG_TRU0_SSR51		(*(RwReg *)0x200010CCUL)

#else
#define REG_TRU0_SSR51		(0x200010CC) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR52 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR52_Type;
#define REG_TRU0_SSR52		(*(RwReg *)0x200010D0UL)

#else
#define REG_TRU0_SSR52		(0x200010D0) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR53 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR53_Type;
#define REG_TRU0_SSR53		(*(RwReg *)0x200010D4UL)

#else
#define REG_TRU0_SSR53		(0x200010D4) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR54 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR54_Type;
#define REG_TRU0_SSR54		(*(RwReg *)0x200010D8UL)

#else
#define REG_TRU0_SSR54		(0x200010D8) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR55 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR55_Type;
#define REG_TRU0_SSR55		(*(RwReg *)0x200010DCUL)

#else
#define REG_TRU0_SSR55		(0x200010DC) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR56 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR56_Type;
#define REG_TRU0_SSR56		(*(RwReg *)0x200010E0UL)

#else
#define REG_TRU0_SSR56		(0x200010E0) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR57 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR57_Type;
#define REG_TRU0_SSR57		(*(RwReg *)0x200010E4UL)

#else
#define REG_TRU0_SSR57		(0x200010E4) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR58 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR58_Type;
#define REG_TRU0_SSR58		(*(RwReg *)0x200010E8UL)

#else
#define REG_TRU0_SSR58		(0x200010E8) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR59 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR59_Type;
#define REG_TRU0_SSR59		(*(RwReg *)0x200010ECUL)

#else
#define REG_TRU0_SSR59		(0x200010EC) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR60 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR60_Type;
#define REG_TRU0_SSR60		(*(RwReg *)0x200010F0UL)

#else
#define REG_TRU0_SSR60		(0x200010F0) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR61 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR61_Type;
#define REG_TRU0_SSR61		(*(RwReg *)0x200010F4UL)

#else
#define REG_TRU0_SSR61		(0x200010F4) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR62 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR62_Type;
#define REG_TRU0_SSR62		(*(RwReg *)0x200010F8UL)

#else
#define REG_TRU0_SSR62		(0x200010F8) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR63 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR63_Type;
#define REG_TRU0_SSR63		(*(RwReg *)0x200010FCUL)

#else
#define REG_TRU0_SSR63		(0x200010FC) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR64 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR64_Type;
#define REG_TRU0_SSR64		(*(RwReg *)0x20001100UL)

#else
#define REG_TRU0_SSR64		(0x20001100) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR65 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR65_Type;
#define REG_TRU0_SSR65		(*(RwReg *)0x20001104UL)

#else
#define REG_TRU0_SSR65		(0x20001104) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR66 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR66_Type;
#define REG_TRU0_SSR66		(*(RwReg *)0x20001108UL)

#else
#define REG_TRU0_SSR66		(0x20001108) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR67 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR67_Type;
#define REG_TRU0_SSR67		(*(RwReg *)0x2000110CUL)

#else
#define REG_TRU0_SSR67		(0x2000110C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR68 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR68_Type;
#define REG_TRU0_SSR68		(*(RwReg *)0x20001110UL)

#else
#define REG_TRU0_SSR68		(0x20001110) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR69 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR69_Type;
#define REG_TRU0_SSR69		(*(RwReg *)0x20001114UL)

#else
#define REG_TRU0_SSR69		(0x20001114) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR70 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR70_Type;
#define REG_TRU0_SSR70		(*(RwReg *)0x20001118UL)

#else
#define REG_TRU0_SSR70		(0x20001118) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR71 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR71_Type;
#define REG_TRU0_SSR71		(*(RwReg *)0x2000111CUL)

#else
#define REG_TRU0_SSR71		(0x2000111C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR72 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR72_Type;
#define REG_TRU0_SSR72		(*(RwReg *)0x20001120UL)

#else
#define REG_TRU0_SSR72		(0x20001120) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR73 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR73_Type;
#define REG_TRU0_SSR73		(*(RwReg *)0x20001124UL)

#else
#define REG_TRU0_SSR73		(0x20001124) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR74 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR74_Type;
#define REG_TRU0_SSR74		(*(RwReg *)0x20001128UL)

#else
#define REG_TRU0_SSR74		(0x20001128) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR75 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR75_Type;
#define REG_TRU0_SSR75		(*(RwReg *)0x2000112CUL)

#else
#define REG_TRU0_SSR75		(0x2000112C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR76 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR76_Type;
#define REG_TRU0_SSR76		(*(RwReg *)0x20001130UL)

#else
#define REG_TRU0_SSR76		(0x20001130) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR77 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR77_Type;
#define REG_TRU0_SSR77		(*(RwReg *)0x20001134UL)

#else
#define REG_TRU0_SSR77		(0x20001134) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR78 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR78_Type;
#define REG_TRU0_SSR78		(*(RwReg *)0x20001138UL)

#else
#define REG_TRU0_SSR78		(0x20001138) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR79 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR79_Type;
#define REG_TRU0_SSR79		(*(RwReg *)0x2000113CUL)

#else
#define REG_TRU0_SSR79		(0x2000113C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR80 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR80_Type;
#define REG_TRU0_SSR80		(*(RwReg *)0x20001140UL)

#else
#define REG_TRU0_SSR80		(0x20001140) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR81 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR81_Type;
#define REG_TRU0_SSR81		(*(RwReg *)0x20001144UL)

#else
#define REG_TRU0_SSR81		(0x20001144) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR82 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR82_Type;
#define REG_TRU0_SSR82		(*(RwReg *)0x20001148UL)

#else
#define REG_TRU0_SSR82		(0x20001148) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR83 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR83_Type;
#define REG_TRU0_SSR83		(*(RwReg *)0x2000114CUL)

#else
#define REG_TRU0_SSR83		(0x2000114C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR84 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR84_Type;
#define REG_TRU0_SSR84		(*(RwReg *)0x20001150UL)

#else
#define REG_TRU0_SSR84		(0x20001150) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR85 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR85_Type;
#define REG_TRU0_SSR85		(*(RwReg *)0x20001154UL)

#else
#define REG_TRU0_SSR85		(0x20001154) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR86 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR86_Type;
#define REG_TRU0_SSR86		(*(RwReg *)0x20001158UL)

#else
#define REG_TRU0_SSR86		(0x20001158) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR87 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR87_Type;
#define REG_TRU0_SSR87		(*(RwReg *)0x2000115CUL)

#else
#define REG_TRU0_SSR87		(0x2000115C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR88 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR88_Type;
#define REG_TRU0_SSR88		(*(RwReg *)0x20001160UL)

#else
#define REG_TRU0_SSR88		(0x20001160) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR89 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR89_Type;
#define REG_TRU0_SSR89		(*(RwReg *)0x20001164UL)

#else
#define REG_TRU0_SSR89		(0x20001164) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR90 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR90_Type;
#define REG_TRU0_SSR90		(*(RwReg *)0x20001168UL)

#else
#define REG_TRU0_SSR90		(0x20001168) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR91 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR91_Type;
#define REG_TRU0_SSR91		(*(RwReg *)0x2000116CUL)

#else
#define REG_TRU0_SSR91		(0x2000116C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR92 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR92_Type;
#define REG_TRU0_SSR92		(*(RwReg *)0x20001170UL)

#else
#define REG_TRU0_SSR92		(0x20001170) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR93 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR93_Type;
#define REG_TRU0_SSR93		(*(RwReg *)0x20001174UL)

#else
#define REG_TRU0_SSR93		(0x20001174) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR94 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR94_Type;
#define REG_TRU0_SSR94		(*(RwReg *)0x20001178UL)

#else
#define REG_TRU0_SSR94		(0x20001178) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR95 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR95_Type;
#define REG_TRU0_SSR95		(*(RwReg *)0x2000117CUL)

#else
#define REG_TRU0_SSR95		(0x2000117C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR96 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR96_Type;
#define REG_TRU0_SSR96		(*(RwReg *)0x20001180UL)

#else
#define REG_TRU0_SSR96		(0x20001180) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR97 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR97_Type;
#define REG_TRU0_SSR97		(*(RwReg *)0x20001184UL)

#else
#define REG_TRU0_SSR97		(0x20001184) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR98 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR98_Type;
#define REG_TRU0_SSR98		(*(RwReg *)0x20001188UL)

#else
#define REG_TRU0_SSR98		(0x20001188) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR99 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR99_Type;
#define REG_TRU0_SSR99		(*(RwReg *)0x2000118CUL)

#else
#define REG_TRU0_SSR99		(0x2000118C) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR100 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR100_Type;
#define REG_TRU0_SSR100		(*(RwReg *)0x20001190UL)

#else
#define REG_TRU0_SSR100		(0x20001190) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_SSR101 : (32) TRU0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t SSR:8;			/*!< bit	0..7	SSRn Slave Select	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	SSRn Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_SSR101_Type;
#define REG_TRU0_SSR101		(*(RwReg *)0x20001194UL)

#else
#define REG_TRU0_SSR101		(0x20001194) /**< \brief (TRU0) TRU0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_MTR : (32) TRU0 Master Trigger Register ----- */
typedef union {
	struct {
		uint32_t MTR0:8;			/*!< bit	0..7	Master Trigger Register 0	*/
		uint32_t MTR1:8;			/*!< bit	8..15	Master Trigger Register 1	*/
		uint32_t MTR2:8;			/*!< bit	16..23	Master Trigger Register 2	*/
		uint32_t MTR3:8;			/*!< bit	24..31	Master Trigger Register 3	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_MTR_Type;
#define REG_TRU0_MTR		(*(RwReg *)0x200017E0UL)

#else
#define REG_TRU0_MTR		(0x200017E0) /**< \brief (TRU0) TRU0 Master Trigger Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_ERRADDR : (32) TRU0 Error Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:12;			/*!< bit	0..11	Error Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_ERRADDR_Type;
#define REG_TRU0_ERRADDR		(*(RwReg *)0x200017E8UL)

#else
#define REG_TRU0_ERRADDR		(0x200017E8) /**< \brief (TRU0) TRU0 Error Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_STAT : (32) TRU0 Status Information Register ----- */
typedef union {
	struct {
		uint32_t LWERR:1;			/*!< bit	0	Lock Write Error Status	*/
		uint32_t ADDRERR:1;			/*!< bit	1	Address Error Status	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_STAT_Type;
#define REG_TRU0_STAT		(*(RwReg *)0x200017ECUL)

#else
#define REG_TRU0_STAT		(0x200017EC) /**< \brief (TRU0) TRU0 Status Information Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRU0_GCTL : (32) TRU0 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Non-MMR Enable	*/
		uint32_t RESET:1;			/*!< bit	1	Soft Reset	*/
		uint32_t MTRL:1;			/*!< bit	2	MTR Lock Bit	*/
		uint32_t :28;			/*!< bit	3..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	GCTL Lock Bit	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRU0_GCTL_Type;
#define REG_TRU0_GCTL		(*(RwReg *)0x200017F4UL)

#else
#define REG_TRU0_GCTL		(0x200017F4) /**< \brief (TRU0) TRU0 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO TRU0_SSR0_Type		SSR0;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR1_Type		SSR1;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR2_Type		SSR2;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR3_Type		SSR3;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR4_Type		SSR4;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR5_Type		SSR5;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR6_Type		SSR6;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR7_Type		SSR7;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR8_Type		SSR8;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR9_Type		SSR9;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR10_Type		SSR10;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR11_Type		SSR11;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR12_Type		SSR12;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR13_Type		SSR13;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR14_Type		SSR14;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR15_Type		SSR15;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR16_Type		SSR16;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR17_Type		SSR17;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR18_Type		SSR18;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR19_Type		SSR19;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR20_Type		SSR20;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR21_Type		SSR21;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR22_Type		SSR22;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR23_Type		SSR23;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR24_Type		SSR24;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR25_Type		SSR25;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR26_Type		SSR26;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR27_Type		SSR27;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR28_Type		SSR28;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR29_Type		SSR29;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR30_Type		SSR30;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR31_Type		SSR31;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR32_Type		SSR32;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR33_Type		SSR33;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR34_Type		SSR34;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR35_Type		SSR35;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR36_Type		SSR36;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR37_Type		SSR37;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR38_Type		SSR38;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR39_Type		SSR39;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR40_Type		SSR40;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR41_Type		SSR41;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR42_Type		SSR42;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR43_Type		SSR43;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR44_Type		SSR44;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR45_Type		SSR45;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR46_Type		SSR46;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR47_Type		SSR47;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR48_Type		SSR48;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR49_Type		SSR49;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR50_Type		SSR50;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR51_Type		SSR51;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR52_Type		SSR52;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR53_Type		SSR53;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR54_Type		SSR54;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR55_Type		SSR55;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR56_Type		SSR56;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR57_Type		SSR57;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR58_Type		SSR58;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR59_Type		SSR59;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR60_Type		SSR60;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR61_Type		SSR61;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR62_Type		SSR62;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR63_Type		SSR63;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR64_Type		SSR64;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR65_Type		SSR65;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR66_Type		SSR66;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR67_Type		SSR67;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR68_Type		SSR68;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR69_Type		SSR69;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR70_Type		SSR70;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR71_Type		SSR71;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR72_Type		SSR72;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR73_Type		SSR73;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR74_Type		SSR74;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR75_Type		SSR75;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR76_Type		SSR76;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR77_Type		SSR77;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR78_Type		SSR78;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR79_Type		SSR79;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR80_Type		SSR80;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR81_Type		SSR81;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR82_Type		SSR82;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR83_Type		SSR83;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR84_Type		SSR84;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR85_Type		SSR85;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR86_Type		SSR86;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR87_Type		SSR87;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR88_Type		SSR88;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR89_Type		SSR89;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR90_Type		SSR90;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR91_Type		SSR91;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR92_Type		SSR92;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR93_Type		SSR93;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR94_Type		SSR94;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR95_Type		SSR95;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR96_Type		SSR96;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR97_Type		SSR97;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR98_Type		SSR98;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR99_Type		SSR99;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR100_Type		SSR100;		/**< \brief TRU0 Slave Select Register */
	__IO TRU0_SSR101_Type		SSR101;		/**< \brief TRU0 Slave Select Register */
		 RoReg8		Reserved1[0x648];		
	__IO TRU0_MTR_Type		MTR;		/**< \brief TRU0 Master Trigger Register */
		 RoReg8		Reserved2[0x04];		
	__IO TRU0_ERRADDR_Type		ERRADDR;		/**< \brief TRU0 Error Address Register */
	__IO TRU0_STAT_Type		STAT;		/**< \brief TRU0 Status Information Register */
		 RoReg8		Reserved3[0x04];		
	__IO TRU0_GCTL_Type		GCTL;		/**< \brief TRU0 Global Control Register */
} Tru0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- CGU0_CTL : (32) CGU0 Control Register ----- */
typedef union {
	struct {
		uint32_t DF:1;			/*!< bit	0	Divide Frequency	*/
		uint32_t :7;			/*!< bit	1..7	Reserved	*/
		uint32_t MSEL:7;			/*!< bit	8..14	Multiplier Select	*/
		uint32_t :15;			/*!< bit	15..29	Reserved	*/
		uint32_t WFI:1;			/*!< bit	30	Wait For Idle	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_CTL_Type;
#define REG_CGU0_CTL		(*(RwReg *)0x20002000UL)

#else
#define REG_CGU0_CTL		(0x20002000) /**< \brief (CGU0) CGU0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_PLLCTL : (32) CGU0 PLL Control Register ----- */
typedef union {
	struct {
		uint32_t PLLBPST:1;			/*!< bit	0	PLL Bypass Set	*/
		uint32_t PLLBPCL:1;			/*!< bit	1	PLL Bypass Clear	*/
		uint32_t PLLDIS:1;			/*!< bit	2	PLL Disable	*/
		uint32_t PLLEN:1;			/*!< bit	3	PLL Enable	*/
		uint32_t :27;			/*!< bit	4..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_PLLCTL_Type;
#define REG_CGU0_PLLCTL		(*(RwReg *)0x20002004UL)

#else
#define REG_CGU0_PLLCTL		(0x20002004) /**< \brief (CGU0) CGU0 PLL Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_STAT : (32) CGU0 Status Register ----- */
typedef union {
	struct {
		uint32_t PLLEN:1;			/*!< bit	0	PLL Enable	*/
		uint32_t PLLBP:1;			/*!< bit	1	PLL Bypass	*/
		uint32_t PLOCK:1;			/*!< bit	2	PLL Lock	*/
		uint32_t CLKSALGN:1;			/*!< bit	3	Clock Alignment	*/
		uint32_t :12;			/*!< bit	4..15	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	16	Address Error	*/
		uint32_t LWERR:1;			/*!< bit	17	Lock Write Error	*/
		uint32_t :1;			/*!< bit	18	Reserved	*/
		uint32_t WDFMSERR:1;			/*!< bit	19	Write to DF or MSEL Error	*/
		uint32_t WDIVERR:1;			/*!< bit	20	Write to DIV Error	*/
		uint32_t PCFGERR:1;			/*!< bit	21	PLL Configuration Error	*/
		uint32_t :10;			/*!< bit	22..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_STAT_Type;
#define REG_CGU0_STAT		(*(RwReg *)0x20002008UL)

#else
#define REG_CGU0_STAT		(0x20002008) /**< \brief (CGU0) CGU0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_DIV : (32) CGU0 Clocks Divisor Register ----- */
typedef union {
	struct {
		uint32_t CSEL:5;			/*!< bit	0..4	CCLK Divisor	*/
		uint32_t S0SEL:3;			/*!< bit	5..7	SCLK 0 Divisor	*/
		uint32_t SYSSEL:5;			/*!< bit	8..12	SYSCLK Divisor	*/
		uint32_t S1SEL:3;			/*!< bit	13..15	SCLK 1 Divisor	*/
		uint32_t DSEL:5;			/*!< bit	16..20	DCLK Divisor	*/
		uint32_t :1;			/*!< bit	21	Reserved	*/
		uint32_t OSEL:7;			/*!< bit	22..28	OUTCLK Divisor	*/
		uint32_t ALGN:1;			/*!< bit	29	Align	*/
		uint32_t UPDT:1;			/*!< bit	30	Update Clock Divisors	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_DIV_Type;
#define REG_CGU0_DIV		(*(RwReg *)0x2000200CUL)

#else
#define REG_CGU0_DIV		(0x2000200C) /**< \brief (CGU0) CGU0 Clocks Divisor Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_CLKOUTSEL : (32) CGU0 CLKOUT Select Register ----- */
typedef union {
	struct {
		uint32_t CLKOUTSEL:5;			/*!< bit	0..4	CLKOUT Select	*/
		uint32_t :26;			/*!< bit	5..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_CLKOUTSEL_Type;
#define REG_CGU0_CLKOUTSEL		(*(RwReg *)0x20002010UL)

#else
#define REG_CGU0_CLKOUTSEL		(0x20002010) /**< \brief (CGU0) CGU0 CLKOUT Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_TSCTL : (32) CGU0 Timestamp Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Counter Enable	*/
		uint32_t LOAD:1;			/*!< bit	1	Load Counter	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t TSDIV:4;			/*!< bit	4..7	Counter's Clock Divider	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_TSCTL_Type;
#define REG_CGU0_TSCTL		(*(RwReg *)0x20002018UL)

#else
#define REG_CGU0_TSCTL		(0x20002018) /**< \brief (CGU0) CGU0 Timestamp Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_TSVALUE0 : (32) CGU0 Timestamp Counter Initial 32 LSB Value Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_TSVALUE0_Type;
#define REG_CGU0_TSVALUE0		(*(RwReg *)0x2000201CUL)

#else
#define REG_CGU0_TSVALUE0		(0x2000201C) /**< \brief (CGU0) CGU0 Timestamp Counter Initial 32 LSB Value Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_TSVALUE1 : (32) CGU0 Timestamp Counter Initial MSB Value Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_TSVALUE1_Type;
#define REG_CGU0_TSVALUE1		(*(RwReg *)0x20002020UL)

#else
#define REG_CGU0_TSVALUE1		(0x20002020) /**< \brief (CGU0) CGU0 Timestamp Counter Initial MSB Value Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_TSCOUNT0 : (32) CGU0 Timestamp Counter 32 LSB ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_TSCOUNT0_Type;
#define REG_CGU0_TSCOUNT0		(*(RwReg *)0x20002024UL)

#else
#define REG_CGU0_TSCOUNT0		(0x20002024) /**< \brief (CGU0) CGU0 Timestamp Counter 32 LSB */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_TSCOUNT1 : (32) CGU0 Timestamp Counter 32 MSB Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_TSCOUNT1_Type;
#define REG_CGU0_TSCOUNT1		(*(RwReg *)0x20002028UL)

#else
#define REG_CGU0_TSCOUNT1		(0x20002028) /**< \brief (CGU0) CGU0 Timestamp Counter 32 MSB Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_CCBF_DIS : (32) CGU0 Core Clock Buffer Disable Register ----- */
typedef union {
	struct {
		uint32_t CCBF0:1;			/*!< bit	0	Core Clock Buffer 0	*/
		uint32_t :30;			/*!< bit	1..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_CCBF_DIS_Type;
#define REG_CGU0_CCBF_DIS		(*(RwReg *)0x2000202CUL)

#else
#define REG_CGU0_CCBF_DIS		(0x2000202C) /**< \brief (CGU0) CGU0 Core Clock Buffer Disable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_CCBF_STAT : (32) CGU0 Core Clock Buffer Status Register ----- */
typedef union {
	struct {
		uint32_t CCBF0:1;			/*!< bit	0	Core Clock Buffer 0	*/
		uint32_t :31;			/*!< bit	1..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_CCBF_STAT_Type;
#define REG_CGU0_CCBF_STAT		(*(RwReg *)0x20002030UL)

#else
#define REG_CGU0_CCBF_STAT		(0x20002030) /**< \brief (CGU0) CGU0 Core Clock Buffer Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_SCBF_DIS : (32) CGU0 System Clock Buffer Disable Register ----- */
typedef union {
	struct {
		uint32_t SCLK0BF:1;			/*!< bit	0	System Clock 0 Buffer	*/
		uint32_t SCLK1BF:1;			/*!< bit	1	System Clock 1 Buffer	*/
		uint32_t DCLKBF:1;			/*!< bit	2	DCLK Buffer	*/
		uint32_t OUTCLKBF:1;			/*!< bit	3	Output Clock Buffer	*/
		uint32_t :27;			/*!< bit	4..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_SCBF_DIS_Type;
#define REG_CGU0_SCBF_DIS		(*(RwReg *)0x20002038UL)

#else
#define REG_CGU0_SCBF_DIS		(0x20002038) /**< \brief (CGU0) CGU0 System Clock Buffer Disable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_SCBF_STAT : (32) CGU0 System Clock Buffer Status Register ----- */
typedef union {
	struct {
		uint32_t SCLK0BF:1;			/*!< bit	0	System Clock 0 Buffer	*/
		uint32_t SCLK1BF:1;			/*!< bit	1	System Clock 1 Buffer	*/
		uint32_t DCLKBF:1;			/*!< bit	2	DCLK Buffer	*/
		uint32_t OCLKBF:1;			/*!< bit	3	Output Clock Buffer	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_SCBF_STAT_Type;
#define REG_CGU0_SCBF_STAT		(*(RwReg *)0x2000203CUL)

#else
#define REG_CGU0_SCBF_STAT		(0x2000203C) /**< \brief (CGU0) CGU0 System Clock Buffer Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CGU0_REVID : (32) CGU0 Revision ID Register ----- */
typedef union {
	struct {
		uint32_t REV:4;			/*!< bit	0..3	Incremental Version ID	*/
		uint32_t MAJOR:4;			/*!< bit	4..7	Major Version	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CGU0_REVID_Type;
#define REG_CGU0_REVID		(*(RwReg *)0x20002048UL)

#else
#define REG_CGU0_REVID		(0x20002048) /**< \brief (CGU0) CGU0 Revision ID Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO CGU0_CTL_Type		CTL;		/**< \brief CGU0 Control Register */
	__IO CGU0_PLLCTL_Type		PLLCTL;		/**< \brief CGU0 PLL Control Register */
	__IO CGU0_STAT_Type		STAT;		/**< \brief CGU0 Status Register */
	__IO CGU0_DIV_Type		DIV;		/**< \brief CGU0 Clocks Divisor Register */
	__IO CGU0_CLKOUTSEL_Type		CLKOUTSEL;		/**< \brief CGU0 CLKOUT Select Register */
		 RoReg8		Reserved1[0x04];		
	__IO CGU0_TSCTL_Type		TSCTL;		/**< \brief CGU0 Timestamp Control Register */
	__IO CGU0_TSVALUE0_Type		TSVALUE0;		/**< \brief CGU0 Timestamp Counter Initial 32 LSB Value Register */
	__IO CGU0_TSVALUE1_Type		TSVALUE1;		/**< \brief CGU0 Timestamp Counter Initial MSB Value Register */
	__IO CGU0_TSCOUNT0_Type		TSCOUNT0;		/**< \brief CGU0 Timestamp Counter 32 LSB */
	__IO CGU0_TSCOUNT1_Type		TSCOUNT1;		/**< \brief CGU0 Timestamp Counter 32 MSB Register */
	__IO CGU0_CCBF_DIS_Type		CCBF_DIS;		/**< \brief CGU0 Core Clock Buffer Disable Register */
	__IO CGU0_CCBF_STAT_Type		CCBF_STAT;		/**< \brief CGU0 Core Clock Buffer Status Register */
		 RoReg8		Reserved2[0x04];		
	__IO CGU0_SCBF_DIS_Type		SCBF_DIS;		/**< \brief CGU0 System Clock Buffer Disable Register */
	__IO CGU0_SCBF_STAT_Type		SCBF_STAT;		/**< \brief CGU0 System Clock Buffer Status Register */
		 RoReg8		Reserved3[0x08];		
	__IO CGU0_REVID_Type		REVID;		/**< \brief CGU0 Revision ID Register */
} Cgu0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- DPM0_CTL : (32) DPM0 Control Register ----- */
typedef union {
	struct {
		uint32_t :3;			/*!< bit	0..2	Reserved	*/
		uint32_t DEEPSLEEP:1;			/*!< bit	3	Deep Sleep	*/
		uint32_t HIBERNATE:1;			/*!< bit	4	Hibernate	*/
		uint32_t :26;			/*!< bit	5..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_CTL_Type;
#define REG_DPM0_CTL		(*(RwReg *)0x20003000UL)

#else
#define REG_DPM0_CTL		(0x20003000) /**< \brief (DPM0) DPM0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_STAT : (32) DPM0 Status Register ----- */
typedef union {
	struct {
		uint32_t CURMODE:4;			/*!< bit	0..3	Current Mode	*/
		uint32_t PRVMODE:4;			/*!< bit	4..7	Previous Mode	*/
		uint32_t :1;			/*!< bit	8	Reserved	*/
		uint32_t HVBSY:1;			/*!< bit	9	HV Busy	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	16	Address Error	*/
		uint32_t LWERR:1;			/*!< bit	17	Lock Write Error	*/
		uint32_t HVBSYERR:1;			/*!< bit	18	HV Busy Error	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_STAT_Type;
#define REG_DPM0_STAT		(*(RwReg *)0x20003004UL)

#else
#define REG_DPM0_STAT		(0x20003004) /**< \brief (DPM0) DPM0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_WAKE_EN : (32) DPM0 Wakeup Enable Register ----- */
typedef union {
	struct {
		uint32_t WS0:1;			/*!< bit	0	Wakeup Source n Enable	*/
		uint32_t WS1:1;			/*!< bit	1	Wakeup Source n Enable	*/
		uint32_t WS2:1;			/*!< bit	2	Wakeup Source n Enable	*/
		uint32_t WS3:1;			/*!< bit	3	Wakeup Source n Enable	*/
		uint32_t WS4:1;			/*!< bit	4	Wakeup Source n Enable	*/
		uint32_t WS5:1;			/*!< bit	5	Wakeup Source n Enable	*/
		uint32_t WS6:1;			/*!< bit	6	Wakeup Source n Enable	*/
		uint32_t WS7:1;			/*!< bit	7	Wakeup Source n Enable	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_WAKE_EN_Type;
#define REG_DPM0_WAKE_EN		(*(RwReg *)0x2000301CUL)

#else
#define REG_DPM0_WAKE_EN		(0x2000301C) /**< \brief (DPM0) DPM0 Wakeup Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_WAKE_POL : (32) DPM0 Wakeup Polarity Register ----- */
typedef union {
	struct {
		uint32_t WS0:1;			/*!< bit	0	Wakeup Source n Polarity	*/
		uint32_t WS1:1;			/*!< bit	1	Wakeup Source n Polarity	*/
		uint32_t WS2:1;			/*!< bit	2	Wakeup Source n Polarity	*/
		uint32_t WS3:1;			/*!< bit	3	Wakeup Source n Polarity	*/
		uint32_t WS4:1;			/*!< bit	4	Wakeup Source n Polarity	*/
		uint32_t WS5:1;			/*!< bit	5	Wakeup Source n Polarity	*/
		uint32_t WS6:1;			/*!< bit	6	Wakeup Source n Polarity	*/
		uint32_t WS7:1;			/*!< bit	7	Wakeup Source n Polarity	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_WAKE_POL_Type;
#define REG_DPM0_WAKE_POL		(*(RwReg *)0x20003020UL)

#else
#define REG_DPM0_WAKE_POL		(0x20003020) /**< \brief (DPM0) DPM0 Wakeup Polarity Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_WAKE_STAT : (32) DPM0 Wakeup Status Register ----- */
typedef union {
	struct {
		uint32_t WS0:1;			/*!< bit	0	Wakeup Source n Status	*/
		uint32_t WS1:1;			/*!< bit	1	Wakeup Source n Status	*/
		uint32_t WS2:1;			/*!< bit	2	Wakeup Source n Status	*/
		uint32_t WS3:1;			/*!< bit	3	Wakeup Source n Status	*/
		uint32_t WS4:1;			/*!< bit	4	Wakeup Source n Status	*/
		uint32_t WS5:1;			/*!< bit	5	Wakeup Source n Status	*/
		uint32_t WS6:1;			/*!< bit	6	Wakeup Source n Status	*/
		uint32_t WS7:1;			/*!< bit	7	Wakeup Source n Status	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_WAKE_STAT_Type;
#define REG_DPM0_WAKE_STAT		(*(RwReg *)0x20003024UL)

#else
#define REG_DPM0_WAKE_STAT		(0x20003024) /**< \brief (DPM0) DPM0 Wakeup Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_HIB_DIS : (32) DPM0 Hibernate Disable Register ----- */
typedef union {
	struct {
		uint32_t HD0:1;			/*!< bit	0	Hibernate Disable	*/
		uint32_t HD1:1;			/*!< bit	1	Hibernate Disable	*/
		uint32_t HD2:1;			/*!< bit	2	Hibernate Disable	*/
		uint32_t HD3:1;			/*!< bit	3	Hibernate Disable	*/
		uint32_t :27;			/*!< bit	4..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_HIB_DIS_Type;
#define REG_DPM0_HIB_DIS		(*(RwReg *)0x20003028UL)

#else
#define REG_DPM0_HIB_DIS		(0x20003028) /**< \brief (DPM0) DPM0 Hibernate Disable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_PGCNTR : (32) DPM0 Power Good Counter Register ----- */
typedef union {
	struct {
		uint32_t CNT:16;			/*!< bit	0..15	Power Good Count	*/
		uint32_t :15;			/*!< bit	16..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_PGCNTR_Type;
#define REG_DPM0_PGCNTR		(*(RwReg *)0x2000302CUL)

#else
#define REG_DPM0_PGCNTR		(0x2000302C) /**< \brief (DPM0) DPM0 Power Good Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE0 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE0_Type;
#define REG_DPM0_RESTORE0		(*(RwReg *)0x20003030UL)

#else
#define REG_DPM0_RESTORE0		(0x20003030) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE1 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE1_Type;
#define REG_DPM0_RESTORE1		(*(RwReg *)0x20003034UL)

#else
#define REG_DPM0_RESTORE1		(0x20003034) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE2 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE2_Type;
#define REG_DPM0_RESTORE2		(*(RwReg *)0x20003038UL)

#else
#define REG_DPM0_RESTORE2		(0x20003038) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE3 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE3_Type;
#define REG_DPM0_RESTORE3		(*(RwReg *)0x2000303CUL)

#else
#define REG_DPM0_RESTORE3		(0x2000303C) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE4 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE4_Type;
#define REG_DPM0_RESTORE4		(*(RwReg *)0x20003040UL)

#else
#define REG_DPM0_RESTORE4		(0x20003040) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE5 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE5_Type;
#define REG_DPM0_RESTORE5		(*(RwReg *)0x20003044UL)

#else
#define REG_DPM0_RESTORE5		(0x20003044) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE6 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE6_Type;
#define REG_DPM0_RESTORE6		(*(RwReg *)0x20003048UL)

#else
#define REG_DPM0_RESTORE6		(0x20003048) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE7 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE7_Type;
#define REG_DPM0_RESTORE7		(*(RwReg *)0x2000304CUL)

#else
#define REG_DPM0_RESTORE7		(0x2000304C) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE8 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE8_Type;
#define REG_DPM0_RESTORE8		(*(RwReg *)0x20003050UL)

#else
#define REG_DPM0_RESTORE8		(0x20003050) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE9 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE9_Type;
#define REG_DPM0_RESTORE9		(*(RwReg *)0x20003054UL)

#else
#define REG_DPM0_RESTORE9		(0x20003054) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE10 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE10_Type;
#define REG_DPM0_RESTORE10		(*(RwReg *)0x20003058UL)

#else
#define REG_DPM0_RESTORE10		(0x20003058) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE11 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE11_Type;
#define REG_DPM0_RESTORE11		(*(RwReg *)0x2000305CUL)

#else
#define REG_DPM0_RESTORE11		(0x2000305C) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE12 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE12_Type;
#define REG_DPM0_RESTORE12		(*(RwReg *)0x20003060UL)

#else
#define REG_DPM0_RESTORE12		(0x20003060) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE13 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE13_Type;
#define REG_DPM0_RESTORE13		(*(RwReg *)0x20003064UL)

#else
#define REG_DPM0_RESTORE13		(0x20003064) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE14 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE14_Type;
#define REG_DPM0_RESTORE14		(*(RwReg *)0x20003068UL)

#else
#define REG_DPM0_RESTORE14		(0x20003068) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_RESTORE15 : (32) DPM0 Restore Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_RESTORE15_Type;
#define REG_DPM0_RESTORE15		(*(RwReg *)0x2000306CUL)

#else
#define REG_DPM0_RESTORE15		(0x2000306C) /**< \brief (DPM0) DPM0 Restore Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DPM0_REVID : (32) DPM0 Revision ID ----- */
typedef union {
	struct {
		uint32_t REV:4;			/*!< bit	0..3	Incremental Version ID	*/
		uint32_t MAJOR:4;			/*!< bit	4..7	Major Version ID	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DPM0_REVID_Type;
#define REG_DPM0_REVID		(*(RwReg *)0x20003084UL)

#else
#define REG_DPM0_REVID		(0x20003084) /**< \brief (DPM0) DPM0 Revision ID */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO DPM0_CTL_Type		CTL;		/**< \brief DPM0 Control Register */
	__IO DPM0_STAT_Type		STAT;		/**< \brief DPM0 Status Register */
		 RoReg8		Reserved1[0x14];		
	__IO DPM0_WAKE_EN_Type		WAKE_EN;		/**< \brief DPM0 Wakeup Enable Register */
	__IO DPM0_WAKE_POL_Type		WAKE_POL;		/**< \brief DPM0 Wakeup Polarity Register */
	__IO DPM0_WAKE_STAT_Type		WAKE_STAT;		/**< \brief DPM0 Wakeup Status Register */
	__IO DPM0_HIB_DIS_Type		HIB_DIS;		/**< \brief DPM0 Hibernate Disable Register */
	__IO DPM0_PGCNTR_Type		PGCNTR;		/**< \brief DPM0 Power Good Counter Register */
	__IO DPM0_RESTORE0_Type		RESTORE0;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE1_Type		RESTORE1;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE2_Type		RESTORE2;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE3_Type		RESTORE3;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE4_Type		RESTORE4;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE5_Type		RESTORE5;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE6_Type		RESTORE6;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE7_Type		RESTORE7;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE8_Type		RESTORE8;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE9_Type		RESTORE9;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE10_Type		RESTORE10;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE11_Type		RESTORE11;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE12_Type		RESTORE12;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE13_Type		RESTORE13;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE14_Type		RESTORE14;		/**< \brief DPM0 Restore Registers */
	__IO DPM0_RESTORE15_Type		RESTORE15;		/**< \brief DPM0 Restore Registers */
		 RoReg8		Reserved2[0x14];		
	__IO DPM0_REVID_Type		REVID;		/**< \brief DPM0 Revision ID */
} Dpm0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SCI_SEC0_CCTL0 : (32) SEC0 SCI Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable	*/
		uint32_t RESET:1;			/*!< bit	1	Reset	*/
		uint32_t :10;			/*!< bit	2..11	Reserved	*/
		uint32_t WFI:1;			/*!< bit	12	Wait For Idle	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
		uint32_t NMIEN:1;			/*!< bit	16	NMI Enable	*/
		uint32_t :14;			/*!< bit	17..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCI_SEC0_CCTL0_Type;
#define REG_SCI_SEC0_CCTL0		(*(RwReg *)0x20004400UL)

#else
#define REG_SCI_SEC0_CCTL0		(0x20004400) /**< \brief (SEC Core Interface (SCI)) SEC0 SCI Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCI_SEC0_CSTAT0 : (32) SEC0 SCI Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PNDV:1;			/*!< bit	8	PND Valid	*/
		uint32_t ACTV:1;			/*!< bit	9	ACT Valid	*/
		uint32_t SIDV:1;			/*!< bit	10	SID Valid	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t WFI:1;			/*!< bit	12	Wait For Idle	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
		uint32_t NMI:1;			/*!< bit	16	NMI	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCI_SEC0_CSTAT0_Type;
#define REG_SCI_SEC0_CSTAT0		(*(RwReg *)0x20004404UL)

#else
#define REG_SCI_SEC0_CSTAT0		(0x20004404) /**< \brief (SEC Core Interface (SCI)) SEC0 SCI Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCI_SEC0_CPND0 : (32) SEC0 Core Pending Register n ----- */
typedef union {
	struct {
		uint32_t SID:8;			/*!< bit	0..7	Highest Pending IRQ Source ID	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Highest Pending IRQ Priority	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCI_SEC0_CPND0_Type;
#define REG_SCI_SEC0_CPND0		(*(RwReg *)0x20004408UL)

#else
#define REG_SCI_SEC0_CPND0		(0x20004408) /**< \brief (SEC Core Interface (SCI)) SEC0 Core Pending Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCI_SEC0_CACT0 : (32) SEC0 SCI Active Register n ----- */
typedef union {
	struct {
		uint32_t SID:8;			/*!< bit	0..7	Highest Active IRQ Source ID	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Highest Active IRQ Priority	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCI_SEC0_CACT0_Type;
#define REG_SCI_SEC0_CACT0		(*(RwReg *)0x2000440CUL)

#else
#define REG_SCI_SEC0_CACT0		(0x2000440C) /**< \brief (SEC Core Interface (SCI)) SEC0 SCI Active Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCI_SEC0_CPMSK0 : (32) SEC0 SCI Priority Mask Register n ----- */
typedef union {
	struct {
		uint32_t PRIO:8;			/*!< bit	0..7	IRQ Priority Mask	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCI_SEC0_CPMSK0_Type;
#define REG_SCI_SEC0_CPMSK0		(*(RwReg *)0x20004410UL)

#else
#define REG_SCI_SEC0_CPMSK0		(0x20004410) /**< \brief (SEC Core Interface (SCI)) SEC0 SCI Priority Mask Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCI_SEC0_CGMSK0 : (32) SEC0 SCI Group Mask Register n ----- */
typedef union {
	struct {
		uint32_t GRP:4;			/*!< bit	0..3	Grouped Mask	*/
		uint32_t :4;			/*!< bit	4..7	Reserved	*/
		uint32_t UGRP:1;			/*!< bit	8	Ungrouped Mask	*/
		uint32_t :22;			/*!< bit	9..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCI_SEC0_CGMSK0_Type;
#define REG_SCI_SEC0_CGMSK0		(*(RwReg *)0x20004414UL)

#else
#define REG_SCI_SEC0_CGMSK0		(0x20004414) /**< \brief (SEC Core Interface (SCI)) SEC0 SCI Group Mask Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCI_SEC0_CPLVL0 : (32) SEC0 SCI Priority Level Register n ----- */
typedef union {
	struct {
		uint32_t PLVL:3;			/*!< bit	0..2	Priority Levels	*/
		uint32_t :28;			/*!< bit	3..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCI_SEC0_CPLVL0_Type;
#define REG_SCI_SEC0_CPLVL0		(*(RwReg *)0x20004418UL)

#else
#define REG_SCI_SEC0_CPLVL0		(0x20004418) /**< \brief (SEC Core Interface (SCI)) SEC0 SCI Priority Level Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCI_SEC0_CSID0 : (32) SEC0 SCI Source ID Register n ----- */
typedef union {
	struct {
		uint32_t SID:8;			/*!< bit	0..7	Source ID	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCI_SEC0_CSID0_Type;
#define REG_SCI_SEC0_CSID0		(*(RwReg *)0x2000441CUL)

#else
#define REG_SCI_SEC0_CSID0		(0x2000441C) /**< \brief (SEC Core Interface (SCI)) SEC0 SCI Source ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SCI_SEC0_CCTL0_Type		SEC0_CCTL0;		/**< \brief SEC0 SCI Control Register n */
	__IO SCI_SEC0_CSTAT0_Type		SEC0_CSTAT0;		/**< \brief SEC0 SCI Status Register n */
	__IO SCI_SEC0_CPND0_Type		SEC0_CPND0;		/**< \brief SEC0 Core Pending Register n */
	__IO SCI_SEC0_CACT0_Type		SEC0_CACT0;		/**< \brief SEC0 SCI Active Register n */
	__IO SCI_SEC0_CPMSK0_Type		SEC0_CPMSK0;		/**< \brief SEC0 SCI Priority Mask Register n */
	__IO SCI_SEC0_CGMSK0_Type		SEC0_CGMSK0;		/**< \brief SEC0 SCI Group Mask Register n */
	__IO SCI_SEC0_CPLVL0_Type		SEC0_CPLVL0;		/**< \brief SEC0 SCI Priority Level Register n */
	__IO SCI_SEC0_CSID0_Type		SEC0_CSID0;		/**< \brief SEC0 SCI Source ID Register n */
} Sci;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FCTL : (32) SEC0 Fault Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable	*/
		uint32_t RESET:1;			/*!< bit	1	Reset	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t FOEN:1;			/*!< bit	4	Fault Output Enable	*/
		uint32_t TOEN:1;			/*!< bit	5	Trigger Output Enable	*/
		uint32_t SREN:1;			/*!< bit	6	System Reset Enable	*/
		uint32_t FIEN:1;			/*!< bit	7	Fault Input Enable	*/
		uint32_t :4;			/*!< bit	8..11	Reserved	*/
		uint32_t CMS:1;			/*!< bit	12	COP Mode Select	*/
		uint32_t TES:1;			/*!< bit	13	Trigger Event Select	*/
		uint32_t :17;			/*!< bit	14..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FCTL_Type;
#define REG_SFI_SEC0_FCTL		(*(RwReg *)0x20004010UL)

#else
#define REG_SFI_SEC0_FCTL		(0x20004010) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FSTAT : (32) SEC0 Fault Status Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Fault	*/
		uint32_t ACT:1;			/*!< bit	9	Fault Active	*/
		uint32_t NPND:1;			/*!< bit	10	Next Pending Fault	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FSTAT_Type;
#define REG_SFI_SEC0_FSTAT		(*(RwReg *)0x20004014UL)

#else
#define REG_SFI_SEC0_FSTAT		(0x20004014) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FSID : (32) SEC0 Fault Source ID Register ----- */
typedef union {
	struct {
		uint32_t SID:8;			/*!< bit	0..7	Source ID	*/
		uint32_t :8;			/*!< bit	8..15	Reserved	*/
		uint32_t FEXT:1;			/*!< bit	16	Fault External	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FSID_Type;
#define REG_SFI_SEC0_FSID		(*(RwReg *)0x20004018UL)

#else
#define REG_SFI_SEC0_FSID		(0x20004018) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault Source ID Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FEND : (32) SEC0 Fault End Register ----- */
typedef union {
	struct {
		uint32_t SID:8;			/*!< bit	0..7	Source ID	*/
		uint32_t :8;			/*!< bit	8..15	Reserved	*/
		uint32_t FEXT:1;			/*!< bit	16	Fault External	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FEND_Type;
#define REG_SFI_SEC0_FEND		(*(RwReg *)0x2000401CUL)

#else
#define REG_SFI_SEC0_FEND		(0x2000401C) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault End Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FDLY : (32) SEC0 Fault Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FDLY_Type;
#define REG_SFI_SEC0_FDLY		(*(RwReg *)0x20004020UL)

#else
#define REG_SFI_SEC0_FDLY		(0x20004020) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FDLY_CUR : (32) SEC0 Fault Delay Current Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FDLY_CUR_Type;
#define REG_SFI_SEC0_FDLY_CUR		(*(RwReg *)0x20004024UL)

#else
#define REG_SFI_SEC0_FDLY_CUR		(0x20004024) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault Delay Current Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FSRDLY : (32) SEC0 Fault System Reset Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FSRDLY_Type;
#define REG_SFI_SEC0_FSRDLY		(*(RwReg *)0x20004028UL)

#else
#define REG_SFI_SEC0_FSRDLY		(0x20004028) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault System Reset Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FSRDLY_CUR : (32) SEC0 Fault System Reset Delay Current Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FSRDLY_CUR_Type;
#define REG_SFI_SEC0_FSRDLY_CUR		(*(RwReg *)0x2000402CUL)

#else
#define REG_SFI_SEC0_FSRDLY_CUR		(0x2000402C) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault System Reset Delay Current Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FCOPP : (32) SEC0 Fault COP Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FCOPP_Type;
#define REG_SFI_SEC0_FCOPP		(*(RwReg *)0x20004030UL)

#else
#define REG_SFI_SEC0_FCOPP		(0x20004030) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault COP Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SFI_SEC0_FCOPP_CUR : (32) SEC0 Fault COP Period Current Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SFI_SEC0_FCOPP_CUR_Type;
#define REG_SFI_SEC0_FCOPP_CUR		(*(RwReg *)0x20004034UL)

#else
#define REG_SFI_SEC0_FCOPP_CUR		(0x20004034) /**< \brief (SEC Fault Management Interface (SFI)) SEC0 Fault COP Period Current Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SFI_SEC0_FCTL_Type		SEC0_FCTL;		/**< \brief SEC0 Fault Control Register */
	__IO SFI_SEC0_FSTAT_Type		SEC0_FSTAT;		/**< \brief SEC0 Fault Status Register */
	__IO SFI_SEC0_FSID_Type		SEC0_FSID;		/**< \brief SEC0 Fault Source ID Register */
	__IO SFI_SEC0_FEND_Type		SEC0_FEND;		/**< \brief SEC0 Fault End Register */
	__IO SFI_SEC0_FDLY_Type		SEC0_FDLY;		/**< \brief SEC0 Fault Delay Register */
	__IO SFI_SEC0_FDLY_CUR_Type		SEC0_FDLY_CUR;		/**< \brief SEC0 Fault Delay Current Register */
	__IO SFI_SEC0_FSRDLY_Type		SEC0_FSRDLY;		/**< \brief SEC0 Fault System Reset Delay Register */
	__IO SFI_SEC0_FSRDLY_CUR_Type		SEC0_FSRDLY_CUR;		/**< \brief SEC0 Fault System Reset Delay Current Register */
	__IO SFI_SEC0_FCOPP_Type		SEC0_FCOPP;		/**< \brief SEC0 Fault COP Period Register */
	__IO SFI_SEC0_FCOPP_CUR_Type		SEC0_FCOPP_CUR;		/**< \brief SEC0 Fault COP Period Current Register */
} Sfi;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SEC_Global_SEC0_GCTL : (32) SEC0 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable	*/
		uint32_t RESET:1;			/*!< bit	1	Reset	*/
		uint32_t :29;			/*!< bit	2..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SEC_Global_SEC0_GCTL_Type;
#define REG_SEC_Global_SEC0_GCTL		(*(RwReg *)0x20004000UL)

#else
#define REG_SEC_Global_SEC0_GCTL		(0x20004000) /**< \brief (SEC Global) SEC0 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SEC_Global_SEC0_GSTAT : (32) SEC0 Global Status Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t SCI:4;			/*!< bit	8..11	SCI ID for SCI Error	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t SID:8;			/*!< bit	16..23	Source ID for SSI Error	*/
		uint32_t :6;			/*!< bit	24..29	Reserved	*/
		uint32_t ADRERR:1;			/*!< bit	30	Address Error	*/
		uint32_t LWERR:1;			/*!< bit	31	Lock Write Error	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SEC_Global_SEC0_GSTAT_Type;
#define REG_SEC_Global_SEC0_GSTAT		(*(RwReg *)0x20004004UL)

#else
#define REG_SEC_Global_SEC0_GSTAT		(0x20004004) /**< \brief (SEC Global) SEC0 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SEC_Global_SEC0_RAISE : (32) SEC0 Global Raise Register ----- */
typedef union {
	struct {
		uint32_t SID:8;			/*!< bit	0..7	Source ID of event that is set to Pending status	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SEC_Global_SEC0_RAISE_Type;
#define REG_SEC_Global_SEC0_RAISE		(*(RwReg *)0x20004008UL)

#else
#define REG_SEC_Global_SEC0_RAISE		(0x20004008) /**< \brief (SEC Global) SEC0 Global Raise Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SEC_Global_SEC0_END : (32) SEC0 Global End Register ----- */
typedef union {
	struct {
		uint32_t SID:8;			/*!< bit	0..7	Source ID IRQ to End	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SEC_Global_SEC0_END_Type;
#define REG_SEC_Global_SEC0_END		(*(RwReg *)0x2000400CUL)

#else
#define REG_SEC_Global_SEC0_END		(0x2000400C) /**< \brief (SEC Global) SEC0 Global End Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SEC_Global_SEC0_GCTL_Type		SEC0_GCTL;		/**< \brief SEC0 Global Control Register */
	__IO SEC_Global_SEC0_GSTAT_Type		SEC0_GSTAT;		/**< \brief SEC0 Global Status Register */
	__IO SEC_Global_SEC0_RAISE_Type		SEC0_RAISE;		/**< \brief SEC0 Global Raise Register */
	__IO SEC_Global_SEC0_END_Type		SEC0_END;		/**< \brief SEC0 Global End Register */
} Sec_Global;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL0 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL0_Type;
#define REG_SSI_SEC0_SCTL0		(*(RwReg *)0x20004800UL)

#else
#define REG_SSI_SEC0_SCTL0		(0x20004800) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL1 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL1_Type;
#define REG_SSI_SEC0_SCTL1		(*(RwReg *)0x20004808UL)

#else
#define REG_SSI_SEC0_SCTL1		(0x20004808) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL2 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL2_Type;
#define REG_SSI_SEC0_SCTL2		(*(RwReg *)0x20004810UL)

#else
#define REG_SSI_SEC0_SCTL2		(0x20004810) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL3 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL3_Type;
#define REG_SSI_SEC0_SCTL3		(*(RwReg *)0x20004818UL)

#else
#define REG_SSI_SEC0_SCTL3		(0x20004818) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL4 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL4_Type;
#define REG_SSI_SEC0_SCTL4		(*(RwReg *)0x20004820UL)

#else
#define REG_SSI_SEC0_SCTL4		(0x20004820) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL5 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL5_Type;
#define REG_SSI_SEC0_SCTL5		(*(RwReg *)0x20004828UL)

#else
#define REG_SSI_SEC0_SCTL5		(0x20004828) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL6 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL6_Type;
#define REG_SSI_SEC0_SCTL6		(*(RwReg *)0x20004830UL)

#else
#define REG_SSI_SEC0_SCTL6		(0x20004830) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL7 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL7_Type;
#define REG_SSI_SEC0_SCTL7		(*(RwReg *)0x20004838UL)

#else
#define REG_SSI_SEC0_SCTL7		(0x20004838) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL8 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL8_Type;
#define REG_SSI_SEC0_SCTL8		(*(RwReg *)0x20004840UL)

#else
#define REG_SSI_SEC0_SCTL8		(0x20004840) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL9 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL9_Type;
#define REG_SSI_SEC0_SCTL9		(*(RwReg *)0x20004848UL)

#else
#define REG_SSI_SEC0_SCTL9		(0x20004848) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL10 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL10_Type;
#define REG_SSI_SEC0_SCTL10		(*(RwReg *)0x20004850UL)

#else
#define REG_SSI_SEC0_SCTL10		(0x20004850) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL11 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL11_Type;
#define REG_SSI_SEC0_SCTL11		(*(RwReg *)0x20004858UL)

#else
#define REG_SSI_SEC0_SCTL11		(0x20004858) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL12 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL12_Type;
#define REG_SSI_SEC0_SCTL12		(*(RwReg *)0x20004860UL)

#else
#define REG_SSI_SEC0_SCTL12		(0x20004860) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL13 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL13_Type;
#define REG_SSI_SEC0_SCTL13		(*(RwReg *)0x20004868UL)

#else
#define REG_SSI_SEC0_SCTL13		(0x20004868) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL14 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL14_Type;
#define REG_SSI_SEC0_SCTL14		(*(RwReg *)0x20004870UL)

#else
#define REG_SSI_SEC0_SCTL14		(0x20004870) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL15 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL15_Type;
#define REG_SSI_SEC0_SCTL15		(*(RwReg *)0x20004878UL)

#else
#define REG_SSI_SEC0_SCTL15		(0x20004878) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL16 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL16_Type;
#define REG_SSI_SEC0_SCTL16		(*(RwReg *)0x20004880UL)

#else
#define REG_SSI_SEC0_SCTL16		(0x20004880) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL17 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL17_Type;
#define REG_SSI_SEC0_SCTL17		(*(RwReg *)0x20004888UL)

#else
#define REG_SSI_SEC0_SCTL17		(0x20004888) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL18 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL18_Type;
#define REG_SSI_SEC0_SCTL18		(*(RwReg *)0x20004890UL)

#else
#define REG_SSI_SEC0_SCTL18		(0x20004890) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL19 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL19_Type;
#define REG_SSI_SEC0_SCTL19		(*(RwReg *)0x20004898UL)

#else
#define REG_SSI_SEC0_SCTL19		(0x20004898) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL20 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL20_Type;
#define REG_SSI_SEC0_SCTL20		(*(RwReg *)0x200048A0UL)

#else
#define REG_SSI_SEC0_SCTL20		(0x200048A0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL21 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL21_Type;
#define REG_SSI_SEC0_SCTL21		(*(RwReg *)0x200048A8UL)

#else
#define REG_SSI_SEC0_SCTL21		(0x200048A8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL22 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL22_Type;
#define REG_SSI_SEC0_SCTL22		(*(RwReg *)0x200048B0UL)

#else
#define REG_SSI_SEC0_SCTL22		(0x200048B0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL23 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL23_Type;
#define REG_SSI_SEC0_SCTL23		(*(RwReg *)0x200048B8UL)

#else
#define REG_SSI_SEC0_SCTL23		(0x200048B8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL24 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL24_Type;
#define REG_SSI_SEC0_SCTL24		(*(RwReg *)0x200048C0UL)

#else
#define REG_SSI_SEC0_SCTL24		(0x200048C0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL25 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL25_Type;
#define REG_SSI_SEC0_SCTL25		(*(RwReg *)0x200048C8UL)

#else
#define REG_SSI_SEC0_SCTL25		(0x200048C8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL26 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL26_Type;
#define REG_SSI_SEC0_SCTL26		(*(RwReg *)0x200048D0UL)

#else
#define REG_SSI_SEC0_SCTL26		(0x200048D0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL27 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL27_Type;
#define REG_SSI_SEC0_SCTL27		(*(RwReg *)0x200048D8UL)

#else
#define REG_SSI_SEC0_SCTL27		(0x200048D8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL28 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL28_Type;
#define REG_SSI_SEC0_SCTL28		(*(RwReg *)0x200048E0UL)

#else
#define REG_SSI_SEC0_SCTL28		(0x200048E0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL29 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL29_Type;
#define REG_SSI_SEC0_SCTL29		(*(RwReg *)0x200048E8UL)

#else
#define REG_SSI_SEC0_SCTL29		(0x200048E8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL30 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL30_Type;
#define REG_SSI_SEC0_SCTL30		(*(RwReg *)0x200048F0UL)

#else
#define REG_SSI_SEC0_SCTL30		(0x200048F0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL31 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL31_Type;
#define REG_SSI_SEC0_SCTL31		(*(RwReg *)0x200048F8UL)

#else
#define REG_SSI_SEC0_SCTL31		(0x200048F8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL32 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL32_Type;
#define REG_SSI_SEC0_SCTL32		(*(RwReg *)0x20004900UL)

#else
#define REG_SSI_SEC0_SCTL32		(0x20004900) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL33 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL33_Type;
#define REG_SSI_SEC0_SCTL33		(*(RwReg *)0x20004908UL)

#else
#define REG_SSI_SEC0_SCTL33		(0x20004908) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL34 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL34_Type;
#define REG_SSI_SEC0_SCTL34		(*(RwReg *)0x20004910UL)

#else
#define REG_SSI_SEC0_SCTL34		(0x20004910) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL35 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL35_Type;
#define REG_SSI_SEC0_SCTL35		(*(RwReg *)0x20004918UL)

#else
#define REG_SSI_SEC0_SCTL35		(0x20004918) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL36 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL36_Type;
#define REG_SSI_SEC0_SCTL36		(*(RwReg *)0x20004920UL)

#else
#define REG_SSI_SEC0_SCTL36		(0x20004920) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL37 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL37_Type;
#define REG_SSI_SEC0_SCTL37		(*(RwReg *)0x20004928UL)

#else
#define REG_SSI_SEC0_SCTL37		(0x20004928) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL38 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL38_Type;
#define REG_SSI_SEC0_SCTL38		(*(RwReg *)0x20004930UL)

#else
#define REG_SSI_SEC0_SCTL38		(0x20004930) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL39 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL39_Type;
#define REG_SSI_SEC0_SCTL39		(*(RwReg *)0x20004938UL)

#else
#define REG_SSI_SEC0_SCTL39		(0x20004938) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL40 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL40_Type;
#define REG_SSI_SEC0_SCTL40		(*(RwReg *)0x20004940UL)

#else
#define REG_SSI_SEC0_SCTL40		(0x20004940) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL41 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL41_Type;
#define REG_SSI_SEC0_SCTL41		(*(RwReg *)0x20004948UL)

#else
#define REG_SSI_SEC0_SCTL41		(0x20004948) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL42 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL42_Type;
#define REG_SSI_SEC0_SCTL42		(*(RwReg *)0x20004950UL)

#else
#define REG_SSI_SEC0_SCTL42		(0x20004950) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL43 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL43_Type;
#define REG_SSI_SEC0_SCTL43		(*(RwReg *)0x20004958UL)

#else
#define REG_SSI_SEC0_SCTL43		(0x20004958) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL44 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL44_Type;
#define REG_SSI_SEC0_SCTL44		(*(RwReg *)0x20004960UL)

#else
#define REG_SSI_SEC0_SCTL44		(0x20004960) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL45 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL45_Type;
#define REG_SSI_SEC0_SCTL45		(*(RwReg *)0x20004968UL)

#else
#define REG_SSI_SEC0_SCTL45		(0x20004968) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL46 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL46_Type;
#define REG_SSI_SEC0_SCTL46		(*(RwReg *)0x20004970UL)

#else
#define REG_SSI_SEC0_SCTL46		(0x20004970) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL47 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL47_Type;
#define REG_SSI_SEC0_SCTL47		(*(RwReg *)0x20004978UL)

#else
#define REG_SSI_SEC0_SCTL47		(0x20004978) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL48 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL48_Type;
#define REG_SSI_SEC0_SCTL48		(*(RwReg *)0x20004980UL)

#else
#define REG_SSI_SEC0_SCTL48		(0x20004980) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL49 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL49_Type;
#define REG_SSI_SEC0_SCTL49		(*(RwReg *)0x20004988UL)

#else
#define REG_SSI_SEC0_SCTL49		(0x20004988) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL50 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL50_Type;
#define REG_SSI_SEC0_SCTL50		(*(RwReg *)0x20004990UL)

#else
#define REG_SSI_SEC0_SCTL50		(0x20004990) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL51 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL51_Type;
#define REG_SSI_SEC0_SCTL51		(*(RwReg *)0x20004998UL)

#else
#define REG_SSI_SEC0_SCTL51		(0x20004998) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL52 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL52_Type;
#define REG_SSI_SEC0_SCTL52		(*(RwReg *)0x200049A0UL)

#else
#define REG_SSI_SEC0_SCTL52		(0x200049A0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL53 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL53_Type;
#define REG_SSI_SEC0_SCTL53		(*(RwReg *)0x200049A8UL)

#else
#define REG_SSI_SEC0_SCTL53		(0x200049A8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL54 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL54_Type;
#define REG_SSI_SEC0_SCTL54		(*(RwReg *)0x200049B0UL)

#else
#define REG_SSI_SEC0_SCTL54		(0x200049B0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL55 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL55_Type;
#define REG_SSI_SEC0_SCTL55		(*(RwReg *)0x200049B8UL)

#else
#define REG_SSI_SEC0_SCTL55		(0x200049B8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL56 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL56_Type;
#define REG_SSI_SEC0_SCTL56		(*(RwReg *)0x200049C0UL)

#else
#define REG_SSI_SEC0_SCTL56		(0x200049C0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL57 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL57_Type;
#define REG_SSI_SEC0_SCTL57		(*(RwReg *)0x200049C8UL)

#else
#define REG_SSI_SEC0_SCTL57		(0x200049C8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL58 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL58_Type;
#define REG_SSI_SEC0_SCTL58		(*(RwReg *)0x200049D0UL)

#else
#define REG_SSI_SEC0_SCTL58		(0x200049D0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL59 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL59_Type;
#define REG_SSI_SEC0_SCTL59		(*(RwReg *)0x200049D8UL)

#else
#define REG_SSI_SEC0_SCTL59		(0x200049D8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL60 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL60_Type;
#define REG_SSI_SEC0_SCTL60		(*(RwReg *)0x200049E0UL)

#else
#define REG_SSI_SEC0_SCTL60		(0x200049E0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL61 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL61_Type;
#define REG_SSI_SEC0_SCTL61		(*(RwReg *)0x200049E8UL)

#else
#define REG_SSI_SEC0_SCTL61		(0x200049E8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL62 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL62_Type;
#define REG_SSI_SEC0_SCTL62		(*(RwReg *)0x200049F0UL)

#else
#define REG_SSI_SEC0_SCTL62		(0x200049F0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL63 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL63_Type;
#define REG_SSI_SEC0_SCTL63		(*(RwReg *)0x200049F8UL)

#else
#define REG_SSI_SEC0_SCTL63		(0x200049F8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL64 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL64_Type;
#define REG_SSI_SEC0_SCTL64		(*(RwReg *)0x20004A00UL)

#else
#define REG_SSI_SEC0_SCTL64		(0x20004A00) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL65 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL65_Type;
#define REG_SSI_SEC0_SCTL65		(*(RwReg *)0x20004A08UL)

#else
#define REG_SSI_SEC0_SCTL65		(0x20004A08) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL66 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL66_Type;
#define REG_SSI_SEC0_SCTL66		(*(RwReg *)0x20004A10UL)

#else
#define REG_SSI_SEC0_SCTL66		(0x20004A10) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL67 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL67_Type;
#define REG_SSI_SEC0_SCTL67		(*(RwReg *)0x20004A18UL)

#else
#define REG_SSI_SEC0_SCTL67		(0x20004A18) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL68 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL68_Type;
#define REG_SSI_SEC0_SCTL68		(*(RwReg *)0x20004A20UL)

#else
#define REG_SSI_SEC0_SCTL68		(0x20004A20) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL69 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL69_Type;
#define REG_SSI_SEC0_SCTL69		(*(RwReg *)0x20004A28UL)

#else
#define REG_SSI_SEC0_SCTL69		(0x20004A28) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL70 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL70_Type;
#define REG_SSI_SEC0_SCTL70		(*(RwReg *)0x20004A30UL)

#else
#define REG_SSI_SEC0_SCTL70		(0x20004A30) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL71 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL71_Type;
#define REG_SSI_SEC0_SCTL71		(*(RwReg *)0x20004A38UL)

#else
#define REG_SSI_SEC0_SCTL71		(0x20004A38) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL72 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL72_Type;
#define REG_SSI_SEC0_SCTL72		(*(RwReg *)0x20004A40UL)

#else
#define REG_SSI_SEC0_SCTL72		(0x20004A40) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL73 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL73_Type;
#define REG_SSI_SEC0_SCTL73		(*(RwReg *)0x20004A48UL)

#else
#define REG_SSI_SEC0_SCTL73		(0x20004A48) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL74 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL74_Type;
#define REG_SSI_SEC0_SCTL74		(*(RwReg *)0x20004A50UL)

#else
#define REG_SSI_SEC0_SCTL74		(0x20004A50) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL75 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL75_Type;
#define REG_SSI_SEC0_SCTL75		(*(RwReg *)0x20004A58UL)

#else
#define REG_SSI_SEC0_SCTL75		(0x20004A58) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL76 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL76_Type;
#define REG_SSI_SEC0_SCTL76		(*(RwReg *)0x20004A60UL)

#else
#define REG_SSI_SEC0_SCTL76		(0x20004A60) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL77 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL77_Type;
#define REG_SSI_SEC0_SCTL77		(*(RwReg *)0x20004A68UL)

#else
#define REG_SSI_SEC0_SCTL77		(0x20004A68) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL78 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL78_Type;
#define REG_SSI_SEC0_SCTL78		(*(RwReg *)0x20004A70UL)

#else
#define REG_SSI_SEC0_SCTL78		(0x20004A70) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL79 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL79_Type;
#define REG_SSI_SEC0_SCTL79		(*(RwReg *)0x20004A78UL)

#else
#define REG_SSI_SEC0_SCTL79		(0x20004A78) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL80 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL80_Type;
#define REG_SSI_SEC0_SCTL80		(*(RwReg *)0x20004A80UL)

#else
#define REG_SSI_SEC0_SCTL80		(0x20004A80) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL81 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL81_Type;
#define REG_SSI_SEC0_SCTL81		(*(RwReg *)0x20004A88UL)

#else
#define REG_SSI_SEC0_SCTL81		(0x20004A88) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL82 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL82_Type;
#define REG_SSI_SEC0_SCTL82		(*(RwReg *)0x20004A90UL)

#else
#define REG_SSI_SEC0_SCTL82		(0x20004A90) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL83 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL83_Type;
#define REG_SSI_SEC0_SCTL83		(*(RwReg *)0x20004A98UL)

#else
#define REG_SSI_SEC0_SCTL83		(0x20004A98) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL84 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL84_Type;
#define REG_SSI_SEC0_SCTL84		(*(RwReg *)0x20004AA0UL)

#else
#define REG_SSI_SEC0_SCTL84		(0x20004AA0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL85 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL85_Type;
#define REG_SSI_SEC0_SCTL85		(*(RwReg *)0x20004AA8UL)

#else
#define REG_SSI_SEC0_SCTL85		(0x20004AA8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL86 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL86_Type;
#define REG_SSI_SEC0_SCTL86		(*(RwReg *)0x20004AB0UL)

#else
#define REG_SSI_SEC0_SCTL86		(0x20004AB0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL87 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL87_Type;
#define REG_SSI_SEC0_SCTL87		(*(RwReg *)0x20004AB8UL)

#else
#define REG_SSI_SEC0_SCTL87		(0x20004AB8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL88 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL88_Type;
#define REG_SSI_SEC0_SCTL88		(*(RwReg *)0x20004AC0UL)

#else
#define REG_SSI_SEC0_SCTL88		(0x20004AC0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL89 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL89_Type;
#define REG_SSI_SEC0_SCTL89		(*(RwReg *)0x20004AC8UL)

#else
#define REG_SSI_SEC0_SCTL89		(0x20004AC8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL90 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL90_Type;
#define REG_SSI_SEC0_SCTL90		(*(RwReg *)0x20004AD0UL)

#else
#define REG_SSI_SEC0_SCTL90		(0x20004AD0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL91 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL91_Type;
#define REG_SSI_SEC0_SCTL91		(*(RwReg *)0x20004AD8UL)

#else
#define REG_SSI_SEC0_SCTL91		(0x20004AD8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL92 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL92_Type;
#define REG_SSI_SEC0_SCTL92		(*(RwReg *)0x20004AE0UL)

#else
#define REG_SSI_SEC0_SCTL92		(0x20004AE0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL93 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL93_Type;
#define REG_SSI_SEC0_SCTL93		(*(RwReg *)0x20004AE8UL)

#else
#define REG_SSI_SEC0_SCTL93		(0x20004AE8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL94 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL94_Type;
#define REG_SSI_SEC0_SCTL94		(*(RwReg *)0x20004AF0UL)

#else
#define REG_SSI_SEC0_SCTL94		(0x20004AF0) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL95 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL95_Type;
#define REG_SSI_SEC0_SCTL95		(*(RwReg *)0x20004AF8UL)

#else
#define REG_SSI_SEC0_SCTL95		(0x20004AF8) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL96 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL96_Type;
#define REG_SSI_SEC0_SCTL96		(*(RwReg *)0x20004B00UL)

#else
#define REG_SSI_SEC0_SCTL96		(0x20004B00) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL97 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL97_Type;
#define REG_SSI_SEC0_SCTL97		(*(RwReg *)0x20004B08UL)

#else
#define REG_SSI_SEC0_SCTL97		(0x20004B08) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL98 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL98_Type;
#define REG_SSI_SEC0_SCTL98		(*(RwReg *)0x20004B10UL)

#else
#define REG_SSI_SEC0_SCTL98		(0x20004B10) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL99 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL99_Type;
#define REG_SSI_SEC0_SCTL99		(*(RwReg *)0x20004B18UL)

#else
#define REG_SSI_SEC0_SCTL99		(0x20004B18) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL100 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL100_Type;
#define REG_SSI_SEC0_SCTL100		(*(RwReg *)0x20004B20UL)

#else
#define REG_SSI_SEC0_SCTL100		(0x20004B20) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL101 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL101_Type;
#define REG_SSI_SEC0_SCTL101		(*(RwReg *)0x20004B28UL)

#else
#define REG_SSI_SEC0_SCTL101		(0x20004B28) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL102 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL102_Type;
#define REG_SSI_SEC0_SCTL102		(*(RwReg *)0x20004B30UL)

#else
#define REG_SSI_SEC0_SCTL102		(0x20004B30) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL103 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL103_Type;
#define REG_SSI_SEC0_SCTL103		(*(RwReg *)0x20004B38UL)

#else
#define REG_SSI_SEC0_SCTL103		(0x20004B38) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL104 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL104_Type;
#define REG_SSI_SEC0_SCTL104		(*(RwReg *)0x20004B40UL)

#else
#define REG_SSI_SEC0_SCTL104		(0x20004B40) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SCTL105 : (32) SEC0 Source Control Register n ----- */
typedef union {
	struct {
		uint32_t IEN:1;			/*!< bit	0	Interrupt Enable	*/
		uint32_t FEN:1;			/*!< bit	1	Fault Enable	*/
		uint32_t SEN:1;			/*!< bit	2	Source (signal) Enable	*/
		uint32_t ES:1;			/*!< bit	3	Edge Select	*/
		uint32_t ERREN:1;			/*!< bit	4	Error Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t PRIO:8;			/*!< bit	8..15	Priority Level Select	*/
		uint32_t GRP:4;			/*!< bit	16..19	Group Select	*/
		uint32_t :4;			/*!< bit	20..23	Reserved	*/
		uint32_t CTG:4;			/*!< bit	24..27	Core Target Select	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SCTL105_Type;
#define REG_SSI_SEC0_SCTL105		(*(RwReg *)0x20004B48UL)

#else
#define REG_SSI_SEC0_SCTL105		(0x20004B48) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT0 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT0_Type;
#define REG_SSI_SEC0_SSTAT0		(*(RwReg *)0x20004804UL)

#else
#define REG_SSI_SEC0_SSTAT0		(0x20004804) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT1 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT1_Type;
#define REG_SSI_SEC0_SSTAT1		(*(RwReg *)0x2000480CUL)

#else
#define REG_SSI_SEC0_SSTAT1		(0x2000480C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT2 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT2_Type;
#define REG_SSI_SEC0_SSTAT2		(*(RwReg *)0x20004814UL)

#else
#define REG_SSI_SEC0_SSTAT2		(0x20004814) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT3 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT3_Type;
#define REG_SSI_SEC0_SSTAT3		(*(RwReg *)0x2000481CUL)

#else
#define REG_SSI_SEC0_SSTAT3		(0x2000481C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT4 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT4_Type;
#define REG_SSI_SEC0_SSTAT4		(*(RwReg *)0x20004824UL)

#else
#define REG_SSI_SEC0_SSTAT4		(0x20004824) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT5 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT5_Type;
#define REG_SSI_SEC0_SSTAT5		(*(RwReg *)0x2000482CUL)

#else
#define REG_SSI_SEC0_SSTAT5		(0x2000482C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT6 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT6_Type;
#define REG_SSI_SEC0_SSTAT6		(*(RwReg *)0x20004834UL)

#else
#define REG_SSI_SEC0_SSTAT6		(0x20004834) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT7 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT7_Type;
#define REG_SSI_SEC0_SSTAT7		(*(RwReg *)0x2000483CUL)

#else
#define REG_SSI_SEC0_SSTAT7		(0x2000483C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT8 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT8_Type;
#define REG_SSI_SEC0_SSTAT8		(*(RwReg *)0x20004844UL)

#else
#define REG_SSI_SEC0_SSTAT8		(0x20004844) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT9 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT9_Type;
#define REG_SSI_SEC0_SSTAT9		(*(RwReg *)0x2000484CUL)

#else
#define REG_SSI_SEC0_SSTAT9		(0x2000484C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT10 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT10_Type;
#define REG_SSI_SEC0_SSTAT10		(*(RwReg *)0x20004854UL)

#else
#define REG_SSI_SEC0_SSTAT10		(0x20004854) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT11 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT11_Type;
#define REG_SSI_SEC0_SSTAT11		(*(RwReg *)0x2000485CUL)

#else
#define REG_SSI_SEC0_SSTAT11		(0x2000485C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT12 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT12_Type;
#define REG_SSI_SEC0_SSTAT12		(*(RwReg *)0x20004864UL)

#else
#define REG_SSI_SEC0_SSTAT12		(0x20004864) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT13 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT13_Type;
#define REG_SSI_SEC0_SSTAT13		(*(RwReg *)0x2000486CUL)

#else
#define REG_SSI_SEC0_SSTAT13		(0x2000486C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT14 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT14_Type;
#define REG_SSI_SEC0_SSTAT14		(*(RwReg *)0x20004874UL)

#else
#define REG_SSI_SEC0_SSTAT14		(0x20004874) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT15 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT15_Type;
#define REG_SSI_SEC0_SSTAT15		(*(RwReg *)0x2000487CUL)

#else
#define REG_SSI_SEC0_SSTAT15		(0x2000487C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT16 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT16_Type;
#define REG_SSI_SEC0_SSTAT16		(*(RwReg *)0x20004884UL)

#else
#define REG_SSI_SEC0_SSTAT16		(0x20004884) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT17 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT17_Type;
#define REG_SSI_SEC0_SSTAT17		(*(RwReg *)0x2000488CUL)

#else
#define REG_SSI_SEC0_SSTAT17		(0x2000488C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT18 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT18_Type;
#define REG_SSI_SEC0_SSTAT18		(*(RwReg *)0x20004894UL)

#else
#define REG_SSI_SEC0_SSTAT18		(0x20004894) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT19 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT19_Type;
#define REG_SSI_SEC0_SSTAT19		(*(RwReg *)0x2000489CUL)

#else
#define REG_SSI_SEC0_SSTAT19		(0x2000489C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT20 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT20_Type;
#define REG_SSI_SEC0_SSTAT20		(*(RwReg *)0x200048A4UL)

#else
#define REG_SSI_SEC0_SSTAT20		(0x200048A4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT21 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT21_Type;
#define REG_SSI_SEC0_SSTAT21		(*(RwReg *)0x200048ACUL)

#else
#define REG_SSI_SEC0_SSTAT21		(0x200048AC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT22 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT22_Type;
#define REG_SSI_SEC0_SSTAT22		(*(RwReg *)0x200048B4UL)

#else
#define REG_SSI_SEC0_SSTAT22		(0x200048B4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT23 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT23_Type;
#define REG_SSI_SEC0_SSTAT23		(*(RwReg *)0x200048BCUL)

#else
#define REG_SSI_SEC0_SSTAT23		(0x200048BC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT24 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT24_Type;
#define REG_SSI_SEC0_SSTAT24		(*(RwReg *)0x200048C4UL)

#else
#define REG_SSI_SEC0_SSTAT24		(0x200048C4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT25 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT25_Type;
#define REG_SSI_SEC0_SSTAT25		(*(RwReg *)0x200048CCUL)

#else
#define REG_SSI_SEC0_SSTAT25		(0x200048CC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT26 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT26_Type;
#define REG_SSI_SEC0_SSTAT26		(*(RwReg *)0x200048D4UL)

#else
#define REG_SSI_SEC0_SSTAT26		(0x200048D4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT27 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT27_Type;
#define REG_SSI_SEC0_SSTAT27		(*(RwReg *)0x200048DCUL)

#else
#define REG_SSI_SEC0_SSTAT27		(0x200048DC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT28 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT28_Type;
#define REG_SSI_SEC0_SSTAT28		(*(RwReg *)0x200048E4UL)

#else
#define REG_SSI_SEC0_SSTAT28		(0x200048E4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT29 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT29_Type;
#define REG_SSI_SEC0_SSTAT29		(*(RwReg *)0x200048ECUL)

#else
#define REG_SSI_SEC0_SSTAT29		(0x200048EC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT30 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT30_Type;
#define REG_SSI_SEC0_SSTAT30		(*(RwReg *)0x200048F4UL)

#else
#define REG_SSI_SEC0_SSTAT30		(0x200048F4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT31 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT31_Type;
#define REG_SSI_SEC0_SSTAT31		(*(RwReg *)0x200048FCUL)

#else
#define REG_SSI_SEC0_SSTAT31		(0x200048FC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT32 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT32_Type;
#define REG_SSI_SEC0_SSTAT32		(*(RwReg *)0x20004904UL)

#else
#define REG_SSI_SEC0_SSTAT32		(0x20004904) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT33 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT33_Type;
#define REG_SSI_SEC0_SSTAT33		(*(RwReg *)0x2000490CUL)

#else
#define REG_SSI_SEC0_SSTAT33		(0x2000490C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT34 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT34_Type;
#define REG_SSI_SEC0_SSTAT34		(*(RwReg *)0x20004914UL)

#else
#define REG_SSI_SEC0_SSTAT34		(0x20004914) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT35 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT35_Type;
#define REG_SSI_SEC0_SSTAT35		(*(RwReg *)0x2000491CUL)

#else
#define REG_SSI_SEC0_SSTAT35		(0x2000491C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT36 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT36_Type;
#define REG_SSI_SEC0_SSTAT36		(*(RwReg *)0x20004924UL)

#else
#define REG_SSI_SEC0_SSTAT36		(0x20004924) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT37 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT37_Type;
#define REG_SSI_SEC0_SSTAT37		(*(RwReg *)0x2000492CUL)

#else
#define REG_SSI_SEC0_SSTAT37		(0x2000492C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT38 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT38_Type;
#define REG_SSI_SEC0_SSTAT38		(*(RwReg *)0x20004934UL)

#else
#define REG_SSI_SEC0_SSTAT38		(0x20004934) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT39 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT39_Type;
#define REG_SSI_SEC0_SSTAT39		(*(RwReg *)0x2000493CUL)

#else
#define REG_SSI_SEC0_SSTAT39		(0x2000493C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT40 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT40_Type;
#define REG_SSI_SEC0_SSTAT40		(*(RwReg *)0x20004944UL)

#else
#define REG_SSI_SEC0_SSTAT40		(0x20004944) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT41 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT41_Type;
#define REG_SSI_SEC0_SSTAT41		(*(RwReg *)0x2000494CUL)

#else
#define REG_SSI_SEC0_SSTAT41		(0x2000494C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT42 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT42_Type;
#define REG_SSI_SEC0_SSTAT42		(*(RwReg *)0x20004954UL)

#else
#define REG_SSI_SEC0_SSTAT42		(0x20004954) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT43 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT43_Type;
#define REG_SSI_SEC0_SSTAT43		(*(RwReg *)0x2000495CUL)

#else
#define REG_SSI_SEC0_SSTAT43		(0x2000495C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT44 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT44_Type;
#define REG_SSI_SEC0_SSTAT44		(*(RwReg *)0x20004964UL)

#else
#define REG_SSI_SEC0_SSTAT44		(0x20004964) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT45 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT45_Type;
#define REG_SSI_SEC0_SSTAT45		(*(RwReg *)0x2000496CUL)

#else
#define REG_SSI_SEC0_SSTAT45		(0x2000496C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT46 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT46_Type;
#define REG_SSI_SEC0_SSTAT46		(*(RwReg *)0x20004974UL)

#else
#define REG_SSI_SEC0_SSTAT46		(0x20004974) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT47 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT47_Type;
#define REG_SSI_SEC0_SSTAT47		(*(RwReg *)0x2000497CUL)

#else
#define REG_SSI_SEC0_SSTAT47		(0x2000497C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT48 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT48_Type;
#define REG_SSI_SEC0_SSTAT48		(*(RwReg *)0x20004984UL)

#else
#define REG_SSI_SEC0_SSTAT48		(0x20004984) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT49 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT49_Type;
#define REG_SSI_SEC0_SSTAT49		(*(RwReg *)0x2000498CUL)

#else
#define REG_SSI_SEC0_SSTAT49		(0x2000498C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT50 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT50_Type;
#define REG_SSI_SEC0_SSTAT50		(*(RwReg *)0x20004994UL)

#else
#define REG_SSI_SEC0_SSTAT50		(0x20004994) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT51 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT51_Type;
#define REG_SSI_SEC0_SSTAT51		(*(RwReg *)0x2000499CUL)

#else
#define REG_SSI_SEC0_SSTAT51		(0x2000499C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT52 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT52_Type;
#define REG_SSI_SEC0_SSTAT52		(*(RwReg *)0x200049A4UL)

#else
#define REG_SSI_SEC0_SSTAT52		(0x200049A4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT53 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT53_Type;
#define REG_SSI_SEC0_SSTAT53		(*(RwReg *)0x200049ACUL)

#else
#define REG_SSI_SEC0_SSTAT53		(0x200049AC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT54 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT54_Type;
#define REG_SSI_SEC0_SSTAT54		(*(RwReg *)0x200049B4UL)

#else
#define REG_SSI_SEC0_SSTAT54		(0x200049B4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT55 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT55_Type;
#define REG_SSI_SEC0_SSTAT55		(*(RwReg *)0x200049BCUL)

#else
#define REG_SSI_SEC0_SSTAT55		(0x200049BC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT56 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT56_Type;
#define REG_SSI_SEC0_SSTAT56		(*(RwReg *)0x200049C4UL)

#else
#define REG_SSI_SEC0_SSTAT56		(0x200049C4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT57 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT57_Type;
#define REG_SSI_SEC0_SSTAT57		(*(RwReg *)0x200049CCUL)

#else
#define REG_SSI_SEC0_SSTAT57		(0x200049CC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT58 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT58_Type;
#define REG_SSI_SEC0_SSTAT58		(*(RwReg *)0x200049D4UL)

#else
#define REG_SSI_SEC0_SSTAT58		(0x200049D4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT59 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT59_Type;
#define REG_SSI_SEC0_SSTAT59		(*(RwReg *)0x200049DCUL)

#else
#define REG_SSI_SEC0_SSTAT59		(0x200049DC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT60 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT60_Type;
#define REG_SSI_SEC0_SSTAT60		(*(RwReg *)0x200049E4UL)

#else
#define REG_SSI_SEC0_SSTAT60		(0x200049E4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT61 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT61_Type;
#define REG_SSI_SEC0_SSTAT61		(*(RwReg *)0x200049ECUL)

#else
#define REG_SSI_SEC0_SSTAT61		(0x200049EC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT62 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT62_Type;
#define REG_SSI_SEC0_SSTAT62		(*(RwReg *)0x200049F4UL)

#else
#define REG_SSI_SEC0_SSTAT62		(0x200049F4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT63 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT63_Type;
#define REG_SSI_SEC0_SSTAT63		(*(RwReg *)0x200049FCUL)

#else
#define REG_SSI_SEC0_SSTAT63		(0x200049FC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT64 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT64_Type;
#define REG_SSI_SEC0_SSTAT64		(*(RwReg *)0x20004A04UL)

#else
#define REG_SSI_SEC0_SSTAT64		(0x20004A04) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT65 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT65_Type;
#define REG_SSI_SEC0_SSTAT65		(*(RwReg *)0x20004A0CUL)

#else
#define REG_SSI_SEC0_SSTAT65		(0x20004A0C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT66 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT66_Type;
#define REG_SSI_SEC0_SSTAT66		(*(RwReg *)0x20004A14UL)

#else
#define REG_SSI_SEC0_SSTAT66		(0x20004A14) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT67 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT67_Type;
#define REG_SSI_SEC0_SSTAT67		(*(RwReg *)0x20004A1CUL)

#else
#define REG_SSI_SEC0_SSTAT67		(0x20004A1C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT68 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT68_Type;
#define REG_SSI_SEC0_SSTAT68		(*(RwReg *)0x20004A24UL)

#else
#define REG_SSI_SEC0_SSTAT68		(0x20004A24) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT69 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT69_Type;
#define REG_SSI_SEC0_SSTAT69		(*(RwReg *)0x20004A2CUL)

#else
#define REG_SSI_SEC0_SSTAT69		(0x20004A2C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT70 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT70_Type;
#define REG_SSI_SEC0_SSTAT70		(*(RwReg *)0x20004A34UL)

#else
#define REG_SSI_SEC0_SSTAT70		(0x20004A34) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT71 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT71_Type;
#define REG_SSI_SEC0_SSTAT71		(*(RwReg *)0x20004A3CUL)

#else
#define REG_SSI_SEC0_SSTAT71		(0x20004A3C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT72 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT72_Type;
#define REG_SSI_SEC0_SSTAT72		(*(RwReg *)0x20004A44UL)

#else
#define REG_SSI_SEC0_SSTAT72		(0x20004A44) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT73 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT73_Type;
#define REG_SSI_SEC0_SSTAT73		(*(RwReg *)0x20004A4CUL)

#else
#define REG_SSI_SEC0_SSTAT73		(0x20004A4C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT74 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT74_Type;
#define REG_SSI_SEC0_SSTAT74		(*(RwReg *)0x20004A54UL)

#else
#define REG_SSI_SEC0_SSTAT74		(0x20004A54) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT75 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT75_Type;
#define REG_SSI_SEC0_SSTAT75		(*(RwReg *)0x20004A5CUL)

#else
#define REG_SSI_SEC0_SSTAT75		(0x20004A5C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT76 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT76_Type;
#define REG_SSI_SEC0_SSTAT76		(*(RwReg *)0x20004A64UL)

#else
#define REG_SSI_SEC0_SSTAT76		(0x20004A64) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT77 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT77_Type;
#define REG_SSI_SEC0_SSTAT77		(*(RwReg *)0x20004A6CUL)

#else
#define REG_SSI_SEC0_SSTAT77		(0x20004A6C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT78 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT78_Type;
#define REG_SSI_SEC0_SSTAT78		(*(RwReg *)0x20004A74UL)

#else
#define REG_SSI_SEC0_SSTAT78		(0x20004A74) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT79 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT79_Type;
#define REG_SSI_SEC0_SSTAT79		(*(RwReg *)0x20004A7CUL)

#else
#define REG_SSI_SEC0_SSTAT79		(0x20004A7C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT80 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT80_Type;
#define REG_SSI_SEC0_SSTAT80		(*(RwReg *)0x20004A84UL)

#else
#define REG_SSI_SEC0_SSTAT80		(0x20004A84) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT81 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT81_Type;
#define REG_SSI_SEC0_SSTAT81		(*(RwReg *)0x20004A8CUL)

#else
#define REG_SSI_SEC0_SSTAT81		(0x20004A8C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT82 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT82_Type;
#define REG_SSI_SEC0_SSTAT82		(*(RwReg *)0x20004A94UL)

#else
#define REG_SSI_SEC0_SSTAT82		(0x20004A94) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT83 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT83_Type;
#define REG_SSI_SEC0_SSTAT83		(*(RwReg *)0x20004A9CUL)

#else
#define REG_SSI_SEC0_SSTAT83		(0x20004A9C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT84 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT84_Type;
#define REG_SSI_SEC0_SSTAT84		(*(RwReg *)0x20004AA4UL)

#else
#define REG_SSI_SEC0_SSTAT84		(0x20004AA4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT85 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT85_Type;
#define REG_SSI_SEC0_SSTAT85		(*(RwReg *)0x20004AACUL)

#else
#define REG_SSI_SEC0_SSTAT85		(0x20004AAC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT86 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT86_Type;
#define REG_SSI_SEC0_SSTAT86		(*(RwReg *)0x20004AB4UL)

#else
#define REG_SSI_SEC0_SSTAT86		(0x20004AB4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT87 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT87_Type;
#define REG_SSI_SEC0_SSTAT87		(*(RwReg *)0x20004ABCUL)

#else
#define REG_SSI_SEC0_SSTAT87		(0x20004ABC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT88 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT88_Type;
#define REG_SSI_SEC0_SSTAT88		(*(RwReg *)0x20004AC4UL)

#else
#define REG_SSI_SEC0_SSTAT88		(0x20004AC4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT89 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT89_Type;
#define REG_SSI_SEC0_SSTAT89		(*(RwReg *)0x20004ACCUL)

#else
#define REG_SSI_SEC0_SSTAT89		(0x20004ACC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT90 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT90_Type;
#define REG_SSI_SEC0_SSTAT90		(*(RwReg *)0x20004AD4UL)

#else
#define REG_SSI_SEC0_SSTAT90		(0x20004AD4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT91 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT91_Type;
#define REG_SSI_SEC0_SSTAT91		(*(RwReg *)0x20004ADCUL)

#else
#define REG_SSI_SEC0_SSTAT91		(0x20004ADC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT92 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT92_Type;
#define REG_SSI_SEC0_SSTAT92		(*(RwReg *)0x20004AE4UL)

#else
#define REG_SSI_SEC0_SSTAT92		(0x20004AE4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT93 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT93_Type;
#define REG_SSI_SEC0_SSTAT93		(*(RwReg *)0x20004AECUL)

#else
#define REG_SSI_SEC0_SSTAT93		(0x20004AEC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT94 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT94_Type;
#define REG_SSI_SEC0_SSTAT94		(*(RwReg *)0x20004AF4UL)

#else
#define REG_SSI_SEC0_SSTAT94		(0x20004AF4) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT95 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT95_Type;
#define REG_SSI_SEC0_SSTAT95		(*(RwReg *)0x20004AFCUL)

#else
#define REG_SSI_SEC0_SSTAT95		(0x20004AFC) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT96 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT96_Type;
#define REG_SSI_SEC0_SSTAT96		(*(RwReg *)0x20004B04UL)

#else
#define REG_SSI_SEC0_SSTAT96		(0x20004B04) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT97 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT97_Type;
#define REG_SSI_SEC0_SSTAT97		(*(RwReg *)0x20004B0CUL)

#else
#define REG_SSI_SEC0_SSTAT97		(0x20004B0C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT98 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT98_Type;
#define REG_SSI_SEC0_SSTAT98		(*(RwReg *)0x20004B14UL)

#else
#define REG_SSI_SEC0_SSTAT98		(0x20004B14) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT99 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT99_Type;
#define REG_SSI_SEC0_SSTAT99		(*(RwReg *)0x20004B1CUL)

#else
#define REG_SSI_SEC0_SSTAT99		(0x20004B1C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT100 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT100_Type;
#define REG_SSI_SEC0_SSTAT100		(*(RwReg *)0x20004B24UL)

#else
#define REG_SSI_SEC0_SSTAT100		(0x20004B24) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT101 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT101_Type;
#define REG_SSI_SEC0_SSTAT101		(*(RwReg *)0x20004B2CUL)

#else
#define REG_SSI_SEC0_SSTAT101		(0x20004B2C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT102 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT102_Type;
#define REG_SSI_SEC0_SSTAT102		(*(RwReg *)0x20004B34UL)

#else
#define REG_SSI_SEC0_SSTAT102		(0x20004B34) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT103 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT103_Type;
#define REG_SSI_SEC0_SSTAT103		(*(RwReg *)0x20004B3CUL)

#else
#define REG_SSI_SEC0_SSTAT103		(0x20004B3C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT104 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT104_Type;
#define REG_SSI_SEC0_SSTAT104		(*(RwReg *)0x20004B44UL)

#else
#define REG_SSI_SEC0_SSTAT104		(0x20004B44) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SSI_SEC0_SSTAT105 : (32) SEC0 Source Status Register n ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t ERR:1;			/*!< bit	1	Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t ERRC:2;			/*!< bit	4..5	Error Cause	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t PND:1;			/*!< bit	8	Pending Source	*/
		uint32_t ACT:1;			/*!< bit	9	Active Source	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t CHID:8;			/*!< bit	16..23	Channel ID	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SSI_SEC0_SSTAT105_Type;
#define REG_SSI_SEC0_SSTAT105		(*(RwReg *)0x20004B4CUL)

#else
#define REG_SSI_SEC0_SSTAT105		(0x20004B4C) /**< \brief (SEC Source Interface (SSI)) SEC0 Source Status Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SSI_SEC0_SCTL0_Type		SEC0_SCTL0;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT0_Type		SEC0_SSTAT0;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL1_Type		SEC0_SCTL1;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT1_Type		SEC0_SSTAT1;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL2_Type		SEC0_SCTL2;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT2_Type		SEC0_SSTAT2;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL3_Type		SEC0_SCTL3;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT3_Type		SEC0_SSTAT3;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL4_Type		SEC0_SCTL4;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT4_Type		SEC0_SSTAT4;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL5_Type		SEC0_SCTL5;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT5_Type		SEC0_SSTAT5;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL6_Type		SEC0_SCTL6;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT6_Type		SEC0_SSTAT6;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL7_Type		SEC0_SCTL7;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT7_Type		SEC0_SSTAT7;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL8_Type		SEC0_SCTL8;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT8_Type		SEC0_SSTAT8;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL9_Type		SEC0_SCTL9;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT9_Type		SEC0_SSTAT9;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL10_Type		SEC0_SCTL10;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT10_Type		SEC0_SSTAT10;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL11_Type		SEC0_SCTL11;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT11_Type		SEC0_SSTAT11;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL12_Type		SEC0_SCTL12;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT12_Type		SEC0_SSTAT12;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL13_Type		SEC0_SCTL13;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT13_Type		SEC0_SSTAT13;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL14_Type		SEC0_SCTL14;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT14_Type		SEC0_SSTAT14;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL15_Type		SEC0_SCTL15;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT15_Type		SEC0_SSTAT15;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL16_Type		SEC0_SCTL16;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT16_Type		SEC0_SSTAT16;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL17_Type		SEC0_SCTL17;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT17_Type		SEC0_SSTAT17;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL18_Type		SEC0_SCTL18;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT18_Type		SEC0_SSTAT18;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL19_Type		SEC0_SCTL19;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT19_Type		SEC0_SSTAT19;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL20_Type		SEC0_SCTL20;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT20_Type		SEC0_SSTAT20;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL21_Type		SEC0_SCTL21;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT21_Type		SEC0_SSTAT21;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL22_Type		SEC0_SCTL22;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT22_Type		SEC0_SSTAT22;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL23_Type		SEC0_SCTL23;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT23_Type		SEC0_SSTAT23;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL24_Type		SEC0_SCTL24;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT24_Type		SEC0_SSTAT24;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL25_Type		SEC0_SCTL25;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT25_Type		SEC0_SSTAT25;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL26_Type		SEC0_SCTL26;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT26_Type		SEC0_SSTAT26;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL27_Type		SEC0_SCTL27;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT27_Type		SEC0_SSTAT27;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL28_Type		SEC0_SCTL28;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT28_Type		SEC0_SSTAT28;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL29_Type		SEC0_SCTL29;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT29_Type		SEC0_SSTAT29;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL30_Type		SEC0_SCTL30;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT30_Type		SEC0_SSTAT30;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL31_Type		SEC0_SCTL31;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT31_Type		SEC0_SSTAT31;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL32_Type		SEC0_SCTL32;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT32_Type		SEC0_SSTAT32;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL33_Type		SEC0_SCTL33;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT33_Type		SEC0_SSTAT33;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL34_Type		SEC0_SCTL34;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT34_Type		SEC0_SSTAT34;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL35_Type		SEC0_SCTL35;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT35_Type		SEC0_SSTAT35;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL36_Type		SEC0_SCTL36;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT36_Type		SEC0_SSTAT36;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL37_Type		SEC0_SCTL37;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT37_Type		SEC0_SSTAT37;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL38_Type		SEC0_SCTL38;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT38_Type		SEC0_SSTAT38;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL39_Type		SEC0_SCTL39;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT39_Type		SEC0_SSTAT39;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL40_Type		SEC0_SCTL40;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT40_Type		SEC0_SSTAT40;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL41_Type		SEC0_SCTL41;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT41_Type		SEC0_SSTAT41;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL42_Type		SEC0_SCTL42;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT42_Type		SEC0_SSTAT42;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL43_Type		SEC0_SCTL43;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT43_Type		SEC0_SSTAT43;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL44_Type		SEC0_SCTL44;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT44_Type		SEC0_SSTAT44;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL45_Type		SEC0_SCTL45;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT45_Type		SEC0_SSTAT45;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL46_Type		SEC0_SCTL46;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT46_Type		SEC0_SSTAT46;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL47_Type		SEC0_SCTL47;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT47_Type		SEC0_SSTAT47;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL48_Type		SEC0_SCTL48;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT48_Type		SEC0_SSTAT48;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL49_Type		SEC0_SCTL49;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT49_Type		SEC0_SSTAT49;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL50_Type		SEC0_SCTL50;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT50_Type		SEC0_SSTAT50;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL51_Type		SEC0_SCTL51;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT51_Type		SEC0_SSTAT51;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL52_Type		SEC0_SCTL52;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT52_Type		SEC0_SSTAT52;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL53_Type		SEC0_SCTL53;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT53_Type		SEC0_SSTAT53;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL54_Type		SEC0_SCTL54;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT54_Type		SEC0_SSTAT54;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL55_Type		SEC0_SCTL55;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT55_Type		SEC0_SSTAT55;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL56_Type		SEC0_SCTL56;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT56_Type		SEC0_SSTAT56;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL57_Type		SEC0_SCTL57;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT57_Type		SEC0_SSTAT57;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL58_Type		SEC0_SCTL58;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT58_Type		SEC0_SSTAT58;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL59_Type		SEC0_SCTL59;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT59_Type		SEC0_SSTAT59;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL60_Type		SEC0_SCTL60;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT60_Type		SEC0_SSTAT60;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL61_Type		SEC0_SCTL61;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT61_Type		SEC0_SSTAT61;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL62_Type		SEC0_SCTL62;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT62_Type		SEC0_SSTAT62;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL63_Type		SEC0_SCTL63;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT63_Type		SEC0_SSTAT63;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL64_Type		SEC0_SCTL64;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT64_Type		SEC0_SSTAT64;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL65_Type		SEC0_SCTL65;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT65_Type		SEC0_SSTAT65;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL66_Type		SEC0_SCTL66;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT66_Type		SEC0_SSTAT66;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL67_Type		SEC0_SCTL67;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT67_Type		SEC0_SSTAT67;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL68_Type		SEC0_SCTL68;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT68_Type		SEC0_SSTAT68;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL69_Type		SEC0_SCTL69;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT69_Type		SEC0_SSTAT69;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL70_Type		SEC0_SCTL70;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT70_Type		SEC0_SSTAT70;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL71_Type		SEC0_SCTL71;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT71_Type		SEC0_SSTAT71;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL72_Type		SEC0_SCTL72;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT72_Type		SEC0_SSTAT72;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL73_Type		SEC0_SCTL73;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT73_Type		SEC0_SSTAT73;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL74_Type		SEC0_SCTL74;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT74_Type		SEC0_SSTAT74;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL75_Type		SEC0_SCTL75;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT75_Type		SEC0_SSTAT75;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL76_Type		SEC0_SCTL76;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT76_Type		SEC0_SSTAT76;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL77_Type		SEC0_SCTL77;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT77_Type		SEC0_SSTAT77;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL78_Type		SEC0_SCTL78;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT78_Type		SEC0_SSTAT78;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL79_Type		SEC0_SCTL79;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT79_Type		SEC0_SSTAT79;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL80_Type		SEC0_SCTL80;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT80_Type		SEC0_SSTAT80;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL81_Type		SEC0_SCTL81;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT81_Type		SEC0_SSTAT81;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL82_Type		SEC0_SCTL82;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT82_Type		SEC0_SSTAT82;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL83_Type		SEC0_SCTL83;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT83_Type		SEC0_SSTAT83;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL84_Type		SEC0_SCTL84;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT84_Type		SEC0_SSTAT84;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL85_Type		SEC0_SCTL85;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT85_Type		SEC0_SSTAT85;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL86_Type		SEC0_SCTL86;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT86_Type		SEC0_SSTAT86;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL87_Type		SEC0_SCTL87;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT87_Type		SEC0_SSTAT87;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL88_Type		SEC0_SCTL88;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT88_Type		SEC0_SSTAT88;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL89_Type		SEC0_SCTL89;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT89_Type		SEC0_SSTAT89;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL90_Type		SEC0_SCTL90;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT90_Type		SEC0_SSTAT90;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL91_Type		SEC0_SCTL91;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT91_Type		SEC0_SSTAT91;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL92_Type		SEC0_SCTL92;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT92_Type		SEC0_SSTAT92;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL93_Type		SEC0_SCTL93;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT93_Type		SEC0_SSTAT93;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL94_Type		SEC0_SCTL94;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT94_Type		SEC0_SSTAT94;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL95_Type		SEC0_SCTL95;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT95_Type		SEC0_SSTAT95;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL96_Type		SEC0_SCTL96;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT96_Type		SEC0_SSTAT96;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL97_Type		SEC0_SCTL97;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT97_Type		SEC0_SSTAT97;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL98_Type		SEC0_SCTL98;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT98_Type		SEC0_SSTAT98;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL99_Type		SEC0_SCTL99;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT99_Type		SEC0_SSTAT99;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL100_Type		SEC0_SCTL100;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT100_Type		SEC0_SSTAT100;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL101_Type		SEC0_SCTL101;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT101_Type		SEC0_SSTAT101;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL102_Type		SEC0_SCTL102;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT102_Type		SEC0_SSTAT102;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL103_Type		SEC0_SCTL103;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT103_Type		SEC0_SSTAT103;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL104_Type		SEC0_SCTL104;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT104_Type		SEC0_SSTAT104;		/**< \brief SEC0 Source Status Register n */
	__IO SSI_SEC0_SCTL105_Type		SEC0_SCTL105;		/**< \brief SEC0 Source Control Register n */
	__IO SSI_SEC0_SSTAT105_Type		SEC0_SSTAT105;		/**< \brief SEC0 Source Status Register n */
} Ssi;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SPU0_CTL : (32) SPU0 Control Register ----- */
typedef union {
	struct {
		uint32_t GLCK:8;			/*!< bit	0..7	Global Lock Disable	*/
		uint32_t :6;			/*!< bit	8..13	Reserved	*/
		uint32_t PINTEN:1;			/*!< bit	14	Protection Violation Interrupt Enable	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t WPLCK:1;			/*!< bit	16	Write Protect Register Lock	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_CTL_Type;
#define REG_SPU0_CTL		(*(RwReg *)0x20005000UL)

#else
#define REG_SPU0_CTL		(0x20005000) /**< \brief (SPU0) SPU0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_STAT : (32) SPU0 Status Register ----- */
typedef union {
	struct {
		uint32_t GLCK:1;			/*!< bit	0	Global Lock Status	*/
		uint32_t :11;			/*!< bit	1..11	Reserved	*/
		uint32_t VIRQ:1;			/*!< bit	12	Violation Interrupt Request	*/
		uint32_t :17;			/*!< bit	13..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error	*/
		uint32_t LWERR:1;			/*!< bit	31	Lock Write Error	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_STAT_Type;
#define REG_SPU0_STAT		(*(RwReg *)0x20005004UL)

#else
#define REG_SPU0_STAT		(0x20005004) /**< \brief (SPU0) SPU0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP0 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP0_Type;
#define REG_SPU0_WP0		(*(RwReg *)0x20005400UL)

#else
#define REG_SPU0_WP0		(0x20005400) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP1 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP1_Type;
#define REG_SPU0_WP1		(*(RwReg *)0x20005404UL)

#else
#define REG_SPU0_WP1		(0x20005404) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP2 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP2_Type;
#define REG_SPU0_WP2		(*(RwReg *)0x20005408UL)

#else
#define REG_SPU0_WP2		(0x20005408) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP3 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP3_Type;
#define REG_SPU0_WP3		(*(RwReg *)0x2000540CUL)

#else
#define REG_SPU0_WP3		(0x2000540C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP4 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP4_Type;
#define REG_SPU0_WP4		(*(RwReg *)0x20005410UL)

#else
#define REG_SPU0_WP4		(0x20005410) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP5 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP5_Type;
#define REG_SPU0_WP5		(*(RwReg *)0x20005414UL)

#else
#define REG_SPU0_WP5		(0x20005414) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP6 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP6_Type;
#define REG_SPU0_WP6		(*(RwReg *)0x20005418UL)

#else
#define REG_SPU0_WP6		(0x20005418) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP7 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP7_Type;
#define REG_SPU0_WP7		(*(RwReg *)0x2000541CUL)

#else
#define REG_SPU0_WP7		(0x2000541C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP8 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP8_Type;
#define REG_SPU0_WP8		(*(RwReg *)0x20005420UL)

#else
#define REG_SPU0_WP8		(0x20005420) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP9 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP9_Type;
#define REG_SPU0_WP9		(*(RwReg *)0x20005424UL)

#else
#define REG_SPU0_WP9		(0x20005424) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP10 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP10_Type;
#define REG_SPU0_WP10		(*(RwReg *)0x20005428UL)

#else
#define REG_SPU0_WP10		(0x20005428) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP11 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP11_Type;
#define REG_SPU0_WP11		(*(RwReg *)0x2000542CUL)

#else
#define REG_SPU0_WP11		(0x2000542C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP12 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP12_Type;
#define REG_SPU0_WP12		(*(RwReg *)0x20005430UL)

#else
#define REG_SPU0_WP12		(0x20005430) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP13 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP13_Type;
#define REG_SPU0_WP13		(*(RwReg *)0x20005434UL)

#else
#define REG_SPU0_WP13		(0x20005434) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP14 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP14_Type;
#define REG_SPU0_WP14		(*(RwReg *)0x20005438UL)

#else
#define REG_SPU0_WP14		(0x20005438) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP15 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP15_Type;
#define REG_SPU0_WP15		(*(RwReg *)0x2000543CUL)

#else
#define REG_SPU0_WP15		(0x2000543C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP16 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP16_Type;
#define REG_SPU0_WP16		(*(RwReg *)0x20005440UL)

#else
#define REG_SPU0_WP16		(0x20005440) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP17 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP17_Type;
#define REG_SPU0_WP17		(*(RwReg *)0x20005444UL)

#else
#define REG_SPU0_WP17		(0x20005444) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP18 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP18_Type;
#define REG_SPU0_WP18		(*(RwReg *)0x20005448UL)

#else
#define REG_SPU0_WP18		(0x20005448) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP19 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP19_Type;
#define REG_SPU0_WP19		(*(RwReg *)0x2000544CUL)

#else
#define REG_SPU0_WP19		(0x2000544C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP20 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP20_Type;
#define REG_SPU0_WP20		(*(RwReg *)0x20005450UL)

#else
#define REG_SPU0_WP20		(0x20005450) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP21 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP21_Type;
#define REG_SPU0_WP21		(*(RwReg *)0x20005454UL)

#else
#define REG_SPU0_WP21		(0x20005454) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP22 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP22_Type;
#define REG_SPU0_WP22		(*(RwReg *)0x20005458UL)

#else
#define REG_SPU0_WP22		(0x20005458) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP23 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP23_Type;
#define REG_SPU0_WP23		(*(RwReg *)0x2000545CUL)

#else
#define REG_SPU0_WP23		(0x2000545C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP24 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP24_Type;
#define REG_SPU0_WP24		(*(RwReg *)0x20005460UL)

#else
#define REG_SPU0_WP24		(0x20005460) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP25 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP25_Type;
#define REG_SPU0_WP25		(*(RwReg *)0x20005464UL)

#else
#define REG_SPU0_WP25		(0x20005464) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP26 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP26_Type;
#define REG_SPU0_WP26		(*(RwReg *)0x20005468UL)

#else
#define REG_SPU0_WP26		(0x20005468) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP27 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP27_Type;
#define REG_SPU0_WP27		(*(RwReg *)0x2000546CUL)

#else
#define REG_SPU0_WP27		(0x2000546C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP28 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP28_Type;
#define REG_SPU0_WP28		(*(RwReg *)0x20005470UL)

#else
#define REG_SPU0_WP28		(0x20005470) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP29 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP29_Type;
#define REG_SPU0_WP29		(*(RwReg *)0x20005474UL)

#else
#define REG_SPU0_WP29		(0x20005474) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP30 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP30_Type;
#define REG_SPU0_WP30		(*(RwReg *)0x20005478UL)

#else
#define REG_SPU0_WP30		(0x20005478) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP31 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP31_Type;
#define REG_SPU0_WP31		(*(RwReg *)0x2000547CUL)

#else
#define REG_SPU0_WP31		(0x2000547C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP32 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP32_Type;
#define REG_SPU0_WP32		(*(RwReg *)0x20005480UL)

#else
#define REG_SPU0_WP32		(0x20005480) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP33 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP33_Type;
#define REG_SPU0_WP33		(*(RwReg *)0x20005484UL)

#else
#define REG_SPU0_WP33		(0x20005484) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP34 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP34_Type;
#define REG_SPU0_WP34		(*(RwReg *)0x20005488UL)

#else
#define REG_SPU0_WP34		(0x20005488) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP35 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP35_Type;
#define REG_SPU0_WP35		(*(RwReg *)0x2000548CUL)

#else
#define REG_SPU0_WP35		(0x2000548C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP36 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP36_Type;
#define REG_SPU0_WP36		(*(RwReg *)0x20005490UL)

#else
#define REG_SPU0_WP36		(0x20005490) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP37 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP37_Type;
#define REG_SPU0_WP37		(*(RwReg *)0x20005494UL)

#else
#define REG_SPU0_WP37		(0x20005494) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP38 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP38_Type;
#define REG_SPU0_WP38		(*(RwReg *)0x20005498UL)

#else
#define REG_SPU0_WP38		(0x20005498) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP39 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP39_Type;
#define REG_SPU0_WP39		(*(RwReg *)0x2000549CUL)

#else
#define REG_SPU0_WP39		(0x2000549C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP40 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP40_Type;
#define REG_SPU0_WP40		(*(RwReg *)0x200054A0UL)

#else
#define REG_SPU0_WP40		(0x200054A0) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP41 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP41_Type;
#define REG_SPU0_WP41		(*(RwReg *)0x200054A4UL)

#else
#define REG_SPU0_WP41		(0x200054A4) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP42 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP42_Type;
#define REG_SPU0_WP42		(*(RwReg *)0x200054A8UL)

#else
#define REG_SPU0_WP42		(0x200054A8) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP43 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP43_Type;
#define REG_SPU0_WP43		(*(RwReg *)0x200054ACUL)

#else
#define REG_SPU0_WP43		(0x200054AC) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP44 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP44_Type;
#define REG_SPU0_WP44		(*(RwReg *)0x200054B0UL)

#else
#define REG_SPU0_WP44		(0x200054B0) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP45 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP45_Type;
#define REG_SPU0_WP45		(*(RwReg *)0x200054B4UL)

#else
#define REG_SPU0_WP45		(0x200054B4) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP46 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP46_Type;
#define REG_SPU0_WP46		(*(RwReg *)0x200054B8UL)

#else
#define REG_SPU0_WP46		(0x200054B8) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP47 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP47_Type;
#define REG_SPU0_WP47		(*(RwReg *)0x200054BCUL)

#else
#define REG_SPU0_WP47		(0x200054BC) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP48 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP48_Type;
#define REG_SPU0_WP48		(*(RwReg *)0x200054C0UL)

#else
#define REG_SPU0_WP48		(0x200054C0) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP49 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP49_Type;
#define REG_SPU0_WP49		(*(RwReg *)0x200054C4UL)

#else
#define REG_SPU0_WP49		(0x200054C4) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP50 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP50_Type;
#define REG_SPU0_WP50		(*(RwReg *)0x200054C8UL)

#else
#define REG_SPU0_WP50		(0x200054C8) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP51 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP51_Type;
#define REG_SPU0_WP51		(*(RwReg *)0x200054CCUL)

#else
#define REG_SPU0_WP51		(0x200054CC) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP52 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP52_Type;
#define REG_SPU0_WP52		(*(RwReg *)0x200054D0UL)

#else
#define REG_SPU0_WP52		(0x200054D0) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP53 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP53_Type;
#define REG_SPU0_WP53		(*(RwReg *)0x200054D4UL)

#else
#define REG_SPU0_WP53		(0x200054D4) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP54 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP54_Type;
#define REG_SPU0_WP54		(*(RwReg *)0x200054D8UL)

#else
#define REG_SPU0_WP54		(0x200054D8) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP55 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP55_Type;
#define REG_SPU0_WP55		(*(RwReg *)0x200054DCUL)

#else
#define REG_SPU0_WP55		(0x200054DC) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP56 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP56_Type;
#define REG_SPU0_WP56		(*(RwReg *)0x200054E0UL)

#else
#define REG_SPU0_WP56		(0x200054E0) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP57 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP57_Type;
#define REG_SPU0_WP57		(*(RwReg *)0x200054E4UL)

#else
#define REG_SPU0_WP57		(0x200054E4) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP58 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP58_Type;
#define REG_SPU0_WP58		(*(RwReg *)0x200054E8UL)

#else
#define REG_SPU0_WP58		(0x200054E8) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP59 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP59_Type;
#define REG_SPU0_WP59		(*(RwReg *)0x200054ECUL)

#else
#define REG_SPU0_WP59		(0x200054EC) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP60 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP60_Type;
#define REG_SPU0_WP60		(*(RwReg *)0x200054F0UL)

#else
#define REG_SPU0_WP60		(0x200054F0) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP61 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP61_Type;
#define REG_SPU0_WP61		(*(RwReg *)0x200054F4UL)

#else
#define REG_SPU0_WP61		(0x200054F4) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP62 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP62_Type;
#define REG_SPU0_WP62		(*(RwReg *)0x200054F8UL)

#else
#define REG_SPU0_WP62		(0x200054F8) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP63 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP63_Type;
#define REG_SPU0_WP63		(*(RwReg *)0x200054FCUL)

#else
#define REG_SPU0_WP63		(0x200054FC) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP64 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP64_Type;
#define REG_SPU0_WP64		(*(RwReg *)0x20005500UL)

#else
#define REG_SPU0_WP64		(0x20005500) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP65 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP65_Type;
#define REG_SPU0_WP65		(*(RwReg *)0x20005504UL)

#else
#define REG_SPU0_WP65		(0x20005504) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP66 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP66_Type;
#define REG_SPU0_WP66		(*(RwReg *)0x20005508UL)

#else
#define REG_SPU0_WP66		(0x20005508) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP67 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP67_Type;
#define REG_SPU0_WP67		(*(RwReg *)0x2000550CUL)

#else
#define REG_SPU0_WP67		(0x2000550C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP68 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP68_Type;
#define REG_SPU0_WP68		(*(RwReg *)0x20005510UL)

#else
#define REG_SPU0_WP68		(0x20005510) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP69 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP69_Type;
#define REG_SPU0_WP69		(*(RwReg *)0x20005514UL)

#else
#define REG_SPU0_WP69		(0x20005514) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP70 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP70_Type;
#define REG_SPU0_WP70		(*(RwReg *)0x20005518UL)

#else
#define REG_SPU0_WP70		(0x20005518) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP71 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP71_Type;
#define REG_SPU0_WP71		(*(RwReg *)0x2000551CUL)

#else
#define REG_SPU0_WP71		(0x2000551C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP72 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP72_Type;
#define REG_SPU0_WP72		(*(RwReg *)0x20005520UL)

#else
#define REG_SPU0_WP72		(0x20005520) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP73 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP73_Type;
#define REG_SPU0_WP73		(*(RwReg *)0x20005524UL)

#else
#define REG_SPU0_WP73		(0x20005524) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP74 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP74_Type;
#define REG_SPU0_WP74		(*(RwReg *)0x20005528UL)

#else
#define REG_SPU0_WP74		(0x20005528) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP75 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP75_Type;
#define REG_SPU0_WP75		(*(RwReg *)0x2000552CUL)

#else
#define REG_SPU0_WP75		(0x2000552C) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP76 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP76_Type;
#define REG_SPU0_WP76		(*(RwReg *)0x20005530UL)

#else
#define REG_SPU0_WP76		(0x20005530) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_WP77 : (32) SPU0 Write Protect Register n ----- */
typedef union {
	struct {
		uint32_t CM0:1;			/*!< bit	0	Core Master x Write Protect Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t SM0:1;			/*!< bit	16	System Master x Write Protect Enable	*/
		uint32_t SM1:1;			/*!< bit	17	System Master x Write Protect Enable	*/
		uint32_t SM2:1;			/*!< bit	18	System Master x Write Protect Enable	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_WP77_Type;
#define REG_SPU0_WP77		(*(RwReg *)0x20005534UL)

#else
#define REG_SPU0_WP77		(0x20005534) /**< \brief (SPU0) SPU0 Write Protect Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECURECTL : (32) SPU0 Secure Control Register ----- */
typedef union {
	struct {
		uint32_t :4;			/*!< bit	0..3	Reserved	*/
		uint32_t SSECCLR:1;			/*!< bit	4	Slave Secure Clear	*/
		uint32_t MSECCLR:1;			/*!< bit	5	Master Secure Clear	*/
		uint32_t :8;			/*!< bit	6..13	Reserved	*/
		uint32_t SINTEN:1;			/*!< bit	14	Secure Violation Interrupt Enable	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t SCRLCK:1;			/*!< bit	16	Secure Configuratoin Register (SECURECFGn) Lock	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECURECTL_Type;
#define REG_SPU0_SECURECTL		(*(RwReg *)0x20005840UL)

#else
#define REG_SPU0_SECURECTL		(0x20005840) /**< \brief (SPU0) SPU0 Secure Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECURECHK : (32) SPU0 Secure Check Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECURECHK_Type;
#define REG_SPU0_SECURECHK		(*(RwReg *)0x2000584CUL)

#else
#define REG_SPU0_SECURECHK		(0x2000584C) /**< \brief (SPU0) SPU0 Secure Check Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREC0 : (32) SPU0 Secure Core Registers ----- */
typedef union {
	struct {
		uint32_t CSEC0:1;			/*!< bit	0	Core Secure	*/
		uint32_t :31;			/*!< bit	1..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREC0_Type;
#define REG_SPU0_SECUREC0		(*(RwReg *)0x20005980UL)

#else
#define REG_SPU0_SECUREC0		(0x20005980) /**< \brief (SPU0) SPU0 Secure Core Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP0 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP0_Type;
#define REG_SPU0_SECUREP0		(*(RwReg *)0x20005A00UL)

#else
#define REG_SPU0_SECUREP0		(0x20005A00) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP1 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP1_Type;
#define REG_SPU0_SECUREP1		(*(RwReg *)0x20005A04UL)

#else
#define REG_SPU0_SECUREP1		(0x20005A04) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP2 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP2_Type;
#define REG_SPU0_SECUREP2		(*(RwReg *)0x20005A08UL)

#else
#define REG_SPU0_SECUREP2		(0x20005A08) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP3 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP3_Type;
#define REG_SPU0_SECUREP3		(*(RwReg *)0x20005A0CUL)

#else
#define REG_SPU0_SECUREP3		(0x20005A0C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP4 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP4_Type;
#define REG_SPU0_SECUREP4		(*(RwReg *)0x20005A10UL)

#else
#define REG_SPU0_SECUREP4		(0x20005A10) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP5 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP5_Type;
#define REG_SPU0_SECUREP5		(*(RwReg *)0x20005A14UL)

#else
#define REG_SPU0_SECUREP5		(0x20005A14) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP6 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP6_Type;
#define REG_SPU0_SECUREP6		(*(RwReg *)0x20005A18UL)

#else
#define REG_SPU0_SECUREP6		(0x20005A18) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP7 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP7_Type;
#define REG_SPU0_SECUREP7		(*(RwReg *)0x20005A1CUL)

#else
#define REG_SPU0_SECUREP7		(0x20005A1C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP8 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP8_Type;
#define REG_SPU0_SECUREP8		(*(RwReg *)0x20005A20UL)

#else
#define REG_SPU0_SECUREP8		(0x20005A20) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP9 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP9_Type;
#define REG_SPU0_SECUREP9		(*(RwReg *)0x20005A24UL)

#else
#define REG_SPU0_SECUREP9		(0x20005A24) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP10 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP10_Type;
#define REG_SPU0_SECUREP10		(*(RwReg *)0x20005A28UL)

#else
#define REG_SPU0_SECUREP10		(0x20005A28) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP11 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP11_Type;
#define REG_SPU0_SECUREP11		(*(RwReg *)0x20005A2CUL)

#else
#define REG_SPU0_SECUREP11		(0x20005A2C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP12 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP12_Type;
#define REG_SPU0_SECUREP12		(*(RwReg *)0x20005A30UL)

#else
#define REG_SPU0_SECUREP12		(0x20005A30) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP13 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP13_Type;
#define REG_SPU0_SECUREP13		(*(RwReg *)0x20005A34UL)

#else
#define REG_SPU0_SECUREP13		(0x20005A34) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP14 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP14_Type;
#define REG_SPU0_SECUREP14		(*(RwReg *)0x20005A38UL)

#else
#define REG_SPU0_SECUREP14		(0x20005A38) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP15 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP15_Type;
#define REG_SPU0_SECUREP15		(*(RwReg *)0x20005A3CUL)

#else
#define REG_SPU0_SECUREP15		(0x20005A3C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP16 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP16_Type;
#define REG_SPU0_SECUREP16		(*(RwReg *)0x20005A40UL)

#else
#define REG_SPU0_SECUREP16		(0x20005A40) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP17 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP17_Type;
#define REG_SPU0_SECUREP17		(*(RwReg *)0x20005A44UL)

#else
#define REG_SPU0_SECUREP17		(0x20005A44) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP18 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP18_Type;
#define REG_SPU0_SECUREP18		(*(RwReg *)0x20005A48UL)

#else
#define REG_SPU0_SECUREP18		(0x20005A48) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP19 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP19_Type;
#define REG_SPU0_SECUREP19		(*(RwReg *)0x20005A4CUL)

#else
#define REG_SPU0_SECUREP19		(0x20005A4C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP20 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP20_Type;
#define REG_SPU0_SECUREP20		(*(RwReg *)0x20005A50UL)

#else
#define REG_SPU0_SECUREP20		(0x20005A50) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP21 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP21_Type;
#define REG_SPU0_SECUREP21		(*(RwReg *)0x20005A54UL)

#else
#define REG_SPU0_SECUREP21		(0x20005A54) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP22 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP22_Type;
#define REG_SPU0_SECUREP22		(*(RwReg *)0x20005A58UL)

#else
#define REG_SPU0_SECUREP22		(0x20005A58) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP23 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP23_Type;
#define REG_SPU0_SECUREP23		(*(RwReg *)0x20005A5CUL)

#else
#define REG_SPU0_SECUREP23		(0x20005A5C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP24 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP24_Type;
#define REG_SPU0_SECUREP24		(*(RwReg *)0x20005A60UL)

#else
#define REG_SPU0_SECUREP24		(0x20005A60) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP25 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP25_Type;
#define REG_SPU0_SECUREP25		(*(RwReg *)0x20005A64UL)

#else
#define REG_SPU0_SECUREP25		(0x20005A64) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP26 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP26_Type;
#define REG_SPU0_SECUREP26		(*(RwReg *)0x20005A68UL)

#else
#define REG_SPU0_SECUREP26		(0x20005A68) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP27 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP27_Type;
#define REG_SPU0_SECUREP27		(*(RwReg *)0x20005A6CUL)

#else
#define REG_SPU0_SECUREP27		(0x20005A6C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP28 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP28_Type;
#define REG_SPU0_SECUREP28		(*(RwReg *)0x20005A70UL)

#else
#define REG_SPU0_SECUREP28		(0x20005A70) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP29 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP29_Type;
#define REG_SPU0_SECUREP29		(*(RwReg *)0x20005A74UL)

#else
#define REG_SPU0_SECUREP29		(0x20005A74) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP30 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP30_Type;
#define REG_SPU0_SECUREP30		(*(RwReg *)0x20005A78UL)

#else
#define REG_SPU0_SECUREP30		(0x20005A78) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP31 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP31_Type;
#define REG_SPU0_SECUREP31		(*(RwReg *)0x20005A7CUL)

#else
#define REG_SPU0_SECUREP31		(0x20005A7C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP32 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP32_Type;
#define REG_SPU0_SECUREP32		(*(RwReg *)0x20005A80UL)

#else
#define REG_SPU0_SECUREP32		(0x20005A80) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP33 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP33_Type;
#define REG_SPU0_SECUREP33		(*(RwReg *)0x20005A84UL)

#else
#define REG_SPU0_SECUREP33		(0x20005A84) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP34 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP34_Type;
#define REG_SPU0_SECUREP34		(*(RwReg *)0x20005A88UL)

#else
#define REG_SPU0_SECUREP34		(0x20005A88) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP35 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP35_Type;
#define REG_SPU0_SECUREP35		(*(RwReg *)0x20005A8CUL)

#else
#define REG_SPU0_SECUREP35		(0x20005A8C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP36 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP36_Type;
#define REG_SPU0_SECUREP36		(*(RwReg *)0x20005A90UL)

#else
#define REG_SPU0_SECUREP36		(0x20005A90) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP37 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP37_Type;
#define REG_SPU0_SECUREP37		(*(RwReg *)0x20005A94UL)

#else
#define REG_SPU0_SECUREP37		(0x20005A94) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP38 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP38_Type;
#define REG_SPU0_SECUREP38		(*(RwReg *)0x20005A98UL)

#else
#define REG_SPU0_SECUREP38		(0x20005A98) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP39 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP39_Type;
#define REG_SPU0_SECUREP39		(*(RwReg *)0x20005A9CUL)

#else
#define REG_SPU0_SECUREP39		(0x20005A9C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP40 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP40_Type;
#define REG_SPU0_SECUREP40		(*(RwReg *)0x20005AA0UL)

#else
#define REG_SPU0_SECUREP40		(0x20005AA0) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP41 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP41_Type;
#define REG_SPU0_SECUREP41		(*(RwReg *)0x20005AA4UL)

#else
#define REG_SPU0_SECUREP41		(0x20005AA4) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP42 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP42_Type;
#define REG_SPU0_SECUREP42		(*(RwReg *)0x20005AA8UL)

#else
#define REG_SPU0_SECUREP42		(0x20005AA8) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP43 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP43_Type;
#define REG_SPU0_SECUREP43		(*(RwReg *)0x20005AACUL)

#else
#define REG_SPU0_SECUREP43		(0x20005AAC) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP44 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP44_Type;
#define REG_SPU0_SECUREP44		(*(RwReg *)0x20005AB0UL)

#else
#define REG_SPU0_SECUREP44		(0x20005AB0) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP45 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP45_Type;
#define REG_SPU0_SECUREP45		(*(RwReg *)0x20005AB4UL)

#else
#define REG_SPU0_SECUREP45		(0x20005AB4) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP46 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP46_Type;
#define REG_SPU0_SECUREP46		(*(RwReg *)0x20005AB8UL)

#else
#define REG_SPU0_SECUREP46		(0x20005AB8) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP47 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP47_Type;
#define REG_SPU0_SECUREP47		(*(RwReg *)0x20005ABCUL)

#else
#define REG_SPU0_SECUREP47		(0x20005ABC) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP48 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP48_Type;
#define REG_SPU0_SECUREP48		(*(RwReg *)0x20005AC0UL)

#else
#define REG_SPU0_SECUREP48		(0x20005AC0) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP49 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP49_Type;
#define REG_SPU0_SECUREP49		(*(RwReg *)0x20005AC4UL)

#else
#define REG_SPU0_SECUREP49		(0x20005AC4) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP50 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP50_Type;
#define REG_SPU0_SECUREP50		(*(RwReg *)0x20005AC8UL)

#else
#define REG_SPU0_SECUREP50		(0x20005AC8) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP51 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP51_Type;
#define REG_SPU0_SECUREP51		(*(RwReg *)0x20005ACCUL)

#else
#define REG_SPU0_SECUREP51		(0x20005ACC) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP52 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP52_Type;
#define REG_SPU0_SECUREP52		(*(RwReg *)0x20005AD0UL)

#else
#define REG_SPU0_SECUREP52		(0x20005AD0) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP53 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP53_Type;
#define REG_SPU0_SECUREP53		(*(RwReg *)0x20005AD4UL)

#else
#define REG_SPU0_SECUREP53		(0x20005AD4) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP54 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP54_Type;
#define REG_SPU0_SECUREP54		(*(RwReg *)0x20005AD8UL)

#else
#define REG_SPU0_SECUREP54		(0x20005AD8) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP55 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP55_Type;
#define REG_SPU0_SECUREP55		(*(RwReg *)0x20005ADCUL)

#else
#define REG_SPU0_SECUREP55		(0x20005ADC) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP56 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP56_Type;
#define REG_SPU0_SECUREP56		(*(RwReg *)0x20005AE0UL)

#else
#define REG_SPU0_SECUREP56		(0x20005AE0) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP57 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP57_Type;
#define REG_SPU0_SECUREP57		(*(RwReg *)0x20005AE4UL)

#else
#define REG_SPU0_SECUREP57		(0x20005AE4) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP58 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP58_Type;
#define REG_SPU0_SECUREP58		(*(RwReg *)0x20005AE8UL)

#else
#define REG_SPU0_SECUREP58		(0x20005AE8) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP59 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP59_Type;
#define REG_SPU0_SECUREP59		(*(RwReg *)0x20005AECUL)

#else
#define REG_SPU0_SECUREP59		(0x20005AEC) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP60 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP60_Type;
#define REG_SPU0_SECUREP60		(*(RwReg *)0x20005AF0UL)

#else
#define REG_SPU0_SECUREP60		(0x20005AF0) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP61 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP61_Type;
#define REG_SPU0_SECUREP61		(*(RwReg *)0x20005AF4UL)

#else
#define REG_SPU0_SECUREP61		(0x20005AF4) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP62 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP62_Type;
#define REG_SPU0_SECUREP62		(*(RwReg *)0x20005AF8UL)

#else
#define REG_SPU0_SECUREP62		(0x20005AF8) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP63 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP63_Type;
#define REG_SPU0_SECUREP63		(*(RwReg *)0x20005AFCUL)

#else
#define REG_SPU0_SECUREP63		(0x20005AFC) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP64 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP64_Type;
#define REG_SPU0_SECUREP64		(*(RwReg *)0x20005B00UL)

#else
#define REG_SPU0_SECUREP64		(0x20005B00) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP65 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP65_Type;
#define REG_SPU0_SECUREP65		(*(RwReg *)0x20005B04UL)

#else
#define REG_SPU0_SECUREP65		(0x20005B04) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP66 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP66_Type;
#define REG_SPU0_SECUREP66		(*(RwReg *)0x20005B08UL)

#else
#define REG_SPU0_SECUREP66		(0x20005B08) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP67 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP67_Type;
#define REG_SPU0_SECUREP67		(*(RwReg *)0x20005B0CUL)

#else
#define REG_SPU0_SECUREP67		(0x20005B0C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP68 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP68_Type;
#define REG_SPU0_SECUREP68		(*(RwReg *)0x20005B10UL)

#else
#define REG_SPU0_SECUREP68		(0x20005B10) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP69 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP69_Type;
#define REG_SPU0_SECUREP69		(*(RwReg *)0x20005B14UL)

#else
#define REG_SPU0_SECUREP69		(0x20005B14) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP70 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP70_Type;
#define REG_SPU0_SECUREP70		(*(RwReg *)0x20005B18UL)

#else
#define REG_SPU0_SECUREP70		(0x20005B18) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP71 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP71_Type;
#define REG_SPU0_SECUREP71		(*(RwReg *)0x20005B1CUL)

#else
#define REG_SPU0_SECUREP71		(0x20005B1C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP72 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP72_Type;
#define REG_SPU0_SECUREP72		(*(RwReg *)0x20005B20UL)

#else
#define REG_SPU0_SECUREP72		(0x20005B20) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP73 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP73_Type;
#define REG_SPU0_SECUREP73		(*(RwReg *)0x20005B24UL)

#else
#define REG_SPU0_SECUREP73		(0x20005B24) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP74 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP74_Type;
#define REG_SPU0_SECUREP74		(*(RwReg *)0x20005B28UL)

#else
#define REG_SPU0_SECUREP74		(0x20005B28) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP75 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP75_Type;
#define REG_SPU0_SECUREP75		(*(RwReg *)0x20005B2CUL)

#else
#define REG_SPU0_SECUREP75		(0x20005B2C) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP76 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP76_Type;
#define REG_SPU0_SECUREP76		(*(RwReg *)0x20005B30UL)

#else
#define REG_SPU0_SECUREP76		(0x20005B30) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPU0_SECUREP77 : (32) SPU0 Secure Peripheral Register ----- */
typedef union {
	struct {
		uint32_t SSEC:1;			/*!< bit	0	Slave Secure Enable	*/
		uint32_t MSEC:1;			/*!< bit	1	Master Secure Enable	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPU0_SECUREP77_Type;
#define REG_SPU0_SECUREP77		(*(RwReg *)0x20005B34UL)

#else
#define REG_SPU0_SECUREP77		(0x20005B34) /**< \brief (SPU0) SPU0 Secure Peripheral Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SPU0_CTL_Type		CTL;		/**< \brief SPU0 Control Register */
	__IO SPU0_STAT_Type		STAT;		/**< \brief SPU0 Status Register */
		 RoReg8		Reserved1[0x3f8];		
	__IO SPU0_WP0_Type		WP0;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP1_Type		WP1;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP2_Type		WP2;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP3_Type		WP3;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP4_Type		WP4;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP5_Type		WP5;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP6_Type		WP6;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP7_Type		WP7;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP8_Type		WP8;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP9_Type		WP9;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP10_Type		WP10;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP11_Type		WP11;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP12_Type		WP12;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP13_Type		WP13;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP14_Type		WP14;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP15_Type		WP15;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP16_Type		WP16;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP17_Type		WP17;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP18_Type		WP18;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP19_Type		WP19;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP20_Type		WP20;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP21_Type		WP21;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP22_Type		WP22;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP23_Type		WP23;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP24_Type		WP24;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP25_Type		WP25;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP26_Type		WP26;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP27_Type		WP27;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP28_Type		WP28;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP29_Type		WP29;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP30_Type		WP30;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP31_Type		WP31;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP32_Type		WP32;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP33_Type		WP33;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP34_Type		WP34;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP35_Type		WP35;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP36_Type		WP36;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP37_Type		WP37;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP38_Type		WP38;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP39_Type		WP39;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP40_Type		WP40;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP41_Type		WP41;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP42_Type		WP42;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP43_Type		WP43;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP44_Type		WP44;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP45_Type		WP45;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP46_Type		WP46;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP47_Type		WP47;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP48_Type		WP48;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP49_Type		WP49;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP50_Type		WP50;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP51_Type		WP51;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP52_Type		WP52;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP53_Type		WP53;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP54_Type		WP54;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP55_Type		WP55;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP56_Type		WP56;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP57_Type		WP57;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP58_Type		WP58;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP59_Type		WP59;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP60_Type		WP60;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP61_Type		WP61;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP62_Type		WP62;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP63_Type		WP63;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP64_Type		WP64;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP65_Type		WP65;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP66_Type		WP66;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP67_Type		WP67;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP68_Type		WP68;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP69_Type		WP69;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP70_Type		WP70;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP71_Type		WP71;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP72_Type		WP72;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP73_Type		WP73;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP74_Type		WP74;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP75_Type		WP75;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP76_Type		WP76;		/**< \brief SPU0 Write Protect Register n */
	__IO SPU0_WP77_Type		WP77;		/**< \brief SPU0 Write Protect Register n */
		 RoReg8		Reserved2[0x308];		
	__IO SPU0_SECURECTL_Type		SECURECTL;		/**< \brief SPU0 Secure Control Register */
		 RoReg8		Reserved3[0x08];		
	__IO SPU0_SECURECHK_Type		SECURECHK;		/**< \brief SPU0 Secure Check Register */
		 RoReg8		Reserved4[0x130];		
	__IO SPU0_SECUREC0_Type		SECUREC0;		/**< \brief SPU0 Secure Core Registers */
		 RoReg8		Reserved5[0x7c];		
	__IO SPU0_SECUREP0_Type		SECUREP0;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP1_Type		SECUREP1;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP2_Type		SECUREP2;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP3_Type		SECUREP3;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP4_Type		SECUREP4;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP5_Type		SECUREP5;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP6_Type		SECUREP6;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP7_Type		SECUREP7;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP8_Type		SECUREP8;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP9_Type		SECUREP9;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP10_Type		SECUREP10;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP11_Type		SECUREP11;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP12_Type		SECUREP12;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP13_Type		SECUREP13;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP14_Type		SECUREP14;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP15_Type		SECUREP15;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP16_Type		SECUREP16;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP17_Type		SECUREP17;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP18_Type		SECUREP18;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP19_Type		SECUREP19;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP20_Type		SECUREP20;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP21_Type		SECUREP21;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP22_Type		SECUREP22;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP23_Type		SECUREP23;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP24_Type		SECUREP24;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP25_Type		SECUREP25;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP26_Type		SECUREP26;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP27_Type		SECUREP27;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP28_Type		SECUREP28;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP29_Type		SECUREP29;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP30_Type		SECUREP30;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP31_Type		SECUREP31;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP32_Type		SECUREP32;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP33_Type		SECUREP33;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP34_Type		SECUREP34;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP35_Type		SECUREP35;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP36_Type		SECUREP36;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP37_Type		SECUREP37;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP38_Type		SECUREP38;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP39_Type		SECUREP39;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP40_Type		SECUREP40;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP41_Type		SECUREP41;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP42_Type		SECUREP42;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP43_Type		SECUREP43;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP44_Type		SECUREP44;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP45_Type		SECUREP45;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP46_Type		SECUREP46;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP47_Type		SECUREP47;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP48_Type		SECUREP48;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP49_Type		SECUREP49;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP50_Type		SECUREP50;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP51_Type		SECUREP51;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP52_Type		SECUREP52;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP53_Type		SECUREP53;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP54_Type		SECUREP54;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP55_Type		SECUREP55;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP56_Type		SECUREP56;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP57_Type		SECUREP57;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP58_Type		SECUREP58;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP59_Type		SECUREP59;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP60_Type		SECUREP60;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP61_Type		SECUREP61;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP62_Type		SECUREP62;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP63_Type		SECUREP63;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP64_Type		SECUREP64;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP65_Type		SECUREP65;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP66_Type		SECUREP66;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP67_Type		SECUREP67;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP68_Type		SECUREP68;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP69_Type		SECUREP69;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP70_Type		SECUREP70;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP71_Type		SECUREP71;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP72_Type		SECUREP72;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP73_Type		SECUREP73;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP74_Type		SECUREP74;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP75_Type		SECUREP75;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP76_Type		SECUREP76;		/**< \brief SPU0 Secure Peripheral Register */
	__IO SPU0_SECUREP77_Type		SECUREP77;		/**< \brief SPU0 Secure Peripheral Register */
} Spu0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_CTL : (32) SMPU0 SMPU Control ----- */
typedef union {
	struct {
		uint32_t RSDIS:1;			/*!< bit	0	Read Speculation Disable	*/
		uint32_t PBEDIS:1;			/*!< bit	1	Protection Violation Bus Error Disable	*/
		uint32_t PBETYPE:1;			/*!< bit	2	Protection Violation Bus Error Type	*/
		uint32_t PINTEN:1;			/*!< bit	3	Protection Violation Interrupt Enable	*/
		uint32_t RLOCK:1;			/*!< bit	4	RCTLn, RADDRn, RIDxn and RIDMxn registers Lock Bit	*/
		uint32_t :26;			/*!< bit	5..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock Bit	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_CTL_Type;
#define REG_SMPU0_CTL		(*(RwReg *)0x20006000UL)

#else
#define REG_SMPU0_CTL		(0x20006000) /**< \brief (SMPU0) SMPU0 SMPU Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_STAT : (32) SMPU0 SMPU Status ----- */
typedef union {
	struct {
		uint32_t IRQ:1;			/*!< bit	0	Interrupt Request	*/
		uint32_t IOVR:1;			/*!< bit	1	Interrupt Overrun	*/
		uint32_t BERR:1;			/*!< bit	2	Bus Error	*/
		uint32_t BEOVR:1;			/*!< bit	3	Bus Error Overrun	*/
		uint32_t :12;			/*!< bit	4..15	Reserved	*/
		uint32_t ADRERR:1;			/*!< bit	16	Address Error	*/
		uint32_t LWERR:1;			/*!< bit	17	Lock Write Error	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_STAT_Type;
#define REG_SMPU0_STAT		(*(RwReg *)0x20006004UL)

#else
#define REG_SMPU0_STAT		(0x20006004) /**< \brief (SMPU0) SMPU0 SMPU Status */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_IADDR : (32) SMPU0 Interrupt Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_IADDR_Type;
#define REG_SMPU0_IADDR		(*(RwReg *)0x20006008UL)

#else
#define REG_SMPU0_IADDR		(0x20006008) /**< \brief (SMPU0) SMPU0 Interrupt Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_IDTLS : (32) SMPU0 Interrupt Details ----- */
typedef union {
	struct {
		uint32_t SECURE:1;			/*!< bit	0	Secure Status	*/
		uint32_t RNW:1;			/*!< bit	1	Read/Write Status	*/
		uint32_t :6;			/*!< bit	2..7	Reserved	*/
		uint32_t ID:10;			/*!< bit	8..17	ID of Transaction	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_IDTLS_Type;
#define REG_SMPU0_IDTLS		(*(RwReg *)0x2000600CUL)

#else
#define REG_SMPU0_IDTLS		(0x2000600C) /**< \brief (SMPU0) SMPU0 Interrupt Details */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_BADDR : (32) SMPU0 Bus Error Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_BADDR_Type;
#define REG_SMPU0_BADDR		(*(RwReg *)0x20006010UL)

#else
#define REG_SMPU0_BADDR		(0x20006010) /**< \brief (SMPU0) SMPU0 Bus Error Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_BDTLS : (32) SMPU0 Bus Error Details ----- */
typedef union {
	struct {
		uint32_t SECURE:1;			/*!< bit	0	Secure Status	*/
		uint32_t RNW:1;			/*!< bit	1	Read/Write Status	*/
		uint32_t :6;			/*!< bit	2..7	Reserved	*/
		uint32_t ID:10;			/*!< bit	8..17	ID of Transaction	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_BDTLS_Type;
#define REG_SMPU0_BDTLS		(*(RwReg *)0x20006014UL)

#else
#define REG_SMPU0_BDTLS		(0x20006014) /**< \brief (SMPU0) SMPU0 Bus Error Details */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RCTL0 : (32) SMPU0 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RCTL0_Type;
#define REG_SMPU0_RCTL0		(*(RwReg *)0x20006020UL)

#else
#define REG_SMPU0_RCTL0		(0x20006020) /**< \brief (SMPU0) SMPU0 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RCTL1 : (32) SMPU0 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RCTL1_Type;
#define REG_SMPU0_RCTL1		(*(RwReg *)0x20006038UL)

#else
#define REG_SMPU0_RCTL1		(0x20006038) /**< \brief (SMPU0) SMPU0 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RCTL2 : (32) SMPU0 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RCTL2_Type;
#define REG_SMPU0_RCTL2		(*(RwReg *)0x20006050UL)

#else
#define REG_SMPU0_RCTL2		(0x20006050) /**< \brief (SMPU0) SMPU0 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RCTL3 : (32) SMPU0 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RCTL3_Type;
#define REG_SMPU0_RCTL3		(*(RwReg *)0x20006068UL)

#else
#define REG_SMPU0_RCTL3		(0x20006068) /**< \brief (SMPU0) SMPU0 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RADDR0 : (32) SMPU0 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RADDR0_Type;
#define REG_SMPU0_RADDR0		(*(RwReg *)0x20006024UL)

#else
#define REG_SMPU0_RADDR0		(0x20006024) /**< \brief (SMPU0) SMPU0 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RADDR1 : (32) SMPU0 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RADDR1_Type;
#define REG_SMPU0_RADDR1		(*(RwReg *)0x2000603CUL)

#else
#define REG_SMPU0_RADDR1		(0x2000603C) /**< \brief (SMPU0) SMPU0 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RADDR2 : (32) SMPU0 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RADDR2_Type;
#define REG_SMPU0_RADDR2		(*(RwReg *)0x20006054UL)

#else
#define REG_SMPU0_RADDR2		(0x20006054) /**< \brief (SMPU0) SMPU0 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RADDR3 : (32) SMPU0 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RADDR3_Type;
#define REG_SMPU0_RADDR3		(*(RwReg *)0x2000606CUL)

#else
#define REG_SMPU0_RADDR3		(0x2000606C) /**< \brief (SMPU0) SMPU0 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDA0 : (32) SMPU0 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDA0_Type;
#define REG_SMPU0_RIDA0		(*(RwReg *)0x20006028UL)

#else
#define REG_SMPU0_RIDA0		(0x20006028) /**< \brief (SMPU0) SMPU0 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDA1 : (32) SMPU0 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDA1_Type;
#define REG_SMPU0_RIDA1		(*(RwReg *)0x20006040UL)

#else
#define REG_SMPU0_RIDA1		(0x20006040) /**< \brief (SMPU0) SMPU0 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDA2 : (32) SMPU0 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDA2_Type;
#define REG_SMPU0_RIDA2		(*(RwReg *)0x20006058UL)

#else
#define REG_SMPU0_RIDA2		(0x20006058) /**< \brief (SMPU0) SMPU0 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDA3 : (32) SMPU0 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDA3_Type;
#define REG_SMPU0_RIDA3		(*(RwReg *)0x20006070UL)

#else
#define REG_SMPU0_RIDA3		(0x20006070) /**< \brief (SMPU0) SMPU0 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDMSKA0 : (32) SMPU0 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDMSKA0_Type;
#define REG_SMPU0_RIDMSKA0		(*(RwReg *)0x2000602CUL)

#else
#define REG_SMPU0_RIDMSKA0		(0x2000602C) /**< \brief (SMPU0) SMPU0 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDMSKA1 : (32) SMPU0 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDMSKA1_Type;
#define REG_SMPU0_RIDMSKA1		(*(RwReg *)0x20006044UL)

#else
#define REG_SMPU0_RIDMSKA1		(0x20006044) /**< \brief (SMPU0) SMPU0 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDMSKA2 : (32) SMPU0 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDMSKA2_Type;
#define REG_SMPU0_RIDMSKA2		(*(RwReg *)0x2000605CUL)

#else
#define REG_SMPU0_RIDMSKA2		(0x2000605C) /**< \brief (SMPU0) SMPU0 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDMSKA3 : (32) SMPU0 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDMSKA3_Type;
#define REG_SMPU0_RIDMSKA3		(*(RwReg *)0x20006074UL)

#else
#define REG_SMPU0_RIDMSKA3		(0x20006074) /**< \brief (SMPU0) SMPU0 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDB0 : (32) SMPU0 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDB0_Type;
#define REG_SMPU0_RIDB0		(*(RwReg *)0x20006030UL)

#else
#define REG_SMPU0_RIDB0		(0x20006030) /**< \brief (SMPU0) SMPU0 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDB1 : (32) SMPU0 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDB1_Type;
#define REG_SMPU0_RIDB1		(*(RwReg *)0x20006048UL)

#else
#define REG_SMPU0_RIDB1		(0x20006048) /**< \brief (SMPU0) SMPU0 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDB2 : (32) SMPU0 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDB2_Type;
#define REG_SMPU0_RIDB2		(*(RwReg *)0x20006060UL)

#else
#define REG_SMPU0_RIDB2		(0x20006060) /**< \brief (SMPU0) SMPU0 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDB3 : (32) SMPU0 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDB3_Type;
#define REG_SMPU0_RIDB3		(*(RwReg *)0x20006078UL)

#else
#define REG_SMPU0_RIDB3		(0x20006078) /**< \brief (SMPU0) SMPU0 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDMSKB0 : (32) SMPU0 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDMSKB0_Type;
#define REG_SMPU0_RIDMSKB0		(*(RwReg *)0x20006034UL)

#else
#define REG_SMPU0_RIDMSKB0		(0x20006034) /**< \brief (SMPU0) SMPU0 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDMSKB1 : (32) SMPU0 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDMSKB1_Type;
#define REG_SMPU0_RIDMSKB1		(*(RwReg *)0x2000604CUL)

#else
#define REG_SMPU0_RIDMSKB1		(0x2000604C) /**< \brief (SMPU0) SMPU0 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDMSKB2 : (32) SMPU0 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDMSKB2_Type;
#define REG_SMPU0_RIDMSKB2		(*(RwReg *)0x20006064UL)

#else
#define REG_SMPU0_RIDMSKB2		(0x20006064) /**< \brief (SMPU0) SMPU0 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_RIDMSKB3 : (32) SMPU0 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_RIDMSKB3_Type;
#define REG_SMPU0_RIDMSKB3		(*(RwReg *)0x2000607CUL)

#else
#define REG_SMPU0_RIDMSKB3		(0x2000607C) /**< \brief (SMPU0) SMPU0 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_REVID : (32) SMPU0 SMPU Revision ID ----- */
typedef union {
	struct {
		uint32_t REV:4;			/*!< bit	0..3	Incremental Version ID	*/
		uint32_t MAJOR:4;			/*!< bit	4..7	Major Version ID	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_REVID_Type;
#define REG_SMPU0_REVID		(*(RwReg *)0x20006220UL)

#else
#define REG_SMPU0_REVID		(0x20006220) /**< \brief (SMPU0) SMPU0 SMPU Revision ID */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_SECURECTL : (32) SMPU0 SMPU Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t SBEDIS:1;			/*!< bit	0	Security Violation Bus Error Disable	*/
		uint32_t SBETYPE:1;			/*!< bit	1	Security Violation Bus Error Type	*/
		uint32_t SINTEN:1;			/*!< bit	2	Security Violation Interrupt Enable	*/
		uint32_t RLOCK:1;			/*!< bit	3	Secure Region Registers Lock Bit	*/
		uint32_t :4;			/*!< bit	4..7	Reserved	*/
		uint32_t RNSEN:1;			/*!< bit	8	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	9	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	10	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	11	Secure Write Transaction Disable	*/
		uint32_t :19;			/*!< bit	12..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock Bit	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_SECURECTL_Type;
#define REG_SMPU0_SECURECTL		(*(RwReg *)0x20006800UL)

#else
#define REG_SMPU0_SECURECTL		(0x20006800) /**< \brief (SMPU0) SMPU0 SMPU Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_SECURERCTL0 : (32) SMPU0 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_SECURERCTL0_Type;
#define REG_SMPU0_SECURERCTL0		(*(RwReg *)0x20006820UL)

#else
#define REG_SMPU0_SECURERCTL0		(0x20006820) /**< \brief (SMPU0) SMPU0 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_SECURERCTL1 : (32) SMPU0 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_SECURERCTL1_Type;
#define REG_SMPU0_SECURERCTL1		(*(RwReg *)0x20006824UL)

#else
#define REG_SMPU0_SECURERCTL1		(0x20006824) /**< \brief (SMPU0) SMPU0 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_SECURERCTL2 : (32) SMPU0 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_SECURERCTL2_Type;
#define REG_SMPU0_SECURERCTL2		(*(RwReg *)0x20006828UL)

#else
#define REG_SMPU0_SECURERCTL2		(0x20006828) /**< \brief (SMPU0) SMPU0 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU0_SECURERCTL3 : (32) SMPU0 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU0_SECURERCTL3_Type;
#define REG_SMPU0_SECURERCTL3		(*(RwReg *)0x2000682CUL)

#else
#define REG_SMPU0_SECURERCTL3		(0x2000682C) /**< \brief (SMPU0) SMPU0 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SMPU0_CTL_Type		CTL;		/**< \brief SMPU0 SMPU Control */
	__IO SMPU0_STAT_Type		STAT;		/**< \brief SMPU0 SMPU Status */
	__IO SMPU0_IADDR_Type		IADDR;		/**< \brief SMPU0 Interrupt Address */
	__IO SMPU0_IDTLS_Type		IDTLS;		/**< \brief SMPU0 Interrupt Details */
	__IO SMPU0_BADDR_Type		BADDR;		/**< \brief SMPU0 Bus Error Address */
	__IO SMPU0_BDTLS_Type		BDTLS;		/**< \brief SMPU0 Bus Error Details */
		 RoReg8		Reserved1[0x08];		
	__IO SMPU0_RCTL0_Type		RCTL0;		/**< \brief SMPU0 Region n Control */
	__IO SMPU0_RADDR0_Type		RADDR0;		/**< \brief SMPU0 Region n Address */
	__IO SMPU0_RIDA0_Type		RIDA0;		/**< \brief SMPU0 Region n ID Register A */
	__IO SMPU0_RIDMSKA0_Type		RIDMSKA0;		/**< \brief SMPU0 Region n ID Mask Register A */
	__IO SMPU0_RIDB0_Type		RIDB0;		/**< \brief SMPU0 Region n ID Register B */
	__IO SMPU0_RIDMSKB0_Type		RIDMSKB0;		/**< \brief SMPU0 Region n ID Mask Register B */
	__IO SMPU0_RCTL1_Type		RCTL1;		/**< \brief SMPU0 Region n Control */
	__IO SMPU0_RADDR1_Type		RADDR1;		/**< \brief SMPU0 Region n Address */
	__IO SMPU0_RIDA1_Type		RIDA1;		/**< \brief SMPU0 Region n ID Register A */
	__IO SMPU0_RIDMSKA1_Type		RIDMSKA1;		/**< \brief SMPU0 Region n ID Mask Register A */
	__IO SMPU0_RIDB1_Type		RIDB1;		/**< \brief SMPU0 Region n ID Register B */
	__IO SMPU0_RIDMSKB1_Type		RIDMSKB1;		/**< \brief SMPU0 Region n ID Mask Register B */
	__IO SMPU0_RCTL2_Type		RCTL2;		/**< \brief SMPU0 Region n Control */
	__IO SMPU0_RADDR2_Type		RADDR2;		/**< \brief SMPU0 Region n Address */
	__IO SMPU0_RIDA2_Type		RIDA2;		/**< \brief SMPU0 Region n ID Register A */
	__IO SMPU0_RIDMSKA2_Type		RIDMSKA2;		/**< \brief SMPU0 Region n ID Mask Register A */
	__IO SMPU0_RIDB2_Type		RIDB2;		/**< \brief SMPU0 Region n ID Register B */
	__IO SMPU0_RIDMSKB2_Type		RIDMSKB2;		/**< \brief SMPU0 Region n ID Mask Register B */
	__IO SMPU0_RCTL3_Type		RCTL3;		/**< \brief SMPU0 Region n Control */
	__IO SMPU0_RADDR3_Type		RADDR3;		/**< \brief SMPU0 Region n Address */
	__IO SMPU0_RIDA3_Type		RIDA3;		/**< \brief SMPU0 Region n ID Register A */
	__IO SMPU0_RIDMSKA3_Type		RIDMSKA3;		/**< \brief SMPU0 Region n ID Mask Register A */
	__IO SMPU0_RIDB3_Type		RIDB3;		/**< \brief SMPU0 Region n ID Register B */
	__IO SMPU0_RIDMSKB3_Type		RIDMSKB3;		/**< \brief SMPU0 Region n ID Mask Register B */
		 RoReg8		Reserved2[0x1a0];		
	__IO SMPU0_REVID_Type		REVID;		/**< \brief SMPU0 SMPU Revision ID */
		 RoReg8		Reserved3[0x5dc];		
	__IO SMPU0_SECURECTL_Type		SECURECTL;		/**< \brief SMPU0 SMPU Control Secure Accesses */
		 RoReg8		Reserved4[0x1c];		
	__IO SMPU0_SECURERCTL0_Type		SECURERCTL0;		/**< \brief SMPU0 Region n Control Secure Accesses */
	__IO SMPU0_SECURERCTL1_Type		SECURERCTL1;		/**< \brief SMPU0 Region n Control Secure Accesses */
	__IO SMPU0_SECURERCTL2_Type		SECURERCTL2;		/**< \brief SMPU0 Region n Control Secure Accesses */
	__IO SMPU0_SECURERCTL3_Type		SECURERCTL3;		/**< \brief SMPU0 Region n Control Secure Accesses */
} Smpu0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_CTL : (32) SMPU1 SMPU Control ----- */
typedef union {
	struct {
		uint32_t RSDIS:1;			/*!< bit	0	Read Speculation Disable	*/
		uint32_t PBEDIS:1;			/*!< bit	1	Protection Violation Bus Error Disable	*/
		uint32_t PBETYPE:1;			/*!< bit	2	Protection Violation Bus Error Type	*/
		uint32_t PINTEN:1;			/*!< bit	3	Protection Violation Interrupt Enable	*/
		uint32_t RLOCK:1;			/*!< bit	4	RCTLn, RADDRn, RIDxn and RIDMxn registers Lock Bit	*/
		uint32_t :26;			/*!< bit	5..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock Bit	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_CTL_Type;
#define REG_SMPU1_CTL		(*(RwReg *)0x200C8000UL)

#else
#define REG_SMPU1_CTL		(0x200C8000) /**< \brief (SMPU1) SMPU1 SMPU Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_STAT : (32) SMPU1 SMPU Status ----- */
typedef union {
	struct {
		uint32_t IRQ:1;			/*!< bit	0	Interrupt Request	*/
		uint32_t IOVR:1;			/*!< bit	1	Interrupt Overrun	*/
		uint32_t BERR:1;			/*!< bit	2	Bus Error	*/
		uint32_t BEOVR:1;			/*!< bit	3	Bus Error Overrun	*/
		uint32_t :12;			/*!< bit	4..15	Reserved	*/
		uint32_t ADRERR:1;			/*!< bit	16	Address Error	*/
		uint32_t LWERR:1;			/*!< bit	17	Lock Write Error	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_STAT_Type;
#define REG_SMPU1_STAT		(*(RwReg *)0x200C8004UL)

#else
#define REG_SMPU1_STAT		(0x200C8004) /**< \brief (SMPU1) SMPU1 SMPU Status */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_IADDR : (32) SMPU1 Interrupt Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_IADDR_Type;
#define REG_SMPU1_IADDR		(*(RwReg *)0x200C8008UL)

#else
#define REG_SMPU1_IADDR		(0x200C8008) /**< \brief (SMPU1) SMPU1 Interrupt Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_IDTLS : (32) SMPU1 Interrupt Details ----- */
typedef union {
	struct {
		uint32_t SECURE:1;			/*!< bit	0	Secure Status	*/
		uint32_t RNW:1;			/*!< bit	1	Read/Write Status	*/
		uint32_t :6;			/*!< bit	2..7	Reserved	*/
		uint32_t ID:10;			/*!< bit	8..17	ID of Transaction	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_IDTLS_Type;
#define REG_SMPU1_IDTLS		(*(RwReg *)0x200C800CUL)

#else
#define REG_SMPU1_IDTLS		(0x200C800C) /**< \brief (SMPU1) SMPU1 Interrupt Details */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_BADDR : (32) SMPU1 Bus Error Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_BADDR_Type;
#define REG_SMPU1_BADDR		(*(RwReg *)0x200C8010UL)

#else
#define REG_SMPU1_BADDR		(0x200C8010) /**< \brief (SMPU1) SMPU1 Bus Error Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_BDTLS : (32) SMPU1 Bus Error Details ----- */
typedef union {
	struct {
		uint32_t SECURE:1;			/*!< bit	0	Secure Status	*/
		uint32_t RNW:1;			/*!< bit	1	Read/Write Status	*/
		uint32_t :6;			/*!< bit	2..7	Reserved	*/
		uint32_t ID:10;			/*!< bit	8..17	ID of Transaction	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_BDTLS_Type;
#define REG_SMPU1_BDTLS		(*(RwReg *)0x200C8014UL)

#else
#define REG_SMPU1_BDTLS		(0x200C8014) /**< \brief (SMPU1) SMPU1 Bus Error Details */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RCTL0 : (32) SMPU1 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RCTL0_Type;
#define REG_SMPU1_RCTL0		(*(RwReg *)0x200C8020UL)

#else
#define REG_SMPU1_RCTL0		(0x200C8020) /**< \brief (SMPU1) SMPU1 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RCTL1 : (32) SMPU1 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RCTL1_Type;
#define REG_SMPU1_RCTL1		(*(RwReg *)0x200C8038UL)

#else
#define REG_SMPU1_RCTL1		(0x200C8038) /**< \brief (SMPU1) SMPU1 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RCTL2 : (32) SMPU1 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RCTL2_Type;
#define REG_SMPU1_RCTL2		(*(RwReg *)0x200C8050UL)

#else
#define REG_SMPU1_RCTL2		(0x200C8050) /**< \brief (SMPU1) SMPU1 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RCTL3 : (32) SMPU1 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RCTL3_Type;
#define REG_SMPU1_RCTL3		(*(RwReg *)0x200C8068UL)

#else
#define REG_SMPU1_RCTL3		(0x200C8068) /**< \brief (SMPU1) SMPU1 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RCTL4 : (32) SMPU1 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RCTL4_Type;
#define REG_SMPU1_RCTL4		(*(RwReg *)0x200C8080UL)

#else
#define REG_SMPU1_RCTL4		(0x200C8080) /**< \brief (SMPU1) SMPU1 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RCTL5 : (32) SMPU1 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RCTL5_Type;
#define REG_SMPU1_RCTL5		(*(RwReg *)0x200C8098UL)

#else
#define REG_SMPU1_RCTL5		(0x200C8098) /**< \brief (SMPU1) SMPU1 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RCTL6 : (32) SMPU1 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RCTL6_Type;
#define REG_SMPU1_RCTL6		(*(RwReg *)0x200C80B0UL)

#else
#define REG_SMPU1_RCTL6		(0x200C80B0) /**< \brief (SMPU1) SMPU1 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RCTL7 : (32) SMPU1 Region n Control ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Region Enable	*/
		uint32_t SIZE:5;			/*!< bit	1..5	Size of the memory region	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t RPROTEN:1;			/*!< bit	8	Read Transaction Protection Enable	*/
		uint32_t RIDCINV:1;			/*!< bit	9	Read Transaction ID Compare Invert	*/
		uint32_t WPROTEN:1;			/*!< bit	10	Write Transaction Protection Enable	*/
		uint32_t WIDCINV:1;			/*!< bit	11	Write Transaction ID Compare Invert	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RCTL7_Type;
#define REG_SMPU1_RCTL7		(*(RwReg *)0x200C80C8UL)

#else
#define REG_SMPU1_RCTL7		(0x200C80C8) /**< \brief (SMPU1) SMPU1 Region n Control */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RADDR0 : (32) SMPU1 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RADDR0_Type;
#define REG_SMPU1_RADDR0		(*(RwReg *)0x200C8024UL)

#else
#define REG_SMPU1_RADDR0		(0x200C8024) /**< \brief (SMPU1) SMPU1 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RADDR1 : (32) SMPU1 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RADDR1_Type;
#define REG_SMPU1_RADDR1		(*(RwReg *)0x200C803CUL)

#else
#define REG_SMPU1_RADDR1		(0x200C803C) /**< \brief (SMPU1) SMPU1 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RADDR2 : (32) SMPU1 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RADDR2_Type;
#define REG_SMPU1_RADDR2		(*(RwReg *)0x200C8054UL)

#else
#define REG_SMPU1_RADDR2		(0x200C8054) /**< \brief (SMPU1) SMPU1 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RADDR3 : (32) SMPU1 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RADDR3_Type;
#define REG_SMPU1_RADDR3		(*(RwReg *)0x200C806CUL)

#else
#define REG_SMPU1_RADDR3		(0x200C806C) /**< \brief (SMPU1) SMPU1 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RADDR4 : (32) SMPU1 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RADDR4_Type;
#define REG_SMPU1_RADDR4		(*(RwReg *)0x200C8084UL)

#else
#define REG_SMPU1_RADDR4		(0x200C8084) /**< \brief (SMPU1) SMPU1 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RADDR5 : (32) SMPU1 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RADDR5_Type;
#define REG_SMPU1_RADDR5		(*(RwReg *)0x200C809CUL)

#else
#define REG_SMPU1_RADDR5		(0x200C809C) /**< \brief (SMPU1) SMPU1 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RADDR6 : (32) SMPU1 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RADDR6_Type;
#define REG_SMPU1_RADDR6		(*(RwReg *)0x200C80B4UL)

#else
#define REG_SMPU1_RADDR6		(0x200C80B4) /**< \brief (SMPU1) SMPU1 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RADDR7 : (32) SMPU1 Region n Address ----- */
typedef union {
	struct {
		uint32_t :12;			/*!< bit	0..11	Reserved	*/
		uint32_t BADDR:20;			/*!< bit	12..31	Region n Base Address	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RADDR7_Type;
#define REG_SMPU1_RADDR7		(*(RwReg *)0x200C80CCUL)

#else
#define REG_SMPU1_RADDR7		(0x200C80CC) /**< \brief (SMPU1) SMPU1 Region n Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDA0 : (32) SMPU1 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDA0_Type;
#define REG_SMPU1_RIDA0		(*(RwReg *)0x200C8028UL)

#else
#define REG_SMPU1_RIDA0		(0x200C8028) /**< \brief (SMPU1) SMPU1 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDA1 : (32) SMPU1 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDA1_Type;
#define REG_SMPU1_RIDA1		(*(RwReg *)0x200C8040UL)

#else
#define REG_SMPU1_RIDA1		(0x200C8040) /**< \brief (SMPU1) SMPU1 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDA2 : (32) SMPU1 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDA2_Type;
#define REG_SMPU1_RIDA2		(*(RwReg *)0x200C8058UL)

#else
#define REG_SMPU1_RIDA2		(0x200C8058) /**< \brief (SMPU1) SMPU1 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDA3 : (32) SMPU1 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDA3_Type;
#define REG_SMPU1_RIDA3		(*(RwReg *)0x200C8070UL)

#else
#define REG_SMPU1_RIDA3		(0x200C8070) /**< \brief (SMPU1) SMPU1 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDA4 : (32) SMPU1 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDA4_Type;
#define REG_SMPU1_RIDA4		(*(RwReg *)0x200C8088UL)

#else
#define REG_SMPU1_RIDA4		(0x200C8088) /**< \brief (SMPU1) SMPU1 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDA5 : (32) SMPU1 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDA5_Type;
#define REG_SMPU1_RIDA5		(*(RwReg *)0x200C80A0UL)

#else
#define REG_SMPU1_RIDA5		(0x200C80A0) /**< \brief (SMPU1) SMPU1 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDA6 : (32) SMPU1 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDA6_Type;
#define REG_SMPU1_RIDA6		(*(RwReg *)0x200C80B8UL)

#else
#define REG_SMPU1_RIDA6		(0x200C80B8) /**< \brief (SMPU1) SMPU1 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDA7 : (32) SMPU1 Region n ID Register A ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDA7_Type;
#define REG_SMPU1_RIDA7		(*(RwReg *)0x200C80D0UL)

#else
#define REG_SMPU1_RIDA7		(0x200C80D0) /**< \brief (SMPU1) SMPU1 Region n ID Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKA0 : (32) SMPU1 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKA0_Type;
#define REG_SMPU1_RIDMSKA0		(*(RwReg *)0x200C802CUL)

#else
#define REG_SMPU1_RIDMSKA0		(0x200C802C) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKA1 : (32) SMPU1 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKA1_Type;
#define REG_SMPU1_RIDMSKA1		(*(RwReg *)0x200C8044UL)

#else
#define REG_SMPU1_RIDMSKA1		(0x200C8044) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKA2 : (32) SMPU1 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKA2_Type;
#define REG_SMPU1_RIDMSKA2		(*(RwReg *)0x200C805CUL)

#else
#define REG_SMPU1_RIDMSKA2		(0x200C805C) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKA3 : (32) SMPU1 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKA3_Type;
#define REG_SMPU1_RIDMSKA3		(*(RwReg *)0x200C8074UL)

#else
#define REG_SMPU1_RIDMSKA3		(0x200C8074) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKA4 : (32) SMPU1 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKA4_Type;
#define REG_SMPU1_RIDMSKA4		(*(RwReg *)0x200C808CUL)

#else
#define REG_SMPU1_RIDMSKA4		(0x200C808C) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKA5 : (32) SMPU1 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKA5_Type;
#define REG_SMPU1_RIDMSKA5		(*(RwReg *)0x200C80A4UL)

#else
#define REG_SMPU1_RIDMSKA5		(0x200C80A4) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKA6 : (32) SMPU1 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKA6_Type;
#define REG_SMPU1_RIDMSKA6		(*(RwReg *)0x200C80BCUL)

#else
#define REG_SMPU1_RIDMSKA6		(0x200C80BC) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKA7 : (32) SMPU1 Region n ID Mask Register A ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register A	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKA7_Type;
#define REG_SMPU1_RIDMSKA7		(*(RwReg *)0x200C80D4UL)

#else
#define REG_SMPU1_RIDMSKA7		(0x200C80D4) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register A */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDB0 : (32) SMPU1 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDB0_Type;
#define REG_SMPU1_RIDB0		(*(RwReg *)0x200C8030UL)

#else
#define REG_SMPU1_RIDB0		(0x200C8030) /**< \brief (SMPU1) SMPU1 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDB1 : (32) SMPU1 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDB1_Type;
#define REG_SMPU1_RIDB1		(*(RwReg *)0x200C8048UL)

#else
#define REG_SMPU1_RIDB1		(0x200C8048) /**< \brief (SMPU1) SMPU1 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDB2 : (32) SMPU1 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDB2_Type;
#define REG_SMPU1_RIDB2		(*(RwReg *)0x200C8060UL)

#else
#define REG_SMPU1_RIDB2		(0x200C8060) /**< \brief (SMPU1) SMPU1 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDB3 : (32) SMPU1 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDB3_Type;
#define REG_SMPU1_RIDB3		(*(RwReg *)0x200C8078UL)

#else
#define REG_SMPU1_RIDB3		(0x200C8078) /**< \brief (SMPU1) SMPU1 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDB4 : (32) SMPU1 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDB4_Type;
#define REG_SMPU1_RIDB4		(*(RwReg *)0x200C8090UL)

#else
#define REG_SMPU1_RIDB4		(0x200C8090) /**< \brief (SMPU1) SMPU1 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDB5 : (32) SMPU1 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDB5_Type;
#define REG_SMPU1_RIDB5		(*(RwReg *)0x200C80A8UL)

#else
#define REG_SMPU1_RIDB5		(0x200C80A8) /**< \brief (SMPU1) SMPU1 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDB6 : (32) SMPU1 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDB6_Type;
#define REG_SMPU1_RIDB6		(*(RwReg *)0x200C80C0UL)

#else
#define REG_SMPU1_RIDB6		(0x200C80C0) /**< \brief (SMPU1) SMPU1 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDB7 : (32) SMPU1 Region n ID Register B ----- */
typedef union {
	struct {
		uint32_t ID:10;			/*!< bit	0..9	Region n ID Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDB7_Type;
#define REG_SMPU1_RIDB7		(*(RwReg *)0x200C80D8UL)

#else
#define REG_SMPU1_RIDB7		(0x200C80D8) /**< \brief (SMPU1) SMPU1 Region n ID Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKB0 : (32) SMPU1 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKB0_Type;
#define REG_SMPU1_RIDMSKB0		(*(RwReg *)0x200C8034UL)

#else
#define REG_SMPU1_RIDMSKB0		(0x200C8034) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKB1 : (32) SMPU1 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKB1_Type;
#define REG_SMPU1_RIDMSKB1		(*(RwReg *)0x200C804CUL)

#else
#define REG_SMPU1_RIDMSKB1		(0x200C804C) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKB2 : (32) SMPU1 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKB2_Type;
#define REG_SMPU1_RIDMSKB2		(*(RwReg *)0x200C8064UL)

#else
#define REG_SMPU1_RIDMSKB2		(0x200C8064) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKB3 : (32) SMPU1 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKB3_Type;
#define REG_SMPU1_RIDMSKB3		(*(RwReg *)0x200C807CUL)

#else
#define REG_SMPU1_RIDMSKB3		(0x200C807C) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKB4 : (32) SMPU1 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKB4_Type;
#define REG_SMPU1_RIDMSKB4		(*(RwReg *)0x200C8094UL)

#else
#define REG_SMPU1_RIDMSKB4		(0x200C8094) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKB5 : (32) SMPU1 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKB5_Type;
#define REG_SMPU1_RIDMSKB5		(*(RwReg *)0x200C80ACUL)

#else
#define REG_SMPU1_RIDMSKB5		(0x200C80AC) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKB6 : (32) SMPU1 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKB6_Type;
#define REG_SMPU1_RIDMSKB6		(*(RwReg *)0x200C80C4UL)

#else
#define REG_SMPU1_RIDMSKB6		(0x200C80C4) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_RIDMSKB7 : (32) SMPU1 Region n ID Mask Register B ----- */
typedef union {
	struct {
		uint32_t MSK:10;			/*!< bit	0..9	Region n ID Mask Register B	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_RIDMSKB7_Type;
#define REG_SMPU1_RIDMSKB7		(*(RwReg *)0x200C80DCUL)

#else
#define REG_SMPU1_RIDMSKB7		(0x200C80DC) /**< \brief (SMPU1) SMPU1 Region n ID Mask Register B */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_REVID : (32) SMPU1 SMPU Revision ID ----- */
typedef union {
	struct {
		uint32_t REV:4;			/*!< bit	0..3	Incremental Version ID	*/
		uint32_t MAJOR:4;			/*!< bit	4..7	Major Version ID	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_REVID_Type;
#define REG_SMPU1_REVID		(*(RwReg *)0x200C8220UL)

#else
#define REG_SMPU1_REVID		(0x200C8220) /**< \brief (SMPU1) SMPU1 SMPU Revision ID */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURECTL : (32) SMPU1 SMPU Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t SBEDIS:1;			/*!< bit	0	Security Violation Bus Error Disable	*/
		uint32_t SBETYPE:1;			/*!< bit	1	Security Violation Bus Error Type	*/
		uint32_t SINTEN:1;			/*!< bit	2	Security Violation Interrupt Enable	*/
		uint32_t RLOCK:1;			/*!< bit	3	Secure Region Registers Lock Bit	*/
		uint32_t :4;			/*!< bit	4..7	Reserved	*/
		uint32_t RNSEN:1;			/*!< bit	8	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	9	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	10	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	11	Secure Write Transaction Disable	*/
		uint32_t :19;			/*!< bit	12..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock Bit	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURECTL_Type;
#define REG_SMPU1_SECURECTL		(*(RwReg *)0x200C8800UL)

#else
#define REG_SMPU1_SECURECTL		(0x200C8800) /**< \brief (SMPU1) SMPU1 SMPU Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURERCTL0 : (32) SMPU1 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURERCTL0_Type;
#define REG_SMPU1_SECURERCTL0		(*(RwReg *)0x200C8820UL)

#else
#define REG_SMPU1_SECURERCTL0		(0x200C8820) /**< \brief (SMPU1) SMPU1 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURERCTL1 : (32) SMPU1 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURERCTL1_Type;
#define REG_SMPU1_SECURERCTL1		(*(RwReg *)0x200C8824UL)

#else
#define REG_SMPU1_SECURERCTL1		(0x200C8824) /**< \brief (SMPU1) SMPU1 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURERCTL2 : (32) SMPU1 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURERCTL2_Type;
#define REG_SMPU1_SECURERCTL2		(*(RwReg *)0x200C8828UL)

#else
#define REG_SMPU1_SECURERCTL2		(0x200C8828) /**< \brief (SMPU1) SMPU1 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURERCTL3 : (32) SMPU1 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURERCTL3_Type;
#define REG_SMPU1_SECURERCTL3		(*(RwReg *)0x200C882CUL)

#else
#define REG_SMPU1_SECURERCTL3		(0x200C882C) /**< \brief (SMPU1) SMPU1 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURERCTL4 : (32) SMPU1 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURERCTL4_Type;
#define REG_SMPU1_SECURERCTL4		(*(RwReg *)0x200C8830UL)

#else
#define REG_SMPU1_SECURERCTL4		(0x200C8830) /**< \brief (SMPU1) SMPU1 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURERCTL5 : (32) SMPU1 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURERCTL5_Type;
#define REG_SMPU1_SECURERCTL5		(*(RwReg *)0x200C8834UL)

#else
#define REG_SMPU1_SECURERCTL5		(0x200C8834) /**< \brief (SMPU1) SMPU1 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURERCTL6 : (32) SMPU1 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURERCTL6_Type;
#define REG_SMPU1_SECURERCTL6		(*(RwReg *)0x200C8838UL)

#else
#define REG_SMPU1_SECURERCTL6		(0x200C8838) /**< \brief (SMPU1) SMPU1 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMPU1_SECURERCTL7 : (32) SMPU1 Region n Control Secure Accesses ----- */
typedef union {
	struct {
		uint32_t RNSEN:1;			/*!< bit	0	Non-secure Read Transaction Enable	*/
		uint32_t RSECDIS:1;			/*!< bit	1	Secure Read Transaction Disable	*/
		uint32_t WNSEN:1;			/*!< bit	2	Non-secure Write Transaction Enable	*/
		uint32_t WSECDIS:1;			/*!< bit	3	Secure Write Transaction Disable	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMPU1_SECURERCTL7_Type;
#define REG_SMPU1_SECURERCTL7		(*(RwReg *)0x200C883CUL)

#else
#define REG_SMPU1_SECURERCTL7		(0x200C883C) /**< \brief (SMPU1) SMPU1 Region n Control Secure Accesses */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SMPU1_CTL_Type		CTL;		/**< \brief SMPU1 SMPU Control */
	__IO SMPU1_STAT_Type		STAT;		/**< \brief SMPU1 SMPU Status */
	__IO SMPU1_IADDR_Type		IADDR;		/**< \brief SMPU1 Interrupt Address */
	__IO SMPU1_IDTLS_Type		IDTLS;		/**< \brief SMPU1 Interrupt Details */
	__IO SMPU1_BADDR_Type		BADDR;		/**< \brief SMPU1 Bus Error Address */
	__IO SMPU1_BDTLS_Type		BDTLS;		/**< \brief SMPU1 Bus Error Details */
		 RoReg8		Reserved1[0x08];		
	__IO SMPU1_RCTL0_Type		RCTL0;		/**< \brief SMPU1 Region n Control */
	__IO SMPU1_RADDR0_Type		RADDR0;		/**< \brief SMPU1 Region n Address */
	__IO SMPU1_RIDA0_Type		RIDA0;		/**< \brief SMPU1 Region n ID Register A */
	__IO SMPU1_RIDMSKA0_Type		RIDMSKA0;		/**< \brief SMPU1 Region n ID Mask Register A */
	__IO SMPU1_RIDB0_Type		RIDB0;		/**< \brief SMPU1 Region n ID Register B */
	__IO SMPU1_RIDMSKB0_Type		RIDMSKB0;		/**< \brief SMPU1 Region n ID Mask Register B */
	__IO SMPU1_RCTL1_Type		RCTL1;		/**< \brief SMPU1 Region n Control */
	__IO SMPU1_RADDR1_Type		RADDR1;		/**< \brief SMPU1 Region n Address */
	__IO SMPU1_RIDA1_Type		RIDA1;		/**< \brief SMPU1 Region n ID Register A */
	__IO SMPU1_RIDMSKA1_Type		RIDMSKA1;		/**< \brief SMPU1 Region n ID Mask Register A */
	__IO SMPU1_RIDB1_Type		RIDB1;		/**< \brief SMPU1 Region n ID Register B */
	__IO SMPU1_RIDMSKB1_Type		RIDMSKB1;		/**< \brief SMPU1 Region n ID Mask Register B */
	__IO SMPU1_RCTL2_Type		RCTL2;		/**< \brief SMPU1 Region n Control */
	__IO SMPU1_RADDR2_Type		RADDR2;		/**< \brief SMPU1 Region n Address */
	__IO SMPU1_RIDA2_Type		RIDA2;		/**< \brief SMPU1 Region n ID Register A */
	__IO SMPU1_RIDMSKA2_Type		RIDMSKA2;		/**< \brief SMPU1 Region n ID Mask Register A */
	__IO SMPU1_RIDB2_Type		RIDB2;		/**< \brief SMPU1 Region n ID Register B */
	__IO SMPU1_RIDMSKB2_Type		RIDMSKB2;		/**< \brief SMPU1 Region n ID Mask Register B */
	__IO SMPU1_RCTL3_Type		RCTL3;		/**< \brief SMPU1 Region n Control */
	__IO SMPU1_RADDR3_Type		RADDR3;		/**< \brief SMPU1 Region n Address */
	__IO SMPU1_RIDA3_Type		RIDA3;		/**< \brief SMPU1 Region n ID Register A */
	__IO SMPU1_RIDMSKA3_Type		RIDMSKA3;		/**< \brief SMPU1 Region n ID Mask Register A */
	__IO SMPU1_RIDB3_Type		RIDB3;		/**< \brief SMPU1 Region n ID Register B */
	__IO SMPU1_RIDMSKB3_Type		RIDMSKB3;		/**< \brief SMPU1 Region n ID Mask Register B */
	__IO SMPU1_RCTL4_Type		RCTL4;		/**< \brief SMPU1 Region n Control */
	__IO SMPU1_RADDR4_Type		RADDR4;		/**< \brief SMPU1 Region n Address */
	__IO SMPU1_RIDA4_Type		RIDA4;		/**< \brief SMPU1 Region n ID Register A */
	__IO SMPU1_RIDMSKA4_Type		RIDMSKA4;		/**< \brief SMPU1 Region n ID Mask Register A */
	__IO SMPU1_RIDB4_Type		RIDB4;		/**< \brief SMPU1 Region n ID Register B */
	__IO SMPU1_RIDMSKB4_Type		RIDMSKB4;		/**< \brief SMPU1 Region n ID Mask Register B */
	__IO SMPU1_RCTL5_Type		RCTL5;		/**< \brief SMPU1 Region n Control */
	__IO SMPU1_RADDR5_Type		RADDR5;		/**< \brief SMPU1 Region n Address */
	__IO SMPU1_RIDA5_Type		RIDA5;		/**< \brief SMPU1 Region n ID Register A */
	__IO SMPU1_RIDMSKA5_Type		RIDMSKA5;		/**< \brief SMPU1 Region n ID Mask Register A */
	__IO SMPU1_RIDB5_Type		RIDB5;		/**< \brief SMPU1 Region n ID Register B */
	__IO SMPU1_RIDMSKB5_Type		RIDMSKB5;		/**< \brief SMPU1 Region n ID Mask Register B */
	__IO SMPU1_RCTL6_Type		RCTL6;		/**< \brief SMPU1 Region n Control */
	__IO SMPU1_RADDR6_Type		RADDR6;		/**< \brief SMPU1 Region n Address */
	__IO SMPU1_RIDA6_Type		RIDA6;		/**< \brief SMPU1 Region n ID Register A */
	__IO SMPU1_RIDMSKA6_Type		RIDMSKA6;		/**< \brief SMPU1 Region n ID Mask Register A */
	__IO SMPU1_RIDB6_Type		RIDB6;		/**< \brief SMPU1 Region n ID Register B */
	__IO SMPU1_RIDMSKB6_Type		RIDMSKB6;		/**< \brief SMPU1 Region n ID Mask Register B */
	__IO SMPU1_RCTL7_Type		RCTL7;		/**< \brief SMPU1 Region n Control */
	__IO SMPU1_RADDR7_Type		RADDR7;		/**< \brief SMPU1 Region n Address */
	__IO SMPU1_RIDA7_Type		RIDA7;		/**< \brief SMPU1 Region n ID Register A */
	__IO SMPU1_RIDMSKA7_Type		RIDMSKA7;		/**< \brief SMPU1 Region n ID Mask Register A */
	__IO SMPU1_RIDB7_Type		RIDB7;		/**< \brief SMPU1 Region n ID Register B */
	__IO SMPU1_RIDMSKB7_Type		RIDMSKB7;		/**< \brief SMPU1 Region n ID Mask Register B */
		 RoReg8		Reserved2[0x140];		
	__IO SMPU1_REVID_Type		REVID;		/**< \brief SMPU1 SMPU Revision ID */
		 RoReg8		Reserved3[0x5dc];		
	__IO SMPU1_SECURECTL_Type		SECURECTL;		/**< \brief SMPU1 SMPU Control Secure Accesses */
		 RoReg8		Reserved4[0x1c];		
	__IO SMPU1_SECURERCTL0_Type		SECURERCTL0;		/**< \brief SMPU1 Region n Control Secure Accesses */
	__IO SMPU1_SECURERCTL1_Type		SECURERCTL1;		/**< \brief SMPU1 Region n Control Secure Accesses */
	__IO SMPU1_SECURERCTL2_Type		SECURERCTL2;		/**< \brief SMPU1 Region n Control Secure Accesses */
	__IO SMPU1_SECURERCTL3_Type		SECURERCTL3;		/**< \brief SMPU1 Region n Control Secure Accesses */
	__IO SMPU1_SECURERCTL4_Type		SECURERCTL4;		/**< \brief SMPU1 Region n Control Secure Accesses */
	__IO SMPU1_SECURERCTL5_Type		SECURERCTL5;		/**< \brief SMPU1 Region n Control Secure Accesses */
	__IO SMPU1_SECURERCTL6_Type		SECURERCTL6;		/**< \brief SMPU1 Region n Control Secure Accesses */
	__IO SMPU1_SECURERCTL7_Type		SECURERCTL7;		/**< \brief SMPU1 Region n Control Secure Accesses */
} Smpu1;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_CTL : (32) L2CTL0 Control Register ----- */
typedef union {
	struct {
		uint32_t BK0EDIS:1;			/*!< bit	0	Bank 0 ECC Disable	*/
		uint32_t BK1EDIS:1;			/*!< bit	1	Bank 1 ECC Disable	*/
		uint32_t BK2EDIS:1;			/*!< bit	2	Bank 2 ECC Disable	*/
		uint32_t BK3EDIS:1;			/*!< bit	3	Bank 3 ECC Disable	*/
		uint32_t BK4EDIS:1;			/*!< bit	4	Bank 4 ECC Disable	*/
		uint32_t BK5EDIS:1;			/*!< bit	5	Bank 5 ECC Disable	*/
		uint32_t BK6EDIS:1;			/*!< bit	6	Bank 6 ECC Disable	*/
		uint32_t BK7EDIS:1;			/*!< bit	7	Bank 7 ECC Disable	*/
		uint32_t BK8EDIS:1;			/*!< bit	8	Bank 8 (ROM) ECC Disable	*/
		uint32_t :7;			/*!< bit	9..15	Reserved	*/
		uint32_t ECCMAP0:1;			/*!< bit	16	ECC Map Bank 0	*/
		uint32_t ECCMAP1:1;			/*!< bit	17	ECC Map Bank 1	*/
		uint32_t ECCMAP2:1;			/*!< bit	18	ECC Map Bank 2	*/
		uint32_t ECCMAP3:1;			/*!< bit	19	ECC Map Bank 3	*/
		uint32_t ECCMAP4:1;			/*!< bit	20	ECC Map Bank 4	*/
		uint32_t ECCMAP5:1;			/*!< bit	21	ECC Map Bank 5	*/
		uint32_t ECCMAP6:1;			/*!< bit	22	ECC Map Bank 6	*/
		uint32_t ECCMAP7:1;			/*!< bit	23	ECC Map Bank 7	*/
		uint32_t ECCMAP8:1;			/*!< bit	24	ECC Map Bank 8 (ROM)	*/
		uint32_t :3;			/*!< bit	25..27	Reserved	*/
		uint32_t DISURP:1;			/*!< bit	28	Disable Urgent Request Priority	*/
		uint32_t :2;			/*!< bit	29..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_CTL_Type;
#define REG_L2CTL0_CTL		(*(RwReg *)0x20008000UL)

#else
#define REG_L2CTL0_CTL		(0x20008000) /**< \brief (L2CTL0) L2CTL0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ACTL_C0 : (32) L2CTL0 Access Control Core 0 Register ----- */
typedef union {
	struct {
		uint32_t BK0WDIS:1;			/*!< bit	0	Bank 0 Write Disable	*/
		uint32_t BK1WDIS:1;			/*!< bit	1	Bank 1 Write Disable	*/
		uint32_t BK2WDIS:1;			/*!< bit	2	Bank 2 Write Disable	*/
		uint32_t BK3WDIS:1;			/*!< bit	3	Bank 3 Write Disable	*/
		uint32_t BK4WDIS:1;			/*!< bit	4	Bank 4 Write Disable	*/
		uint32_t BK5WDIS:1;			/*!< bit	5	Bank 5 Write Disable	*/
		uint32_t BK6WDIS:1;			/*!< bit	6	Bank 6 Write Disable	*/
		uint32_t BK7WDIS:1;			/*!< bit	7	Bank 7 Write Disable	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ACTL_C0_Type;
#define REG_L2CTL0_ACTL_C0		(*(RwReg *)0x20008004UL)

#else
#define REG_L2CTL0_ACTL_C0		(0x20008004) /**< \brief (L2CTL0) L2CTL0 Access Control Core 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ACTL_SYS : (32) L2CTL0 Access Control System Register ----- */
typedef union {
	struct {
		uint32_t BK0WDIS:1;			/*!< bit	0	Bank 0 Write Disable	*/
		uint32_t BK1WDIS:1;			/*!< bit	1	Bank 1 Write Disable	*/
		uint32_t BK2WDIS:1;			/*!< bit	2	Bank 2 Write Disable	*/
		uint32_t BK3WDIS:1;			/*!< bit	3	Bank 3 Write Disable	*/
		uint32_t BK4WDIS:1;			/*!< bit	4	Bank 4 Write Disable	*/
		uint32_t BK5WDIS:1;			/*!< bit	5	Bank 5 Write Disable	*/
		uint32_t BK6WDIS:1;			/*!< bit	6	Bank 6 Write Disable	*/
		uint32_t BK7WDIS:1;			/*!< bit	7	Bank 7 Write Disable	*/
		uint32_t :23;			/*!< bit	8..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ACTL_SYS_Type;
#define REG_L2CTL0_ACTL_SYS		(*(RwReg *)0x2000800CUL)

#else
#define REG_L2CTL0_ACTL_SYS		(0x2000800C) /**< \brief (L2CTL0) L2CTL0 Access Control System Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_STAT : (32) L2CTL0 Status Register ----- */
typedef union {
	struct {
		uint32_t ERR0:1;			/*!< bit	0	Error Port 0	*/
		uint32_t ERR1:1;			/*!< bit	1	Error Port 1	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t SCRBDN:1;			/*!< bit	4	Scrub Status	*/
		uint32_t INITDN:1;			/*!< bit	5	Initialization Status	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t ECCERR0:1;			/*!< bit	8	ECC Error Bank 0	*/
		uint32_t ECCERR1:1;			/*!< bit	9	ECC Error Bank 1	*/
		uint32_t ECCERR2:1;			/*!< bit	10	ECC Error Bank 2	*/
		uint32_t ECCERR3:1;			/*!< bit	11	ECC Error Bank 3	*/
		uint32_t ECCERR4:1;			/*!< bit	12	ECC Error Bank 4	*/
		uint32_t ECCERR5:1;			/*!< bit	13	ECC Error Bank 5	*/
		uint32_t ECCERR6:1;			/*!< bit	14	ECC Error Bank 6	*/
		uint32_t ECCERR7:1;			/*!< bit	15	ECC Error Bank 7	*/
		uint32_t ECCERR8:1;			/*!< bit	16	ECC Error Bank 8 (ROM)	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_STAT_Type;
#define REG_L2CTL0_STAT		(*(RwReg *)0x20008010UL)

#else
#define REG_L2CTL0_STAT		(0x20008010) /**< \brief (L2CTL0) L2CTL0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_RPCR : (32) L2CTL0 Read Priority Count Register ----- */
typedef union {
	struct {
		uint32_t RPC0:8;			/*!< bit	0..7	Read Priority Count 0	*/
		uint32_t RPC1:8;			/*!< bit	8..15	Read Priority Count 1	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_RPCR_Type;
#define REG_L2CTL0_RPCR		(*(RwReg *)0x20008014UL)

#else
#define REG_L2CTL0_RPCR		(0x20008014) /**< \brief (L2CTL0) L2CTL0 Read Priority Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_WPCR : (32) L2CTL0 Write Priority Count Register ----- */
typedef union {
	struct {
		uint32_t WPC0:8;			/*!< bit	0..7	Write Priority Count 0	*/
		uint32_t WPC1:8;			/*!< bit	8..15	Write Priority Count 1	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_WPCR_Type;
#define REG_L2CTL0_WPCR		(*(RwReg *)0x20008018UL)

#else
#define REG_L2CTL0_WPCR		(0x20008018) /**< \brief (L2CTL0) L2CTL0 Write Priority Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_INIT : (32) L2CTL0 Initialization Register ----- */
typedef union {
	struct {
		uint32_t BK0:1;			/*!< bit	0	Initialize Bank0	*/
		uint32_t BK1:1;			/*!< bit	1	Initialize Bank1	*/
		uint32_t BK2:1;			/*!< bit	2	Initialize Bank2	*/
		uint32_t BK3:1;			/*!< bit	3	Initialize Bank3	*/
		uint32_t BK4:1;			/*!< bit	4	Initialize Bank4	*/
		uint32_t BK5:1;			/*!< bit	5	Initialize Bank5	*/
		uint32_t BK6:1;			/*!< bit	6	Initialize Bank6	*/
		uint32_t BK7:1;			/*!< bit	7	Initialize Bank7	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_INIT_Type;
#define REG_L2CTL0_INIT		(*(RwReg *)0x20008024UL)

#else
#define REG_L2CTL0_INIT		(0x20008024) /**< \brief (L2CTL0) L2CTL0 Initialization Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ISTAT : (32) L2CTL0 Initialization Status Register ----- */
typedef union {
	struct {
		uint32_t BK0:1;			/*!< bit	0	Bank 0 Initialization Status	*/
		uint32_t BK1:1;			/*!< bit	1	Bank 1 Initialization Status	*/
		uint32_t BK2:1;			/*!< bit	2	Bank 2 Initialization Status	*/
		uint32_t BK3:1;			/*!< bit	3	Bank 3 Initialization Status	*/
		uint32_t BK4:1;			/*!< bit	4	Bank 4 Initialization Status	*/
		uint32_t BK5:1;			/*!< bit	5	Bank 5 Initialization Status	*/
		uint32_t BK6:1;			/*!< bit	6	Bank 6 Initialization Status	*/
		uint32_t BK7:1;			/*!< bit	7	Bank 7 Initialization Status	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ISTAT_Type;
#define REG_L2CTL0_ISTAT		(*(RwReg *)0x20008038UL)

#else
#define REG_L2CTL0_ISTAT		(0x20008038) /**< \brief (L2CTL0) L2CTL0 Initialization Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_PCTL : (32) L2CTL0 Power Control Register ----- */
typedef union {
	struct {
		uint32_t BK0DS:1;			/*!< bit	0	Bank 0 Deep Sleep Enable	*/
		uint32_t BK1DS:1;			/*!< bit	1	Bank 1 Deep Sleep Enable	*/
		uint32_t BK2DS:1;			/*!< bit	2	Bank 2 Deep Sleep Enable	*/
		uint32_t BK3DS:1;			/*!< bit	3	Bank 3 Deep Sleep Enable	*/
		uint32_t BK4DS:1;			/*!< bit	4	Bank 4 Deep Sleep Enable	*/
		uint32_t BK5DS:1;			/*!< bit	5	Bank 5 Deep Sleep Enable	*/
		uint32_t BK6DS:1;			/*!< bit	6	Bank 6 Deep Sleep Enable	*/
		uint32_t BK7DS:1;			/*!< bit	7	Bank 7 Deep Sleep Enable	*/
		uint32_t :8;			/*!< bit	8..15	Reserved	*/
		uint32_t BK0SD:1;			/*!< bit	16	Bank 0 Shut Down Enable	*/
		uint32_t BK1SD:1;			/*!< bit	17	Bank 1 Shut Down Enable	*/
		uint32_t BK2SD:1;			/*!< bit	18	Bank 2 Shut Down Enable	*/
		uint32_t BK3SD:1;			/*!< bit	19	Bank 3 Shut Down Enable	*/
		uint32_t BK4SD:1;			/*!< bit	20	Bank 4 Shut Down Enable	*/
		uint32_t BK5SD:1;			/*!< bit	21	Bank 5 Shut Down Enable	*/
		uint32_t BK6SD:1;			/*!< bit	22	Bank 6 Shut Down Enable	*/
		uint32_t BK7SD:1;			/*!< bit	23	Bank 7 Shut Down Enable	*/
		uint32_t BK8SD:1;			/*!< bit	24	Bank 8(ROM) Shut Down Enable	*/
		uint32_t :6;			/*!< bit	25..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_PCTL_Type;
#define REG_L2CTL0_PCTL		(*(RwReg *)0x2000803CUL)

#else
#define REG_L2CTL0_PCTL		(0x2000803C) /**< \brief (L2CTL0) L2CTL0 Power Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR0 : (32) L2CTL0 ECC Error Address 0 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR0_Type;
#define REG_L2CTL0_ERRADDR0		(*(RwReg *)0x20008040UL)

#else
#define REG_L2CTL0_ERRADDR0		(0x20008040) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR1 : (32) L2CTL0 ECC Error Address 1 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR1_Type;
#define REG_L2CTL0_ERRADDR1		(*(RwReg *)0x20008044UL)

#else
#define REG_L2CTL0_ERRADDR1		(0x20008044) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR2 : (32) L2CTL0 ECC Error Address 2 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR2_Type;
#define REG_L2CTL0_ERRADDR2		(*(RwReg *)0x20008048UL)

#else
#define REG_L2CTL0_ERRADDR2		(0x20008048) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR3 : (32) L2CTL0 ECC Error Address 3 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR3_Type;
#define REG_L2CTL0_ERRADDR3		(*(RwReg *)0x2000804CUL)

#else
#define REG_L2CTL0_ERRADDR3		(0x2000804C) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR4 : (32) L2CTL0 ECC Error Address 4 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR4_Type;
#define REG_L2CTL0_ERRADDR4		(*(RwReg *)0x20008050UL)

#else
#define REG_L2CTL0_ERRADDR4		(0x20008050) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 4 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR5 : (32) L2CTL0 ECC Error Address 5 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR5_Type;
#define REG_L2CTL0_ERRADDR5		(*(RwReg *)0x20008054UL)

#else
#define REG_L2CTL0_ERRADDR5		(0x20008054) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 5 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR6 : (32) L2CTL0 ECC Error Address 6 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR6_Type;
#define REG_L2CTL0_ERRADDR6		(*(RwReg *)0x20008058UL)

#else
#define REG_L2CTL0_ERRADDR6		(0x20008058) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 6 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR7 : (32) L2CTL0 ECC Error Address 7 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR7_Type;
#define REG_L2CTL0_ERRADDR7		(*(RwReg *)0x2000805CUL)

#else
#define REG_L2CTL0_ERRADDR7		(0x2000805C) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 7 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ERRADDR8 : (32) L2CTL0 ECC Error Address 8 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ERRADDR8_Type;
#define REG_L2CTL0_ERRADDR8		(*(RwReg *)0x20008060UL)

#else
#define REG_L2CTL0_ERRADDR8		(0x20008060) /**< \brief (L2CTL0) L2CTL0 ECC Error Address 8 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ET0 : (32) L2CTL0 Error Type 0 Register ----- */
typedef union {
	struct {
		uint32_t ROMERR:1;			/*!< bit	0	ROM Error	*/
		uint32_t RSVERR:1;			/*!< bit	1	Reserved Error	*/
		uint32_t ACCERR:1;			/*!< bit	2	Access Error	*/
		uint32_t ECCERR:1;			/*!< bit	3	ECC Error	*/
		uint32_t RDWR:1;			/*!< bit	4	Read/Write Error	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t ID:10;			/*!< bit	8..17	Error ID	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ET0_Type;
#define REG_L2CTL0_ET0		(*(RwReg *)0x20008080UL)

#else
#define REG_L2CTL0_ET0		(0x20008080) /**< \brief (L2CTL0) L2CTL0 Error Type 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_EADDR0 : (32) L2CTL0 Error Type 0 Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_EADDR0_Type;
#define REG_L2CTL0_EADDR0		(*(RwReg *)0x20008084UL)

#else
#define REG_L2CTL0_EADDR0		(0x20008084) /**< \brief (L2CTL0) L2CTL0 Error Type 0 Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_ET1 : (32) L2CTL0 Error Type 1 Register ----- */
typedef union {
	struct {
		uint32_t ROMERR:1;			/*!< bit	0	ROM Error	*/
		uint32_t RSVERR:1;			/*!< bit	1	Reserved Error	*/
		uint32_t ACCERR:1;			/*!< bit	2	Access Error	*/
		uint32_t ECCERR:1;			/*!< bit	3	ECC Error	*/
		uint32_t RDWR:1;			/*!< bit	4	Read/Write Error	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t ID:10;			/*!< bit	8..17	Error ID	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_ET1_Type;
#define REG_L2CTL0_ET1		(*(RwReg *)0x20008088UL)

#else
#define REG_L2CTL0_ET1		(0x20008088) /**< \brief (L2CTL0) L2CTL0 Error Type 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_EADDR1 : (32) L2CTL0 Error Type 1 Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_EADDR1_Type;
#define REG_L2CTL0_EADDR1		(*(RwReg *)0x2000808CUL)

#else
#define REG_L2CTL0_EADDR1		(0x2000808C) /**< \brief (L2CTL0) L2CTL0 Error Type 1 Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_SCTL : (32) L2CTL0 Scrub Control Register ----- */
typedef union {
	struct {
		uint32_t SRT:16;			/*!< bit	0..15	Scrub Rate	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t SEN:1;			/*!< bit	30	Scrub Enable	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_SCTL_Type;
#define REG_L2CTL0_SCTL		(*(RwReg *)0x200080ECUL)

#else
#define REG_L2CTL0_SCTL		(0x200080EC) /**< \brief (L2CTL0) L2CTL0 Scrub Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_SADR : (32) L2CTL0 Scrub Start Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_SADR_Type;
#define REG_L2CTL0_SADR		(*(RwReg *)0x200080F0UL)

#else
#define REG_L2CTL0_SADR		(0x200080F0) /**< \brief (L2CTL0) L2CTL0 Scrub Start Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_SCNT : (32) L2CTL0 Scrub Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:18;			/*!< bit	0..17	Scrub Count	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_SCNT_Type;
#define REG_L2CTL0_SCNT		(*(RwReg *)0x200080F4UL)

#else
#define REG_L2CTL0_SCNT		(0x200080F4) /**< \brief (L2CTL0) L2CTL0 Scrub Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- L2CTL0_REVID : (32) L2CTL0 Revision ID Register ----- */
typedef union {
	struct {
		uint32_t REV:4;			/*!< bit	0..3	Revision ID	*/
		uint32_t MAJOR:4;			/*!< bit	4..7	Major ID	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} L2CTL0_REVID_Type;
#define REG_L2CTL0_REVID		(*(RwReg *)0x200080FCUL)

#else
#define REG_L2CTL0_REVID		(0x200080FC) /**< \brief (L2CTL0) L2CTL0 Revision ID Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO L2CTL0_CTL_Type		CTL;		/**< \brief L2CTL0 Control Register */
	__IO L2CTL0_ACTL_C0_Type		ACTL_C0;		/**< \brief L2CTL0 Access Control Core 0 Register */
		 RoReg8		Reserved1[0x04];		
	__IO L2CTL0_ACTL_SYS_Type		ACTL_SYS;		/**< \brief L2CTL0 Access Control System Register */
	__IO L2CTL0_STAT_Type		STAT;		/**< \brief L2CTL0 Status Register */
	__IO L2CTL0_RPCR_Type		RPCR;		/**< \brief L2CTL0 Read Priority Count Register */
	__IO L2CTL0_WPCR_Type		WPCR;		/**< \brief L2CTL0 Write Priority Count Register */
		 RoReg8		Reserved2[0x08];		
	__IO L2CTL0_INIT_Type		INIT;		/**< \brief L2CTL0 Initialization Register */
		 RoReg8		Reserved3[0x10];		
	__IO L2CTL0_ISTAT_Type		ISTAT;		/**< \brief L2CTL0 Initialization Status Register */
	__IO L2CTL0_PCTL_Type		PCTL;		/**< \brief L2CTL0 Power Control Register */
	__IO L2CTL0_ERRADDR0_Type		ERRADDR0;		/**< \brief L2CTL0 ECC Error Address 0 Register */
	__IO L2CTL0_ERRADDR1_Type		ERRADDR1;		/**< \brief L2CTL0 ECC Error Address 1 Register */
	__IO L2CTL0_ERRADDR2_Type		ERRADDR2;		/**< \brief L2CTL0 ECC Error Address 2 Register */
	__IO L2CTL0_ERRADDR3_Type		ERRADDR3;		/**< \brief L2CTL0 ECC Error Address 3 Register */
	__IO L2CTL0_ERRADDR4_Type		ERRADDR4;		/**< \brief L2CTL0 ECC Error Address 4 Register */
	__IO L2CTL0_ERRADDR5_Type		ERRADDR5;		/**< \brief L2CTL0 ECC Error Address 5 Register */
	__IO L2CTL0_ERRADDR6_Type		ERRADDR6;		/**< \brief L2CTL0 ECC Error Address 6 Register */
	__IO L2CTL0_ERRADDR7_Type		ERRADDR7;		/**< \brief L2CTL0 ECC Error Address 7 Register */
	__IO L2CTL0_ERRADDR8_Type		ERRADDR8;		/**< \brief L2CTL0 ECC Error Address 8 Register */
		 RoReg8		Reserved4[0x1c];		
	__IO L2CTL0_ET0_Type		ET0;		/**< \brief L2CTL0 Error Type 0 Register */
	__IO L2CTL0_EADDR0_Type		EADDR0;		/**< \brief L2CTL0 Error Type 0 Address Register */
	__IO L2CTL0_ET1_Type		ET1;		/**< \brief L2CTL0 Error Type 1 Register */
	__IO L2CTL0_EADDR1_Type		EADDR1;		/**< \brief L2CTL0 Error Type 1 Address Register */
		 RoReg8		Reserved5[0x5c];		
	__IO L2CTL0_SCTL_Type		SCTL;		/**< \brief L2CTL0 Scrub Control Register */
	__IO L2CTL0_SADR_Type		SADR;		/**< \brief L2CTL0 Scrub Start Address Register */
	__IO L2CTL0_SCNT_Type		SCNT;		/**< \brief L2CTL0 Scrub Count Register */
		 RoReg8		Reserved6[0x04];		
	__IO L2CTL0_REVID_Type		REVID;		/**< \brief L2CTL0 Revision ID Register */
} L2Ctl0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SWU0_GCTL : (32) SWU0 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Global Enable	*/
		uint32_t RST:1;			/*!< bit	1	Global Reset	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_GCTL_Type;
#define REG_SWU0_GCTL		(*(RwReg *)0x2000C000UL)

#else
#define REG_SWU0_GCTL		(0x2000C000) /**< \brief (SWU0) SWU0 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_GSTAT : (32) SWU0 Global Status Register ----- */
typedef union {
	struct {
		uint32_t MTCH0:1;			/*!< bit	0	Group 0 Match	*/
		uint32_t MTCH1:1;			/*!< bit	1	Group 1 Match	*/
		uint32_t MTCH2:1;			/*!< bit	2	Group 2 Match	*/
		uint32_t MTCH3:1;			/*!< bit	3	Group 3 Match	*/
		uint32_t INT0:1;			/*!< bit	4	Group 0 Interrupt Status	*/
		uint32_t INT1:1;			/*!< bit	5	Group 1 Interrupt Status	*/
		uint32_t INT2:1;			/*!< bit	6	Group 2 Interrupt Status	*/
		uint32_t INT3:1;			/*!< bit	7	Group 3 Interrupt Status	*/
		uint32_t UNDRBW0:1;			/*!< bit	8	Group 0 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW0:1;			/*!< bit	9	Group 0 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW1:1;			/*!< bit	10	Group 1 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW1:1;			/*!< bit	11	Group 1 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW2:1;			/*!< bit	12	Group 2 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW2:1;			/*!< bit	13	Group 2 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW3:1;			/*!< bit	14	Group 3 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW3:1;			/*!< bit	15	Group 3 Bandwidth Above Maximum Target	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error Status	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_GSTAT_Type;
#define REG_SWU0_GSTAT		(*(RwReg *)0x2000C004UL)

#else
#define REG_SWU0_GSTAT		(0x2000C004) /**< \brief (SWU0) SWU0 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CTL0 : (32) SWU0 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CTL0_Type;
#define REG_SWU0_CTL0		(*(RwReg *)0x2000C010UL)

#else
#define REG_SWU0_CTL0		(0x2000C010) /**< \brief (SWU0) SWU0 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CTL1 : (32) SWU0 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CTL1_Type;
#define REG_SWU0_CTL1		(*(RwReg *)0x2000C030UL)

#else
#define REG_SWU0_CTL1		(0x2000C030) /**< \brief (SWU0) SWU0 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CTL2 : (32) SWU0 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CTL2_Type;
#define REG_SWU0_CTL2		(*(RwReg *)0x2000C050UL)

#else
#define REG_SWU0_CTL2		(0x2000C050) /**< \brief (SWU0) SWU0 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CTL3 : (32) SWU0 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CTL3_Type;
#define REG_SWU0_CTL3		(*(RwReg *)0x2000C070UL)

#else
#define REG_SWU0_CTL3		(0x2000C070) /**< \brief (SWU0) SWU0 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_LA0 : (32) SWU0 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_LA0_Type;
#define REG_SWU0_LA0		(*(RwReg *)0x2000C014UL)

#else
#define REG_SWU0_LA0		(0x2000C014) /**< \brief (SWU0) SWU0 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_LA1 : (32) SWU0 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_LA1_Type;
#define REG_SWU0_LA1		(*(RwReg *)0x2000C034UL)

#else
#define REG_SWU0_LA1		(0x2000C034) /**< \brief (SWU0) SWU0 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_LA2 : (32) SWU0 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_LA2_Type;
#define REG_SWU0_LA2		(*(RwReg *)0x2000C054UL)

#else
#define REG_SWU0_LA2		(0x2000C054) /**< \brief (SWU0) SWU0 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_LA3 : (32) SWU0 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_LA3_Type;
#define REG_SWU0_LA3		(*(RwReg *)0x2000C074UL)

#else
#define REG_SWU0_LA3		(0x2000C074) /**< \brief (SWU0) SWU0 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_UA0 : (32) SWU0 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_UA0_Type;
#define REG_SWU0_UA0		(*(RwReg *)0x2000C018UL)

#else
#define REG_SWU0_UA0		(0x2000C018) /**< \brief (SWU0) SWU0 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_UA1 : (32) SWU0 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_UA1_Type;
#define REG_SWU0_UA1		(*(RwReg *)0x2000C038UL)

#else
#define REG_SWU0_UA1		(0x2000C038) /**< \brief (SWU0) SWU0 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_UA2 : (32) SWU0 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_UA2_Type;
#define REG_SWU0_UA2		(*(RwReg *)0x2000C058UL)

#else
#define REG_SWU0_UA2		(0x2000C058) /**< \brief (SWU0) SWU0 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_UA3 : (32) SWU0 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_UA3_Type;
#define REG_SWU0_UA3		(*(RwReg *)0x2000C078UL)

#else
#define REG_SWU0_UA3		(0x2000C078) /**< \brief (SWU0) SWU0 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_ID0 : (32) SWU0 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_ID0_Type;
#define REG_SWU0_ID0		(*(RwReg *)0x2000C01CUL)

#else
#define REG_SWU0_ID0		(0x2000C01C) /**< \brief (SWU0) SWU0 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_ID1 : (32) SWU0 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_ID1_Type;
#define REG_SWU0_ID1		(*(RwReg *)0x2000C03CUL)

#else
#define REG_SWU0_ID1		(0x2000C03C) /**< \brief (SWU0) SWU0 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_ID2 : (32) SWU0 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_ID2_Type;
#define REG_SWU0_ID2		(*(RwReg *)0x2000C05CUL)

#else
#define REG_SWU0_ID2		(0x2000C05C) /**< \brief (SWU0) SWU0 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_ID3 : (32) SWU0 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_ID3_Type;
#define REG_SWU0_ID3		(*(RwReg *)0x2000C07CUL)

#else
#define REG_SWU0_ID3		(0x2000C07C) /**< \brief (SWU0) SWU0 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CNT0 : (32) SWU0 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CNT0_Type;
#define REG_SWU0_CNT0		(*(RwReg *)0x2000C020UL)

#else
#define REG_SWU0_CNT0		(0x2000C020) /**< \brief (SWU0) SWU0 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CNT1 : (32) SWU0 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CNT1_Type;
#define REG_SWU0_CNT1		(*(RwReg *)0x2000C040UL)

#else
#define REG_SWU0_CNT1		(0x2000C040) /**< \brief (SWU0) SWU0 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CNT2 : (32) SWU0 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CNT2_Type;
#define REG_SWU0_CNT2		(*(RwReg *)0x2000C060UL)

#else
#define REG_SWU0_CNT2		(0x2000C060) /**< \brief (SWU0) SWU0 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CNT3 : (32) SWU0 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CNT3_Type;
#define REG_SWU0_CNT3		(*(RwReg *)0x2000C080UL)

#else
#define REG_SWU0_CNT3		(0x2000C080) /**< \brief (SWU0) SWU0 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_TARG0 : (32) SWU0 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_TARG0_Type;
#define REG_SWU0_TARG0		(*(RwReg *)0x2000C024UL)

#else
#define REG_SWU0_TARG0		(0x2000C024) /**< \brief (SWU0) SWU0 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_TARG1 : (32) SWU0 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_TARG1_Type;
#define REG_SWU0_TARG1		(*(RwReg *)0x2000C044UL)

#else
#define REG_SWU0_TARG1		(0x2000C044) /**< \brief (SWU0) SWU0 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_TARG2 : (32) SWU0 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_TARG2_Type;
#define REG_SWU0_TARG2		(*(RwReg *)0x2000C064UL)

#else
#define REG_SWU0_TARG2		(0x2000C064) /**< \brief (SWU0) SWU0 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_TARG3 : (32) SWU0 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_TARG3_Type;
#define REG_SWU0_TARG3		(*(RwReg *)0x2000C084UL)

#else
#define REG_SWU0_TARG3		(0x2000C084) /**< \brief (SWU0) SWU0 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_HIST0 : (32) SWU0 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_HIST0_Type;
#define REG_SWU0_HIST0		(*(RwReg *)0x2000C028UL)

#else
#define REG_SWU0_HIST0		(0x2000C028) /**< \brief (SWU0) SWU0 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_HIST1 : (32) SWU0 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_HIST1_Type;
#define REG_SWU0_HIST1		(*(RwReg *)0x2000C048UL)

#else
#define REG_SWU0_HIST1		(0x2000C048) /**< \brief (SWU0) SWU0 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_HIST2 : (32) SWU0 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_HIST2_Type;
#define REG_SWU0_HIST2		(*(RwReg *)0x2000C068UL)

#else
#define REG_SWU0_HIST2		(0x2000C068) /**< \brief (SWU0) SWU0 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_HIST3 : (32) SWU0 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_HIST3_Type;
#define REG_SWU0_HIST3		(*(RwReg *)0x2000C088UL)

#else
#define REG_SWU0_HIST3		(0x2000C088) /**< \brief (SWU0) SWU0 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CUR0 : (32) SWU0 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CUR0_Type;
#define REG_SWU0_CUR0		(*(RwReg *)0x2000C02CUL)

#else
#define REG_SWU0_CUR0		(0x2000C02C) /**< \brief (SWU0) SWU0 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CUR1 : (32) SWU0 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CUR1_Type;
#define REG_SWU0_CUR1		(*(RwReg *)0x2000C04CUL)

#else
#define REG_SWU0_CUR1		(0x2000C04C) /**< \brief (SWU0) SWU0 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CUR2 : (32) SWU0 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CUR2_Type;
#define REG_SWU0_CUR2		(*(RwReg *)0x2000C06CUL)

#else
#define REG_SWU0_CUR2		(0x2000C06C) /**< \brief (SWU0) SWU0 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU0_CUR3 : (32) SWU0 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU0_CUR3_Type;
#define REG_SWU0_CUR3		(*(RwReg *)0x2000C08CUL)

#else
#define REG_SWU0_CUR3		(0x2000C08C) /**< \brief (SWU0) SWU0 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SWU0_GCTL_Type		GCTL;		/**< \brief SWU0 Global Control Register */
	__IO SWU0_GSTAT_Type		GSTAT;		/**< \brief SWU0 Global Status Register */
		 RoReg8		Reserved1[0x08];		
	__IO SWU0_CTL0_Type		CTL0;		/**< \brief SWU0 Control Register n */
	__IO SWU0_LA0_Type		LA0;		/**< \brief SWU0 Lower Address Register n */
	__IO SWU0_UA0_Type		UA0;		/**< \brief SWU0 Upper Address Register n */
	__IO SWU0_ID0_Type		ID0;		/**< \brief SWU0 ID Register n */
	__IO SWU0_CNT0_Type		CNT0;		/**< \brief SWU0 Count Register n */
	__IO SWU0_TARG0_Type		TARG0;		/**< \brief SWU0 Target Register n */
	__IO SWU0_HIST0_Type		HIST0;		/**< \brief SWU0 Bandwidth History Register n */
	__IO SWU0_CUR0_Type		CUR0;		/**< \brief SWU0 Current Register n */
	__IO SWU0_CTL1_Type		CTL1;		/**< \brief SWU0 Control Register n */
	__IO SWU0_LA1_Type		LA1;		/**< \brief SWU0 Lower Address Register n */
	__IO SWU0_UA1_Type		UA1;		/**< \brief SWU0 Upper Address Register n */
	__IO SWU0_ID1_Type		ID1;		/**< \brief SWU0 ID Register n */
	__IO SWU0_CNT1_Type		CNT1;		/**< \brief SWU0 Count Register n */
	__IO SWU0_TARG1_Type		TARG1;		/**< \brief SWU0 Target Register n */
	__IO SWU0_HIST1_Type		HIST1;		/**< \brief SWU0 Bandwidth History Register n */
	__IO SWU0_CUR1_Type		CUR1;		/**< \brief SWU0 Current Register n */
	__IO SWU0_CTL2_Type		CTL2;		/**< \brief SWU0 Control Register n */
	__IO SWU0_LA2_Type		LA2;		/**< \brief SWU0 Lower Address Register n */
	__IO SWU0_UA2_Type		UA2;		/**< \brief SWU0 Upper Address Register n */
	__IO SWU0_ID2_Type		ID2;		/**< \brief SWU0 ID Register n */
	__IO SWU0_CNT2_Type		CNT2;		/**< \brief SWU0 Count Register n */
	__IO SWU0_TARG2_Type		TARG2;		/**< \brief SWU0 Target Register n */
	__IO SWU0_HIST2_Type		HIST2;		/**< \brief SWU0 Bandwidth History Register n */
	__IO SWU0_CUR2_Type		CUR2;		/**< \brief SWU0 Current Register n */
	__IO SWU0_CTL3_Type		CTL3;		/**< \brief SWU0 Control Register n */
	__IO SWU0_LA3_Type		LA3;		/**< \brief SWU0 Lower Address Register n */
	__IO SWU0_UA3_Type		UA3;		/**< \brief SWU0 Upper Address Register n */
	__IO SWU0_ID3_Type		ID3;		/**< \brief SWU0 ID Register n */
	__IO SWU0_CNT3_Type		CNT3;		/**< \brief SWU0 Count Register n */
	__IO SWU0_TARG3_Type		TARG3;		/**< \brief SWU0 Target Register n */
	__IO SWU0_HIST3_Type		HIST3;		/**< \brief SWU0 Bandwidth History Register n */
	__IO SWU0_CUR3_Type		CUR3;		/**< \brief SWU0 Current Register n */
} Swu0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SWU1_GCTL : (32) SWU1 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Global Enable	*/
		uint32_t RST:1;			/*!< bit	1	Global Reset	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_GCTL_Type;
#define REG_SWU1_GCTL		(*(RwReg *)0x2000E000UL)

#else
#define REG_SWU1_GCTL		(0x2000E000) /**< \brief (SWU1) SWU1 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_GSTAT : (32) SWU1 Global Status Register ----- */
typedef union {
	struct {
		uint32_t MTCH0:1;			/*!< bit	0	Group 0 Match	*/
		uint32_t MTCH1:1;			/*!< bit	1	Group 1 Match	*/
		uint32_t MTCH2:1;			/*!< bit	2	Group 2 Match	*/
		uint32_t MTCH3:1;			/*!< bit	3	Group 3 Match	*/
		uint32_t INT0:1;			/*!< bit	4	Group 0 Interrupt Status	*/
		uint32_t INT1:1;			/*!< bit	5	Group 1 Interrupt Status	*/
		uint32_t INT2:1;			/*!< bit	6	Group 2 Interrupt Status	*/
		uint32_t INT3:1;			/*!< bit	7	Group 3 Interrupt Status	*/
		uint32_t UNDRBW0:1;			/*!< bit	8	Group 0 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW0:1;			/*!< bit	9	Group 0 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW1:1;			/*!< bit	10	Group 1 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW1:1;			/*!< bit	11	Group 1 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW2:1;			/*!< bit	12	Group 2 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW2:1;			/*!< bit	13	Group 2 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW3:1;			/*!< bit	14	Group 3 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW3:1;			/*!< bit	15	Group 3 Bandwidth Above Maximum Target	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error Status	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_GSTAT_Type;
#define REG_SWU1_GSTAT		(*(RwReg *)0x2000E004UL)

#else
#define REG_SWU1_GSTAT		(0x2000E004) /**< \brief (SWU1) SWU1 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CTL0 : (32) SWU1 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CTL0_Type;
#define REG_SWU1_CTL0		(*(RwReg *)0x2000E010UL)

#else
#define REG_SWU1_CTL0		(0x2000E010) /**< \brief (SWU1) SWU1 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CTL1 : (32) SWU1 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CTL1_Type;
#define REG_SWU1_CTL1		(*(RwReg *)0x2000E030UL)

#else
#define REG_SWU1_CTL1		(0x2000E030) /**< \brief (SWU1) SWU1 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CTL2 : (32) SWU1 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CTL2_Type;
#define REG_SWU1_CTL2		(*(RwReg *)0x2000E050UL)

#else
#define REG_SWU1_CTL2		(0x2000E050) /**< \brief (SWU1) SWU1 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CTL3 : (32) SWU1 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CTL3_Type;
#define REG_SWU1_CTL3		(*(RwReg *)0x2000E070UL)

#else
#define REG_SWU1_CTL3		(0x2000E070) /**< \brief (SWU1) SWU1 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_LA0 : (32) SWU1 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_LA0_Type;
#define REG_SWU1_LA0		(*(RwReg *)0x2000E014UL)

#else
#define REG_SWU1_LA0		(0x2000E014) /**< \brief (SWU1) SWU1 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_LA1 : (32) SWU1 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_LA1_Type;
#define REG_SWU1_LA1		(*(RwReg *)0x2000E034UL)

#else
#define REG_SWU1_LA1		(0x2000E034) /**< \brief (SWU1) SWU1 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_LA2 : (32) SWU1 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_LA2_Type;
#define REG_SWU1_LA2		(*(RwReg *)0x2000E054UL)

#else
#define REG_SWU1_LA2		(0x2000E054) /**< \brief (SWU1) SWU1 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_LA3 : (32) SWU1 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_LA3_Type;
#define REG_SWU1_LA3		(*(RwReg *)0x2000E074UL)

#else
#define REG_SWU1_LA3		(0x2000E074) /**< \brief (SWU1) SWU1 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_UA0 : (32) SWU1 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_UA0_Type;
#define REG_SWU1_UA0		(*(RwReg *)0x2000E018UL)

#else
#define REG_SWU1_UA0		(0x2000E018) /**< \brief (SWU1) SWU1 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_UA1 : (32) SWU1 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_UA1_Type;
#define REG_SWU1_UA1		(*(RwReg *)0x2000E038UL)

#else
#define REG_SWU1_UA1		(0x2000E038) /**< \brief (SWU1) SWU1 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_UA2 : (32) SWU1 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_UA2_Type;
#define REG_SWU1_UA2		(*(RwReg *)0x2000E058UL)

#else
#define REG_SWU1_UA2		(0x2000E058) /**< \brief (SWU1) SWU1 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_UA3 : (32) SWU1 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_UA3_Type;
#define REG_SWU1_UA3		(*(RwReg *)0x2000E078UL)

#else
#define REG_SWU1_UA3		(0x2000E078) /**< \brief (SWU1) SWU1 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_ID0 : (32) SWU1 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_ID0_Type;
#define REG_SWU1_ID0		(*(RwReg *)0x2000E01CUL)

#else
#define REG_SWU1_ID0		(0x2000E01C) /**< \brief (SWU1) SWU1 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_ID1 : (32) SWU1 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_ID1_Type;
#define REG_SWU1_ID1		(*(RwReg *)0x2000E03CUL)

#else
#define REG_SWU1_ID1		(0x2000E03C) /**< \brief (SWU1) SWU1 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_ID2 : (32) SWU1 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_ID2_Type;
#define REG_SWU1_ID2		(*(RwReg *)0x2000E05CUL)

#else
#define REG_SWU1_ID2		(0x2000E05C) /**< \brief (SWU1) SWU1 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_ID3 : (32) SWU1 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_ID3_Type;
#define REG_SWU1_ID3		(*(RwReg *)0x2000E07CUL)

#else
#define REG_SWU1_ID3		(0x2000E07C) /**< \brief (SWU1) SWU1 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CNT0 : (32) SWU1 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CNT0_Type;
#define REG_SWU1_CNT0		(*(RwReg *)0x2000E020UL)

#else
#define REG_SWU1_CNT0		(0x2000E020) /**< \brief (SWU1) SWU1 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CNT1 : (32) SWU1 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CNT1_Type;
#define REG_SWU1_CNT1		(*(RwReg *)0x2000E040UL)

#else
#define REG_SWU1_CNT1		(0x2000E040) /**< \brief (SWU1) SWU1 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CNT2 : (32) SWU1 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CNT2_Type;
#define REG_SWU1_CNT2		(*(RwReg *)0x2000E060UL)

#else
#define REG_SWU1_CNT2		(0x2000E060) /**< \brief (SWU1) SWU1 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CNT3 : (32) SWU1 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CNT3_Type;
#define REG_SWU1_CNT3		(*(RwReg *)0x2000E080UL)

#else
#define REG_SWU1_CNT3		(0x2000E080) /**< \brief (SWU1) SWU1 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_TARG0 : (32) SWU1 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_TARG0_Type;
#define REG_SWU1_TARG0		(*(RwReg *)0x2000E024UL)

#else
#define REG_SWU1_TARG0		(0x2000E024) /**< \brief (SWU1) SWU1 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_TARG1 : (32) SWU1 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_TARG1_Type;
#define REG_SWU1_TARG1		(*(RwReg *)0x2000E044UL)

#else
#define REG_SWU1_TARG1		(0x2000E044) /**< \brief (SWU1) SWU1 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_TARG2 : (32) SWU1 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_TARG2_Type;
#define REG_SWU1_TARG2		(*(RwReg *)0x2000E064UL)

#else
#define REG_SWU1_TARG2		(0x2000E064) /**< \brief (SWU1) SWU1 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_TARG3 : (32) SWU1 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_TARG3_Type;
#define REG_SWU1_TARG3		(*(RwReg *)0x2000E084UL)

#else
#define REG_SWU1_TARG3		(0x2000E084) /**< \brief (SWU1) SWU1 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_HIST0 : (32) SWU1 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_HIST0_Type;
#define REG_SWU1_HIST0		(*(RwReg *)0x2000E028UL)

#else
#define REG_SWU1_HIST0		(0x2000E028) /**< \brief (SWU1) SWU1 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_HIST1 : (32) SWU1 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_HIST1_Type;
#define REG_SWU1_HIST1		(*(RwReg *)0x2000E048UL)

#else
#define REG_SWU1_HIST1		(0x2000E048) /**< \brief (SWU1) SWU1 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_HIST2 : (32) SWU1 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_HIST2_Type;
#define REG_SWU1_HIST2		(*(RwReg *)0x2000E068UL)

#else
#define REG_SWU1_HIST2		(0x2000E068) /**< \brief (SWU1) SWU1 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_HIST3 : (32) SWU1 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_HIST3_Type;
#define REG_SWU1_HIST3		(*(RwReg *)0x2000E088UL)

#else
#define REG_SWU1_HIST3		(0x2000E088) /**< \brief (SWU1) SWU1 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CUR0 : (32) SWU1 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CUR0_Type;
#define REG_SWU1_CUR0		(*(RwReg *)0x2000E02CUL)

#else
#define REG_SWU1_CUR0		(0x2000E02C) /**< \brief (SWU1) SWU1 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CUR1 : (32) SWU1 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CUR1_Type;
#define REG_SWU1_CUR1		(*(RwReg *)0x2000E04CUL)

#else
#define REG_SWU1_CUR1		(0x2000E04C) /**< \brief (SWU1) SWU1 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CUR2 : (32) SWU1 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CUR2_Type;
#define REG_SWU1_CUR2		(*(RwReg *)0x2000E06CUL)

#else
#define REG_SWU1_CUR2		(0x2000E06C) /**< \brief (SWU1) SWU1 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU1_CUR3 : (32) SWU1 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU1_CUR3_Type;
#define REG_SWU1_CUR3		(*(RwReg *)0x2000E08CUL)

#else
#define REG_SWU1_CUR3		(0x2000E08C) /**< \brief (SWU1) SWU1 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SWU1_GCTL_Type		GCTL;		/**< \brief SWU1 Global Control Register */
	__IO SWU1_GSTAT_Type		GSTAT;		/**< \brief SWU1 Global Status Register */
		 RoReg8		Reserved1[0x08];		
	__IO SWU1_CTL0_Type		CTL0;		/**< \brief SWU1 Control Register n */
	__IO SWU1_LA0_Type		LA0;		/**< \brief SWU1 Lower Address Register n */
	__IO SWU1_UA0_Type		UA0;		/**< \brief SWU1 Upper Address Register n */
	__IO SWU1_ID0_Type		ID0;		/**< \brief SWU1 ID Register n */
	__IO SWU1_CNT0_Type		CNT0;		/**< \brief SWU1 Count Register n */
	__IO SWU1_TARG0_Type		TARG0;		/**< \brief SWU1 Target Register n */
	__IO SWU1_HIST0_Type		HIST0;		/**< \brief SWU1 Bandwidth History Register n */
	__IO SWU1_CUR0_Type		CUR0;		/**< \brief SWU1 Current Register n */
	__IO SWU1_CTL1_Type		CTL1;		/**< \brief SWU1 Control Register n */
	__IO SWU1_LA1_Type		LA1;		/**< \brief SWU1 Lower Address Register n */
	__IO SWU1_UA1_Type		UA1;		/**< \brief SWU1 Upper Address Register n */
	__IO SWU1_ID1_Type		ID1;		/**< \brief SWU1 ID Register n */
	__IO SWU1_CNT1_Type		CNT1;		/**< \brief SWU1 Count Register n */
	__IO SWU1_TARG1_Type		TARG1;		/**< \brief SWU1 Target Register n */
	__IO SWU1_HIST1_Type		HIST1;		/**< \brief SWU1 Bandwidth History Register n */
	__IO SWU1_CUR1_Type		CUR1;		/**< \brief SWU1 Current Register n */
	__IO SWU1_CTL2_Type		CTL2;		/**< \brief SWU1 Control Register n */
	__IO SWU1_LA2_Type		LA2;		/**< \brief SWU1 Lower Address Register n */
	__IO SWU1_UA2_Type		UA2;		/**< \brief SWU1 Upper Address Register n */
	__IO SWU1_ID2_Type		ID2;		/**< \brief SWU1 ID Register n */
	__IO SWU1_CNT2_Type		CNT2;		/**< \brief SWU1 Count Register n */
	__IO SWU1_TARG2_Type		TARG2;		/**< \brief SWU1 Target Register n */
	__IO SWU1_HIST2_Type		HIST2;		/**< \brief SWU1 Bandwidth History Register n */
	__IO SWU1_CUR2_Type		CUR2;		/**< \brief SWU1 Current Register n */
	__IO SWU1_CTL3_Type		CTL3;		/**< \brief SWU1 Control Register n */
	__IO SWU1_LA3_Type		LA3;		/**< \brief SWU1 Lower Address Register n */
	__IO SWU1_UA3_Type		UA3;		/**< \brief SWU1 Upper Address Register n */
	__IO SWU1_ID3_Type		ID3;		/**< \brief SWU1 ID Register n */
	__IO SWU1_CNT3_Type		CNT3;		/**< \brief SWU1 Count Register n */
	__IO SWU1_TARG3_Type		TARG3;		/**< \brief SWU1 Target Register n */
	__IO SWU1_HIST3_Type		HIST3;		/**< \brief SWU1 Bandwidth History Register n */
	__IO SWU1_CUR3_Type		CUR3;		/**< \brief SWU1 Current Register n */
} Swu1;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SWU2_GCTL : (32) SWU2 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Global Enable	*/
		uint32_t RST:1;			/*!< bit	1	Global Reset	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_GCTL_Type;
#define REG_SWU2_GCTL		(*(RwReg *)0x2000F000UL)

#else
#define REG_SWU2_GCTL		(0x2000F000) /**< \brief (SWU2) SWU2 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_GSTAT : (32) SWU2 Global Status Register ----- */
typedef union {
	struct {
		uint32_t MTCH0:1;			/*!< bit	0	Group 0 Match	*/
		uint32_t MTCH1:1;			/*!< bit	1	Group 1 Match	*/
		uint32_t MTCH2:1;			/*!< bit	2	Group 2 Match	*/
		uint32_t MTCH3:1;			/*!< bit	3	Group 3 Match	*/
		uint32_t INT0:1;			/*!< bit	4	Group 0 Interrupt Status	*/
		uint32_t INT1:1;			/*!< bit	5	Group 1 Interrupt Status	*/
		uint32_t INT2:1;			/*!< bit	6	Group 2 Interrupt Status	*/
		uint32_t INT3:1;			/*!< bit	7	Group 3 Interrupt Status	*/
		uint32_t UNDRBW0:1;			/*!< bit	8	Group 0 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW0:1;			/*!< bit	9	Group 0 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW1:1;			/*!< bit	10	Group 1 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW1:1;			/*!< bit	11	Group 1 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW2:1;			/*!< bit	12	Group 2 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW2:1;			/*!< bit	13	Group 2 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW3:1;			/*!< bit	14	Group 3 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW3:1;			/*!< bit	15	Group 3 Bandwidth Above Maximum Target	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error Status	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_GSTAT_Type;
#define REG_SWU2_GSTAT		(*(RwReg *)0x2000F004UL)

#else
#define REG_SWU2_GSTAT		(0x2000F004) /**< \brief (SWU2) SWU2 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CTL0 : (32) SWU2 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CTL0_Type;
#define REG_SWU2_CTL0		(*(RwReg *)0x2000F010UL)

#else
#define REG_SWU2_CTL0		(0x2000F010) /**< \brief (SWU2) SWU2 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CTL1 : (32) SWU2 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CTL1_Type;
#define REG_SWU2_CTL1		(*(RwReg *)0x2000F030UL)

#else
#define REG_SWU2_CTL1		(0x2000F030) /**< \brief (SWU2) SWU2 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CTL2 : (32) SWU2 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CTL2_Type;
#define REG_SWU2_CTL2		(*(RwReg *)0x2000F050UL)

#else
#define REG_SWU2_CTL2		(0x2000F050) /**< \brief (SWU2) SWU2 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CTL3 : (32) SWU2 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CTL3_Type;
#define REG_SWU2_CTL3		(*(RwReg *)0x2000F070UL)

#else
#define REG_SWU2_CTL3		(0x2000F070) /**< \brief (SWU2) SWU2 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_LA0 : (32) SWU2 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_LA0_Type;
#define REG_SWU2_LA0		(*(RwReg *)0x2000F014UL)

#else
#define REG_SWU2_LA0		(0x2000F014) /**< \brief (SWU2) SWU2 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_LA1 : (32) SWU2 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_LA1_Type;
#define REG_SWU2_LA1		(*(RwReg *)0x2000F034UL)

#else
#define REG_SWU2_LA1		(0x2000F034) /**< \brief (SWU2) SWU2 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_LA2 : (32) SWU2 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_LA2_Type;
#define REG_SWU2_LA2		(*(RwReg *)0x2000F054UL)

#else
#define REG_SWU2_LA2		(0x2000F054) /**< \brief (SWU2) SWU2 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_LA3 : (32) SWU2 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_LA3_Type;
#define REG_SWU2_LA3		(*(RwReg *)0x2000F074UL)

#else
#define REG_SWU2_LA3		(0x2000F074) /**< \brief (SWU2) SWU2 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_UA0 : (32) SWU2 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_UA0_Type;
#define REG_SWU2_UA0		(*(RwReg *)0x2000F018UL)

#else
#define REG_SWU2_UA0		(0x2000F018) /**< \brief (SWU2) SWU2 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_UA1 : (32) SWU2 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_UA1_Type;
#define REG_SWU2_UA1		(*(RwReg *)0x2000F038UL)

#else
#define REG_SWU2_UA1		(0x2000F038) /**< \brief (SWU2) SWU2 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_UA2 : (32) SWU2 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_UA2_Type;
#define REG_SWU2_UA2		(*(RwReg *)0x2000F058UL)

#else
#define REG_SWU2_UA2		(0x2000F058) /**< \brief (SWU2) SWU2 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_UA3 : (32) SWU2 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_UA3_Type;
#define REG_SWU2_UA3		(*(RwReg *)0x2000F078UL)

#else
#define REG_SWU2_UA3		(0x2000F078) /**< \brief (SWU2) SWU2 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_ID0 : (32) SWU2 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_ID0_Type;
#define REG_SWU2_ID0		(*(RwReg *)0x2000F01CUL)

#else
#define REG_SWU2_ID0		(0x2000F01C) /**< \brief (SWU2) SWU2 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_ID1 : (32) SWU2 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_ID1_Type;
#define REG_SWU2_ID1		(*(RwReg *)0x2000F03CUL)

#else
#define REG_SWU2_ID1		(0x2000F03C) /**< \brief (SWU2) SWU2 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_ID2 : (32) SWU2 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_ID2_Type;
#define REG_SWU2_ID2		(*(RwReg *)0x2000F05CUL)

#else
#define REG_SWU2_ID2		(0x2000F05C) /**< \brief (SWU2) SWU2 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_ID3 : (32) SWU2 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_ID3_Type;
#define REG_SWU2_ID3		(*(RwReg *)0x2000F07CUL)

#else
#define REG_SWU2_ID3		(0x2000F07C) /**< \brief (SWU2) SWU2 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CNT0 : (32) SWU2 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CNT0_Type;
#define REG_SWU2_CNT0		(*(RwReg *)0x2000F020UL)

#else
#define REG_SWU2_CNT0		(0x2000F020) /**< \brief (SWU2) SWU2 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CNT1 : (32) SWU2 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CNT1_Type;
#define REG_SWU2_CNT1		(*(RwReg *)0x2000F040UL)

#else
#define REG_SWU2_CNT1		(0x2000F040) /**< \brief (SWU2) SWU2 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CNT2 : (32) SWU2 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CNT2_Type;
#define REG_SWU2_CNT2		(*(RwReg *)0x2000F060UL)

#else
#define REG_SWU2_CNT2		(0x2000F060) /**< \brief (SWU2) SWU2 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CNT3 : (32) SWU2 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CNT3_Type;
#define REG_SWU2_CNT3		(*(RwReg *)0x2000F080UL)

#else
#define REG_SWU2_CNT3		(0x2000F080) /**< \brief (SWU2) SWU2 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_TARG0 : (32) SWU2 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_TARG0_Type;
#define REG_SWU2_TARG0		(*(RwReg *)0x2000F024UL)

#else
#define REG_SWU2_TARG0		(0x2000F024) /**< \brief (SWU2) SWU2 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_TARG1 : (32) SWU2 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_TARG1_Type;
#define REG_SWU2_TARG1		(*(RwReg *)0x2000F044UL)

#else
#define REG_SWU2_TARG1		(0x2000F044) /**< \brief (SWU2) SWU2 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_TARG2 : (32) SWU2 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_TARG2_Type;
#define REG_SWU2_TARG2		(*(RwReg *)0x2000F064UL)

#else
#define REG_SWU2_TARG2		(0x2000F064) /**< \brief (SWU2) SWU2 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_TARG3 : (32) SWU2 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_TARG3_Type;
#define REG_SWU2_TARG3		(*(RwReg *)0x2000F084UL)

#else
#define REG_SWU2_TARG3		(0x2000F084) /**< \brief (SWU2) SWU2 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_HIST0 : (32) SWU2 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_HIST0_Type;
#define REG_SWU2_HIST0		(*(RwReg *)0x2000F028UL)

#else
#define REG_SWU2_HIST0		(0x2000F028) /**< \brief (SWU2) SWU2 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_HIST1 : (32) SWU2 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_HIST1_Type;
#define REG_SWU2_HIST1		(*(RwReg *)0x2000F048UL)

#else
#define REG_SWU2_HIST1		(0x2000F048) /**< \brief (SWU2) SWU2 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_HIST2 : (32) SWU2 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_HIST2_Type;
#define REG_SWU2_HIST2		(*(RwReg *)0x2000F068UL)

#else
#define REG_SWU2_HIST2		(0x2000F068) /**< \brief (SWU2) SWU2 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_HIST3 : (32) SWU2 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_HIST3_Type;
#define REG_SWU2_HIST3		(*(RwReg *)0x2000F088UL)

#else
#define REG_SWU2_HIST3		(0x2000F088) /**< \brief (SWU2) SWU2 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CUR0 : (32) SWU2 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CUR0_Type;
#define REG_SWU2_CUR0		(*(RwReg *)0x2000F02CUL)

#else
#define REG_SWU2_CUR0		(0x2000F02C) /**< \brief (SWU2) SWU2 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CUR1 : (32) SWU2 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CUR1_Type;
#define REG_SWU2_CUR1		(*(RwReg *)0x2000F04CUL)

#else
#define REG_SWU2_CUR1		(0x2000F04C) /**< \brief (SWU2) SWU2 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CUR2 : (32) SWU2 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CUR2_Type;
#define REG_SWU2_CUR2		(*(RwReg *)0x2000F06CUL)

#else
#define REG_SWU2_CUR2		(0x2000F06C) /**< \brief (SWU2) SWU2 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU2_CUR3 : (32) SWU2 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU2_CUR3_Type;
#define REG_SWU2_CUR3		(*(RwReg *)0x2000F08CUL)

#else
#define REG_SWU2_CUR3		(0x2000F08C) /**< \brief (SWU2) SWU2 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SWU2_GCTL_Type		GCTL;		/**< \brief SWU2 Global Control Register */
	__IO SWU2_GSTAT_Type		GSTAT;		/**< \brief SWU2 Global Status Register */
		 RoReg8		Reserved1[0x08];		
	__IO SWU2_CTL0_Type		CTL0;		/**< \brief SWU2 Control Register n */
	__IO SWU2_LA0_Type		LA0;		/**< \brief SWU2 Lower Address Register n */
	__IO SWU2_UA0_Type		UA0;		/**< \brief SWU2 Upper Address Register n */
	__IO SWU2_ID0_Type		ID0;		/**< \brief SWU2 ID Register n */
	__IO SWU2_CNT0_Type		CNT0;		/**< \brief SWU2 Count Register n */
	__IO SWU2_TARG0_Type		TARG0;		/**< \brief SWU2 Target Register n */
	__IO SWU2_HIST0_Type		HIST0;		/**< \brief SWU2 Bandwidth History Register n */
	__IO SWU2_CUR0_Type		CUR0;		/**< \brief SWU2 Current Register n */
	__IO SWU2_CTL1_Type		CTL1;		/**< \brief SWU2 Control Register n */
	__IO SWU2_LA1_Type		LA1;		/**< \brief SWU2 Lower Address Register n */
	__IO SWU2_UA1_Type		UA1;		/**< \brief SWU2 Upper Address Register n */
	__IO SWU2_ID1_Type		ID1;		/**< \brief SWU2 ID Register n */
	__IO SWU2_CNT1_Type		CNT1;		/**< \brief SWU2 Count Register n */
	__IO SWU2_TARG1_Type		TARG1;		/**< \brief SWU2 Target Register n */
	__IO SWU2_HIST1_Type		HIST1;		/**< \brief SWU2 Bandwidth History Register n */
	__IO SWU2_CUR1_Type		CUR1;		/**< \brief SWU2 Current Register n */
	__IO SWU2_CTL2_Type		CTL2;		/**< \brief SWU2 Control Register n */
	__IO SWU2_LA2_Type		LA2;		/**< \brief SWU2 Lower Address Register n */
	__IO SWU2_UA2_Type		UA2;		/**< \brief SWU2 Upper Address Register n */
	__IO SWU2_ID2_Type		ID2;		/**< \brief SWU2 ID Register n */
	__IO SWU2_CNT2_Type		CNT2;		/**< \brief SWU2 Count Register n */
	__IO SWU2_TARG2_Type		TARG2;		/**< \brief SWU2 Target Register n */
	__IO SWU2_HIST2_Type		HIST2;		/**< \brief SWU2 Bandwidth History Register n */
	__IO SWU2_CUR2_Type		CUR2;		/**< \brief SWU2 Current Register n */
	__IO SWU2_CTL3_Type		CTL3;		/**< \brief SWU2 Control Register n */
	__IO SWU2_LA3_Type		LA3;		/**< \brief SWU2 Lower Address Register n */
	__IO SWU2_UA3_Type		UA3;		/**< \brief SWU2 Upper Address Register n */
	__IO SWU2_ID3_Type		ID3;		/**< \brief SWU2 ID Register n */
	__IO SWU2_CNT3_Type		CNT3;		/**< \brief SWU2 Count Register n */
	__IO SWU2_TARG3_Type		TARG3;		/**< \brief SWU2 Target Register n */
	__IO SWU2_HIST3_Type		HIST3;		/**< \brief SWU2 Bandwidth History Register n */
	__IO SWU2_CUR3_Type		CUR3;		/**< \brief SWU2 Current Register n */
} Swu2;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SWU3_GCTL : (32) SWU3 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Global Enable	*/
		uint32_t RST:1;			/*!< bit	1	Global Reset	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_GCTL_Type;
#define REG_SWU3_GCTL		(*(RwReg *)0x2000D000UL)

#else
#define REG_SWU3_GCTL		(0x2000D000) /**< \brief (SWU3) SWU3 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_GSTAT : (32) SWU3 Global Status Register ----- */
typedef union {
	struct {
		uint32_t MTCH0:1;			/*!< bit	0	Group 0 Match	*/
		uint32_t MTCH1:1;			/*!< bit	1	Group 1 Match	*/
		uint32_t MTCH2:1;			/*!< bit	2	Group 2 Match	*/
		uint32_t MTCH3:1;			/*!< bit	3	Group 3 Match	*/
		uint32_t INT0:1;			/*!< bit	4	Group 0 Interrupt Status	*/
		uint32_t INT1:1;			/*!< bit	5	Group 1 Interrupt Status	*/
		uint32_t INT2:1;			/*!< bit	6	Group 2 Interrupt Status	*/
		uint32_t INT3:1;			/*!< bit	7	Group 3 Interrupt Status	*/
		uint32_t UNDRBW0:1;			/*!< bit	8	Group 0 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW0:1;			/*!< bit	9	Group 0 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW1:1;			/*!< bit	10	Group 1 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW1:1;			/*!< bit	11	Group 1 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW2:1;			/*!< bit	12	Group 2 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW2:1;			/*!< bit	13	Group 2 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW3:1;			/*!< bit	14	Group 3 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW3:1;			/*!< bit	15	Group 3 Bandwidth Above Maximum Target	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error Status	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_GSTAT_Type;
#define REG_SWU3_GSTAT		(*(RwReg *)0x2000D004UL)

#else
#define REG_SWU3_GSTAT		(0x2000D004) /**< \brief (SWU3) SWU3 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CTL0 : (32) SWU3 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CTL0_Type;
#define REG_SWU3_CTL0		(*(RwReg *)0x2000D010UL)

#else
#define REG_SWU3_CTL0		(0x2000D010) /**< \brief (SWU3) SWU3 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CTL1 : (32) SWU3 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CTL1_Type;
#define REG_SWU3_CTL1		(*(RwReg *)0x2000D030UL)

#else
#define REG_SWU3_CTL1		(0x2000D030) /**< \brief (SWU3) SWU3 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CTL2 : (32) SWU3 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CTL2_Type;
#define REG_SWU3_CTL2		(*(RwReg *)0x2000D050UL)

#else
#define REG_SWU3_CTL2		(0x2000D050) /**< \brief (SWU3) SWU3 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CTL3 : (32) SWU3 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CTL3_Type;
#define REG_SWU3_CTL3		(*(RwReg *)0x2000D070UL)

#else
#define REG_SWU3_CTL3		(0x2000D070) /**< \brief (SWU3) SWU3 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_LA0 : (32) SWU3 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_LA0_Type;
#define REG_SWU3_LA0		(*(RwReg *)0x2000D014UL)

#else
#define REG_SWU3_LA0		(0x2000D014) /**< \brief (SWU3) SWU3 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_LA1 : (32) SWU3 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_LA1_Type;
#define REG_SWU3_LA1		(*(RwReg *)0x2000D034UL)

#else
#define REG_SWU3_LA1		(0x2000D034) /**< \brief (SWU3) SWU3 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_LA2 : (32) SWU3 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_LA2_Type;
#define REG_SWU3_LA2		(*(RwReg *)0x2000D054UL)

#else
#define REG_SWU3_LA2		(0x2000D054) /**< \brief (SWU3) SWU3 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_LA3 : (32) SWU3 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_LA3_Type;
#define REG_SWU3_LA3		(*(RwReg *)0x2000D074UL)

#else
#define REG_SWU3_LA3		(0x2000D074) /**< \brief (SWU3) SWU3 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_UA0 : (32) SWU3 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_UA0_Type;
#define REG_SWU3_UA0		(*(RwReg *)0x2000D018UL)

#else
#define REG_SWU3_UA0		(0x2000D018) /**< \brief (SWU3) SWU3 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_UA1 : (32) SWU3 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_UA1_Type;
#define REG_SWU3_UA1		(*(RwReg *)0x2000D038UL)

#else
#define REG_SWU3_UA1		(0x2000D038) /**< \brief (SWU3) SWU3 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_UA2 : (32) SWU3 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_UA2_Type;
#define REG_SWU3_UA2		(*(RwReg *)0x2000D058UL)

#else
#define REG_SWU3_UA2		(0x2000D058) /**< \brief (SWU3) SWU3 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_UA3 : (32) SWU3 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_UA3_Type;
#define REG_SWU3_UA3		(*(RwReg *)0x2000D078UL)

#else
#define REG_SWU3_UA3		(0x2000D078) /**< \brief (SWU3) SWU3 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_ID0 : (32) SWU3 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_ID0_Type;
#define REG_SWU3_ID0		(*(RwReg *)0x2000D01CUL)

#else
#define REG_SWU3_ID0		(0x2000D01C) /**< \brief (SWU3) SWU3 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_ID1 : (32) SWU3 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_ID1_Type;
#define REG_SWU3_ID1		(*(RwReg *)0x2000D03CUL)

#else
#define REG_SWU3_ID1		(0x2000D03C) /**< \brief (SWU3) SWU3 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_ID2 : (32) SWU3 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_ID2_Type;
#define REG_SWU3_ID2		(*(RwReg *)0x2000D05CUL)

#else
#define REG_SWU3_ID2		(0x2000D05C) /**< \brief (SWU3) SWU3 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_ID3 : (32) SWU3 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_ID3_Type;
#define REG_SWU3_ID3		(*(RwReg *)0x2000D07CUL)

#else
#define REG_SWU3_ID3		(0x2000D07C) /**< \brief (SWU3) SWU3 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CNT0 : (32) SWU3 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CNT0_Type;
#define REG_SWU3_CNT0		(*(RwReg *)0x2000D020UL)

#else
#define REG_SWU3_CNT0		(0x2000D020) /**< \brief (SWU3) SWU3 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CNT1 : (32) SWU3 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CNT1_Type;
#define REG_SWU3_CNT1		(*(RwReg *)0x2000D040UL)

#else
#define REG_SWU3_CNT1		(0x2000D040) /**< \brief (SWU3) SWU3 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CNT2 : (32) SWU3 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CNT2_Type;
#define REG_SWU3_CNT2		(*(RwReg *)0x2000D060UL)

#else
#define REG_SWU3_CNT2		(0x2000D060) /**< \brief (SWU3) SWU3 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CNT3 : (32) SWU3 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CNT3_Type;
#define REG_SWU3_CNT3		(*(RwReg *)0x2000D080UL)

#else
#define REG_SWU3_CNT3		(0x2000D080) /**< \brief (SWU3) SWU3 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_TARG0 : (32) SWU3 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_TARG0_Type;
#define REG_SWU3_TARG0		(*(RwReg *)0x2000D024UL)

#else
#define REG_SWU3_TARG0		(0x2000D024) /**< \brief (SWU3) SWU3 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_TARG1 : (32) SWU3 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_TARG1_Type;
#define REG_SWU3_TARG1		(*(RwReg *)0x2000D044UL)

#else
#define REG_SWU3_TARG1		(0x2000D044) /**< \brief (SWU3) SWU3 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_TARG2 : (32) SWU3 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_TARG2_Type;
#define REG_SWU3_TARG2		(*(RwReg *)0x2000D064UL)

#else
#define REG_SWU3_TARG2		(0x2000D064) /**< \brief (SWU3) SWU3 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_TARG3 : (32) SWU3 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_TARG3_Type;
#define REG_SWU3_TARG3		(*(RwReg *)0x2000D084UL)

#else
#define REG_SWU3_TARG3		(0x2000D084) /**< \brief (SWU3) SWU3 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_HIST0 : (32) SWU3 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_HIST0_Type;
#define REG_SWU3_HIST0		(*(RwReg *)0x2000D028UL)

#else
#define REG_SWU3_HIST0		(0x2000D028) /**< \brief (SWU3) SWU3 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_HIST1 : (32) SWU3 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_HIST1_Type;
#define REG_SWU3_HIST1		(*(RwReg *)0x2000D048UL)

#else
#define REG_SWU3_HIST1		(0x2000D048) /**< \brief (SWU3) SWU3 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_HIST2 : (32) SWU3 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_HIST2_Type;
#define REG_SWU3_HIST2		(*(RwReg *)0x2000D068UL)

#else
#define REG_SWU3_HIST2		(0x2000D068) /**< \brief (SWU3) SWU3 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_HIST3 : (32) SWU3 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_HIST3_Type;
#define REG_SWU3_HIST3		(*(RwReg *)0x2000D088UL)

#else
#define REG_SWU3_HIST3		(0x2000D088) /**< \brief (SWU3) SWU3 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CUR0 : (32) SWU3 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CUR0_Type;
#define REG_SWU3_CUR0		(*(RwReg *)0x2000D02CUL)

#else
#define REG_SWU3_CUR0		(0x2000D02C) /**< \brief (SWU3) SWU3 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CUR1 : (32) SWU3 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CUR1_Type;
#define REG_SWU3_CUR1		(*(RwReg *)0x2000D04CUL)

#else
#define REG_SWU3_CUR1		(0x2000D04C) /**< \brief (SWU3) SWU3 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CUR2 : (32) SWU3 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CUR2_Type;
#define REG_SWU3_CUR2		(*(RwReg *)0x2000D06CUL)

#else
#define REG_SWU3_CUR2		(0x2000D06C) /**< \brief (SWU3) SWU3 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU3_CUR3 : (32) SWU3 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU3_CUR3_Type;
#define REG_SWU3_CUR3		(*(RwReg *)0x2000D08CUL)

#else
#define REG_SWU3_CUR3		(0x2000D08C) /**< \brief (SWU3) SWU3 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SWU3_GCTL_Type		GCTL;		/**< \brief SWU3 Global Control Register */
	__IO SWU3_GSTAT_Type		GSTAT;		/**< \brief SWU3 Global Status Register */
		 RoReg8		Reserved1[0x08];		
	__IO SWU3_CTL0_Type		CTL0;		/**< \brief SWU3 Control Register n */
	__IO SWU3_LA0_Type		LA0;		/**< \brief SWU3 Lower Address Register n */
	__IO SWU3_UA0_Type		UA0;		/**< \brief SWU3 Upper Address Register n */
	__IO SWU3_ID0_Type		ID0;		/**< \brief SWU3 ID Register n */
	__IO SWU3_CNT0_Type		CNT0;		/**< \brief SWU3 Count Register n */
	__IO SWU3_TARG0_Type		TARG0;		/**< \brief SWU3 Target Register n */
	__IO SWU3_HIST0_Type		HIST0;		/**< \brief SWU3 Bandwidth History Register n */
	__IO SWU3_CUR0_Type		CUR0;		/**< \brief SWU3 Current Register n */
	__IO SWU3_CTL1_Type		CTL1;		/**< \brief SWU3 Control Register n */
	__IO SWU3_LA1_Type		LA1;		/**< \brief SWU3 Lower Address Register n */
	__IO SWU3_UA1_Type		UA1;		/**< \brief SWU3 Upper Address Register n */
	__IO SWU3_ID1_Type		ID1;		/**< \brief SWU3 ID Register n */
	__IO SWU3_CNT1_Type		CNT1;		/**< \brief SWU3 Count Register n */
	__IO SWU3_TARG1_Type		TARG1;		/**< \brief SWU3 Target Register n */
	__IO SWU3_HIST1_Type		HIST1;		/**< \brief SWU3 Bandwidth History Register n */
	__IO SWU3_CUR1_Type		CUR1;		/**< \brief SWU3 Current Register n */
	__IO SWU3_CTL2_Type		CTL2;		/**< \brief SWU3 Control Register n */
	__IO SWU3_LA2_Type		LA2;		/**< \brief SWU3 Lower Address Register n */
	__IO SWU3_UA2_Type		UA2;		/**< \brief SWU3 Upper Address Register n */
	__IO SWU3_ID2_Type		ID2;		/**< \brief SWU3 ID Register n */
	__IO SWU3_CNT2_Type		CNT2;		/**< \brief SWU3 Count Register n */
	__IO SWU3_TARG2_Type		TARG2;		/**< \brief SWU3 Target Register n */
	__IO SWU3_HIST2_Type		HIST2;		/**< \brief SWU3 Bandwidth History Register n */
	__IO SWU3_CUR2_Type		CUR2;		/**< \brief SWU3 Current Register n */
	__IO SWU3_CTL3_Type		CTL3;		/**< \brief SWU3 Control Register n */
	__IO SWU3_LA3_Type		LA3;		/**< \brief SWU3 Lower Address Register n */
	__IO SWU3_UA3_Type		UA3;		/**< \brief SWU3 Upper Address Register n */
	__IO SWU3_ID3_Type		ID3;		/**< \brief SWU3 ID Register n */
	__IO SWU3_CNT3_Type		CNT3;		/**< \brief SWU3 Count Register n */
	__IO SWU3_TARG3_Type		TARG3;		/**< \brief SWU3 Target Register n */
	__IO SWU3_HIST3_Type		HIST3;		/**< \brief SWU3 Bandwidth History Register n */
	__IO SWU3_CUR3_Type		CUR3;		/**< \brief SWU3 Current Register n */
} Swu3;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SWU4_GCTL : (32) SWU4 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Global Enable	*/
		uint32_t RST:1;			/*!< bit	1	Global Reset	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_GCTL_Type;
#define REG_SWU4_GCTL		(*(RwReg *)0x200CC000UL)

#else
#define REG_SWU4_GCTL		(0x200CC000) /**< \brief (SWU4) SWU4 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_GSTAT : (32) SWU4 Global Status Register ----- */
typedef union {
	struct {
		uint32_t MTCH0:1;			/*!< bit	0	Group 0 Match	*/
		uint32_t MTCH1:1;			/*!< bit	1	Group 1 Match	*/
		uint32_t MTCH2:1;			/*!< bit	2	Group 2 Match	*/
		uint32_t MTCH3:1;			/*!< bit	3	Group 3 Match	*/
		uint32_t INT0:1;			/*!< bit	4	Group 0 Interrupt Status	*/
		uint32_t INT1:1;			/*!< bit	5	Group 1 Interrupt Status	*/
		uint32_t INT2:1;			/*!< bit	6	Group 2 Interrupt Status	*/
		uint32_t INT3:1;			/*!< bit	7	Group 3 Interrupt Status	*/
		uint32_t UNDRBW0:1;			/*!< bit	8	Group 0 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW0:1;			/*!< bit	9	Group 0 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW1:1;			/*!< bit	10	Group 1 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW1:1;			/*!< bit	11	Group 1 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW2:1;			/*!< bit	12	Group 2 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW2:1;			/*!< bit	13	Group 2 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW3:1;			/*!< bit	14	Group 3 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW3:1;			/*!< bit	15	Group 3 Bandwidth Above Maximum Target	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error Status	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_GSTAT_Type;
#define REG_SWU4_GSTAT		(*(RwReg *)0x200CC004UL)

#else
#define REG_SWU4_GSTAT		(0x200CC004) /**< \brief (SWU4) SWU4 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CTL0 : (32) SWU4 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CTL0_Type;
#define REG_SWU4_CTL0		(*(RwReg *)0x200CC010UL)

#else
#define REG_SWU4_CTL0		(0x200CC010) /**< \brief (SWU4) SWU4 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CTL1 : (32) SWU4 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CTL1_Type;
#define REG_SWU4_CTL1		(*(RwReg *)0x200CC030UL)

#else
#define REG_SWU4_CTL1		(0x200CC030) /**< \brief (SWU4) SWU4 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CTL2 : (32) SWU4 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CTL2_Type;
#define REG_SWU4_CTL2		(*(RwReg *)0x200CC050UL)

#else
#define REG_SWU4_CTL2		(0x200CC050) /**< \brief (SWU4) SWU4 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CTL3 : (32) SWU4 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CTL3_Type;
#define REG_SWU4_CTL3		(*(RwReg *)0x200CC070UL)

#else
#define REG_SWU4_CTL3		(0x200CC070) /**< \brief (SWU4) SWU4 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_LA0 : (32) SWU4 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_LA0_Type;
#define REG_SWU4_LA0		(*(RwReg *)0x200CC014UL)

#else
#define REG_SWU4_LA0		(0x200CC014) /**< \brief (SWU4) SWU4 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_LA1 : (32) SWU4 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_LA1_Type;
#define REG_SWU4_LA1		(*(RwReg *)0x200CC034UL)

#else
#define REG_SWU4_LA1		(0x200CC034) /**< \brief (SWU4) SWU4 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_LA2 : (32) SWU4 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_LA2_Type;
#define REG_SWU4_LA2		(*(RwReg *)0x200CC054UL)

#else
#define REG_SWU4_LA2		(0x200CC054) /**< \brief (SWU4) SWU4 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_LA3 : (32) SWU4 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_LA3_Type;
#define REG_SWU4_LA3		(*(RwReg *)0x200CC074UL)

#else
#define REG_SWU4_LA3		(0x200CC074) /**< \brief (SWU4) SWU4 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_UA0 : (32) SWU4 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_UA0_Type;
#define REG_SWU4_UA0		(*(RwReg *)0x200CC018UL)

#else
#define REG_SWU4_UA0		(0x200CC018) /**< \brief (SWU4) SWU4 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_UA1 : (32) SWU4 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_UA1_Type;
#define REG_SWU4_UA1		(*(RwReg *)0x200CC038UL)

#else
#define REG_SWU4_UA1		(0x200CC038) /**< \brief (SWU4) SWU4 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_UA2 : (32) SWU4 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_UA2_Type;
#define REG_SWU4_UA2		(*(RwReg *)0x200CC058UL)

#else
#define REG_SWU4_UA2		(0x200CC058) /**< \brief (SWU4) SWU4 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_UA3 : (32) SWU4 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_UA3_Type;
#define REG_SWU4_UA3		(*(RwReg *)0x200CC078UL)

#else
#define REG_SWU4_UA3		(0x200CC078) /**< \brief (SWU4) SWU4 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_ID0 : (32) SWU4 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_ID0_Type;
#define REG_SWU4_ID0		(*(RwReg *)0x200CC01CUL)

#else
#define REG_SWU4_ID0		(0x200CC01C) /**< \brief (SWU4) SWU4 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_ID1 : (32) SWU4 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_ID1_Type;
#define REG_SWU4_ID1		(*(RwReg *)0x200CC03CUL)

#else
#define REG_SWU4_ID1		(0x200CC03C) /**< \brief (SWU4) SWU4 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_ID2 : (32) SWU4 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_ID2_Type;
#define REG_SWU4_ID2		(*(RwReg *)0x200CC05CUL)

#else
#define REG_SWU4_ID2		(0x200CC05C) /**< \brief (SWU4) SWU4 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_ID3 : (32) SWU4 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_ID3_Type;
#define REG_SWU4_ID3		(*(RwReg *)0x200CC07CUL)

#else
#define REG_SWU4_ID3		(0x200CC07C) /**< \brief (SWU4) SWU4 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CNT0 : (32) SWU4 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CNT0_Type;
#define REG_SWU4_CNT0		(*(RwReg *)0x200CC020UL)

#else
#define REG_SWU4_CNT0		(0x200CC020) /**< \brief (SWU4) SWU4 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CNT1 : (32) SWU4 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CNT1_Type;
#define REG_SWU4_CNT1		(*(RwReg *)0x200CC040UL)

#else
#define REG_SWU4_CNT1		(0x200CC040) /**< \brief (SWU4) SWU4 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CNT2 : (32) SWU4 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CNT2_Type;
#define REG_SWU4_CNT2		(*(RwReg *)0x200CC060UL)

#else
#define REG_SWU4_CNT2		(0x200CC060) /**< \brief (SWU4) SWU4 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CNT3 : (32) SWU4 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CNT3_Type;
#define REG_SWU4_CNT3		(*(RwReg *)0x200CC080UL)

#else
#define REG_SWU4_CNT3		(0x200CC080) /**< \brief (SWU4) SWU4 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_TARG0 : (32) SWU4 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_TARG0_Type;
#define REG_SWU4_TARG0		(*(RwReg *)0x200CC024UL)

#else
#define REG_SWU4_TARG0		(0x200CC024) /**< \brief (SWU4) SWU4 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_TARG1 : (32) SWU4 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_TARG1_Type;
#define REG_SWU4_TARG1		(*(RwReg *)0x200CC044UL)

#else
#define REG_SWU4_TARG1		(0x200CC044) /**< \brief (SWU4) SWU4 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_TARG2 : (32) SWU4 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_TARG2_Type;
#define REG_SWU4_TARG2		(*(RwReg *)0x200CC064UL)

#else
#define REG_SWU4_TARG2		(0x200CC064) /**< \brief (SWU4) SWU4 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_TARG3 : (32) SWU4 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_TARG3_Type;
#define REG_SWU4_TARG3		(*(RwReg *)0x200CC084UL)

#else
#define REG_SWU4_TARG3		(0x200CC084) /**< \brief (SWU4) SWU4 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_HIST0 : (32) SWU4 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_HIST0_Type;
#define REG_SWU4_HIST0		(*(RwReg *)0x200CC028UL)

#else
#define REG_SWU4_HIST0		(0x200CC028) /**< \brief (SWU4) SWU4 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_HIST1 : (32) SWU4 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_HIST1_Type;
#define REG_SWU4_HIST1		(*(RwReg *)0x200CC048UL)

#else
#define REG_SWU4_HIST1		(0x200CC048) /**< \brief (SWU4) SWU4 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_HIST2 : (32) SWU4 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_HIST2_Type;
#define REG_SWU4_HIST2		(*(RwReg *)0x200CC068UL)

#else
#define REG_SWU4_HIST2		(0x200CC068) /**< \brief (SWU4) SWU4 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_HIST3 : (32) SWU4 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_HIST3_Type;
#define REG_SWU4_HIST3		(*(RwReg *)0x200CC088UL)

#else
#define REG_SWU4_HIST3		(0x200CC088) /**< \brief (SWU4) SWU4 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CUR0 : (32) SWU4 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CUR0_Type;
#define REG_SWU4_CUR0		(*(RwReg *)0x200CC02CUL)

#else
#define REG_SWU4_CUR0		(0x200CC02C) /**< \brief (SWU4) SWU4 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CUR1 : (32) SWU4 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CUR1_Type;
#define REG_SWU4_CUR1		(*(RwReg *)0x200CC04CUL)

#else
#define REG_SWU4_CUR1		(0x200CC04C) /**< \brief (SWU4) SWU4 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CUR2 : (32) SWU4 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CUR2_Type;
#define REG_SWU4_CUR2		(*(RwReg *)0x200CC06CUL)

#else
#define REG_SWU4_CUR2		(0x200CC06C) /**< \brief (SWU4) SWU4 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU4_CUR3 : (32) SWU4 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU4_CUR3_Type;
#define REG_SWU4_CUR3		(*(RwReg *)0x200CC08CUL)

#else
#define REG_SWU4_CUR3		(0x200CC08C) /**< \brief (SWU4) SWU4 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SWU4_GCTL_Type		GCTL;		/**< \brief SWU4 Global Control Register */
	__IO SWU4_GSTAT_Type		GSTAT;		/**< \brief SWU4 Global Status Register */
		 RoReg8		Reserved1[0x08];		
	__IO SWU4_CTL0_Type		CTL0;		/**< \brief SWU4 Control Register n */
	__IO SWU4_LA0_Type		LA0;		/**< \brief SWU4 Lower Address Register n */
	__IO SWU4_UA0_Type		UA0;		/**< \brief SWU4 Upper Address Register n */
	__IO SWU4_ID0_Type		ID0;		/**< \brief SWU4 ID Register n */
	__IO SWU4_CNT0_Type		CNT0;		/**< \brief SWU4 Count Register n */
	__IO SWU4_TARG0_Type		TARG0;		/**< \brief SWU4 Target Register n */
	__IO SWU4_HIST0_Type		HIST0;		/**< \brief SWU4 Bandwidth History Register n */
	__IO SWU4_CUR0_Type		CUR0;		/**< \brief SWU4 Current Register n */
	__IO SWU4_CTL1_Type		CTL1;		/**< \brief SWU4 Control Register n */
	__IO SWU4_LA1_Type		LA1;		/**< \brief SWU4 Lower Address Register n */
	__IO SWU4_UA1_Type		UA1;		/**< \brief SWU4 Upper Address Register n */
	__IO SWU4_ID1_Type		ID1;		/**< \brief SWU4 ID Register n */
	__IO SWU4_CNT1_Type		CNT1;		/**< \brief SWU4 Count Register n */
	__IO SWU4_TARG1_Type		TARG1;		/**< \brief SWU4 Target Register n */
	__IO SWU4_HIST1_Type		HIST1;		/**< \brief SWU4 Bandwidth History Register n */
	__IO SWU4_CUR1_Type		CUR1;		/**< \brief SWU4 Current Register n */
	__IO SWU4_CTL2_Type		CTL2;		/**< \brief SWU4 Control Register n */
	__IO SWU4_LA2_Type		LA2;		/**< \brief SWU4 Lower Address Register n */
	__IO SWU4_UA2_Type		UA2;		/**< \brief SWU4 Upper Address Register n */
	__IO SWU4_ID2_Type		ID2;		/**< \brief SWU4 ID Register n */
	__IO SWU4_CNT2_Type		CNT2;		/**< \brief SWU4 Count Register n */
	__IO SWU4_TARG2_Type		TARG2;		/**< \brief SWU4 Target Register n */
	__IO SWU4_HIST2_Type		HIST2;		/**< \brief SWU4 Bandwidth History Register n */
	__IO SWU4_CUR2_Type		CUR2;		/**< \brief SWU4 Current Register n */
	__IO SWU4_CTL3_Type		CTL3;		/**< \brief SWU4 Control Register n */
	__IO SWU4_LA3_Type		LA3;		/**< \brief SWU4 Lower Address Register n */
	__IO SWU4_UA3_Type		UA3;		/**< \brief SWU4 Upper Address Register n */
	__IO SWU4_ID3_Type		ID3;		/**< \brief SWU4 ID Register n */
	__IO SWU4_CNT3_Type		CNT3;		/**< \brief SWU4 Count Register n */
	__IO SWU4_TARG3_Type		TARG3;		/**< \brief SWU4 Target Register n */
	__IO SWU4_HIST3_Type		HIST3;		/**< \brief SWU4 Bandwidth History Register n */
	__IO SWU4_CUR3_Type		CUR3;		/**< \brief SWU4 Current Register n */
} Swu4;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SWU5_GCTL : (32) SWU5 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Global Enable	*/
		uint32_t RST:1;			/*!< bit	1	Global Reset	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_GCTL_Type;
#define REG_SWU5_GCTL		(*(RwReg *)0x20077000UL)

#else
#define REG_SWU5_GCTL		(0x20077000) /**< \brief (SWU5) SWU5 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_GSTAT : (32) SWU5 Global Status Register ----- */
typedef union {
	struct {
		uint32_t MTCH0:1;			/*!< bit	0	Group 0 Match	*/
		uint32_t MTCH1:1;			/*!< bit	1	Group 1 Match	*/
		uint32_t MTCH2:1;			/*!< bit	2	Group 2 Match	*/
		uint32_t MTCH3:1;			/*!< bit	3	Group 3 Match	*/
		uint32_t INT0:1;			/*!< bit	4	Group 0 Interrupt Status	*/
		uint32_t INT1:1;			/*!< bit	5	Group 1 Interrupt Status	*/
		uint32_t INT2:1;			/*!< bit	6	Group 2 Interrupt Status	*/
		uint32_t INT3:1;			/*!< bit	7	Group 3 Interrupt Status	*/
		uint32_t UNDRBW0:1;			/*!< bit	8	Group 0 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW0:1;			/*!< bit	9	Group 0 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW1:1;			/*!< bit	10	Group 1 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW1:1;			/*!< bit	11	Group 1 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW2:1;			/*!< bit	12	Group 2 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW2:1;			/*!< bit	13	Group 2 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW3:1;			/*!< bit	14	Group 3 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW3:1;			/*!< bit	15	Group 3 Bandwidth Above Maximum Target	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error Status	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_GSTAT_Type;
#define REG_SWU5_GSTAT		(*(RwReg *)0x20077004UL)

#else
#define REG_SWU5_GSTAT		(0x20077004) /**< \brief (SWU5) SWU5 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CTL0 : (32) SWU5 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CTL0_Type;
#define REG_SWU5_CTL0		(*(RwReg *)0x20077010UL)

#else
#define REG_SWU5_CTL0		(0x20077010) /**< \brief (SWU5) SWU5 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CTL1 : (32) SWU5 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CTL1_Type;
#define REG_SWU5_CTL1		(*(RwReg *)0x20077030UL)

#else
#define REG_SWU5_CTL1		(0x20077030) /**< \brief (SWU5) SWU5 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CTL2 : (32) SWU5 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CTL2_Type;
#define REG_SWU5_CTL2		(*(RwReg *)0x20077050UL)

#else
#define REG_SWU5_CTL2		(0x20077050) /**< \brief (SWU5) SWU5 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CTL3 : (32) SWU5 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CTL3_Type;
#define REG_SWU5_CTL3		(*(RwReg *)0x20077070UL)

#else
#define REG_SWU5_CTL3		(0x20077070) /**< \brief (SWU5) SWU5 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_LA0 : (32) SWU5 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_LA0_Type;
#define REG_SWU5_LA0		(*(RwReg *)0x20077014UL)

#else
#define REG_SWU5_LA0		(0x20077014) /**< \brief (SWU5) SWU5 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_LA1 : (32) SWU5 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_LA1_Type;
#define REG_SWU5_LA1		(*(RwReg *)0x20077034UL)

#else
#define REG_SWU5_LA1		(0x20077034) /**< \brief (SWU5) SWU5 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_LA2 : (32) SWU5 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_LA2_Type;
#define REG_SWU5_LA2		(*(RwReg *)0x20077054UL)

#else
#define REG_SWU5_LA2		(0x20077054) /**< \brief (SWU5) SWU5 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_LA3 : (32) SWU5 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_LA3_Type;
#define REG_SWU5_LA3		(*(RwReg *)0x20077074UL)

#else
#define REG_SWU5_LA3		(0x20077074) /**< \brief (SWU5) SWU5 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_UA0 : (32) SWU5 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_UA0_Type;
#define REG_SWU5_UA0		(*(RwReg *)0x20077018UL)

#else
#define REG_SWU5_UA0		(0x20077018) /**< \brief (SWU5) SWU5 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_UA1 : (32) SWU5 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_UA1_Type;
#define REG_SWU5_UA1		(*(RwReg *)0x20077038UL)

#else
#define REG_SWU5_UA1		(0x20077038) /**< \brief (SWU5) SWU5 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_UA2 : (32) SWU5 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_UA2_Type;
#define REG_SWU5_UA2		(*(RwReg *)0x20077058UL)

#else
#define REG_SWU5_UA2		(0x20077058) /**< \brief (SWU5) SWU5 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_UA3 : (32) SWU5 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_UA3_Type;
#define REG_SWU5_UA3		(*(RwReg *)0x20077078UL)

#else
#define REG_SWU5_UA3		(0x20077078) /**< \brief (SWU5) SWU5 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_ID0 : (32) SWU5 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_ID0_Type;
#define REG_SWU5_ID0		(*(RwReg *)0x2007701CUL)

#else
#define REG_SWU5_ID0		(0x2007701C) /**< \brief (SWU5) SWU5 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_ID1 : (32) SWU5 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_ID1_Type;
#define REG_SWU5_ID1		(*(RwReg *)0x2007703CUL)

#else
#define REG_SWU5_ID1		(0x2007703C) /**< \brief (SWU5) SWU5 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_ID2 : (32) SWU5 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_ID2_Type;
#define REG_SWU5_ID2		(*(RwReg *)0x2007705CUL)

#else
#define REG_SWU5_ID2		(0x2007705C) /**< \brief (SWU5) SWU5 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_ID3 : (32) SWU5 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_ID3_Type;
#define REG_SWU5_ID3		(*(RwReg *)0x2007707CUL)

#else
#define REG_SWU5_ID3		(0x2007707C) /**< \brief (SWU5) SWU5 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CNT0 : (32) SWU5 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CNT0_Type;
#define REG_SWU5_CNT0		(*(RwReg *)0x20077020UL)

#else
#define REG_SWU5_CNT0		(0x20077020) /**< \brief (SWU5) SWU5 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CNT1 : (32) SWU5 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CNT1_Type;
#define REG_SWU5_CNT1		(*(RwReg *)0x20077040UL)

#else
#define REG_SWU5_CNT1		(0x20077040) /**< \brief (SWU5) SWU5 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CNT2 : (32) SWU5 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CNT2_Type;
#define REG_SWU5_CNT2		(*(RwReg *)0x20077060UL)

#else
#define REG_SWU5_CNT2		(0x20077060) /**< \brief (SWU5) SWU5 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CNT3 : (32) SWU5 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CNT3_Type;
#define REG_SWU5_CNT3		(*(RwReg *)0x20077080UL)

#else
#define REG_SWU5_CNT3		(0x20077080) /**< \brief (SWU5) SWU5 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_TARG0 : (32) SWU5 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_TARG0_Type;
#define REG_SWU5_TARG0		(*(RwReg *)0x20077024UL)

#else
#define REG_SWU5_TARG0		(0x20077024) /**< \brief (SWU5) SWU5 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_TARG1 : (32) SWU5 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_TARG1_Type;
#define REG_SWU5_TARG1		(*(RwReg *)0x20077044UL)

#else
#define REG_SWU5_TARG1		(0x20077044) /**< \brief (SWU5) SWU5 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_TARG2 : (32) SWU5 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_TARG2_Type;
#define REG_SWU5_TARG2		(*(RwReg *)0x20077064UL)

#else
#define REG_SWU5_TARG2		(0x20077064) /**< \brief (SWU5) SWU5 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_TARG3 : (32) SWU5 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_TARG3_Type;
#define REG_SWU5_TARG3		(*(RwReg *)0x20077084UL)

#else
#define REG_SWU5_TARG3		(0x20077084) /**< \brief (SWU5) SWU5 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_HIST0 : (32) SWU5 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_HIST0_Type;
#define REG_SWU5_HIST0		(*(RwReg *)0x20077028UL)

#else
#define REG_SWU5_HIST0		(0x20077028) /**< \brief (SWU5) SWU5 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_HIST1 : (32) SWU5 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_HIST1_Type;
#define REG_SWU5_HIST1		(*(RwReg *)0x20077048UL)

#else
#define REG_SWU5_HIST1		(0x20077048) /**< \brief (SWU5) SWU5 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_HIST2 : (32) SWU5 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_HIST2_Type;
#define REG_SWU5_HIST2		(*(RwReg *)0x20077068UL)

#else
#define REG_SWU5_HIST2		(0x20077068) /**< \brief (SWU5) SWU5 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_HIST3 : (32) SWU5 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_HIST3_Type;
#define REG_SWU5_HIST3		(*(RwReg *)0x20077088UL)

#else
#define REG_SWU5_HIST3		(0x20077088) /**< \brief (SWU5) SWU5 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CUR0 : (32) SWU5 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CUR0_Type;
#define REG_SWU5_CUR0		(*(RwReg *)0x2007702CUL)

#else
#define REG_SWU5_CUR0		(0x2007702C) /**< \brief (SWU5) SWU5 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CUR1 : (32) SWU5 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CUR1_Type;
#define REG_SWU5_CUR1		(*(RwReg *)0x2007704CUL)

#else
#define REG_SWU5_CUR1		(0x2007704C) /**< \brief (SWU5) SWU5 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CUR2 : (32) SWU5 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CUR2_Type;
#define REG_SWU5_CUR2		(*(RwReg *)0x2007706CUL)

#else
#define REG_SWU5_CUR2		(0x2007706C) /**< \brief (SWU5) SWU5 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU5_CUR3 : (32) SWU5 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU5_CUR3_Type;
#define REG_SWU5_CUR3		(*(RwReg *)0x2007708CUL)

#else
#define REG_SWU5_CUR3		(0x2007708C) /**< \brief (SWU5) SWU5 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SWU5_GCTL_Type		GCTL;		/**< \brief SWU5 Global Control Register */
	__IO SWU5_GSTAT_Type		GSTAT;		/**< \brief SWU5 Global Status Register */
		 RoReg8		Reserved1[0x08];		
	__IO SWU5_CTL0_Type		CTL0;		/**< \brief SWU5 Control Register n */
	__IO SWU5_LA0_Type		LA0;		/**< \brief SWU5 Lower Address Register n */
	__IO SWU5_UA0_Type		UA0;		/**< \brief SWU5 Upper Address Register n */
	__IO SWU5_ID0_Type		ID0;		/**< \brief SWU5 ID Register n */
	__IO SWU5_CNT0_Type		CNT0;		/**< \brief SWU5 Count Register n */
	__IO SWU5_TARG0_Type		TARG0;		/**< \brief SWU5 Target Register n */
	__IO SWU5_HIST0_Type		HIST0;		/**< \brief SWU5 Bandwidth History Register n */
	__IO SWU5_CUR0_Type		CUR0;		/**< \brief SWU5 Current Register n */
	__IO SWU5_CTL1_Type		CTL1;		/**< \brief SWU5 Control Register n */
	__IO SWU5_LA1_Type		LA1;		/**< \brief SWU5 Lower Address Register n */
	__IO SWU5_UA1_Type		UA1;		/**< \brief SWU5 Upper Address Register n */
	__IO SWU5_ID1_Type		ID1;		/**< \brief SWU5 ID Register n */
	__IO SWU5_CNT1_Type		CNT1;		/**< \brief SWU5 Count Register n */
	__IO SWU5_TARG1_Type		TARG1;		/**< \brief SWU5 Target Register n */
	__IO SWU5_HIST1_Type		HIST1;		/**< \brief SWU5 Bandwidth History Register n */
	__IO SWU5_CUR1_Type		CUR1;		/**< \brief SWU5 Current Register n */
	__IO SWU5_CTL2_Type		CTL2;		/**< \brief SWU5 Control Register n */
	__IO SWU5_LA2_Type		LA2;		/**< \brief SWU5 Lower Address Register n */
	__IO SWU5_UA2_Type		UA2;		/**< \brief SWU5 Upper Address Register n */
	__IO SWU5_ID2_Type		ID2;		/**< \brief SWU5 ID Register n */
	__IO SWU5_CNT2_Type		CNT2;		/**< \brief SWU5 Count Register n */
	__IO SWU5_TARG2_Type		TARG2;		/**< \brief SWU5 Target Register n */
	__IO SWU5_HIST2_Type		HIST2;		/**< \brief SWU5 Bandwidth History Register n */
	__IO SWU5_CUR2_Type		CUR2;		/**< \brief SWU5 Current Register n */
	__IO SWU5_CTL3_Type		CTL3;		/**< \brief SWU5 Control Register n */
	__IO SWU5_LA3_Type		LA3;		/**< \brief SWU5 Lower Address Register n */
	__IO SWU5_UA3_Type		UA3;		/**< \brief SWU5 Upper Address Register n */
	__IO SWU5_ID3_Type		ID3;		/**< \brief SWU5 ID Register n */
	__IO SWU5_CNT3_Type		CNT3;		/**< \brief SWU5 Count Register n */
	__IO SWU5_TARG3_Type		TARG3;		/**< \brief SWU5 Target Register n */
	__IO SWU5_HIST3_Type		HIST3;		/**< \brief SWU5 Bandwidth History Register n */
	__IO SWU5_CUR3_Type		CUR3;		/**< \brief SWU5 Current Register n */
} Swu5;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SWU6_GCTL : (32) SWU6 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Global Enable	*/
		uint32_t RST:1;			/*!< bit	1	Global Reset	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_GCTL_Type;
#define REG_SWU6_GCTL		(*(RwReg *)0x20078000UL)

#else
#define REG_SWU6_GCTL		(0x20078000) /**< \brief (SWU6) SWU6 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_GSTAT : (32) SWU6 Global Status Register ----- */
typedef union {
	struct {
		uint32_t MTCH0:1;			/*!< bit	0	Group 0 Match	*/
		uint32_t MTCH1:1;			/*!< bit	1	Group 1 Match	*/
		uint32_t MTCH2:1;			/*!< bit	2	Group 2 Match	*/
		uint32_t MTCH3:1;			/*!< bit	3	Group 3 Match	*/
		uint32_t INT0:1;			/*!< bit	4	Group 0 Interrupt Status	*/
		uint32_t INT1:1;			/*!< bit	5	Group 1 Interrupt Status	*/
		uint32_t INT2:1;			/*!< bit	6	Group 2 Interrupt Status	*/
		uint32_t INT3:1;			/*!< bit	7	Group 3 Interrupt Status	*/
		uint32_t UNDRBW0:1;			/*!< bit	8	Group 0 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW0:1;			/*!< bit	9	Group 0 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW1:1;			/*!< bit	10	Group 1 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW1:1;			/*!< bit	11	Group 1 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW2:1;			/*!< bit	12	Group 2 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW2:1;			/*!< bit	13	Group 2 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW3:1;			/*!< bit	14	Group 3 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW3:1;			/*!< bit	15	Group 3 Bandwidth Above Maximum Target	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error Status	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_GSTAT_Type;
#define REG_SWU6_GSTAT		(*(RwReg *)0x20078004UL)

#else
#define REG_SWU6_GSTAT		(0x20078004) /**< \brief (SWU6) SWU6 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CTL0 : (32) SWU6 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CTL0_Type;
#define REG_SWU6_CTL0		(*(RwReg *)0x20078010UL)

#else
#define REG_SWU6_CTL0		(0x20078010) /**< \brief (SWU6) SWU6 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CTL1 : (32) SWU6 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CTL1_Type;
#define REG_SWU6_CTL1		(*(RwReg *)0x20078030UL)

#else
#define REG_SWU6_CTL1		(0x20078030) /**< \brief (SWU6) SWU6 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CTL2 : (32) SWU6 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CTL2_Type;
#define REG_SWU6_CTL2		(*(RwReg *)0x20078050UL)

#else
#define REG_SWU6_CTL2		(0x20078050) /**< \brief (SWU6) SWU6 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CTL3 : (32) SWU6 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CTL3_Type;
#define REG_SWU6_CTL3		(*(RwReg *)0x20078070UL)

#else
#define REG_SWU6_CTL3		(0x20078070) /**< \brief (SWU6) SWU6 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_LA0 : (32) SWU6 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_LA0_Type;
#define REG_SWU6_LA0		(*(RwReg *)0x20078014UL)

#else
#define REG_SWU6_LA0		(0x20078014) /**< \brief (SWU6) SWU6 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_LA1 : (32) SWU6 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_LA1_Type;
#define REG_SWU6_LA1		(*(RwReg *)0x20078034UL)

#else
#define REG_SWU6_LA1		(0x20078034) /**< \brief (SWU6) SWU6 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_LA2 : (32) SWU6 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_LA2_Type;
#define REG_SWU6_LA2		(*(RwReg *)0x20078054UL)

#else
#define REG_SWU6_LA2		(0x20078054) /**< \brief (SWU6) SWU6 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_LA3 : (32) SWU6 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_LA3_Type;
#define REG_SWU6_LA3		(*(RwReg *)0x20078074UL)

#else
#define REG_SWU6_LA3		(0x20078074) /**< \brief (SWU6) SWU6 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_UA0 : (32) SWU6 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_UA0_Type;
#define REG_SWU6_UA0		(*(RwReg *)0x20078018UL)

#else
#define REG_SWU6_UA0		(0x20078018) /**< \brief (SWU6) SWU6 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_UA1 : (32) SWU6 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_UA1_Type;
#define REG_SWU6_UA1		(*(RwReg *)0x20078038UL)

#else
#define REG_SWU6_UA1		(0x20078038) /**< \brief (SWU6) SWU6 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_UA2 : (32) SWU6 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_UA2_Type;
#define REG_SWU6_UA2		(*(RwReg *)0x20078058UL)

#else
#define REG_SWU6_UA2		(0x20078058) /**< \brief (SWU6) SWU6 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_UA3 : (32) SWU6 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_UA3_Type;
#define REG_SWU6_UA3		(*(RwReg *)0x20078078UL)

#else
#define REG_SWU6_UA3		(0x20078078) /**< \brief (SWU6) SWU6 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_ID0 : (32) SWU6 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_ID0_Type;
#define REG_SWU6_ID0		(*(RwReg *)0x2007801CUL)

#else
#define REG_SWU6_ID0		(0x2007801C) /**< \brief (SWU6) SWU6 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_ID1 : (32) SWU6 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_ID1_Type;
#define REG_SWU6_ID1		(*(RwReg *)0x2007803CUL)

#else
#define REG_SWU6_ID1		(0x2007803C) /**< \brief (SWU6) SWU6 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_ID2 : (32) SWU6 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_ID2_Type;
#define REG_SWU6_ID2		(*(RwReg *)0x2007805CUL)

#else
#define REG_SWU6_ID2		(0x2007805C) /**< \brief (SWU6) SWU6 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_ID3 : (32) SWU6 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_ID3_Type;
#define REG_SWU6_ID3		(*(RwReg *)0x2007807CUL)

#else
#define REG_SWU6_ID3		(0x2007807C) /**< \brief (SWU6) SWU6 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CNT0 : (32) SWU6 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CNT0_Type;
#define REG_SWU6_CNT0		(*(RwReg *)0x20078020UL)

#else
#define REG_SWU6_CNT0		(0x20078020) /**< \brief (SWU6) SWU6 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CNT1 : (32) SWU6 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CNT1_Type;
#define REG_SWU6_CNT1		(*(RwReg *)0x20078040UL)

#else
#define REG_SWU6_CNT1		(0x20078040) /**< \brief (SWU6) SWU6 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CNT2 : (32) SWU6 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CNT2_Type;
#define REG_SWU6_CNT2		(*(RwReg *)0x20078060UL)

#else
#define REG_SWU6_CNT2		(0x20078060) /**< \brief (SWU6) SWU6 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CNT3 : (32) SWU6 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CNT3_Type;
#define REG_SWU6_CNT3		(*(RwReg *)0x20078080UL)

#else
#define REG_SWU6_CNT3		(0x20078080) /**< \brief (SWU6) SWU6 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_TARG0 : (32) SWU6 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_TARG0_Type;
#define REG_SWU6_TARG0		(*(RwReg *)0x20078024UL)

#else
#define REG_SWU6_TARG0		(0x20078024) /**< \brief (SWU6) SWU6 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_TARG1 : (32) SWU6 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_TARG1_Type;
#define REG_SWU6_TARG1		(*(RwReg *)0x20078044UL)

#else
#define REG_SWU6_TARG1		(0x20078044) /**< \brief (SWU6) SWU6 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_TARG2 : (32) SWU6 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_TARG2_Type;
#define REG_SWU6_TARG2		(*(RwReg *)0x20078064UL)

#else
#define REG_SWU6_TARG2		(0x20078064) /**< \brief (SWU6) SWU6 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_TARG3 : (32) SWU6 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_TARG3_Type;
#define REG_SWU6_TARG3		(*(RwReg *)0x20078084UL)

#else
#define REG_SWU6_TARG3		(0x20078084) /**< \brief (SWU6) SWU6 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_HIST0 : (32) SWU6 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_HIST0_Type;
#define REG_SWU6_HIST0		(*(RwReg *)0x20078028UL)

#else
#define REG_SWU6_HIST0		(0x20078028) /**< \brief (SWU6) SWU6 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_HIST1 : (32) SWU6 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_HIST1_Type;
#define REG_SWU6_HIST1		(*(RwReg *)0x20078048UL)

#else
#define REG_SWU6_HIST1		(0x20078048) /**< \brief (SWU6) SWU6 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_HIST2 : (32) SWU6 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_HIST2_Type;
#define REG_SWU6_HIST2		(*(RwReg *)0x20078068UL)

#else
#define REG_SWU6_HIST2		(0x20078068) /**< \brief (SWU6) SWU6 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_HIST3 : (32) SWU6 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_HIST3_Type;
#define REG_SWU6_HIST3		(*(RwReg *)0x20078088UL)

#else
#define REG_SWU6_HIST3		(0x20078088) /**< \brief (SWU6) SWU6 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CUR0 : (32) SWU6 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CUR0_Type;
#define REG_SWU6_CUR0		(*(RwReg *)0x2007802CUL)

#else
#define REG_SWU6_CUR0		(0x2007802C) /**< \brief (SWU6) SWU6 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CUR1 : (32) SWU6 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CUR1_Type;
#define REG_SWU6_CUR1		(*(RwReg *)0x2007804CUL)

#else
#define REG_SWU6_CUR1		(0x2007804C) /**< \brief (SWU6) SWU6 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CUR2 : (32) SWU6 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CUR2_Type;
#define REG_SWU6_CUR2		(*(RwReg *)0x2007806CUL)

#else
#define REG_SWU6_CUR2		(0x2007806C) /**< \brief (SWU6) SWU6 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU6_CUR3 : (32) SWU6 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU6_CUR3_Type;
#define REG_SWU6_CUR3		(*(RwReg *)0x2007808CUL)

#else
#define REG_SWU6_CUR3		(0x2007808C) /**< \brief (SWU6) SWU6 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SWU6_GCTL_Type		GCTL;		/**< \brief SWU6 Global Control Register */
	__IO SWU6_GSTAT_Type		GSTAT;		/**< \brief SWU6 Global Status Register */
		 RoReg8		Reserved1[0x08];		
	__IO SWU6_CTL0_Type		CTL0;		/**< \brief SWU6 Control Register n */
	__IO SWU6_LA0_Type		LA0;		/**< \brief SWU6 Lower Address Register n */
	__IO SWU6_UA0_Type		UA0;		/**< \brief SWU6 Upper Address Register n */
	__IO SWU6_ID0_Type		ID0;		/**< \brief SWU6 ID Register n */
	__IO SWU6_CNT0_Type		CNT0;		/**< \brief SWU6 Count Register n */
	__IO SWU6_TARG0_Type		TARG0;		/**< \brief SWU6 Target Register n */
	__IO SWU6_HIST0_Type		HIST0;		/**< \brief SWU6 Bandwidth History Register n */
	__IO SWU6_CUR0_Type		CUR0;		/**< \brief SWU6 Current Register n */
	__IO SWU6_CTL1_Type		CTL1;		/**< \brief SWU6 Control Register n */
	__IO SWU6_LA1_Type		LA1;		/**< \brief SWU6 Lower Address Register n */
	__IO SWU6_UA1_Type		UA1;		/**< \brief SWU6 Upper Address Register n */
	__IO SWU6_ID1_Type		ID1;		/**< \brief SWU6 ID Register n */
	__IO SWU6_CNT1_Type		CNT1;		/**< \brief SWU6 Count Register n */
	__IO SWU6_TARG1_Type		TARG1;		/**< \brief SWU6 Target Register n */
	__IO SWU6_HIST1_Type		HIST1;		/**< \brief SWU6 Bandwidth History Register n */
	__IO SWU6_CUR1_Type		CUR1;		/**< \brief SWU6 Current Register n */
	__IO SWU6_CTL2_Type		CTL2;		/**< \brief SWU6 Control Register n */
	__IO SWU6_LA2_Type		LA2;		/**< \brief SWU6 Lower Address Register n */
	__IO SWU6_UA2_Type		UA2;		/**< \brief SWU6 Upper Address Register n */
	__IO SWU6_ID2_Type		ID2;		/**< \brief SWU6 ID Register n */
	__IO SWU6_CNT2_Type		CNT2;		/**< \brief SWU6 Count Register n */
	__IO SWU6_TARG2_Type		TARG2;		/**< \brief SWU6 Target Register n */
	__IO SWU6_HIST2_Type		HIST2;		/**< \brief SWU6 Bandwidth History Register n */
	__IO SWU6_CUR2_Type		CUR2;		/**< \brief SWU6 Current Register n */
	__IO SWU6_CTL3_Type		CTL3;		/**< \brief SWU6 Control Register n */
	__IO SWU6_LA3_Type		LA3;		/**< \brief SWU6 Lower Address Register n */
	__IO SWU6_UA3_Type		UA3;		/**< \brief SWU6 Upper Address Register n */
	__IO SWU6_ID3_Type		ID3;		/**< \brief SWU6 ID Register n */
	__IO SWU6_CNT3_Type		CNT3;		/**< \brief SWU6 Count Register n */
	__IO SWU6_TARG3_Type		TARG3;		/**< \brief SWU6 Target Register n */
	__IO SWU6_HIST3_Type		HIST3;		/**< \brief SWU6 Bandwidth History Register n */
	__IO SWU6_CUR3_Type		CUR3;		/**< \brief SWU6 Current Register n */
} Swu6;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SWU7_GCTL : (32) SWU7 Global Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Global Enable	*/
		uint32_t RST:1;			/*!< bit	1	Global Reset	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_GCTL_Type;
#define REG_SWU7_GCTL		(*(RwReg *)0x20079000UL)

#else
#define REG_SWU7_GCTL		(0x20079000) /**< \brief (SWU7) SWU7 Global Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_GSTAT : (32) SWU7 Global Status Register ----- */
typedef union {
	struct {
		uint32_t MTCH0:1;			/*!< bit	0	Group 0 Match	*/
		uint32_t MTCH1:1;			/*!< bit	1	Group 1 Match	*/
		uint32_t MTCH2:1;			/*!< bit	2	Group 2 Match	*/
		uint32_t MTCH3:1;			/*!< bit	3	Group 3 Match	*/
		uint32_t INT0:1;			/*!< bit	4	Group 0 Interrupt Status	*/
		uint32_t INT1:1;			/*!< bit	5	Group 1 Interrupt Status	*/
		uint32_t INT2:1;			/*!< bit	6	Group 2 Interrupt Status	*/
		uint32_t INT3:1;			/*!< bit	7	Group 3 Interrupt Status	*/
		uint32_t UNDRBW0:1;			/*!< bit	8	Group 0 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW0:1;			/*!< bit	9	Group 0 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW1:1;			/*!< bit	10	Group 1 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW1:1;			/*!< bit	11	Group 1 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW2:1;			/*!< bit	12	Group 2 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW2:1;			/*!< bit	13	Group 2 Bandwidth Above Maximum Target	*/
		uint32_t UNDRBW3:1;			/*!< bit	14	Group 3 Bandwidth Below Minimum Target	*/
		uint32_t OVRBW3:1;			/*!< bit	15	Group 3 Bandwidth Above Maximum Target	*/
		uint32_t :14;			/*!< bit	16..29	Reserved	*/
		uint32_t ADDRERR:1;			/*!< bit	30	Address Error Status	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_GSTAT_Type;
#define REG_SWU7_GSTAT		(*(RwReg *)0x20079004UL)

#else
#define REG_SWU7_GSTAT		(0x20079004) /**< \brief (SWU7) SWU7 Global Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CTL0 : (32) SWU7 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CTL0_Type;
#define REG_SWU7_CTL0		(*(RwReg *)0x20079010UL)

#else
#define REG_SWU7_CTL0		(0x20079010) /**< \brief (SWU7) SWU7 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CTL1 : (32) SWU7 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CTL1_Type;
#define REG_SWU7_CTL1		(*(RwReg *)0x20079030UL)

#else
#define REG_SWU7_CTL1		(0x20079030) /**< \brief (SWU7) SWU7 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CTL2 : (32) SWU7 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CTL2_Type;
#define REG_SWU7_CTL2		(*(RwReg *)0x20079050UL)

#else
#define REG_SWU7_CTL2		(0x20079050) /**< \brief (SWU7) SWU7 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CTL3 : (32) SWU7 Control Register n ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Watchpoint	*/
		uint32_t DIR:1;			/*!< bit	1	Transaction Direction for Match	*/
		uint32_t ACMPM:2;			/*!< bit	2..3	Address Comparison Mode	*/
		uint32_t IDCMPEN:1;			/*!< bit	4	ID Comparison Enable	*/
		uint32_t SCMPEN:1;			/*!< bit	5	Secure Comparison Enable	*/
		uint32_t LCMPEN:1;			/*!< bit	6	Locked Comparison Enable	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTEN:1;			/*!< bit	8	Count Enable	*/
		uint32_t CNTRPTEN:1;			/*!< bit	9	Count Repeat Enable	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t DBGEN:1;			/*!< bit	12	Debug Event Enable	*/
		uint32_t INTEN:1;			/*!< bit	13	Interrupt Enable	*/
		uint32_t TRGEN:1;			/*!< bit	14	Trigger Enable	*/
		uint32_t TMEN:1;			/*!< bit	15	Trace Message Enable	*/
		uint32_t BWEN:1;			/*!< bit	16	Bandwidth Mode Enable	*/
		uint32_t BLENINC:1;			/*!< bit	17	Increment Bandwidth Count by Burst Length	*/
		uint32_t MINACT:1;			/*!< bit	18	Action for Bandwidth Below Minimum	*/
		uint32_t MAXACT:1;			/*!< bit	19	Action for Bandwidth Above Maximum	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CTL3_Type;
#define REG_SWU7_CTL3		(*(RwReg *)0x20079070UL)

#else
#define REG_SWU7_CTL3		(0x20079070) /**< \brief (SWU7) SWU7 Control Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_LA0 : (32) SWU7 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_LA0_Type;
#define REG_SWU7_LA0		(*(RwReg *)0x20079014UL)

#else
#define REG_SWU7_LA0		(0x20079014) /**< \brief (SWU7) SWU7 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_LA1 : (32) SWU7 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_LA1_Type;
#define REG_SWU7_LA1		(*(RwReg *)0x20079034UL)

#else
#define REG_SWU7_LA1		(0x20079034) /**< \brief (SWU7) SWU7 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_LA2 : (32) SWU7 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_LA2_Type;
#define REG_SWU7_LA2		(*(RwReg *)0x20079054UL)

#else
#define REG_SWU7_LA2		(0x20079054) /**< \brief (SWU7) SWU7 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_LA3 : (32) SWU7 Lower Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_LA3_Type;
#define REG_SWU7_LA3		(*(RwReg *)0x20079074UL)

#else
#define REG_SWU7_LA3		(0x20079074) /**< \brief (SWU7) SWU7 Lower Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_UA0 : (32) SWU7 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_UA0_Type;
#define REG_SWU7_UA0		(*(RwReg *)0x20079018UL)

#else
#define REG_SWU7_UA0		(0x20079018) /**< \brief (SWU7) SWU7 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_UA1 : (32) SWU7 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_UA1_Type;
#define REG_SWU7_UA1		(*(RwReg *)0x20079038UL)

#else
#define REG_SWU7_UA1		(0x20079038) /**< \brief (SWU7) SWU7 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_UA2 : (32) SWU7 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_UA2_Type;
#define REG_SWU7_UA2		(*(RwReg *)0x20079058UL)

#else
#define REG_SWU7_UA2		(0x20079058) /**< \brief (SWU7) SWU7 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_UA3 : (32) SWU7 Upper Address Register n ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_UA3_Type;
#define REG_SWU7_UA3		(*(RwReg *)0x20079078UL)

#else
#define REG_SWU7_UA3		(0x20079078) /**< \brief (SWU7) SWU7 Upper Address Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_ID0 : (32) SWU7 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_ID0_Type;
#define REG_SWU7_ID0		(*(RwReg *)0x2007901CUL)

#else
#define REG_SWU7_ID0		(0x2007901C) /**< \brief (SWU7) SWU7 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_ID1 : (32) SWU7 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_ID1_Type;
#define REG_SWU7_ID1		(*(RwReg *)0x2007903CUL)

#else
#define REG_SWU7_ID1		(0x2007903C) /**< \brief (SWU7) SWU7 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_ID2 : (32) SWU7 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_ID2_Type;
#define REG_SWU7_ID2		(*(RwReg *)0x2007905CUL)

#else
#define REG_SWU7_ID2		(0x2007905C) /**< \brief (SWU7) SWU7 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_ID3 : (32) SWU7 ID Register n ----- */
typedef union {
	struct {
		uint32_t ID:16;			/*!< bit	0..15	Identity	*/
		uint32_t IDMASK:16;			/*!< bit	16..31	Identity Mask (for Or with ID)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_ID3_Type;
#define REG_SWU7_ID3		(*(RwReg *)0x2007907CUL)

#else
#define REG_SWU7_ID3		(0x2007907C) /**< \brief (SWU7) SWU7 ID Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CNT0 : (32) SWU7 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CNT0_Type;
#define REG_SWU7_CNT0		(*(RwReg *)0x20079020UL)

#else
#define REG_SWU7_CNT0		(0x20079020) /**< \brief (SWU7) SWU7 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CNT1 : (32) SWU7 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CNT1_Type;
#define REG_SWU7_CNT1		(*(RwReg *)0x20079040UL)

#else
#define REG_SWU7_CNT1		(0x20079040) /**< \brief (SWU7) SWU7 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CNT2 : (32) SWU7 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CNT2_Type;
#define REG_SWU7_CNT2		(*(RwReg *)0x20079060UL)

#else
#define REG_SWU7_CNT2		(0x20079060) /**< \brief (SWU7) SWU7 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CNT3 : (32) SWU7 Count Register n ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CNT3_Type;
#define REG_SWU7_CNT3		(*(RwReg *)0x20079080UL)

#else
#define REG_SWU7_CNT3		(0x20079080) /**< \brief (SWU7) SWU7 Count Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_TARG0 : (32) SWU7 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_TARG0_Type;
#define REG_SWU7_TARG0		(*(RwReg *)0x20079024UL)

#else
#define REG_SWU7_TARG0		(0x20079024) /**< \brief (SWU7) SWU7 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_TARG1 : (32) SWU7 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_TARG1_Type;
#define REG_SWU7_TARG1		(*(RwReg *)0x20079044UL)

#else
#define REG_SWU7_TARG1		(0x20079044) /**< \brief (SWU7) SWU7 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_TARG2 : (32) SWU7 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_TARG2_Type;
#define REG_SWU7_TARG2		(*(RwReg *)0x20079064UL)

#else
#define REG_SWU7_TARG2		(0x20079064) /**< \brief (SWU7) SWU7 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_TARG3 : (32) SWU7 Target Register n ----- */
typedef union {
	struct {
		uint32_t BWMIN:16;			/*!< bit	0..15	Minimum Bandwidth Target	*/
		uint32_t BWMAX:16;			/*!< bit	16..31	Maximum Bandwidth Target	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_TARG3_Type;
#define REG_SWU7_TARG3		(*(RwReg *)0x20079084UL)

#else
#define REG_SWU7_TARG3		(0x20079084) /**< \brief (SWU7) SWU7 Target Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_HIST0 : (32) SWU7 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_HIST0_Type;
#define REG_SWU7_HIST0		(*(RwReg *)0x20079028UL)

#else
#define REG_SWU7_HIST0		(0x20079028) /**< \brief (SWU7) SWU7 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_HIST1 : (32) SWU7 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_HIST1_Type;
#define REG_SWU7_HIST1		(*(RwReg *)0x20079048UL)

#else
#define REG_SWU7_HIST1		(0x20079048) /**< \brief (SWU7) SWU7 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_HIST2 : (32) SWU7 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_HIST2_Type;
#define REG_SWU7_HIST2		(*(RwReg *)0x20079068UL)

#else
#define REG_SWU7_HIST2		(0x20079068) /**< \brief (SWU7) SWU7 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_HIST3 : (32) SWU7 Bandwidth History Register n ----- */
typedef union {
	struct {
		uint32_t BWHIST0:16;			/*!< bit	0..15	Bandwidth from Last Window	*/
		uint32_t BWHIST1:16;			/*!< bit	16..31	Bandwidth from Window Before Last	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_HIST3_Type;
#define REG_SWU7_HIST3		(*(RwReg *)0x20079088UL)

#else
#define REG_SWU7_HIST3		(0x20079088) /**< \brief (SWU7) SWU7 Bandwidth History Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CUR0 : (32) SWU7 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CUR0_Type;
#define REG_SWU7_CUR0		(*(RwReg *)0x2007902CUL)

#else
#define REG_SWU7_CUR0		(0x2007902C) /**< \brief (SWU7) SWU7 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CUR1 : (32) SWU7 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CUR1_Type;
#define REG_SWU7_CUR1		(*(RwReg *)0x2007904CUL)

#else
#define REG_SWU7_CUR1		(0x2007904C) /**< \brief (SWU7) SWU7 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CUR2 : (32) SWU7 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CUR2_Type;
#define REG_SWU7_CUR2		(*(RwReg *)0x2007906CUL)

#else
#define REG_SWU7_CUR2		(0x2007906C) /**< \brief (SWU7) SWU7 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SWU7_CUR3 : (32) SWU7 Current Register n ----- */
typedef union {
	struct {
		uint32_t CURCNT:16;			/*!< bit	0..15	Current Count	*/
		uint32_t CURBW:16;			/*!< bit	16..31	Current Bandwidth	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SWU7_CUR3_Type;
#define REG_SWU7_CUR3		(*(RwReg *)0x2007908CUL)

#else
#define REG_SWU7_CUR3		(0x2007908C) /**< \brief (SWU7) SWU7 Current Register n */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SWU7_GCTL_Type		GCTL;		/**< \brief SWU7 Global Control Register */
	__IO SWU7_GSTAT_Type		GSTAT;		/**< \brief SWU7 Global Status Register */
		 RoReg8		Reserved1[0x08];		
	__IO SWU7_CTL0_Type		CTL0;		/**< \brief SWU7 Control Register n */
	__IO SWU7_LA0_Type		LA0;		/**< \brief SWU7 Lower Address Register n */
	__IO SWU7_UA0_Type		UA0;		/**< \brief SWU7 Upper Address Register n */
	__IO SWU7_ID0_Type		ID0;		/**< \brief SWU7 ID Register n */
	__IO SWU7_CNT0_Type		CNT0;		/**< \brief SWU7 Count Register n */
	__IO SWU7_TARG0_Type		TARG0;		/**< \brief SWU7 Target Register n */
	__IO SWU7_HIST0_Type		HIST0;		/**< \brief SWU7 Bandwidth History Register n */
	__IO SWU7_CUR0_Type		CUR0;		/**< \brief SWU7 Current Register n */
	__IO SWU7_CTL1_Type		CTL1;		/**< \brief SWU7 Control Register n */
	__IO SWU7_LA1_Type		LA1;		/**< \brief SWU7 Lower Address Register n */
	__IO SWU7_UA1_Type		UA1;		/**< \brief SWU7 Upper Address Register n */
	__IO SWU7_ID1_Type		ID1;		/**< \brief SWU7 ID Register n */
	__IO SWU7_CNT1_Type		CNT1;		/**< \brief SWU7 Count Register n */
	__IO SWU7_TARG1_Type		TARG1;		/**< \brief SWU7 Target Register n */
	__IO SWU7_HIST1_Type		HIST1;		/**< \brief SWU7 Bandwidth History Register n */
	__IO SWU7_CUR1_Type		CUR1;		/**< \brief SWU7 Current Register n */
	__IO SWU7_CTL2_Type		CTL2;		/**< \brief SWU7 Control Register n */
	__IO SWU7_LA2_Type		LA2;		/**< \brief SWU7 Lower Address Register n */
	__IO SWU7_UA2_Type		UA2;		/**< \brief SWU7 Upper Address Register n */
	__IO SWU7_ID2_Type		ID2;		/**< \brief SWU7 ID Register n */
	__IO SWU7_CNT2_Type		CNT2;		/**< \brief SWU7 Count Register n */
	__IO SWU7_TARG2_Type		TARG2;		/**< \brief SWU7 Target Register n */
	__IO SWU7_HIST2_Type		HIST2;		/**< \brief SWU7 Bandwidth History Register n */
	__IO SWU7_CUR2_Type		CUR2;		/**< \brief SWU7 Current Register n */
	__IO SWU7_CTL3_Type		CTL3;		/**< \brief SWU7 Control Register n */
	__IO SWU7_LA3_Type		LA3;		/**< \brief SWU7 Lower Address Register n */
	__IO SWU7_UA3_Type		UA3;		/**< \brief SWU7 Upper Address Register n */
	__IO SWU7_ID3_Type		ID3;		/**< \brief SWU7 ID Register n */
	__IO SWU7_CNT3_Type		CNT3;		/**< \brief SWU7 Count Register n */
	__IO SWU7_TARG3_Type		TARG3;		/**< \brief SWU7 Target Register n */
	__IO SWU7_HIST3_Type		HIST3;		/**< \brief SWU7 Bandwidth History Register n */
	__IO SWU7_CUR3_Type		CUR3;		/**< \brief SWU7 Current Register n */
} Swu7;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- PORT_FER : (32) PORTA Port x Function Enable Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Mode	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Mode	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Mode	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Mode	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Mode	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Mode	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Mode	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Mode	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Mode	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Mode	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Mode	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Mode	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Mode	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Mode	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Mode	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Mode	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_FER_Type;
#define REG_PORTA_FER		(*(RwReg *)0x20040000UL)

#else
#define REG_PORTA_FER		(0x20040000) /**< \brief (PORTA) PORTA Port x Function Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_FER_SET : (32) PORTA Port x Function Enable Set Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Mode Set	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Mode Set	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Mode Set	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Mode Set	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Mode Set	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Mode Set	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Mode Set	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Mode Set	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Mode Set	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Mode Set	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Mode Set	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Mode Set	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Mode Set	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Mode Set	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Mode Set	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Mode Set	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_FER_SET_Type;
#define REG_PORTA_FER_SET		(*(RwReg *)0x20040004UL)

#else
#define REG_PORTA_FER_SET		(0x20040004) /**< \brief (PORTA) PORTA Port x Function Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_FER_CLR : (32) PORTA Port x Function Enable Clear Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Mode Clear	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Mode Clear	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Mode Clear	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Mode Clear	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Mode Clear	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Mode Clear	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Mode Clear	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Mode Clear	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Mode Clear	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Mode Clear	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Mode Clear	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Mode Clear	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Mode Clear	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Mode Clear	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Mode Clear	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Mode Clear	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_FER_CLR_Type;
#define REG_PORTA_FER_CLR		(*(RwReg *)0x20040008UL)

#else
#define REG_PORTA_FER_CLR		(0x20040008) /**< \brief (PORTA) PORTA Port x Function Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_DATA : (32) PORTA Port x GPIO Data Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Data	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Data	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Data	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Data	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Data	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Data	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Data	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Data	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Data	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Data	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Data	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Data	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Data	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Data	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Data	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Data	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_DATA_Type;
#define REG_PORTA_DATA		(*(RwReg *)0x2004000CUL)

#else
#define REG_PORTA_DATA		(0x2004000C) /**< \brief (PORTA) PORTA Port x GPIO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_DATA_SET : (32) PORTA Port x GPIO Data Set Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Data Set	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Data Set	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Data Set	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Data Set	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Data Set	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Data Set	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Data Set	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Data Set	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Data Set	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Data Set	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Data Set	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Data Set	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Data Set	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Data Set	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Data Set	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Data Set	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_DATA_SET_Type;
#define REG_PORTA_DATA_SET		(*(RwReg *)0x20040010UL)

#else
#define REG_PORTA_DATA_SET		(0x20040010) /**< \brief (PORTA) PORTA Port x GPIO Data Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_DATA_CLR : (32) PORTA Port x GPIO Data Clear Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Data Clear	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Data Clear	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Data Clear	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Data Clear	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Data Clear	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Data Clear	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Data Clear	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Data Clear	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Data Clear	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Data Clear	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Data Clear	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Data Clear	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Data Clear	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Data Clear	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Data Clear	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Data Clear	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_DATA_CLR_Type;
#define REG_PORTA_DATA_CLR		(*(RwReg *)0x20040014UL)

#else
#define REG_PORTA_DATA_CLR		(0x20040014) /**< \brief (PORTA) PORTA Port x GPIO Data Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_DIR : (32) PORTA Port x GPIO Direction Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Direction	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Direction	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Direction	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Direction	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Direction	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Direction	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Direction	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Direction	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Direction	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Direction	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Direction	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Direction	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Direction	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Direction	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Direction	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Direction	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_DIR_Type;
#define REG_PORTA_DIR		(*(RwReg *)0x20040018UL)

#else
#define REG_PORTA_DIR		(0x20040018) /**< \brief (PORTA) PORTA Port x GPIO Direction Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_DIR_SET : (32) PORTA Port x GPIO Direction Set Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Direction Set	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Direction Set	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Direction Set	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Direction Set	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Direction Set	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Direction Set	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Direction Set	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Direction Set	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Direction Set	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Direction Set	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Direction Set	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Direction Set	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Direction Set	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Direction Set	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Direction Set	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Direction Set	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_DIR_SET_Type;
#define REG_PORTA_DIR_SET		(*(RwReg *)0x2004001CUL)

#else
#define REG_PORTA_DIR_SET		(0x2004001C) /**< \brief (PORTA) PORTA Port x GPIO Direction Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_DIR_CLR : (32) PORTA Port x GPIO Direction Clear Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Direction Clear	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Direction Clear	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Direction Clear	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Direction Clear	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Direction Clear	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Direction Clear	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Direction Clear	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Direction Clear	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Direction Clear	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Direction Clear	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Direction Clear	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Direction Clear	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Direction Clear	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Direction Clear	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Direction Clear	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Direction Clear	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_DIR_CLR_Type;
#define REG_PORTA_DIR_CLR		(*(RwReg *)0x20040020UL)

#else
#define REG_PORTA_DIR_CLR		(0x20040020) /**< \brief (PORTA) PORTA Port x GPIO Direction Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_INEN : (32) PORTA Port x GPIO Input Enable Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Input Enable	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Input Enable	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Input Enable	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Input Enable	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Input Enable	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Input Enable	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Input Enable	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Input Enable	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Input Enable	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Input Enable	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Input Enable	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Input Enable	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Input Enable	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Input Enable	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Input Enable	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Input Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_INEN_Type;
#define REG_PORTA_INEN		(*(RwReg *)0x20040024UL)

#else
#define REG_PORTA_INEN		(0x20040024) /**< \brief (PORTA) PORTA Port x GPIO Input Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_INEN_SET : (32) PORTA Port x GPIO Input Enable Set Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Input Enable Set	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Input Enable Set	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Input Enable Set	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Input Enable Set	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Input Enable Set	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Input Enable Set	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Input Enable Set	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Input Enable Set	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Input Enable Set	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Input Enable Set	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Input Enable Set	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Input Enable Set	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Input Enable Set	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Input Enable Set	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Input Enable Set	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Input Enable Set	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_INEN_SET_Type;
#define REG_PORTA_INEN_SET		(*(RwReg *)0x20040028UL)

#else
#define REG_PORTA_INEN_SET		(0x20040028) /**< \brief (PORTA) PORTA Port x GPIO Input Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_INEN_CLR : (32) PORTA Port x GPIO Input Enable Clear Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Input Enable Clear	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Input Enable Clear	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Input Enable Clear	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Input Enable Clear	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Input Enable Clear	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Input Enable Clear	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Input Enable Clear	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Input Enable Clear	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Input Enable Clear	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Input Enable Clear	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Input Enable Clear	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Input Enable Clear	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Input Enable Clear	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Input Enable Clear	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Input Enable Clear	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Input Enable Clear	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_INEN_CLR_Type;
#define REG_PORTA_INEN_CLR		(*(RwReg *)0x2004002CUL)

#else
#define REG_PORTA_INEN_CLR		(0x2004002C) /**< \brief (PORTA) PORTA Port x GPIO Input Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_MUX : (32) PORTA Port x Multiplexer Control Register ----- */
typedef union {
	struct {
		uint32_t MUX0:2;			/*!< bit	0..1	Mux for Port x Bit 0	*/
		uint32_t MUX1:2;			/*!< bit	2..3	Mux for Port x Bit 1	*/
		uint32_t MUX2:2;			/*!< bit	4..5	Mux for Port x Bit 2	*/
		uint32_t MUX3:2;			/*!< bit	6..7	Mux for Port x Bit 3	*/
		uint32_t MUX4:2;			/*!< bit	8..9	Mux for Port x Bit 4	*/
		uint32_t MUX5:2;			/*!< bit	10..11	Mux for Port x Bit 5	*/
		uint32_t MUX6:2;			/*!< bit	12..13	Mux for Port x Bit 6	*/
		uint32_t MUX7:2;			/*!< bit	14..15	Mux for Port x Bit 7	*/
		uint32_t MUX8:2;			/*!< bit	16..17	Mux for Port x Bit 8	*/
		uint32_t MUX9:2;			/*!< bit	18..19	Mux for Port x Bit 9	*/
		uint32_t MUX10:2;			/*!< bit	20..21	Mux for Port x Bit 10	*/
		uint32_t MUX11:2;			/*!< bit	22..23	Mux for Port x Bit 11	*/
		uint32_t MUX12:2;			/*!< bit	24..25	Mux for Port x Bit 12	*/
		uint32_t MUX13:2;			/*!< bit	26..27	Mux for Port x Bit 13	*/
		uint32_t MUX14:2;			/*!< bit	28..29	Mux for Port x Bit 14	*/
		uint32_t MUX15:2;			/*!< bit	30..31	Mux for Port x Bit 15	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_MUX_Type;
#define REG_PORTA_MUX		(*(RwReg *)0x20040030UL)

#else
#define REG_PORTA_MUX		(0x20040030) /**< \brief (PORTA) PORTA Port x Multiplexer Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_DATA_TGL : (32) PORTA Port x GPIO Input Enable Toggle Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Toggle	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Toggle	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Toggle	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Toggle	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Toggle	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Toggle	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Toggle	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Toggle	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Toggle	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Toggle	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Toggle	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Toggle	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Toggle	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Toggle	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Toggle	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Toggle	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_DATA_TGL_Type;
#define REG_PORTA_DATA_TGL		(*(RwReg *)0x20040034UL)

#else
#define REG_PORTA_DATA_TGL		(0x20040034) /**< \brief (PORTA) PORTA Port x GPIO Input Enable Toggle Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_POL : (32) PORTA Port x GPIO Polarity Invert Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Polarity Invert	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Polarity Invert	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Polarity Invert	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Polarity Invert	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Polarity Invert	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Polarity Invert	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Polarity Invert	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Polarity Invert	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Polarity Invert	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Polarity Invert	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Polarity Invert	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Polarity Invert	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Polarity Invert	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Polarity Invert	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Polarity Invert	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Polarity Invert	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_POL_Type;
#define REG_PORTA_POL		(*(RwReg *)0x20040038UL)

#else
#define REG_PORTA_POL		(0x20040038) /**< \brief (PORTA) PORTA Port x GPIO Polarity Invert Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_POL_SET : (32) PORTA Port x GPIO Polarity Invert Set Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Polarity Invert Set	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Polarity Invert Set	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Polarity Invert Set	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Polarity Invert Set	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Polarity Invert Set	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Polarity Invert Set	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Polarity Invert Set	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Polarity Invert Set	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Polarity Invert Set	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Polarity Invert Set	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Polarity Invert Set	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Polarity Invert Set	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Polarity Invert Set	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Polarity Invert Set	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Polarity Invert Set	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Polarity Invert Set	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_POL_SET_Type;
#define REG_PORTA_POL_SET		(*(RwReg *)0x2004003CUL)

#else
#define REG_PORTA_POL_SET		(0x2004003C) /**< \brief (PORTA) PORTA Port x GPIO Polarity Invert Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_POL_CLR : (32) PORTA Port x GPIO Polarity Invert Clear Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	Port x Bit 0 Polarity Invert Clear	*/
		uint32_t PX1:1;			/*!< bit	1	Port x Bit 1 Polarity Invert Clear	*/
		uint32_t PX2:1;			/*!< bit	2	Port x Bit 2 Polarity Invert Clear	*/
		uint32_t PX3:1;			/*!< bit	3	Port x Bit 3 Polarity Invert Clear	*/
		uint32_t PX4:1;			/*!< bit	4	Port x Bit 4 Polarity Invert Clear	*/
		uint32_t PX5:1;			/*!< bit	5	Port x Bit 5 Polarity Invert Clear	*/
		uint32_t PX6:1;			/*!< bit	6	Port x Bit 6 Polarity Invert Clear	*/
		uint32_t PX7:1;			/*!< bit	7	Port x Bit 7 Polarity Invert Clear	*/
		uint32_t PX8:1;			/*!< bit	8	Port x Bit 8 Polarity Invert Clear	*/
		uint32_t PX9:1;			/*!< bit	9	Port x Bit 9 Polarity Invert Clear	*/
		uint32_t PX10:1;			/*!< bit	10	Port x Bit 10 Polarity Invert Clear	*/
		uint32_t PX11:1;			/*!< bit	11	Port x Bit 11 Polarity Invert Clear	*/
		uint32_t PX12:1;			/*!< bit	12	Port x Bit 12 Polarity Invert Clear	*/
		uint32_t PX13:1;			/*!< bit	13	Port x Bit 13 Polarity Invert Clear	*/
		uint32_t PX14:1;			/*!< bit	14	Port x Bit 14 Polarity Invert Clear	*/
		uint32_t PX15:1;			/*!< bit	15	Port x Bit 15 Polarity Invert Clear	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_POL_CLR_Type;
#define REG_PORTA_POL_CLR		(*(RwReg *)0x20040040UL)

#else
#define REG_PORTA_POL_CLR		(0x20040040) /**< \brief (PORTA) PORTA Port x GPIO Polarity Invert Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_LOCK : (32) PORTA Port x GPIO Lock Register ----- */
typedef union {
	struct {
		uint32_t FER:1;			/*!< bit	0	Function Enable Lock	*/
		uint32_t MUX:1;			/*!< bit	1	Function Multiplexer Lock	*/
		uint32_t DATA:1;			/*!< bit	2	Data, TGL Lock	*/
		uint32_t DIR:1;			/*!< bit	3	Direction Lock	*/
		uint32_t INEN:1;			/*!< bit	4	Input Enable Lock	*/
		uint32_t POLAR:1;			/*!< bit	5	Polarity Lock	*/
		uint32_t :25;			/*!< bit	6..30	Reserved	*/
		uint32_t LOCK:1;			/*!< bit	31	Lock	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_LOCK_Type;
#define REG_PORTA_LOCK		(*(RwReg *)0x20040044UL)

#else
#define REG_PORTA_LOCK		(0x20040044) /**< \brief (PORTA) PORTA Port x GPIO Lock Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PORT_TRIG_TGL : (32) PORTA Port x GPIO Trigger Toggle Register ----- */
typedef union {
	struct {
		uint32_t PX0:1;			/*!< bit	0	PX0 Data Toggle on Trigger	*/
		uint32_t PX1:1;			/*!< bit	1	PX1 Data Toggle on Trigger	*/
		uint32_t PX2:1;			/*!< bit	2	PX2 Data Toggle on Trigger	*/
		uint32_t PX3:1;			/*!< bit	3	PX3 Data Toggle on Trigger	*/
		uint32_t PX4:1;			/*!< bit	4	PX4 Data Toggle on Trigger	*/
		uint32_t PX5:1;			/*!< bit	5	PX5 Data Toggle on Trigger	*/
		uint32_t PX6:1;			/*!< bit	6	PX6 Data Toggle on Trigger	*/
		uint32_t PX7:1;			/*!< bit	7	PX7 Data Toggle on Trigger	*/
		uint32_t PX8:1;			/*!< bit	8	PX8 Data Toggle on Trigger	*/
		uint32_t PX9:1;			/*!< bit	9	PX9 Data Toggle on Trigger	*/
		uint32_t PX10:1;			/*!< bit	10	PX10 Data Toggle on Trigger	*/
		uint32_t PX11:1;			/*!< bit	11	PX11 Data Toggle on Trigger	*/
		uint32_t PX12:1;			/*!< bit	12	PX12 Data Toggle on Trigger	*/
		uint32_t PX13:1;			/*!< bit	13	PX13 Data Toggle on Trigger	*/
		uint32_t PX14:1;			/*!< bit	14	PX14 Data Toggle on Trigger	*/
		uint32_t PX15:1;			/*!< bit	15	PX15 Data Toggle on Trigger	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PORT_TRIG_TGL_Type;
#define REG_PORTA_TRIG_TGL		(*(RwReg *)0x20040048UL)

#else
#define REG_PORTA_TRIG_TGL		(0x20040048) /**< \brief (PORTA) PORTA Port x GPIO Trigger Toggle Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PORT_FER_Type		FER;		/**< \brief PORTA Port x Function Enable Register */
	__IO PORT_FER_SET_Type		FER_SET;		/**< \brief PORTA Port x Function Enable Set Register */
	__IO PORT_FER_CLR_Type		FER_CLR;		/**< \brief PORTA Port x Function Enable Clear Register */
	__IO PORT_DATA_Type		DATA;		/**< \brief PORTA Port x GPIO Data Register */
	__IO PORT_DATA_SET_Type		DATA_SET;		/**< \brief PORTA Port x GPIO Data Set Register */
	__IO PORT_DATA_CLR_Type		DATA_CLR;		/**< \brief PORTA Port x GPIO Data Clear Register */
	__IO PORT_DIR_Type		DIR;		/**< \brief PORTA Port x GPIO Direction Register */
	__IO PORT_DIR_SET_Type		DIR_SET;		/**< \brief PORTA Port x GPIO Direction Set Register */
	__IO PORT_DIR_CLR_Type		DIR_CLR;		/**< \brief PORTA Port x GPIO Direction Clear Register */
	__IO PORT_INEN_Type		INEN;		/**< \brief PORTA Port x GPIO Input Enable Register */
	__IO PORT_INEN_SET_Type		INEN_SET;		/**< \brief PORTA Port x GPIO Input Enable Set Register */
	__IO PORT_INEN_CLR_Type		INEN_CLR;		/**< \brief PORTA Port x GPIO Input Enable Clear Register */
	__IO PORT_MUX_Type		MUX;		/**< \brief PORTA Port x Multiplexer Control Register */
	__IO PORT_DATA_TGL_Type		DATA_TGL;		/**< \brief PORTA Port x GPIO Input Enable Toggle Register */
	__IO PORT_POL_Type		POL;		/**< \brief PORTA Port x GPIO Polarity Invert Register */
	__IO PORT_POL_SET_Type		POL_SET;		/**< \brief PORTA Port x GPIO Polarity Invert Set Register */
	__IO PORT_POL_CLR_Type		POL_CLR;		/**< \brief PORTA Port x GPIO Polarity Invert Clear Register */
	__IO PORT_LOCK_Type		LOCK;		/**< \brief PORTA Port x GPIO Lock Register */
	__IO PORT_TRIG_TGL_Type		TRIG_TGL;		/**< \brief PORTA Port x GPIO Trigger Toggle Register */
} Portgroup;
#endif
#if !(defined(__ASSEMBLY__))
#define REG_PORTB_FER		(*(RwReg *)0x20040080UL)

#else
#define REG_PORTB_FER		(0x20040080) /**< \brief (PORTB) PORTB Port x Function Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_FER_SET		(*(RwReg *)0x20040084UL)

#else
#define REG_PORTB_FER_SET		(0x20040084) /**< \brief (PORTB) PORTB Port x Function Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_FER_CLR		(*(RwReg *)0x20040088UL)

#else
#define REG_PORTB_FER_CLR		(0x20040088) /**< \brief (PORTB) PORTB Port x Function Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_DATA		(*(RwReg *)0x2004008CUL)

#else
#define REG_PORTB_DATA		(0x2004008C) /**< \brief (PORTB) PORTB Port x GPIO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_DATA_SET		(*(RwReg *)0x20040090UL)

#else
#define REG_PORTB_DATA_SET		(0x20040090) /**< \brief (PORTB) PORTB Port x GPIO Data Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_DATA_CLR		(*(RwReg *)0x20040094UL)

#else
#define REG_PORTB_DATA_CLR		(0x20040094) /**< \brief (PORTB) PORTB Port x GPIO Data Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_DIR		(*(RwReg *)0x20040098UL)

#else
#define REG_PORTB_DIR		(0x20040098) /**< \brief (PORTB) PORTB Port x GPIO Direction Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_DIR_SET		(*(RwReg *)0x2004009CUL)

#else
#define REG_PORTB_DIR_SET		(0x2004009C) /**< \brief (PORTB) PORTB Port x GPIO Direction Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_DIR_CLR		(*(RwReg *)0x200400A0UL)

#else
#define REG_PORTB_DIR_CLR		(0x200400A0) /**< \brief (PORTB) PORTB Port x GPIO Direction Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_INEN		(*(RwReg *)0x200400A4UL)

#else
#define REG_PORTB_INEN		(0x200400A4) /**< \brief (PORTB) PORTB Port x GPIO Input Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_INEN_SET		(*(RwReg *)0x200400A8UL)

#else
#define REG_PORTB_INEN_SET		(0x200400A8) /**< \brief (PORTB) PORTB Port x GPIO Input Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_INEN_CLR		(*(RwReg *)0x200400ACUL)

#else
#define REG_PORTB_INEN_CLR		(0x200400AC) /**< \brief (PORTB) PORTB Port x GPIO Input Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_MUX		(*(RwReg *)0x200400B0UL)

#else
#define REG_PORTB_MUX		(0x200400B0) /**< \brief (PORTB) PORTB Port x Multiplexer Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_DATA_TGL		(*(RwReg *)0x200400B4UL)

#else
#define REG_PORTB_DATA_TGL		(0x200400B4) /**< \brief (PORTB) PORTB Port x GPIO Input Enable Toggle Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_POL		(*(RwReg *)0x200400B8UL)

#else
#define REG_PORTB_POL		(0x200400B8) /**< \brief (PORTB) PORTB Port x GPIO Polarity Invert Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_POL_SET		(*(RwReg *)0x200400BCUL)

#else
#define REG_PORTB_POL_SET		(0x200400BC) /**< \brief (PORTB) PORTB Port x GPIO Polarity Invert Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_POL_CLR		(*(RwReg *)0x200400C0UL)

#else
#define REG_PORTB_POL_CLR		(0x200400C0) /**< \brief (PORTB) PORTB Port x GPIO Polarity Invert Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_LOCK		(*(RwReg *)0x200400C4UL)

#else
#define REG_PORTB_LOCK		(0x200400C4) /**< \brief (PORTB) PORTB Port x GPIO Lock Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTB_TRIG_TGL		(*(RwReg *)0x200400C8UL)

#else
#define REG_PORTB_TRIG_TGL		(0x200400C8) /**< \brief (PORTB) PORTB Port x GPIO Trigger Toggle Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_FER		(*(RwReg *)0x20040100UL)

#else
#define REG_PORTC_FER		(0x20040100) /**< \brief (PORTC) PORTC Port x Function Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_FER_SET		(*(RwReg *)0x20040104UL)

#else
#define REG_PORTC_FER_SET		(0x20040104) /**< \brief (PORTC) PORTC Port x Function Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_FER_CLR		(*(RwReg *)0x20040108UL)

#else
#define REG_PORTC_FER_CLR		(0x20040108) /**< \brief (PORTC) PORTC Port x Function Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_DATA		(*(RwReg *)0x2004010CUL)

#else
#define REG_PORTC_DATA		(0x2004010C) /**< \brief (PORTC) PORTC Port x GPIO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_DATA_SET		(*(RwReg *)0x20040110UL)

#else
#define REG_PORTC_DATA_SET		(0x20040110) /**< \brief (PORTC) PORTC Port x GPIO Data Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_DATA_CLR		(*(RwReg *)0x20040114UL)

#else
#define REG_PORTC_DATA_CLR		(0x20040114) /**< \brief (PORTC) PORTC Port x GPIO Data Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_DIR		(*(RwReg *)0x20040118UL)

#else
#define REG_PORTC_DIR		(0x20040118) /**< \brief (PORTC) PORTC Port x GPIO Direction Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_DIR_SET		(*(RwReg *)0x2004011CUL)

#else
#define REG_PORTC_DIR_SET		(0x2004011C) /**< \brief (PORTC) PORTC Port x GPIO Direction Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_DIR_CLR		(*(RwReg *)0x20040120UL)

#else
#define REG_PORTC_DIR_CLR		(0x20040120) /**< \brief (PORTC) PORTC Port x GPIO Direction Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_INEN		(*(RwReg *)0x20040124UL)

#else
#define REG_PORTC_INEN		(0x20040124) /**< \brief (PORTC) PORTC Port x GPIO Input Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_INEN_SET		(*(RwReg *)0x20040128UL)

#else
#define REG_PORTC_INEN_SET		(0x20040128) /**< \brief (PORTC) PORTC Port x GPIO Input Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_INEN_CLR		(*(RwReg *)0x2004012CUL)

#else
#define REG_PORTC_INEN_CLR		(0x2004012C) /**< \brief (PORTC) PORTC Port x GPIO Input Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_MUX		(*(RwReg *)0x20040130UL)

#else
#define REG_PORTC_MUX		(0x20040130) /**< \brief (PORTC) PORTC Port x Multiplexer Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_DATA_TGL		(*(RwReg *)0x20040134UL)

#else
#define REG_PORTC_DATA_TGL		(0x20040134) /**< \brief (PORTC) PORTC Port x GPIO Input Enable Toggle Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_POL		(*(RwReg *)0x20040138UL)

#else
#define REG_PORTC_POL		(0x20040138) /**< \brief (PORTC) PORTC Port x GPIO Polarity Invert Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_POL_SET		(*(RwReg *)0x2004013CUL)

#else
#define REG_PORTC_POL_SET		(0x2004013C) /**< \brief (PORTC) PORTC Port x GPIO Polarity Invert Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_POL_CLR		(*(RwReg *)0x20040140UL)

#else
#define REG_PORTC_POL_CLR		(0x20040140) /**< \brief (PORTC) PORTC Port x GPIO Polarity Invert Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_LOCK		(*(RwReg *)0x20040144UL)

#else
#define REG_PORTC_LOCK		(0x20040144) /**< \brief (PORTC) PORTC Port x GPIO Lock Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_PORTC_TRIG_TGL		(*(RwReg *)0x20040148UL)

#else
#define REG_PORTC_TRIG_TGL		(0x20040148) /**< \brief (PORTC) PORTC Port x GPIO Trigger Toggle Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PADS0_PCFG0 : (32) PADS0 Peripheral Configuration0 Register ----- */
typedef union {
	struct {
		uint32_t :9;			/*!< bit	0..8	Reserved	*/
		uint32_t TWI0VSEL:3;			/*!< bit	9..11	Drive/tolerate for TWI0 Pins SCL & SDA	*/
		uint32_t :23;			/*!< bit	9..31	Reserved	*/
		uint32_t PUE:1;			/*!< bit	12	Pull-Up Enable	*/
		uint32_t :19;			/*!< bit	13..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PADS0_PCFG0_Type;
#define REG_PADS0_PCFG0		(*(RwReg *)0x20040404UL)

#else
#define REG_PADS0_PCFG0		(0x20040404) /**< \brief (PADS0) PADS0 Peripheral Configuration0 Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PADS0_PCFG0_Type		PCFG0;		/**< \brief PADS0 Peripheral Configuration0 Register */
} Pads0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- PINT0_MSK_SET : (32) PINT0 Pint Mask Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Unmask	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Unmask	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Unmask	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Unmask	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Unmask	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Unmask	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Unmask	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Unmask	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Unmask	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Unmask	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Unmask	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Unmask	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Unmask	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Unmask	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Unmask	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Unmask	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Unmask	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Unmask	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Unmask	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Unmask	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Unmask	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Unmask	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Unmask	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Unmask	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Unmask	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Unmask	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Unmask	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Unmask	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Unmask	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Unmask	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Unmask	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Unmask	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_MSK_SET_Type;
#define REG_PINT0_MSK_SET		(*(RwReg *)0x20041000UL)

#else
#define REG_PINT0_MSK_SET		(0x20041000) /**< \brief (PINT0) PINT0 Pint Mask Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_MSK_CLR : (32) PINT0 Pint Mask Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Mask	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Mask	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Mask	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Mask	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Mask	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Mask	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Mask	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Mask	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Mask	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Mask	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Mask	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Mask	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Mask	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Mask	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Mask	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Mask	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Mask	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Mask	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Mask	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Mask	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Mask	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Mask	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Mask	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Mask	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Mask	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Mask	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Mask	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Mask	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Mask	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Mask	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Mask	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Mask	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_MSK_CLR_Type;
#define REG_PINT0_MSK_CLR		(*(RwReg *)0x20041004UL)

#else
#define REG_PINT0_MSK_CLR		(0x20041004) /**< \brief (PINT0) PINT0 Pint Mask Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_REQ : (32) PINT0 Pint Request Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Request	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Request	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Request	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Request	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Request	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Request	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Request	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Request	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Request	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Request	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Request	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Request	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Request	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Request	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Request	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Request	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Request	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Request	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Request	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Request	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Request	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Request	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Request	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Request	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Request	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Request	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Request	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Request	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Request	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Request	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Request	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Request	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_REQ_Type;
#define REG_PINT0_REQ		(*(RwReg *)0x20041008UL)

#else
#define REG_PINT0_REQ		(0x20041008) /**< \brief (PINT0) PINT0 Pint Request Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_ASSIGN : (32) PINT0 Pint Assign Register ----- */
typedef union {
	struct {
		uint32_t B0MAP:8;			/*!< bit	0..7	Byte 0 Mapping	*/
		uint32_t B1MAP:8;			/*!< bit	8..15	Byte 1 Mapping	*/
		uint32_t B2MAP:8;			/*!< bit	16..23	Byte 2 Mapping	*/
		uint32_t B3MAP:8;			/*!< bit	24..31	Byte 3 Mapping	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_ASSIGN_Type;
#define REG_PINT0_ASSIGN		(*(RwReg *)0x2004100CUL)

#else
#define REG_PINT0_ASSIGN		(0x2004100C) /**< \brief (PINT0) PINT0 Pint Assign Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_EDGE_SET : (32) PINT0 Pint Edge Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Edge	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Edge	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Edge	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Edge	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Edge	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Edge	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Edge	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Edge	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Edge	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Edge	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Edge	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Edge	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Edge	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Edge	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Edge	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Edge	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Edge	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Edge	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Edge	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Edge	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Edge	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Edge	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Edge	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Edge	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Edge	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Edge	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Edge	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Edge	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Edge	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Edge	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Edge	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Edge	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_EDGE_SET_Type;
#define REG_PINT0_EDGE_SET		(*(RwReg *)0x20041010UL)

#else
#define REG_PINT0_EDGE_SET		(0x20041010) /**< \brief (PINT0) PINT0 Pint Edge Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_EDGE_CLR : (32) PINT0 Pint Edge Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Level	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Level	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Level	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Level	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Level	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Level	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Level	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Level	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Level	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Level	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Level	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Level	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Level	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Level	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Level	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Level	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Level	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Level	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Level	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Level	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Level	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Level	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Level	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Level	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Level	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Level	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Level	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Level	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Level	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Level	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Level	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Level	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_EDGE_CLR_Type;
#define REG_PINT0_EDGE_CLR		(*(RwReg *)0x20041014UL)

#else
#define REG_PINT0_EDGE_CLR		(0x20041014) /**< \brief (PINT0) PINT0 Pint Edge Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_INV_SET : (32) PINT0 Pint Invert Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Invert	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Invert	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Invert	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Invert	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Invert	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Invert	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Invert	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Invert	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Invert	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Invert	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Invert	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Invert	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Invert	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Invert	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Invert	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Invert	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Invert	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Invert	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Invert	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Invert	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Invert	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Invert	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Invert	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Invert	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Invert	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Invert	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Invert	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Invert	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Invert	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Invert	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Invert	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Invert	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_INV_SET_Type;
#define REG_PINT0_INV_SET		(*(RwReg *)0x20041018UL)

#else
#define REG_PINT0_INV_SET		(0x20041018) /**< \brief (PINT0) PINT0 Pint Invert Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_INV_CLR : (32) PINT0 Pint Invert Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 No Invert	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 No Invert	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 No Invert	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 No Invert	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 No Invert	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 No Invert	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 No Invert	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 No Invert	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 No Invert	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 No Invert	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 No Invert	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 No Invert	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 No Invert	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 No Invert	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 No Invert	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 No Invert	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 No Invert	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 No Invert	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 No Invert	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 No Invert	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 No Invert	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 No Invert	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 No Invert	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 No Invert	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 No Invert	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 No Invert	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 No Invert	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 No Invert	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 No Invert	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 No Invert	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 No Invert	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 No Invert	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_INV_CLR_Type;
#define REG_PINT0_INV_CLR		(*(RwReg *)0x2004101CUL)

#else
#define REG_PINT0_INV_CLR		(0x2004101C) /**< \brief (PINT0) PINT0 Pint Invert Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_PINSTATE : (32) PINT0 Pint Pinstate Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 State	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 State	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 State	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 State	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 State	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 State	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 State	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 State	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 State	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 State	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 State	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 State	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 State	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 State	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 State	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 State	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 State	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 State	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 State	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 State	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 State	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 State	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 State	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 State	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 State	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 State	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 State	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 State	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 State	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 State	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 State	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 State	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_PINSTATE_Type;
#define REG_PINT0_PINSTATE		(*(RwReg *)0x20041020UL)

#else
#define REG_PINT0_PINSTATE		(0x20041020) /**< \brief (PINT0) PINT0 Pint Pinstate Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT0_LATCH : (32) PINT0 Pint Latch Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Latch	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Latch	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Latch	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Latch	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Latch	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Latch	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Latch	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Latch	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Latch	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Latch	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Latch	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Latch	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Latch	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Latch	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Latch	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Latch	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Latch	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Latch	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Latch	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Latch	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Latch	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Latch	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Latch	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Latch	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Latch	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Latch	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Latch	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Latch	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Latch	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Latch	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Latch	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Latch	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT0_LATCH_Type;
#define REG_PINT0_LATCH		(*(RwReg *)0x20041024UL)

#else
#define REG_PINT0_LATCH		(0x20041024) /**< \brief (PINT0) PINT0 Pint Latch Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PINT0_MSK_SET_Type		MSK_SET;		/**< \brief PINT0 Pint Mask Set Register */
	__IO PINT0_MSK_CLR_Type		MSK_CLR;		/**< \brief PINT0 Pint Mask Clear Register */
	__IO PINT0_REQ_Type		REQ;		/**< \brief PINT0 Pint Request Register */
	__IO PINT0_ASSIGN_Type		ASSIGN;		/**< \brief PINT0 Pint Assign Register */
	__IO PINT0_EDGE_SET_Type		EDGE_SET;		/**< \brief PINT0 Pint Edge Set Register */
	__IO PINT0_EDGE_CLR_Type		EDGE_CLR;		/**< \brief PINT0 Pint Edge Clear Register */
	__IO PINT0_INV_SET_Type		INV_SET;		/**< \brief PINT0 Pint Invert Set Register */
	__IO PINT0_INV_CLR_Type		INV_CLR;		/**< \brief PINT0 Pint Invert Clear Register */
	__IO PINT0_PINSTATE_Type		PINSTATE;		/**< \brief PINT0 Pint Pinstate Register */
	__IO PINT0_LATCH_Type		LATCH;		/**< \brief PINT0 Pint Latch Register */
} Pint0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- PINT1_MSK_SET : (32) PINT1 Pint Mask Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Unmask	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Unmask	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Unmask	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Unmask	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Unmask	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Unmask	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Unmask	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Unmask	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Unmask	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Unmask	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Unmask	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Unmask	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Unmask	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Unmask	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Unmask	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Unmask	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Unmask	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Unmask	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Unmask	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Unmask	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Unmask	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Unmask	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Unmask	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Unmask	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Unmask	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Unmask	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Unmask	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Unmask	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Unmask	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Unmask	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Unmask	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Unmask	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_MSK_SET_Type;
#define REG_PINT1_MSK_SET		(*(RwReg *)0x20041100UL)

#else
#define REG_PINT1_MSK_SET		(0x20041100) /**< \brief (PINT1) PINT1 Pint Mask Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_MSK_CLR : (32) PINT1 Pint Mask Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Mask	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Mask	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Mask	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Mask	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Mask	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Mask	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Mask	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Mask	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Mask	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Mask	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Mask	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Mask	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Mask	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Mask	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Mask	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Mask	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Mask	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Mask	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Mask	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Mask	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Mask	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Mask	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Mask	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Mask	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Mask	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Mask	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Mask	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Mask	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Mask	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Mask	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Mask	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Mask	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_MSK_CLR_Type;
#define REG_PINT1_MSK_CLR		(*(RwReg *)0x20041104UL)

#else
#define REG_PINT1_MSK_CLR		(0x20041104) /**< \brief (PINT1) PINT1 Pint Mask Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_REQ : (32) PINT1 Pint Request Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Request	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Request	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Request	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Request	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Request	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Request	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Request	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Request	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Request	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Request	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Request	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Request	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Request	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Request	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Request	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Request	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Request	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Request	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Request	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Request	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Request	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Request	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Request	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Request	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Request	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Request	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Request	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Request	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Request	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Request	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Request	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Request	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_REQ_Type;
#define REG_PINT1_REQ		(*(RwReg *)0x20041108UL)

#else
#define REG_PINT1_REQ		(0x20041108) /**< \brief (PINT1) PINT1 Pint Request Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_ASSIGN : (32) PINT1 Pint Assign Register ----- */
typedef union {
	struct {
		uint32_t B0MAP:8;			/*!< bit	0..7	Byte 0 Mapping	*/
		uint32_t B1MAP:8;			/*!< bit	8..15	Byte 1 Mapping	*/
		uint32_t B2MAP:8;			/*!< bit	16..23	Byte 2 Mapping	*/
		uint32_t B3MAP:8;			/*!< bit	24..31	Byte 3 Mapping	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_ASSIGN_Type;
#define REG_PINT1_ASSIGN		(*(RwReg *)0x2004110CUL)

#else
#define REG_PINT1_ASSIGN		(0x2004110C) /**< \brief (PINT1) PINT1 Pint Assign Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_EDGE_SET : (32) PINT1 Pint Edge Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Edge	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Edge	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Edge	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Edge	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Edge	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Edge	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Edge	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Edge	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Edge	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Edge	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Edge	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Edge	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Edge	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Edge	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Edge	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Edge	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Edge	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Edge	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Edge	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Edge	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Edge	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Edge	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Edge	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Edge	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Edge	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Edge	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Edge	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Edge	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Edge	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Edge	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Edge	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Edge	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_EDGE_SET_Type;
#define REG_PINT1_EDGE_SET		(*(RwReg *)0x20041110UL)

#else
#define REG_PINT1_EDGE_SET		(0x20041110) /**< \brief (PINT1) PINT1 Pint Edge Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_EDGE_CLR : (32) PINT1 Pint Edge Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Level	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Level	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Level	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Level	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Level	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Level	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Level	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Level	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Level	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Level	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Level	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Level	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Level	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Level	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Level	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Level	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Level	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Level	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Level	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Level	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Level	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Level	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Level	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Level	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Level	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Level	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Level	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Level	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Level	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Level	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Level	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Level	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_EDGE_CLR_Type;
#define REG_PINT1_EDGE_CLR		(*(RwReg *)0x20041114UL)

#else
#define REG_PINT1_EDGE_CLR		(0x20041114) /**< \brief (PINT1) PINT1 Pint Edge Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_INV_SET : (32) PINT1 Pint Invert Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Invert	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Invert	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Invert	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Invert	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Invert	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Invert	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Invert	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Invert	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Invert	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Invert	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Invert	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Invert	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Invert	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Invert	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Invert	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Invert	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Invert	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Invert	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Invert	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Invert	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Invert	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Invert	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Invert	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Invert	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Invert	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Invert	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Invert	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Invert	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Invert	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Invert	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Invert	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Invert	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_INV_SET_Type;
#define REG_PINT1_INV_SET		(*(RwReg *)0x20041118UL)

#else
#define REG_PINT1_INV_SET		(0x20041118) /**< \brief (PINT1) PINT1 Pint Invert Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_INV_CLR : (32) PINT1 Pint Invert Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 No Invert	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 No Invert	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 No Invert	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 No Invert	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 No Invert	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 No Invert	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 No Invert	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 No Invert	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 No Invert	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 No Invert	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 No Invert	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 No Invert	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 No Invert	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 No Invert	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 No Invert	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 No Invert	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 No Invert	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 No Invert	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 No Invert	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 No Invert	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 No Invert	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 No Invert	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 No Invert	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 No Invert	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 No Invert	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 No Invert	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 No Invert	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 No Invert	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 No Invert	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 No Invert	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 No Invert	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 No Invert	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_INV_CLR_Type;
#define REG_PINT1_INV_CLR		(*(RwReg *)0x2004111CUL)

#else
#define REG_PINT1_INV_CLR		(0x2004111C) /**< \brief (PINT1) PINT1 Pint Invert Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_PINSTATE : (32) PINT1 Pint Pinstate Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 State	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 State	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 State	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 State	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 State	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 State	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 State	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 State	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 State	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 State	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 State	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 State	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 State	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 State	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 State	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 State	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 State	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 State	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 State	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 State	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 State	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 State	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 State	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 State	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 State	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 State	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 State	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 State	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 State	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 State	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 State	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 State	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_PINSTATE_Type;
#define REG_PINT1_PINSTATE		(*(RwReg *)0x20041120UL)

#else
#define REG_PINT1_PINSTATE		(0x20041120) /**< \brief (PINT1) PINT1 Pint Pinstate Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT1_LATCH : (32) PINT1 Pint Latch Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Latch	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Latch	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Latch	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Latch	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Latch	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Latch	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Latch	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Latch	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Latch	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Latch	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Latch	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Latch	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Latch	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Latch	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Latch	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Latch	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Latch	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Latch	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Latch	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Latch	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Latch	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Latch	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Latch	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Latch	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Latch	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Latch	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Latch	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Latch	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Latch	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Latch	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Latch	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Latch	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT1_LATCH_Type;
#define REG_PINT1_LATCH		(*(RwReg *)0x20041124UL)

#else
#define REG_PINT1_LATCH		(0x20041124) /**< \brief (PINT1) PINT1 Pint Latch Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PINT1_MSK_SET_Type		MSK_SET;		/**< \brief PINT1 Pint Mask Set Register */
	__IO PINT1_MSK_CLR_Type		MSK_CLR;		/**< \brief PINT1 Pint Mask Clear Register */
	__IO PINT1_REQ_Type		REQ;		/**< \brief PINT1 Pint Request Register */
	__IO PINT1_ASSIGN_Type		ASSIGN;		/**< \brief PINT1 Pint Assign Register */
	__IO PINT1_EDGE_SET_Type		EDGE_SET;		/**< \brief PINT1 Pint Edge Set Register */
	__IO PINT1_EDGE_CLR_Type		EDGE_CLR;		/**< \brief PINT1 Pint Edge Clear Register */
	__IO PINT1_INV_SET_Type		INV_SET;		/**< \brief PINT1 Pint Invert Set Register */
	__IO PINT1_INV_CLR_Type		INV_CLR;		/**< \brief PINT1 Pint Invert Clear Register */
	__IO PINT1_PINSTATE_Type		PINSTATE;		/**< \brief PINT1 Pint Pinstate Register */
	__IO PINT1_LATCH_Type		LATCH;		/**< \brief PINT1 Pint Latch Register */
} Pint1;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- PINT2_MSK_SET : (32) PINT2 Pint Mask Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Unmask	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Unmask	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Unmask	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Unmask	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Unmask	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Unmask	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Unmask	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Unmask	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Unmask	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Unmask	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Unmask	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Unmask	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Unmask	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Unmask	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Unmask	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Unmask	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Unmask	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Unmask	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Unmask	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Unmask	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Unmask	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Unmask	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Unmask	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Unmask	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Unmask	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Unmask	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Unmask	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Unmask	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Unmask	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Unmask	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Unmask	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Unmask	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_MSK_SET_Type;
#define REG_PINT2_MSK_SET		(*(RwReg *)0x20041200UL)

#else
#define REG_PINT2_MSK_SET		(0x20041200) /**< \brief (PINT2) PINT2 Pint Mask Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_MSK_CLR : (32) PINT2 Pint Mask Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Mask	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Mask	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Mask	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Mask	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Mask	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Mask	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Mask	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Mask	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Mask	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Mask	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Mask	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Mask	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Mask	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Mask	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Mask	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Mask	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Mask	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Mask	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Mask	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Mask	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Mask	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Mask	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Mask	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Mask	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Mask	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Mask	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Mask	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Mask	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Mask	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Mask	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Mask	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Mask	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_MSK_CLR_Type;
#define REG_PINT2_MSK_CLR		(*(RwReg *)0x20041204UL)

#else
#define REG_PINT2_MSK_CLR		(0x20041204) /**< \brief (PINT2) PINT2 Pint Mask Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_REQ : (32) PINT2 Pint Request Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Request	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Request	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Request	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Request	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Request	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Request	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Request	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Request	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Request	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Request	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Request	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Request	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Request	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Request	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Request	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Request	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Request	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Request	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Request	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Request	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Request	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Request	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Request	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Request	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Request	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Request	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Request	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Request	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Request	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Request	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Request	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Request	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_REQ_Type;
#define REG_PINT2_REQ		(*(RwReg *)0x20041208UL)

#else
#define REG_PINT2_REQ		(0x20041208) /**< \brief (PINT2) PINT2 Pint Request Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_ASSIGN : (32) PINT2 Pint Assign Register ----- */
typedef union {
	struct {
		uint32_t B0MAP:8;			/*!< bit	0..7	Byte 0 Mapping	*/
		uint32_t B1MAP:8;			/*!< bit	8..15	Byte 1 Mapping	*/
		uint32_t B2MAP:8;			/*!< bit	16..23	Byte 2 Mapping	*/
		uint32_t B3MAP:8;			/*!< bit	24..31	Byte 3 Mapping	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_ASSIGN_Type;
#define REG_PINT2_ASSIGN		(*(RwReg *)0x2004120CUL)

#else
#define REG_PINT2_ASSIGN		(0x2004120C) /**< \brief (PINT2) PINT2 Pint Assign Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_EDGE_SET : (32) PINT2 Pint Edge Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Edge	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Edge	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Edge	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Edge	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Edge	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Edge	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Edge	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Edge	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Edge	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Edge	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Edge	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Edge	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Edge	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Edge	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Edge	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Edge	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Edge	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Edge	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Edge	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Edge	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Edge	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Edge	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Edge	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Edge	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Edge	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Edge	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Edge	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Edge	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Edge	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Edge	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Edge	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Edge	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_EDGE_SET_Type;
#define REG_PINT2_EDGE_SET		(*(RwReg *)0x20041210UL)

#else
#define REG_PINT2_EDGE_SET		(0x20041210) /**< \brief (PINT2) PINT2 Pint Edge Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_EDGE_CLR : (32) PINT2 Pint Edge Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Level	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Level	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Level	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Level	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Level	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Level	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Level	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Level	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Level	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Level	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Level	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Level	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Level	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Level	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Level	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Level	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Level	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Level	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Level	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Level	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Level	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Level	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Level	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Level	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Level	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Level	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Level	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Level	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Level	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Level	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Level	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Level	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_EDGE_CLR_Type;
#define REG_PINT2_EDGE_CLR		(*(RwReg *)0x20041214UL)

#else
#define REG_PINT2_EDGE_CLR		(0x20041214) /**< \brief (PINT2) PINT2 Pint Edge Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_INV_SET : (32) PINT2 Pint Invert Set Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Invert	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Invert	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Invert	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Invert	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Invert	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Invert	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Invert	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Invert	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Invert	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Invert	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Invert	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Invert	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Invert	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Invert	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Invert	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Invert	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Invert	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Invert	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Invert	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Invert	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Invert	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Invert	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Invert	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Invert	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Invert	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Invert	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Invert	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Invert	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Invert	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Invert	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Invert	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Invert	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_INV_SET_Type;
#define REG_PINT2_INV_SET		(*(RwReg *)0x20041218UL)

#else
#define REG_PINT2_INV_SET		(0x20041218) /**< \brief (PINT2) PINT2 Pint Invert Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_INV_CLR : (32) PINT2 Pint Invert Clear Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 No Invert	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 No Invert	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 No Invert	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 No Invert	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 No Invert	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 No Invert	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 No Invert	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 No Invert	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 No Invert	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 No Invert	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 No Invert	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 No Invert	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 No Invert	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 No Invert	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 No Invert	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 No Invert	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 No Invert	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 No Invert	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 No Invert	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 No Invert	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 No Invert	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 No Invert	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 No Invert	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 No Invert	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 No Invert	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 No Invert	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 No Invert	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 No Invert	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 No Invert	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 No Invert	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 No Invert	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 No Invert	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_INV_CLR_Type;
#define REG_PINT2_INV_CLR		(*(RwReg *)0x2004121CUL)

#else
#define REG_PINT2_INV_CLR		(0x2004121C) /**< \brief (PINT2) PINT2 Pint Invert Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_PINSTATE : (32) PINT2 Pint Pinstate Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 State	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 State	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 State	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 State	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 State	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 State	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 State	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 State	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 State	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 State	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 State	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 State	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 State	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 State	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 State	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 State	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 State	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 State	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 State	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 State	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 State	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 State	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 State	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 State	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 State	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 State	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 State	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 State	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 State	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 State	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 State	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 State	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_PINSTATE_Type;
#define REG_PINT2_PINSTATE		(*(RwReg *)0x20041220UL)

#else
#define REG_PINT2_PINSTATE		(0x20041220) /**< \brief (PINT2) PINT2 Pint Pinstate Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PINT2_LATCH : (32) PINT2 Pint Latch Register ----- */
typedef union {
	struct {
		uint32_t PIQ0:1;			/*!< bit	0	Pin Interrupt 0 Latch	*/
		uint32_t PIQ1:1;			/*!< bit	1	Pin Interrupt 1 Latch	*/
		uint32_t PIQ2:1;			/*!< bit	2	Pin Interrupt 2 Latch	*/
		uint32_t PIQ3:1;			/*!< bit	3	Pin Interrupt 3 Latch	*/
		uint32_t PIQ4:1;			/*!< bit	4	Pin Interrupt 4 Latch	*/
		uint32_t PIQ5:1;			/*!< bit	5	Pin Interrupt 5 Latch	*/
		uint32_t PIQ6:1;			/*!< bit	6	Pin Interrupt 6 Latch	*/
		uint32_t PIQ7:1;			/*!< bit	7	Pin Interrupt 7 Latch	*/
		uint32_t PIQ8:1;			/*!< bit	8	Pin Interrupt 8 Latch	*/
		uint32_t PIQ9:1;			/*!< bit	9	Pin Interrupt 9 Latch	*/
		uint32_t PIQ10:1;			/*!< bit	10	Pin Interrupt 10 Latch	*/
		uint32_t PIQ11:1;			/*!< bit	11	Pin Interrupt 11 Latch	*/
		uint32_t PIQ12:1;			/*!< bit	12	Pin Interrupt 12 Latch	*/
		uint32_t PIQ13:1;			/*!< bit	13	Pin Interrupt 13 Latch	*/
		uint32_t PIQ14:1;			/*!< bit	14	Pin Interrupt 14 Latch	*/
		uint32_t PIQ15:1;			/*!< bit	15	Pin Interrupt 15 Latch	*/
		uint32_t PIQ16:1;			/*!< bit	16	Pin Interrupt 16 Latch	*/
		uint32_t PIQ17:1;			/*!< bit	17	Pin Interrupt 17 Latch	*/
		uint32_t PIQ18:1;			/*!< bit	18	Pin Interrupt 18 Latch	*/
		uint32_t PIQ19:1;			/*!< bit	19	Pin Interrupt 19 Latch	*/
		uint32_t PIQ20:1;			/*!< bit	20	Pin Interrupt 20 Latch	*/
		uint32_t PIQ21:1;			/*!< bit	21	Pin Interrupt 21 Latch	*/
		uint32_t PIQ22:1;			/*!< bit	22	Pin Interrupt 22 Latch	*/
		uint32_t PIQ23:1;			/*!< bit	23	Pin Interrupt 23 Latch	*/
		uint32_t PIQ24:1;			/*!< bit	24	Pin Interrupt 24 Latch	*/
		uint32_t PIQ25:1;			/*!< bit	25	Pin Interrupt 25 Latch	*/
		uint32_t PIQ26:1;			/*!< bit	26	Pin Interrupt 26 Latch	*/
		uint32_t PIQ27:1;			/*!< bit	27	Pin Interrupt 27 Latch	*/
		uint32_t PIQ28:1;			/*!< bit	28	Pin Interrupt 28 Latch	*/
		uint32_t PIQ29:1;			/*!< bit	29	Pin Interrupt 29 Latch	*/
		uint32_t PIQ30:1;			/*!< bit	30	Pin Interrupt 30 Latch	*/
		uint32_t PIQ31:1;			/*!< bit	31	Pin Interrupt 31 Latch	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PINT2_LATCH_Type;
#define REG_PINT2_LATCH		(*(RwReg *)0x20041224UL)

#else
#define REG_PINT2_LATCH		(0x20041224) /**< \brief (PINT2) PINT2 Pint Latch Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PINT2_MSK_SET_Type		MSK_SET;		/**< \brief PINT2 Pint Mask Set Register */
	__IO PINT2_MSK_CLR_Type		MSK_CLR;		/**< \brief PINT2 Pint Mask Clear Register */
	__IO PINT2_REQ_Type		REQ;		/**< \brief PINT2 Pint Request Register */
	__IO PINT2_ASSIGN_Type		ASSIGN;		/**< \brief PINT2 Pint Assign Register */
	__IO PINT2_EDGE_SET_Type		EDGE_SET;		/**< \brief PINT2 Pint Edge Set Register */
	__IO PINT2_EDGE_CLR_Type		EDGE_CLR;		/**< \brief PINT2 Pint Edge Clear Register */
	__IO PINT2_INV_SET_Type		INV_SET;		/**< \brief PINT2 Pint Invert Set Register */
	__IO PINT2_INV_CLR_Type		INV_CLR;		/**< \brief PINT2 Pint Invert Clear Register */
	__IO PINT2_PINSTATE_Type		PINSTATE;		/**< \brief PINT2 Pint Pinstate Register */
	__IO PINT2_LATCH_Type		LATCH;		/**< \brief PINT2 Pint Latch Register */
} Pint2;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_RUN : (32) TIMER0 Run Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	Start/Stop Timer n	*/
		uint32_t TMR01:1;			/*!< bit	1	Start/Stop Timer n	*/
		uint32_t TMR02:1;			/*!< bit	2	Start/Stop Timer n	*/
		uint32_t TMR03:1;			/*!< bit	3	Start/Stop Timer n	*/
		uint32_t TMR04:1;			/*!< bit	4	Start/Stop Timer n	*/
		uint32_t TMR05:1;			/*!< bit	5	Start/Stop Timer n	*/
		uint32_t TMR06:1;			/*!< bit	6	Start/Stop Timer n	*/
		uint32_t TMR07:1;			/*!< bit	7	Start/Stop Timer n	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_RUN_Type;
#define REG_TIMER0_RUN		(*(RwReg *)0x20043004UL)

#else
#define REG_TIMER0_RUN		(0x20043004) /**< \brief (TIMER0) TIMER0 Run Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_RUN_SET : (32) TIMER0 Run Set Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	RUN Set Alias	*/
		uint32_t TMR01:1;			/*!< bit	1	RUN Set Alias	*/
		uint32_t TMR02:1;			/*!< bit	2	RUN Set Alias	*/
		uint32_t TMR03:1;			/*!< bit	3	RUN Set Alias	*/
		uint32_t TMR04:1;			/*!< bit	4	RUN Set Alias	*/
		uint32_t TMR05:1;			/*!< bit	5	RUN Set Alias	*/
		uint32_t TMR06:1;			/*!< bit	6	RUN Set Alias	*/
		uint32_t TMR07:1;			/*!< bit	7	RUN Set Alias	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_RUN_SET_Type;
#define REG_TIMER0_RUN_SET		(*(RwReg *)0x20043008UL)

#else
#define REG_TIMER0_RUN_SET		(0x20043008) /**< \brief (TIMER0) TIMER0 Run Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_RUN_CLR : (32) TIMER0 Run Clear Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	RUN Clear Alias	*/
		uint32_t TMR01:1;			/*!< bit	1	RUN Clear Alias	*/
		uint32_t TMR02:1;			/*!< bit	2	RUN Clear Alias	*/
		uint32_t TMR03:1;			/*!< bit	3	RUN Clear Alias	*/
		uint32_t TMR04:1;			/*!< bit	4	RUN Clear Alias	*/
		uint32_t TMR05:1;			/*!< bit	5	RUN Clear Alias	*/
		uint32_t TMR06:1;			/*!< bit	6	RUN Clear Alias	*/
		uint32_t TMR07:1;			/*!< bit	7	RUN Clear Alias	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_RUN_CLR_Type;
#define REG_TIMER0_RUN_CLR		(*(RwReg *)0x2004300CUL)

#else
#define REG_TIMER0_RUN_CLR		(0x2004300C) /**< \brief (TIMER0) TIMER0 Run Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_STOP_CFG : (32) TIMER0 Stop Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	Stop Mode Select	*/
		uint32_t TMR01:1;			/*!< bit	1	Stop Mode Select	*/
		uint32_t TMR02:1;			/*!< bit	2	Stop Mode Select	*/
		uint32_t TMR03:1;			/*!< bit	3	Stop Mode Select	*/
		uint32_t TMR04:1;			/*!< bit	4	Stop Mode Select	*/
		uint32_t TMR05:1;			/*!< bit	5	Stop Mode Select	*/
		uint32_t TMR06:1;			/*!< bit	6	Stop Mode Select	*/
		uint32_t TMR07:1;			/*!< bit	7	Stop Mode Select	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_STOP_CFG_Type;
#define REG_TIMER0_STOP_CFG		(*(RwReg *)0x20043010UL)

#else
#define REG_TIMER0_STOP_CFG		(0x20043010) /**< \brief (TIMER0) TIMER0 Stop Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_STOP_CFG_SET : (32) TIMER0 Stop Configuration Set Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	STOP_CFG Set Alias	*/
		uint32_t TMR01:1;			/*!< bit	1	STOP_CFG Set Alias	*/
		uint32_t TMR02:1;			/*!< bit	2	STOP_CFG Set Alias	*/
		uint32_t TMR03:1;			/*!< bit	3	STOP_CFG Set Alias	*/
		uint32_t TMR04:1;			/*!< bit	4	STOP_CFG Set Alias	*/
		uint32_t TMR05:1;			/*!< bit	5	STOP_CFG Set Alias	*/
		uint32_t TMR06:1;			/*!< bit	6	STOP_CFG Set Alias	*/
		uint32_t TMR07:1;			/*!< bit	7	STOP_CFG Set Alias	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_STOP_CFG_SET_Type;
#define REG_TIMER0_STOP_CFG_SET		(*(RwReg *)0x20043014UL)

#else
#define REG_TIMER0_STOP_CFG_SET		(0x20043014) /**< \brief (TIMER0) TIMER0 Stop Configuration Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_STOP_CFG_CLR : (32) TIMER0 Stop Configuration Clear Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	STOP_CFG Clear Alias	*/
		uint32_t TMR01:1;			/*!< bit	1	STOP_CFG Clear Alias	*/
		uint32_t TMR02:1;			/*!< bit	2	STOP_CFG Clear Alias	*/
		uint32_t TMR03:1;			/*!< bit	3	STOP_CFG Clear Alias	*/
		uint32_t TMR04:1;			/*!< bit	4	STOP_CFG Clear Alias	*/
		uint32_t TMR05:1;			/*!< bit	5	STOP_CFG Clear Alias	*/
		uint32_t TMR06:1;			/*!< bit	6	STOP_CFG Clear Alias	*/
		uint32_t TMR07:1;			/*!< bit	7	STOP_CFG Clear Alias	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_STOP_CFG_CLR_Type;
#define REG_TIMER0_STOP_CFG_CLR		(*(RwReg *)0x20043018UL)

#else
#define REG_TIMER0_STOP_CFG_CLR		(0x20043018) /**< \brief (TIMER0) TIMER0 Stop Configuration Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_DATA_IMSK : (32) TIMER0 Data Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	Data Interrupt Mask	*/
		uint32_t TMR01:1;			/*!< bit	1	Data Interrupt Mask	*/
		uint32_t TMR02:1;			/*!< bit	2	Data Interrupt Mask	*/
		uint32_t TMR03:1;			/*!< bit	3	Data Interrupt Mask	*/
		uint32_t TMR04:1;			/*!< bit	4	Data Interrupt Mask	*/
		uint32_t TMR05:1;			/*!< bit	5	Data Interrupt Mask	*/
		uint32_t TMR06:1;			/*!< bit	6	Data Interrupt Mask	*/
		uint32_t TMR07:1;			/*!< bit	7	Data Interrupt Mask	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_DATA_IMSK_Type;
#define REG_TIMER0_DATA_IMSK		(*(RwReg *)0x2004301CUL)

#else
#define REG_TIMER0_DATA_IMSK		(0x2004301C) /**< \brief (TIMER0) TIMER0 Data Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_STAT_IMSK : (32) TIMER0 Status Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	Status Interrupt Mask	*/
		uint32_t TMR01:1;			/*!< bit	1	Status Interrupt Mask	*/
		uint32_t TMR02:1;			/*!< bit	2	Status Interrupt Mask	*/
		uint32_t TMR03:1;			/*!< bit	3	Status Interrupt Mask	*/
		uint32_t TMR04:1;			/*!< bit	4	Status Interrupt Mask	*/
		uint32_t TMR05:1;			/*!< bit	5	Status Interrupt Mask	*/
		uint32_t TMR06:1;			/*!< bit	6	Status Interrupt Mask	*/
		uint32_t TMR07:1;			/*!< bit	7	Status Interrupt Mask	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_STAT_IMSK_Type;
#define REG_TIMER0_STAT_IMSK		(*(RwReg *)0x20043020UL)

#else
#define REG_TIMER0_STAT_IMSK		(0x20043020) /**< \brief (TIMER0) TIMER0 Status Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TRG_MSK : (32) TIMER0 Trigger Master Mask Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	Trigger Output Mask	*/
		uint32_t TMR01:1;			/*!< bit	1	Trigger Output Mask	*/
		uint32_t TMR02:1;			/*!< bit	2	Trigger Output Mask	*/
		uint32_t TMR03:1;			/*!< bit	3	Trigger Output Mask	*/
		uint32_t TMR04:1;			/*!< bit	4	Trigger Output Mask	*/
		uint32_t TMR05:1;			/*!< bit	5	Trigger Output Mask	*/
		uint32_t TMR06:1;			/*!< bit	6	Trigger Output Mask	*/
		uint32_t TMR07:1;			/*!< bit	7	Trigger Output Mask	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TRG_MSK_Type;
#define REG_TIMER0_TRG_MSK		(*(RwReg *)0x20043024UL)

#else
#define REG_TIMER0_TRG_MSK		(0x20043024) /**< \brief (TIMER0) TIMER0 Trigger Master Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TRG_IE : (32) TIMER0 Trigger Slave Enable Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	Trigger Input Enable	*/
		uint32_t TMR01:1;			/*!< bit	1	Trigger Input Enable	*/
		uint32_t TMR02:1;			/*!< bit	2	Trigger Input Enable	*/
		uint32_t TMR03:1;			/*!< bit	3	Trigger Input Enable	*/
		uint32_t TMR04:1;			/*!< bit	4	Trigger Input Enable	*/
		uint32_t TMR05:1;			/*!< bit	5	Trigger Input Enable	*/
		uint32_t TMR06:1;			/*!< bit	6	Trigger Input Enable	*/
		uint32_t TMR07:1;			/*!< bit	7	Trigger Input Enable	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TRG_IE_Type;
#define REG_TIMER0_TRG_IE		(*(RwReg *)0x20043028UL)

#else
#define REG_TIMER0_TRG_IE		(0x20043028) /**< \brief (TIMER0) TIMER0 Trigger Slave Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_DATA_ILAT : (32) TIMER0 Data Interrupt Latch Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	Data Interrupt Latch	*/
		uint32_t TMR01:1;			/*!< bit	1	Data Interrupt Latch	*/
		uint32_t TMR02:1;			/*!< bit	2	Data Interrupt Latch	*/
		uint32_t TMR03:1;			/*!< bit	3	Data Interrupt Latch	*/
		uint32_t TMR04:1;			/*!< bit	4	Data Interrupt Latch	*/
		uint32_t TMR05:1;			/*!< bit	5	Data Interrupt Latch	*/
		uint32_t TMR06:1;			/*!< bit	6	Data Interrupt Latch	*/
		uint32_t TMR07:1;			/*!< bit	7	Data Interrupt Latch	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_DATA_ILAT_Type;
#define REG_TIMER0_DATA_ILAT		(*(RwReg *)0x2004302CUL)

#else
#define REG_TIMER0_DATA_ILAT		(0x2004302C) /**< \brief (TIMER0) TIMER0 Data Interrupt Latch Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_STAT_ILAT : (32) TIMER0 Status Interrupt Latch Register ----- */
typedef union {
	struct {
		uint32_t TMR00:1;			/*!< bit	0	Status Interrupt Latch	*/
		uint32_t TMR01:1;			/*!< bit	1	Status Interrupt Latch	*/
		uint32_t TMR02:1;			/*!< bit	2	Status Interrupt Latch	*/
		uint32_t TMR03:1;			/*!< bit	3	Status Interrupt Latch	*/
		uint32_t TMR04:1;			/*!< bit	4	Status Interrupt Latch	*/
		uint32_t TMR05:1;			/*!< bit	5	Status Interrupt Latch	*/
		uint32_t TMR06:1;			/*!< bit	6	Status Interrupt Latch	*/
		uint32_t TMR07:1;			/*!< bit	7	Status Interrupt Latch	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_STAT_ILAT_Type;
#define REG_TIMER0_STAT_ILAT		(*(RwReg *)0x20043030UL)

#else
#define REG_TIMER0_STAT_ILAT		(0x20043030) /**< \brief (TIMER0) TIMER0 Status Interrupt Latch Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_ERR_TYPE : (32) TIMER0 Error Type Status Register ----- */
typedef union {
	struct {
		uint32_t TERR0:2;			/*!< bit	0..1	Error type for Timer 0	*/
		uint32_t TERR1:2;			/*!< bit	2..3	Error type for Timer 1	*/
		uint32_t TERR2:2;			/*!< bit	4..5	Error type for Timer 2	*/
		uint32_t TERR3:2;			/*!< bit	6..7	Error type for Timer 3	*/
		uint32_t TERR4:2;			/*!< bit	8..9	Error type for Timer 4	*/
		uint32_t TERR5:2;			/*!< bit	10..11	Error type for Timer 5	*/
		uint32_t TERR6:2;			/*!< bit	12..13	Error type for Timer 6	*/
		uint32_t TERR7:2;			/*!< bit	14..15	Error type for Timer 7	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_ERR_TYPE_Type;
#define REG_TIMER0_ERR_TYPE		(*(RwReg *)0x20043034UL)

#else
#define REG_TIMER0_ERR_TYPE		(0x20043034) /**< \brief (TIMER0) TIMER0 Error Type Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_BCAST_PER : (32) TIMER0 Broadcast Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_BCAST_PER_Type;
#define REG_TIMER0_BCAST_PER		(*(RwReg *)0x20043038UL)

#else
#define REG_TIMER0_BCAST_PER		(0x20043038) /**< \brief (TIMER0) TIMER0 Broadcast Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_BCAST_WID : (32) TIMER0 Broadcast Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_BCAST_WID_Type;
#define REG_TIMER0_BCAST_WID		(*(RwReg *)0x2004303CUL)

#else
#define REG_TIMER0_BCAST_WID		(0x2004303C) /**< \brief (TIMER0) TIMER0 Broadcast Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_BCAST_DLY : (32) TIMER0 Broadcast Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_BCAST_DLY_Type;
#define REG_TIMER0_BCAST_DLY		(*(RwReg *)0x20043040UL)

#else
#define REG_TIMER0_BCAST_DLY		(0x20043040) /**< \brief (TIMER0) TIMER0 Broadcast Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR0_CFG : (32) TIMER0 Timer n Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMODE:4;			/*!< bit	0..3	Timer Mode Select	*/
		uint32_t IRQMODE:2;			/*!< bit	4..5	Interrupt Modes	*/
		uint32_t SLAVETRIG:1;			/*!< bit	6	Slave Trigger Response	*/
		uint32_t PULSEHI:1;			/*!< bit	7	Polarity Response Select	*/
		uint32_t CLKSEL:2;			/*!< bit	8..9	Clock Select	*/
		uint32_t TINSEL:1;			/*!< bit	10	Timer Input Select (for WIDCAP, WATCHDOG, PININT modes)	*/
		uint32_t OUTDIS:1;			/*!< bit	11	Output Disable	*/
		uint32_t BDLYEN:1;			/*!< bit	12	Broadcast Delay Enable	*/
		uint32_t BWIDEN:1;			/*!< bit	13	Broadcast Width Enable	*/
		uint32_t BPEREN:1;			/*!< bit	14	Broadcast Period Enable	*/
		uint32_t EMURUN:1;			/*!< bit	15	Run Timer (Counter) During Emulation	*/
		uint32_t TGLTRIG:1;			/*!< bit	16	Slave Trigger Toggle Enable	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR0_CFG_Type;
#define REG_TIMER0_TMR0_CFG		(*(RwReg *)0x20043060UL)

#else
#define REG_TIMER0_TMR0_CFG		(0x20043060) /**< \brief (TIMER0) TIMER0 Timer n Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR1_CFG : (32) TIMER0 Timer n Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMODE:4;			/*!< bit	0..3	Timer Mode Select	*/
		uint32_t IRQMODE:2;			/*!< bit	4..5	Interrupt Modes	*/
		uint32_t SLAVETRIG:1;			/*!< bit	6	Slave Trigger Response	*/
		uint32_t PULSEHI:1;			/*!< bit	7	Polarity Response Select	*/
		uint32_t CLKSEL:2;			/*!< bit	8..9	Clock Select	*/
		uint32_t TINSEL:1;			/*!< bit	10	Timer Input Select (for WIDCAP, WATCHDOG, PININT modes)	*/
		uint32_t OUTDIS:1;			/*!< bit	11	Output Disable	*/
		uint32_t BDLYEN:1;			/*!< bit	12	Broadcast Delay Enable	*/
		uint32_t BWIDEN:1;			/*!< bit	13	Broadcast Width Enable	*/
		uint32_t BPEREN:1;			/*!< bit	14	Broadcast Period Enable	*/
		uint32_t EMURUN:1;			/*!< bit	15	Run Timer (Counter) During Emulation	*/
		uint32_t TGLTRIG:1;			/*!< bit	16	Slave Trigger Toggle Enable	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR1_CFG_Type;
#define REG_TIMER0_TMR1_CFG		(*(RwReg *)0x20043080UL)

#else
#define REG_TIMER0_TMR1_CFG		(0x20043080) /**< \brief (TIMER0) TIMER0 Timer n Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR2_CFG : (32) TIMER0 Timer n Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMODE:4;			/*!< bit	0..3	Timer Mode Select	*/
		uint32_t IRQMODE:2;			/*!< bit	4..5	Interrupt Modes	*/
		uint32_t SLAVETRIG:1;			/*!< bit	6	Slave Trigger Response	*/
		uint32_t PULSEHI:1;			/*!< bit	7	Polarity Response Select	*/
		uint32_t CLKSEL:2;			/*!< bit	8..9	Clock Select	*/
		uint32_t TINSEL:1;			/*!< bit	10	Timer Input Select (for WIDCAP, WATCHDOG, PININT modes)	*/
		uint32_t OUTDIS:1;			/*!< bit	11	Output Disable	*/
		uint32_t BDLYEN:1;			/*!< bit	12	Broadcast Delay Enable	*/
		uint32_t BWIDEN:1;			/*!< bit	13	Broadcast Width Enable	*/
		uint32_t BPEREN:1;			/*!< bit	14	Broadcast Period Enable	*/
		uint32_t EMURUN:1;			/*!< bit	15	Run Timer (Counter) During Emulation	*/
		uint32_t TGLTRIG:1;			/*!< bit	16	Slave Trigger Toggle Enable	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR2_CFG_Type;
#define REG_TIMER0_TMR2_CFG		(*(RwReg *)0x200430A0UL)

#else
#define REG_TIMER0_TMR2_CFG		(0x200430A0) /**< \brief (TIMER0) TIMER0 Timer n Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR3_CFG : (32) TIMER0 Timer n Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMODE:4;			/*!< bit	0..3	Timer Mode Select	*/
		uint32_t IRQMODE:2;			/*!< bit	4..5	Interrupt Modes	*/
		uint32_t SLAVETRIG:1;			/*!< bit	6	Slave Trigger Response	*/
		uint32_t PULSEHI:1;			/*!< bit	7	Polarity Response Select	*/
		uint32_t CLKSEL:2;			/*!< bit	8..9	Clock Select	*/
		uint32_t TINSEL:1;			/*!< bit	10	Timer Input Select (for WIDCAP, WATCHDOG, PININT modes)	*/
		uint32_t OUTDIS:1;			/*!< bit	11	Output Disable	*/
		uint32_t BDLYEN:1;			/*!< bit	12	Broadcast Delay Enable	*/
		uint32_t BWIDEN:1;			/*!< bit	13	Broadcast Width Enable	*/
		uint32_t BPEREN:1;			/*!< bit	14	Broadcast Period Enable	*/
		uint32_t EMURUN:1;			/*!< bit	15	Run Timer (Counter) During Emulation	*/
		uint32_t TGLTRIG:1;			/*!< bit	16	Slave Trigger Toggle Enable	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR3_CFG_Type;
#define REG_TIMER0_TMR3_CFG		(*(RwReg *)0x200430C0UL)

#else
#define REG_TIMER0_TMR3_CFG		(0x200430C0) /**< \brief (TIMER0) TIMER0 Timer n Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR4_CFG : (32) TIMER0 Timer n Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMODE:4;			/*!< bit	0..3	Timer Mode Select	*/
		uint32_t IRQMODE:2;			/*!< bit	4..5	Interrupt Modes	*/
		uint32_t SLAVETRIG:1;			/*!< bit	6	Slave Trigger Response	*/
		uint32_t PULSEHI:1;			/*!< bit	7	Polarity Response Select	*/
		uint32_t CLKSEL:2;			/*!< bit	8..9	Clock Select	*/
		uint32_t TINSEL:1;			/*!< bit	10	Timer Input Select (for WIDCAP, WATCHDOG, PININT modes)	*/
		uint32_t OUTDIS:1;			/*!< bit	11	Output Disable	*/
		uint32_t BDLYEN:1;			/*!< bit	12	Broadcast Delay Enable	*/
		uint32_t BWIDEN:1;			/*!< bit	13	Broadcast Width Enable	*/
		uint32_t BPEREN:1;			/*!< bit	14	Broadcast Period Enable	*/
		uint32_t EMURUN:1;			/*!< bit	15	Run Timer (Counter) During Emulation	*/
		uint32_t TGLTRIG:1;			/*!< bit	16	Slave Trigger Toggle Enable	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR4_CFG_Type;
#define REG_TIMER0_TMR4_CFG		(*(RwReg *)0x200430E0UL)

#else
#define REG_TIMER0_TMR4_CFG		(0x200430E0) /**< \brief (TIMER0) TIMER0 Timer n Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR5_CFG : (32) TIMER0 Timer n Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMODE:4;			/*!< bit	0..3	Timer Mode Select	*/
		uint32_t IRQMODE:2;			/*!< bit	4..5	Interrupt Modes	*/
		uint32_t SLAVETRIG:1;			/*!< bit	6	Slave Trigger Response	*/
		uint32_t PULSEHI:1;			/*!< bit	7	Polarity Response Select	*/
		uint32_t CLKSEL:2;			/*!< bit	8..9	Clock Select	*/
		uint32_t TINSEL:1;			/*!< bit	10	Timer Input Select (for WIDCAP, WATCHDOG, PININT modes)	*/
		uint32_t OUTDIS:1;			/*!< bit	11	Output Disable	*/
		uint32_t BDLYEN:1;			/*!< bit	12	Broadcast Delay Enable	*/
		uint32_t BWIDEN:1;			/*!< bit	13	Broadcast Width Enable	*/
		uint32_t BPEREN:1;			/*!< bit	14	Broadcast Period Enable	*/
		uint32_t EMURUN:1;			/*!< bit	15	Run Timer (Counter) During Emulation	*/
		uint32_t TGLTRIG:1;			/*!< bit	16	Slave Trigger Toggle Enable	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR5_CFG_Type;
#define REG_TIMER0_TMR5_CFG		(*(RwReg *)0x20043100UL)

#else
#define REG_TIMER0_TMR5_CFG		(0x20043100) /**< \brief (TIMER0) TIMER0 Timer n Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR6_CFG : (32) TIMER0 Timer n Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMODE:4;			/*!< bit	0..3	Timer Mode Select	*/
		uint32_t IRQMODE:2;			/*!< bit	4..5	Interrupt Modes	*/
		uint32_t SLAVETRIG:1;			/*!< bit	6	Slave Trigger Response	*/
		uint32_t PULSEHI:1;			/*!< bit	7	Polarity Response Select	*/
		uint32_t CLKSEL:2;			/*!< bit	8..9	Clock Select	*/
		uint32_t TINSEL:1;			/*!< bit	10	Timer Input Select (for WIDCAP, WATCHDOG, PININT modes)	*/
		uint32_t OUTDIS:1;			/*!< bit	11	Output Disable	*/
		uint32_t BDLYEN:1;			/*!< bit	12	Broadcast Delay Enable	*/
		uint32_t BWIDEN:1;			/*!< bit	13	Broadcast Width Enable	*/
		uint32_t BPEREN:1;			/*!< bit	14	Broadcast Period Enable	*/
		uint32_t EMURUN:1;			/*!< bit	15	Run Timer (Counter) During Emulation	*/
		uint32_t TGLTRIG:1;			/*!< bit	16	Slave Trigger Toggle Enable	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR6_CFG_Type;
#define REG_TIMER0_TMR6_CFG		(*(RwReg *)0x20043120UL)

#else
#define REG_TIMER0_TMR6_CFG		(0x20043120) /**< \brief (TIMER0) TIMER0 Timer n Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR7_CFG : (32) TIMER0 Timer n Configuration Register ----- */
typedef union {
	struct {
		uint32_t TMODE:4;			/*!< bit	0..3	Timer Mode Select	*/
		uint32_t IRQMODE:2;			/*!< bit	4..5	Interrupt Modes	*/
		uint32_t SLAVETRIG:1;			/*!< bit	6	Slave Trigger Response	*/
		uint32_t PULSEHI:1;			/*!< bit	7	Polarity Response Select	*/
		uint32_t CLKSEL:2;			/*!< bit	8..9	Clock Select	*/
		uint32_t TINSEL:1;			/*!< bit	10	Timer Input Select (for WIDCAP, WATCHDOG, PININT modes)	*/
		uint32_t OUTDIS:1;			/*!< bit	11	Output Disable	*/
		uint32_t BDLYEN:1;			/*!< bit	12	Broadcast Delay Enable	*/
		uint32_t BWIDEN:1;			/*!< bit	13	Broadcast Width Enable	*/
		uint32_t BPEREN:1;			/*!< bit	14	Broadcast Period Enable	*/
		uint32_t EMURUN:1;			/*!< bit	15	Run Timer (Counter) During Emulation	*/
		uint32_t TGLTRIG:1;			/*!< bit	16	Slave Trigger Toggle Enable	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR7_CFG_Type;
#define REG_TIMER0_TMR7_CFG		(*(RwReg *)0x20043140UL)

#else
#define REG_TIMER0_TMR7_CFG		(0x20043140) /**< \brief (TIMER0) TIMER0 Timer n Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR0_CNT : (32) TIMER0 Timer n Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR0_CNT_Type;
#define REG_TIMER0_TMR0_CNT		(*(RwReg *)0x20043064UL)

#else
#define REG_TIMER0_TMR0_CNT		(0x20043064) /**< \brief (TIMER0) TIMER0 Timer n Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR1_CNT : (32) TIMER0 Timer n Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR1_CNT_Type;
#define REG_TIMER0_TMR1_CNT		(*(RwReg *)0x20043084UL)

#else
#define REG_TIMER0_TMR1_CNT		(0x20043084) /**< \brief (TIMER0) TIMER0 Timer n Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR2_CNT : (32) TIMER0 Timer n Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR2_CNT_Type;
#define REG_TIMER0_TMR2_CNT		(*(RwReg *)0x200430A4UL)

#else
#define REG_TIMER0_TMR2_CNT		(0x200430A4) /**< \brief (TIMER0) TIMER0 Timer n Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR3_CNT : (32) TIMER0 Timer n Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR3_CNT_Type;
#define REG_TIMER0_TMR3_CNT		(*(RwReg *)0x200430C4UL)

#else
#define REG_TIMER0_TMR3_CNT		(0x200430C4) /**< \brief (TIMER0) TIMER0 Timer n Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR4_CNT : (32) TIMER0 Timer n Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR4_CNT_Type;
#define REG_TIMER0_TMR4_CNT		(*(RwReg *)0x200430E4UL)

#else
#define REG_TIMER0_TMR4_CNT		(0x200430E4) /**< \brief (TIMER0) TIMER0 Timer n Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR5_CNT : (32) TIMER0 Timer n Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR5_CNT_Type;
#define REG_TIMER0_TMR5_CNT		(*(RwReg *)0x20043104UL)

#else
#define REG_TIMER0_TMR5_CNT		(0x20043104) /**< \brief (TIMER0) TIMER0 Timer n Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR6_CNT : (32) TIMER0 Timer n Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR6_CNT_Type;
#define REG_TIMER0_TMR6_CNT		(*(RwReg *)0x20043124UL)

#else
#define REG_TIMER0_TMR6_CNT		(0x20043124) /**< \brief (TIMER0) TIMER0 Timer n Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR7_CNT : (32) TIMER0 Timer n Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR7_CNT_Type;
#define REG_TIMER0_TMR7_CNT		(*(RwReg *)0x20043144UL)

#else
#define REG_TIMER0_TMR7_CNT		(0x20043144) /**< \brief (TIMER0) TIMER0 Timer n Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR0_PER : (32) TIMER0 Timer n Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR0_PER_Type;
#define REG_TIMER0_TMR0_PER		(*(RwReg *)0x20043068UL)

#else
#define REG_TIMER0_TMR0_PER		(0x20043068) /**< \brief (TIMER0) TIMER0 Timer n Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR1_PER : (32) TIMER0 Timer n Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR1_PER_Type;
#define REG_TIMER0_TMR1_PER		(*(RwReg *)0x20043088UL)

#else
#define REG_TIMER0_TMR1_PER		(0x20043088) /**< \brief (TIMER0) TIMER0 Timer n Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR2_PER : (32) TIMER0 Timer n Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR2_PER_Type;
#define REG_TIMER0_TMR2_PER		(*(RwReg *)0x200430A8UL)

#else
#define REG_TIMER0_TMR2_PER		(0x200430A8) /**< \brief (TIMER0) TIMER0 Timer n Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR3_PER : (32) TIMER0 Timer n Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR3_PER_Type;
#define REG_TIMER0_TMR3_PER		(*(RwReg *)0x200430C8UL)

#else
#define REG_TIMER0_TMR3_PER		(0x200430C8) /**< \brief (TIMER0) TIMER0 Timer n Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR4_PER : (32) TIMER0 Timer n Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR4_PER_Type;
#define REG_TIMER0_TMR4_PER		(*(RwReg *)0x200430E8UL)

#else
#define REG_TIMER0_TMR4_PER		(0x200430E8) /**< \brief (TIMER0) TIMER0 Timer n Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR5_PER : (32) TIMER0 Timer n Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR5_PER_Type;
#define REG_TIMER0_TMR5_PER		(*(RwReg *)0x20043108UL)

#else
#define REG_TIMER0_TMR5_PER		(0x20043108) /**< \brief (TIMER0) TIMER0 Timer n Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR6_PER : (32) TIMER0 Timer n Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR6_PER_Type;
#define REG_TIMER0_TMR6_PER		(*(RwReg *)0x20043128UL)

#else
#define REG_TIMER0_TMR6_PER		(0x20043128) /**< \brief (TIMER0) TIMER0 Timer n Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR7_PER : (32) TIMER0 Timer n Period Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR7_PER_Type;
#define REG_TIMER0_TMR7_PER		(*(RwReg *)0x20043148UL)

#else
#define REG_TIMER0_TMR7_PER		(0x20043148) /**< \brief (TIMER0) TIMER0 Timer n Period Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR0_WID : (32) TIMER0 Timer n Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR0_WID_Type;
#define REG_TIMER0_TMR0_WID		(*(RwReg *)0x2004306CUL)

#else
#define REG_TIMER0_TMR0_WID		(0x2004306C) /**< \brief (TIMER0) TIMER0 Timer n Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR1_WID : (32) TIMER0 Timer n Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR1_WID_Type;
#define REG_TIMER0_TMR1_WID		(*(RwReg *)0x2004308CUL)

#else
#define REG_TIMER0_TMR1_WID		(0x2004308C) /**< \brief (TIMER0) TIMER0 Timer n Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR2_WID : (32) TIMER0 Timer n Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR2_WID_Type;
#define REG_TIMER0_TMR2_WID		(*(RwReg *)0x200430ACUL)

#else
#define REG_TIMER0_TMR2_WID		(0x200430AC) /**< \brief (TIMER0) TIMER0 Timer n Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR3_WID : (32) TIMER0 Timer n Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR3_WID_Type;
#define REG_TIMER0_TMR3_WID		(*(RwReg *)0x200430CCUL)

#else
#define REG_TIMER0_TMR3_WID		(0x200430CC) /**< \brief (TIMER0) TIMER0 Timer n Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR4_WID : (32) TIMER0 Timer n Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR4_WID_Type;
#define REG_TIMER0_TMR4_WID		(*(RwReg *)0x200430ECUL)

#else
#define REG_TIMER0_TMR4_WID		(0x200430EC) /**< \brief (TIMER0) TIMER0 Timer n Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR5_WID : (32) TIMER0 Timer n Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR5_WID_Type;
#define REG_TIMER0_TMR5_WID		(*(RwReg *)0x2004310CUL)

#else
#define REG_TIMER0_TMR5_WID		(0x2004310C) /**< \brief (TIMER0) TIMER0 Timer n Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR6_WID : (32) TIMER0 Timer n Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR6_WID_Type;
#define REG_TIMER0_TMR6_WID		(*(RwReg *)0x2004312CUL)

#else
#define REG_TIMER0_TMR6_WID		(0x2004312C) /**< \brief (TIMER0) TIMER0 Timer n Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR7_WID : (32) TIMER0 Timer n Width Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR7_WID_Type;
#define REG_TIMER0_TMR7_WID		(*(RwReg *)0x2004314CUL)

#else
#define REG_TIMER0_TMR7_WID		(0x2004314C) /**< \brief (TIMER0) TIMER0 Timer n Width Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR0_DLY : (32) TIMER0 Timer n Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR0_DLY_Type;
#define REG_TIMER0_TMR0_DLY		(*(RwReg *)0x20043070UL)

#else
#define REG_TIMER0_TMR0_DLY		(0x20043070) /**< \brief (TIMER0) TIMER0 Timer n Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR1_DLY : (32) TIMER0 Timer n Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR1_DLY_Type;
#define REG_TIMER0_TMR1_DLY		(*(RwReg *)0x20043090UL)

#else
#define REG_TIMER0_TMR1_DLY		(0x20043090) /**< \brief (TIMER0) TIMER0 Timer n Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR2_DLY : (32) TIMER0 Timer n Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR2_DLY_Type;
#define REG_TIMER0_TMR2_DLY		(*(RwReg *)0x200430B0UL)

#else
#define REG_TIMER0_TMR2_DLY		(0x200430B0) /**< \brief (TIMER0) TIMER0 Timer n Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR3_DLY : (32) TIMER0 Timer n Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR3_DLY_Type;
#define REG_TIMER0_TMR3_DLY		(*(RwReg *)0x200430D0UL)

#else
#define REG_TIMER0_TMR3_DLY		(0x200430D0) /**< \brief (TIMER0) TIMER0 Timer n Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR4_DLY : (32) TIMER0 Timer n Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR4_DLY_Type;
#define REG_TIMER0_TMR4_DLY		(*(RwReg *)0x200430F0UL)

#else
#define REG_TIMER0_TMR4_DLY		(0x200430F0) /**< \brief (TIMER0) TIMER0 Timer n Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR5_DLY : (32) TIMER0 Timer n Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR5_DLY_Type;
#define REG_TIMER0_TMR5_DLY		(*(RwReg *)0x20043110UL)

#else
#define REG_TIMER0_TMR5_DLY		(0x20043110) /**< \brief (TIMER0) TIMER0 Timer n Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR6_DLY : (32) TIMER0 Timer n Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR6_DLY_Type;
#define REG_TIMER0_TMR6_DLY		(*(RwReg *)0x20043130UL)

#else
#define REG_TIMER0_TMR6_DLY		(0x20043130) /**< \brief (TIMER0) TIMER0 Timer n Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TIMER0_TMR7_DLY : (32) TIMER0 Timer n Delay Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TIMER0_TMR7_DLY_Type;
#define REG_TIMER0_TMR7_DLY		(*(RwReg *)0x20043150UL)

#else
#define REG_TIMER0_TMR7_DLY		(0x20043150) /**< \brief (TIMER0) TIMER0 Timer n Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO TIMER0_RUN_Type		RUN;		/**< \brief TIMER0 Run Register */
	__IO TIMER0_RUN_SET_Type		RUN_SET;		/**< \brief TIMER0 Run Set Register */
	__IO TIMER0_RUN_CLR_Type		RUN_CLR;		/**< \brief TIMER0 Run Clear Register */
	__IO TIMER0_STOP_CFG_Type		STOP_CFG;		/**< \brief TIMER0 Stop Configuration Register */
	__IO TIMER0_STOP_CFG_SET_Type		STOP_CFG_SET;		/**< \brief TIMER0 Stop Configuration Set Register */
	__IO TIMER0_STOP_CFG_CLR_Type		STOP_CFG_CLR;		/**< \brief TIMER0 Stop Configuration Clear Register */
	__IO TIMER0_DATA_IMSK_Type		DATA_IMSK;		/**< \brief TIMER0 Data Interrupt Mask Register */
	__IO TIMER0_STAT_IMSK_Type		STAT_IMSK;		/**< \brief TIMER0 Status Interrupt Mask Register */
	__IO TIMER0_TRG_MSK_Type		TRG_MSK;		/**< \brief TIMER0 Trigger Master Mask Register */
	__IO TIMER0_TRG_IE_Type		TRG_IE;		/**< \brief TIMER0 Trigger Slave Enable Register */
	__IO TIMER0_DATA_ILAT_Type		DATA_ILAT;		/**< \brief TIMER0 Data Interrupt Latch Register */
	__IO TIMER0_STAT_ILAT_Type		STAT_ILAT;		/**< \brief TIMER0 Status Interrupt Latch Register */
	__IO TIMER0_ERR_TYPE_Type		ERR_TYPE;		/**< \brief TIMER0 Error Type Status Register */
	__IO TIMER0_BCAST_PER_Type		BCAST_PER;		/**< \brief TIMER0 Broadcast Period Register */
	__IO TIMER0_BCAST_WID_Type		BCAST_WID;		/**< \brief TIMER0 Broadcast Width Register */
	__IO TIMER0_BCAST_DLY_Type		BCAST_DLY;		/**< \brief TIMER0 Broadcast Delay Register */
		 RoReg8		Reserved1[0x1c];		
	__IO TIMER0_TMR0_CFG_Type		TMR0_CFG;		/**< \brief TIMER0 Timer n Configuration Register */
	__IO TIMER0_TMR0_CNT_Type		TMR0_CNT;		/**< \brief TIMER0 Timer n Counter Register */
	__IO TIMER0_TMR0_PER_Type		TMR0_PER;		/**< \brief TIMER0 Timer n Period Register */
	__IO TIMER0_TMR0_WID_Type		TMR0_WID;		/**< \brief TIMER0 Timer n Width Register */
	__IO TIMER0_TMR0_DLY_Type		TMR0_DLY;		/**< \brief TIMER0 Timer n Delay Register */
		 RoReg8		Reserved2[0x0c];		
	__IO TIMER0_TMR1_CFG_Type		TMR1_CFG;		/**< \brief TIMER0 Timer n Configuration Register */
	__IO TIMER0_TMR1_CNT_Type		TMR1_CNT;		/**< \brief TIMER0 Timer n Counter Register */
	__IO TIMER0_TMR1_PER_Type		TMR1_PER;		/**< \brief TIMER0 Timer n Period Register */
	__IO TIMER0_TMR1_WID_Type		TMR1_WID;		/**< \brief TIMER0 Timer n Width Register */
	__IO TIMER0_TMR1_DLY_Type		TMR1_DLY;		/**< \brief TIMER0 Timer n Delay Register */
		 RoReg8		Reserved3[0x0c];		
	__IO TIMER0_TMR2_CFG_Type		TMR2_CFG;		/**< \brief TIMER0 Timer n Configuration Register */
	__IO TIMER0_TMR2_CNT_Type		TMR2_CNT;		/**< \brief TIMER0 Timer n Counter Register */
	__IO TIMER0_TMR2_PER_Type		TMR2_PER;		/**< \brief TIMER0 Timer n Period Register */
	__IO TIMER0_TMR2_WID_Type		TMR2_WID;		/**< \brief TIMER0 Timer n Width Register */
	__IO TIMER0_TMR2_DLY_Type		TMR2_DLY;		/**< \brief TIMER0 Timer n Delay Register */
		 RoReg8		Reserved4[0x0c];		
	__IO TIMER0_TMR3_CFG_Type		TMR3_CFG;		/**< \brief TIMER0 Timer n Configuration Register */
	__IO TIMER0_TMR3_CNT_Type		TMR3_CNT;		/**< \brief TIMER0 Timer n Counter Register */
	__IO TIMER0_TMR3_PER_Type		TMR3_PER;		/**< \brief TIMER0 Timer n Period Register */
	__IO TIMER0_TMR3_WID_Type		TMR3_WID;		/**< \brief TIMER0 Timer n Width Register */
	__IO TIMER0_TMR3_DLY_Type		TMR3_DLY;		/**< \brief TIMER0 Timer n Delay Register */
		 RoReg8		Reserved5[0x0c];		
	__IO TIMER0_TMR4_CFG_Type		TMR4_CFG;		/**< \brief TIMER0 Timer n Configuration Register */
	__IO TIMER0_TMR4_CNT_Type		TMR4_CNT;		/**< \brief TIMER0 Timer n Counter Register */
	__IO TIMER0_TMR4_PER_Type		TMR4_PER;		/**< \brief TIMER0 Timer n Period Register */
	__IO TIMER0_TMR4_WID_Type		TMR4_WID;		/**< \brief TIMER0 Timer n Width Register */
	__IO TIMER0_TMR4_DLY_Type		TMR4_DLY;		/**< \brief TIMER0 Timer n Delay Register */
		 RoReg8		Reserved6[0x0c];		
	__IO TIMER0_TMR5_CFG_Type		TMR5_CFG;		/**< \brief TIMER0 Timer n Configuration Register */
	__IO TIMER0_TMR5_CNT_Type		TMR5_CNT;		/**< \brief TIMER0 Timer n Counter Register */
	__IO TIMER0_TMR5_PER_Type		TMR5_PER;		/**< \brief TIMER0 Timer n Period Register */
	__IO TIMER0_TMR5_WID_Type		TMR5_WID;		/**< \brief TIMER0 Timer n Width Register */
	__IO TIMER0_TMR5_DLY_Type		TMR5_DLY;		/**< \brief TIMER0 Timer n Delay Register */
		 RoReg8		Reserved7[0x0c];		
	__IO TIMER0_TMR6_CFG_Type		TMR6_CFG;		/**< \brief TIMER0 Timer n Configuration Register */
	__IO TIMER0_TMR6_CNT_Type		TMR6_CNT;		/**< \brief TIMER0 Timer n Counter Register */
	__IO TIMER0_TMR6_PER_Type		TMR6_PER;		/**< \brief TIMER0 Timer n Period Register */
	__IO TIMER0_TMR6_WID_Type		TMR6_WID;		/**< \brief TIMER0 Timer n Width Register */
	__IO TIMER0_TMR6_DLY_Type		TMR6_DLY;		/**< \brief TIMER0 Timer n Delay Register */
		 RoReg8		Reserved8[0x0c];		
	__IO TIMER0_TMR7_CFG_Type		TMR7_CFG;		/**< \brief TIMER0 Timer n Configuration Register */
	__IO TIMER0_TMR7_CNT_Type		TMR7_CNT;		/**< \brief TIMER0 Timer n Counter Register */
	__IO TIMER0_TMR7_PER_Type		TMR7_PER;		/**< \brief TIMER0 Timer n Period Register */
	__IO TIMER0_TMR7_WID_Type		TMR7_WID;		/**< \brief TIMER0 Timer n Width Register */
	__IO TIMER0_TMR7_DLY_Type		TMR7_DLY;		/**< \brief TIMER0 Timer n Delay Register */
} Timer0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- WDOG0_CTL : (32) WDOG0 Control Register ----- */
typedef union {
	struct {
		uint32_t :4;			/*!< bit	0..3	Reserved	*/
		uint32_t WDEN:8;			/*!< bit	4..11	Watch Dog Enable	*/
		uint32_t :3;			/*!< bit	12..14	Reserved	*/
		uint32_t WDRO:1;			/*!< bit	15	Watch Dog Rollover	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WDOG0_CTL_Type;
#define REG_WDOG0_CTL		(*(RwReg *)0x20046000UL)

#else
#define REG_WDOG0_CTL		(0x20046000) /**< \brief (WDOG0) WDOG0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WDOG0_CNT : (32) WDOG0 Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WDOG0_CNT_Type;
#define REG_WDOG0_CNT		(*(RwReg *)0x20046004UL)

#else
#define REG_WDOG0_CNT		(0x20046004) /**< \brief (WDOG0) WDOG0 Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- WDOG0_STAT : (32) WDOG0 Watchdog Timer Status Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} WDOG0_STAT_Type;
#define REG_WDOG0_STAT		(*(RwReg *)0x20046008UL)

#else
#define REG_WDOG0_STAT		(0x20046008) /**< \brief (WDOG0) WDOG0 Watchdog Timer Status Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO WDOG0_CTL_Type		CTL;		/**< \brief WDOG0 Control Register */
	__IO WDOG0_CNT_Type		CNT;		/**< \brief WDOG0 Count Register */
	__IO WDOG0_STAT_Type		STAT;		/**< \brief WDOG0 Watchdog Timer Status Register */
} Wdog0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_IDCODE : (32) TAPC0 IDCODE Register ----- */
typedef union {
	struct {
		uint32_t LSB:1;			/*!< bit	0	IDCODE LSB	*/
		uint32_t MNFID:11;			/*!< bit	1..11	Manufacturer ID	*/
		uint32_t JTAGID:16;			/*!< bit	12..27	JTAG ID	*/
		uint32_t REVID:4;			/*!< bit	28..31	Revision ID	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_IDCODE_Type;
#define REG_TAPC0_IDCODE		(*(RwReg *)0x20048000UL)

#else
#define REG_TAPC0_IDCODE		(0x20048000) /**< \brief (TAPC0) TAPC0 IDCODE Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_USERCODE : (32) TAPC0 USERCODE Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_USERCODE_Type;
#define REG_TAPC0_USERCODE		(*(RwReg *)0x20048004UL)

#else
#define REG_TAPC0_USERCODE		(0x20048004) /**< \brief (TAPC0) TAPC0 USERCODE Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_SDBGKEY_CTL : (32) TAPC0 Secure Debug Control Register ----- */
typedef union {
	struct {
		uint32_t VALID:1;			/*!< bit	0	SDBGKEY Valid bit	*/
		uint32_t :31;			/*!< bit	1..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_SDBGKEY_CTL_Type;
#define REG_TAPC0_SDBGKEY_CTL		(*(RwReg *)0x20048008UL)

#else
#define REG_TAPC0_SDBGKEY_CTL		(0x20048008) /**< \brief (TAPC0) TAPC0 Secure Debug Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_SDBGKEY_STAT : (32) TAPC0 Secure Debug Key Status Register ----- */
typedef union {
	struct {
		uint32_t PASS:1;			/*!< bit	0	SDBGKEY MATCH PASSED	*/
		uint32_t FAIL:1;			/*!< bit	1	SDBGKEY MATCH FAILED	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_SDBGKEY_STAT_Type;
#define REG_TAPC0_SDBGKEY_STAT		(*(RwReg *)0x2004800CUL)

#else
#define REG_TAPC0_SDBGKEY_STAT		(0x2004800C) /**< \brief (TAPC0) TAPC0 Secure Debug Key Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_SDBGKEY0 : (32) TAPC0 Secure Debug Key 0 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_SDBGKEY0_Type;
#define REG_TAPC0_SDBGKEY0		(*(RwReg *)0x20048010UL)

#else
#define REG_TAPC0_SDBGKEY0		(0x20048010) /**< \brief (TAPC0) TAPC0 Secure Debug Key 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_SDBGKEY1 : (32) TAPC0 Secure Debug Key 1 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_SDBGKEY1_Type;
#define REG_TAPC0_SDBGKEY1		(*(RwReg *)0x20048014UL)

#else
#define REG_TAPC0_SDBGKEY1		(0x20048014) /**< \brief (TAPC0) TAPC0 Secure Debug Key 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_SDBGKEY2 : (32) TAPC0 Secure Debug Key 2 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_SDBGKEY2_Type;
#define REG_TAPC0_SDBGKEY2		(*(RwReg *)0x20048018UL)

#else
#define REG_TAPC0_SDBGKEY2		(0x20048018) /**< \brief (TAPC0) TAPC0 Secure Debug Key 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_SDBGKEY3 : (32) TAPC0 Secure Debug Key 3 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_SDBGKEY3_Type;
#define REG_TAPC0_SDBGKEY3		(*(RwReg *)0x2004801CUL)

#else
#define REG_TAPC0_SDBGKEY3		(0x2004801C) /**< \brief (TAPC0) TAPC0 Secure Debug Key 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TAPC0_DBGCTL : (32) TAPC0 Debug Control Register ----- */
typedef union {
	struct {
		uint32_t :2;			/*!< bit	0..1	Reserved	*/
		uint32_t SPIDENDAP:1;			/*!< bit	2	SPIDEN for DAP	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t DBGENC0:1;			/*!< bit	4	DBGEN for Core 0	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
		uint32_t DBGENSTM:1;			/*!< bit	8	DBGEN for STM	*/
		uint32_t NIDENSTM:1;			/*!< bit	9	NIDEN for STM	*/
		uint32_t SPNIDENSTM:1;			/*!< bit	10	SPNIDEN for STM	*/
		uint32_t SPIDENSTM:1;			/*!< bit	11	SPIDEN for STM	*/
		uint32_t DBGENCTISYS:1;			/*!< bit	12	DBGEN for CTISYS	*/
		uint32_t NIDENCTISYS:1;			/*!< bit	13	NIDEN for CTISYS	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t DBGENTRACE:1;			/*!< bit	16	DBGEN for trace blocks	*/
		uint32_t NIDENTRACE:1;			/*!< bit	17	NIDEN for trace blocks	*/
		uint32_t SPIDENTRACE:1;			/*!< bit	18	SPIDEN for ETR	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TAPC0_DBGCTL_Type;
#define REG_TAPC0_DBGCTL		(*(RwReg *)0x20048030UL)

#else
#define REG_TAPC0_DBGCTL		(0x20048030) /**< \brief (TAPC0) TAPC0 Debug Control Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO TAPC0_IDCODE_Type		IDCODE;		/**< \brief TAPC0 IDCODE Register */
	__IO TAPC0_USERCODE_Type		USERCODE;		/**< \brief TAPC0 USERCODE Register */
	__IO TAPC0_SDBGKEY_CTL_Type		SDBGKEY_CTL;		/**< \brief TAPC0 Secure Debug Control Register */
	__IO TAPC0_SDBGKEY_STAT_Type		SDBGKEY_STAT;		/**< \brief TAPC0 Secure Debug Key Status Register */
	__IO TAPC0_SDBGKEY0_Type		SDBGKEY0;		/**< \brief TAPC0 Secure Debug Key 0 Register */
	__IO TAPC0_SDBGKEY1_Type		SDBGKEY1;		/**< \brief TAPC0 Secure Debug Key 1 Register */
	__IO TAPC0_SDBGKEY2_Type		SDBGKEY2;		/**< \brief TAPC0 Secure Debug Key 2 Register */
	__IO TAPC0_SDBGKEY3_Type		SDBGKEY3;		/**< \brief TAPC0 Secure Debug Key 3 Register */
		 RoReg8		Reserved1[0x10];		
	__IO TAPC0_DBGCTL_Type		DBGCTL;		/**< \brief TAPC0 Debug Control Register */
} Tapc0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- TWI0_CLKDIV : (32) TWI0 SCL Clock Divider Register ----- */
typedef union {
	struct {
		uint32_t CLKLO:8;			/*!< bit	0..7	SCL Clock Low Periods	*/
		uint32_t CLKHI:8;			/*!< bit	8..15	SCL Clock High Periods	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_CLKDIV_Type;
#define REG_TWI0_CLKDIV		(*(RwReg *)0x2004A000UL)

#else
#define REG_TWI0_CLKDIV		(0x2004A000) /**< \brief (TWI0) TWI0 SCL Clock Divider Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_CTL : (32) TWI0 Control Register ----- */
typedef union {
	struct {
		uint32_t PRESCALE:7;			/*!< bit	0..6	SCLK Prescale Value	*/
		uint32_t EN:1;			/*!< bit	7	Enable Module	*/
		uint32_t :1;			/*!< bit	8	Reserved	*/
		uint32_t SCCB:1;			/*!< bit	9	SCCB Compatibility	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_CTL_Type;
#define REG_TWI0_CTL		(*(RwReg *)0x2004A004UL)

#else
#define REG_TWI0_CTL		(0x2004A004) /**< \brief (TWI0) TWI0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_SLVCTL : (32) TWI0 Slave Mode Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Slave Mode	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t TDVAL:1;			/*!< bit	2	Transmit Data Valid for Slave	*/
		uint32_t NAK:1;			/*!< bit	3	Not Acknowledge	*/
		uint32_t GEN:1;			/*!< bit	4	General Call Enable	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_SLVCTL_Type;
#define REG_TWI0_SLVCTL		(*(RwReg *)0x2004A008UL)

#else
#define REG_TWI0_SLVCTL		(0x2004A008) /**< \brief (TWI0) TWI0 Slave Mode Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_SLVSTAT : (32) TWI0 Slave Mode Status Register ----- */
typedef union {
	struct {
		uint32_t DIR:1;			/*!< bit	0	Transfer Direction for Slave	*/
		uint32_t GCALL:1;			/*!< bit	1	General Call	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_SLVSTAT_Type;
#define REG_TWI0_SLVSTAT		(*(RwReg *)0x2004A00CUL)

#else
#define REG_TWI0_SLVSTAT		(0x2004A00C) /**< \brief (TWI0) TWI0 Slave Mode Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_SLVADDR : (32) TWI0 Slave Mode Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Slave Mode Address	*/
		uint32_t :25;			/*!< bit	7..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_SLVADDR_Type;
#define REG_TWI0_SLVADDR		(*(RwReg *)0x2004A010UL)

#else
#define REG_TWI0_SLVADDR		(0x2004A010) /**< \brief (TWI0) TWI0 Slave Mode Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_MSTRCTL : (32) TWI0 Master Mode Control Registers ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable Master Mode	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t DIR:1;			/*!< bit	2	Transfer Direction for Master	*/
		uint32_t FAST:1;			/*!< bit	3	Fast Mode	*/
		uint32_t STOP:1;			/*!< bit	4	Issue Stop Condition	*/
		uint32_t RSTART:1;			/*!< bit	5	Repeat Start	*/
		uint32_t DCNT:8;			/*!< bit	6..13	Data Transfer Count	*/
		uint32_t SDAOVR:1;			/*!< bit	14	Serial Data Override	*/
		uint32_t SCLOVR:1;			/*!< bit	15	Serial Clock Override	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_MSTRCTL_Type;
#define REG_TWI0_MSTRCTL		(*(RwReg *)0x2004A014UL)

#else
#define REG_TWI0_MSTRCTL		(0x2004A014) /**< \brief (TWI0) TWI0 Master Mode Control Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_MSTRSTAT : (32) TWI0 Master Mode Status Register ----- */
typedef union {
	struct {
		uint32_t MPROG:1;			/*!< bit	0	Master Transfer in Progress	*/
		uint32_t LOSTARB:1;			/*!< bit	1	Lost Arbitration	*/
		uint32_t ANAK:1;			/*!< bit	2	Address Not Acknowledged	*/
		uint32_t DNAK:1;			/*!< bit	3	Data Not Acknowledged	*/
		uint32_t BUFRDERR:1;			/*!< bit	4	Buffer Read Error	*/
		uint32_t BUFWRERR:1;			/*!< bit	5	Buffer Write Error	*/
		uint32_t SDASEN:1;			/*!< bit	6	Serial Data Sense	*/
		uint32_t SCLSEN:1;			/*!< bit	7	Serial Clock Sense	*/
		uint32_t BUSBUSY:1;			/*!< bit	8	Bus Busy	*/
		uint32_t :23;			/*!< bit	9..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_MSTRSTAT_Type;
#define REG_TWI0_MSTRSTAT		(*(RwReg *)0x2004A018UL)

#else
#define REG_TWI0_MSTRSTAT		(0x2004A018) /**< \brief (TWI0) TWI0 Master Mode Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_MSTRADDR : (32) TWI0 Master Mode Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Master Mode Address	*/
		uint32_t :25;			/*!< bit	7..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_MSTRADDR_Type;
#define REG_TWI0_MSTRADDR		(*(RwReg *)0x2004A01CUL)

#else
#define REG_TWI0_MSTRADDR		(0x2004A01C) /**< \brief (TWI0) TWI0 Master Mode Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_ISTAT : (32) TWI0 Interrupt Status Register ----- */
typedef union {
	struct {
		uint32_t SINIT:1;			/*!< bit	0	Slave Transfer Initiated	*/
		uint32_t SCOMP:1;			/*!< bit	1	Slave Transfer Complete	*/
		uint32_t SERR:1;			/*!< bit	2	Slave Transfer Error	*/
		uint32_t SOVF:1;			/*!< bit	3	Slave Overflow	*/
		uint32_t MCOMP:1;			/*!< bit	4	Master Transfer Complete	*/
		uint32_t MERR:1;			/*!< bit	5	Master Transfer Error	*/
		uint32_t TXSERV:1;			/*!< bit	6	Tx FIFO Service	*/
		uint32_t RXSERV:1;			/*!< bit	7	Rx FIFO Service	*/
		uint32_t :6;			/*!< bit	8..13	Reserved	*/
		uint32_t SDAI:1;			/*!< bit	14	Serial Data Interrupt	*/
		uint32_t SCLI:1;			/*!< bit	15	Serial Clock Interrupt	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_ISTAT_Type;
#define REG_TWI0_ISTAT		(*(RwReg *)0x2004A020UL)

#else
#define REG_TWI0_ISTAT		(0x2004A020) /**< \brief (TWI0) TWI0 Interrupt Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_IMSK : (32) TWI0 Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t SINIT:1;			/*!< bit	0	Slave Transfer Initiated Interrupt Mask	*/
		uint32_t SCOMP:1;			/*!< bit	1	Slave Transfer Complete Interrupt Mask	*/
		uint32_t SERR:1;			/*!< bit	2	Slave Transfer Error Interrupt Mask	*/
		uint32_t SOVF:1;			/*!< bit	3	Slave Overflow Interrupt Mask	*/
		uint32_t MCOMP:1;			/*!< bit	4	Master Transfer Complete Interrupt Mask	*/
		uint32_t MERR:1;			/*!< bit	5	Master Transfer Error Interrupt Mask	*/
		uint32_t TXSERV:1;			/*!< bit	6	Tx FIFO Service Interrupt Mask	*/
		uint32_t RXSERV:1;			/*!< bit	7	Rx FIFO Service Interrupt Mask	*/
		uint32_t :6;			/*!< bit	8..13	Reserved	*/
		uint32_t SDAI:1;			/*!< bit	14	Serial Data Interrupt Mask	*/
		uint32_t SCLI:1;			/*!< bit	15	Serial Clock Interrupt Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_IMSK_Type;
#define REG_TWI0_IMSK		(*(RwReg *)0x2004A024UL)

#else
#define REG_TWI0_IMSK		(0x2004A024) /**< \brief (TWI0) TWI0 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_FIFOCTL : (32) TWI0 FIFO Control Register ----- */
typedef union {
	struct {
		uint32_t TXFLUSH:1;			/*!< bit	0	Tx Buffer Flush	*/
		uint32_t RXFLUSH:1;			/*!< bit	1	Rx Buffer Flush	*/
		uint32_t TXILEN:1;			/*!< bit	2	Tx Buffer Interrupt Length	*/
		uint32_t RXILEN:1;			/*!< bit	3	Rx Buffer Interrupt Length	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_FIFOCTL_Type;
#define REG_TWI0_FIFOCTL		(*(RwReg *)0x2004A028UL)

#else
#define REG_TWI0_FIFOCTL		(0x2004A028) /**< \brief (TWI0) TWI0 FIFO Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_FIFOSTAT : (32) TWI0 FIFO Status Register ----- */
typedef union {
	struct {
		uint32_t TXSTAT:2;			/*!< bit	0..1	Tx FIFO Status	*/
		uint32_t RXSTAT:2;			/*!< bit	2..3	Rx FIFO Status	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_FIFOSTAT_Type;
#define REG_TWI0_FIFOSTAT		(*(RwReg *)0x2004A02CUL)

#else
#define REG_TWI0_FIFOSTAT		(0x2004A02C) /**< \brief (TWI0) TWI0 FIFO Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_TXDATA8 : (32) TWI0 Tx Data Single-Byte Register ----- */
typedef union {
	struct {
		uint32_t VALUE:8;			/*!< bit	0..7	Tx Data 8-Bit Value	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_TXDATA8_Type;
#define REG_TWI0_TXDATA8		(*(RwReg *)0x2004A080UL)

#else
#define REG_TWI0_TXDATA8		(0x2004A080) /**< \brief (TWI0) TWI0 Tx Data Single-Byte Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_TXDATA16 : (32) TWI0 Tx Data Double-Byte Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Tx Data 16-Bit Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_TXDATA16_Type;
#define REG_TWI0_TXDATA16		(*(RwReg *)0x2004A084UL)

#else
#define REG_TWI0_TXDATA16		(0x2004A084) /**< \brief (TWI0) TWI0 Tx Data Double-Byte Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_RXDATA8 : (32) TWI0 Rx Data Single-Byte Register ----- */
typedef union {
	struct {
		uint32_t VALUE:8;			/*!< bit	0..7	Rx Data 8-Bit Value	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_RXDATA8_Type;
#define REG_TWI0_RXDATA8		(*(RwReg *)0x2004A088UL)

#else
#define REG_TWI0_RXDATA8		(0x2004A088) /**< \brief (TWI0) TWI0 Rx Data Single-Byte Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TWI0_RXDATA16 : (32) TWI0 Rx Data Double-Byte Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Rx Data 16-Bit Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TWI0_RXDATA16_Type;
#define REG_TWI0_RXDATA16		(*(RwReg *)0x2004A08CUL)

#else
#define REG_TWI0_RXDATA16		(0x2004A08C) /**< \brief (TWI0) TWI0 Rx Data Double-Byte Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO TWI0_CLKDIV_Type		CLKDIV;		/**< \brief TWI0 SCL Clock Divider Register */
	__IO TWI0_CTL_Type		CTL;		/**< \brief TWI0 Control Register */
	__IO TWI0_SLVCTL_Type		SLVCTL;		/**< \brief TWI0 Slave Mode Control Register */
	__IO TWI0_SLVSTAT_Type		SLVSTAT;		/**< \brief TWI0 Slave Mode Status Register */
	__IO TWI0_SLVADDR_Type		SLVADDR;		/**< \brief TWI0 Slave Mode Address Register */
	__IO TWI0_MSTRCTL_Type		MSTRCTL;		/**< \brief TWI0 Master Mode Control Registers */
	__IO TWI0_MSTRSTAT_Type		MSTRSTAT;		/**< \brief TWI0 Master Mode Status Register */
	__IO TWI0_MSTRADDR_Type		MSTRADDR;		/**< \brief TWI0 Master Mode Address Register */
	__IO TWI0_ISTAT_Type		ISTAT;		/**< \brief TWI0 Interrupt Status Register */
	__IO TWI0_IMSK_Type		IMSK;		/**< \brief TWI0 Interrupt Mask Register */
	__IO TWI0_FIFOCTL_Type		FIFOCTL;		/**< \brief TWI0 FIFO Control Register */
	__IO TWI0_FIFOSTAT_Type		FIFOSTAT;		/**< \brief TWI0 FIFO Status Register */
		 RoReg8		Reserved1[0x50];		
	__IO TWI0_TXDATA8_Type		TXDATA8;		/**< \brief TWI0 Tx Data Single-Byte Register */
	__IO TWI0_TXDATA16_Type		TXDATA16;		/**< \brief TWI0 Tx Data Double-Byte Register */
	__IO TWI0_RXDATA8_Type		RXDATA8;		/**< \brief TWI0 Rx Data Single-Byte Register */
	__IO TWI0_RXDATA16_Type		RXDATA16;		/**< \brief TWI0 Rx Data Double-Byte Register */
} Twi0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CTL_A : (32) SPORT0 Half SPORT 'A' Control Register ----- */
typedef union {
	struct {
		uint32_t SPENPRI:1;			/*!< bit	0	Serial Port Enable (Primary)	*/
		uint32_t DTYPE:2;			/*!< bit	1..2	Data Type	*/
		uint32_t LSBF:1;			/*!< bit	3	Least-Significant Bit First	*/
		uint32_t SLEN:5;			/*!< bit	4..8	Serial Word Length	*/
		uint32_t PACK:1;			/*!< bit	9	Packing Enable	*/
		uint32_t ICLK:1;			/*!< bit	10	Internal Clock	*/
		uint32_t OPMODE:1;			/*!< bit	11	Operation mode	*/
		uint32_t CKRE:1;			/*!< bit	12	Clock Rising Edge	*/
		uint32_t FSR:1;			/*!< bit	13	Frame Sync Required	*/
		uint32_t IFS:1;			/*!< bit	14	Internal Frame Sync	*/
		uint32_t DIFS:1;			/*!< bit	15	Data-Independent Frame Sync	*/
		uint32_t LFS:1;			/*!< bit	16	Active-Low Frame Sync / L_FIRST / PLFS	*/
		uint32_t LAFS:1;			/*!< bit	17	Late Frame Sync / OPMODE2	*/
		uint32_t RJUST:1;			/*!< bit	18	Right-Justified Operation Mode	*/
		uint32_t FSED:1;			/*!< bit	19	Frame Sync Edge Detect	*/
		uint32_t TFIEN:1;			/*!< bit	20	Transmit Finish Interrupt Enable	*/
		uint32_t GCLKEN:1;			/*!< bit	21	Gated Clock Enable	*/
		uint32_t :2;			/*!< bit	22..23	Reserved	*/
		uint32_t SPENSEC:1;			/*!< bit	24	Serial Port Enable (Secondary)	*/
		uint32_t SPTRAN:1;			/*!< bit	25	Serial Port Transfer Direction	*/
		uint32_t DERRSEC:1;			/*!< bit	26	Data Error Status (Secondary)	*/
		uint32_t DXSSEC:2;			/*!< bit	27..28	Data Transfer Buffer Status (Secondary)	*/
		uint32_t DERRPRI:1;			/*!< bit	29	Data Error Status (Primary)	*/
		uint32_t DXSPRI:2;			/*!< bit	30..31	Data Transfer Buffer Status (Primary)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CTL_A_Type;
#define REG_SPORT0_CTL_A		(*(RwReg *)0x2004D000UL)

#else
#define REG_SPORT0_CTL_A		(0x2004D000) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_DIV_A : (32) SPORT0 Half SPORT 'A' Divisor Register ----- */
typedef union {
	struct {
		uint32_t CLKDIV:16;			/*!< bit	0..15	Clock Divisor	*/
		uint32_t FSDIV:16;			/*!< bit	16..31	Frame Sync Divisor	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_DIV_A_Type;
#define REG_SPORT0_DIV_A		(*(RwReg *)0x2004D004UL)

#else
#define REG_SPORT0_DIV_A		(0x2004D004) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Divisor Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_MCTL_A : (32) SPORT0 Half SPORT 'A' Multi-channel Control Register ----- */
typedef union {
	struct {
		uint32_t MCE:1;			/*!< bit	0	Multichannel enable	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t MCPDE:1;			/*!< bit	2	Multi-Channel Packing DMA Enable	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t MFD:4;			/*!< bit	4..7	Multi-channel Frame Delay	*/
		uint32_t WSIZE:7;			/*!< bit	8..14	Window Size	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t WOFFSET:10;			/*!< bit	16..25	Window Offset	*/
		uint32_t :6;			/*!< bit	26..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_MCTL_A_Type;
#define REG_SPORT0_MCTL_A		(*(RwReg *)0x2004D008UL)

#else
#define REG_SPORT0_MCTL_A		(0x2004D008) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Multi-channel Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CS0_A : (32) SPORT0 Half SPORT 'A' Multi-channel 0-31 Select Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CS0_A_Type;
#define REG_SPORT0_CS0_A		(*(RwReg *)0x2004D00CUL)

#else
#define REG_SPORT0_CS0_A		(0x2004D00C) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Multi-channel 0-31 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CS1_A : (32) SPORT0 Half SPORT 'A' Multi-channel 32-63 Select Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CS1_A_Type;
#define REG_SPORT0_CS1_A		(*(RwReg *)0x2004D010UL)

#else
#define REG_SPORT0_CS1_A		(0x2004D010) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Multi-channel 32-63 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CS2_A : (32) SPORT0 Half SPORT 'A' Multi-channel 64-95 Select Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CS2_A_Type;
#define REG_SPORT0_CS2_A		(*(RwReg *)0x2004D014UL)

#else
#define REG_SPORT0_CS2_A		(0x2004D014) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Multi-channel 64-95 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CS3_A : (32) SPORT0 Half SPORT 'A' Multi-channel 96-127 Select Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CS3_A_Type;
#define REG_SPORT0_CS3_A		(*(RwReg *)0x2004D018UL)

#else
#define REG_SPORT0_CS3_A		(0x2004D018) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Multi-channel 96-127 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_ERR_A : (32) SPORT0 Half SPORT 'A' Error Register ----- */
typedef union {
	struct {
		uint32_t DERRPMSK:1;			/*!< bit	0	Data Error Primary (Interrupt) Mask	*/
		uint32_t DERRSMSK:1;			/*!< bit	1	Data Error Secondary (Interrupt) Mask	*/
		uint32_t FSERRMSK:1;			/*!< bit	2	Frame Sync Error (Interrupt) Mask	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t DERRPSTAT:1;			/*!< bit	4	Data Error Primary Status	*/
		uint32_t DERRSSTAT:1;			/*!< bit	5	Data Error Secondary Status	*/
		uint32_t FSERRSTAT:1;			/*!< bit	6	Frame Sync Error Status	*/
		uint32_t :25;			/*!< bit	7..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_ERR_A_Type;
#define REG_SPORT0_ERR_A		(*(RwReg *)0x2004D020UL)

#else
#define REG_SPORT0_ERR_A		(0x2004D020) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Error Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_MSTAT_A : (32) SPORT0 Half SPORT 'A' Multi-channel Status Register ----- */
typedef union {
	struct {
		uint32_t CURCHAN:10;			/*!< bit	0..9	Current Channel	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_MSTAT_A_Type;
#define REG_SPORT0_MSTAT_A		(*(RwReg *)0x2004D024UL)

#else
#define REG_SPORT0_MSTAT_A		(0x2004D024) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Multi-channel Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CTL2_A : (32) SPORT0 Half SPORT 'A' Control 2 Register ----- */
typedef union {
	struct {
		uint32_t FSMUXSEL:1;			/*!< bit	0	Frame Sync Multiplexer Select	*/
		uint32_t CKMUXSEL:1;			/*!< bit	1	Clock Multiplexer Select	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CTL2_A_Type;
#define REG_SPORT0_CTL2_A		(*(RwReg *)0x2004D028UL)

#else
#define REG_SPORT0_CTL2_A		(0x2004D028) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Control 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_TXPRI_A : (32) SPORT0 Half SPORT 'A' Tx Buffer (Primary) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_TXPRI_A_Type;
#define REG_SPORT0_TXPRI_A		(*(RwReg *)0x2004D040UL)

#else
#define REG_SPORT0_TXPRI_A		(0x2004D040) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Tx Buffer (Primary) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_RXPRI_A : (32) SPORT0 Half SPORT 'A' Rx Buffer (Primary) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_RXPRI_A_Type;
#define REG_SPORT0_RXPRI_A		(*(RwReg *)0x2004D044UL)

#else
#define REG_SPORT0_RXPRI_A		(0x2004D044) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Rx Buffer (Primary) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_TXSEC_A : (32) SPORT0 Half SPORT 'A' Tx Buffer (Secondary) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_TXSEC_A_Type;
#define REG_SPORT0_TXSEC_A		(*(RwReg *)0x2004D048UL)

#else
#define REG_SPORT0_TXSEC_A		(0x2004D048) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Tx Buffer (Secondary) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_RXSEC_A : (32) SPORT0 Half SPORT 'A' Rx Buffer (Secondary) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_RXSEC_A_Type;
#define REG_SPORT0_RXSEC_A		(*(RwReg *)0x2004D04CUL)

#else
#define REG_SPORT0_RXSEC_A		(0x2004D04C) /**< \brief (SPORT0) SPORT0 Half SPORT 'A' Rx Buffer (Secondary) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CTL_B : (32) SPORT0 Half SPORT 'B' Control Register ----- */
typedef union {
	struct {
		uint32_t SPENPRI:1;			/*!< bit	0	Serial Port Enable (Primary)	*/
		uint32_t DTYPE:2;			/*!< bit	1..2	Data Type	*/
		uint32_t LSBF:1;			/*!< bit	3	Least-Significant Bit First	*/
		uint32_t SLEN:5;			/*!< bit	4..8	Serial Word Length	*/
		uint32_t PACK:1;			/*!< bit	9	Packing Enable	*/
		uint32_t ICLK:1;			/*!< bit	10	Internal Clock	*/
		uint32_t OPMODE:1;			/*!< bit	11	Operation mode	*/
		uint32_t CKRE:1;			/*!< bit	12	Clock Rising Edge	*/
		uint32_t FSR:1;			/*!< bit	13	Frame Sync Required	*/
		uint32_t IFS:1;			/*!< bit	14	Internal Frame Sync	*/
		uint32_t DIFS:1;			/*!< bit	15	Data-Independent Frame Sync	*/
		uint32_t LFS:1;			/*!< bit	16	Active-Low Frame Sync / L_FIRST / PLFS	*/
		uint32_t LAFS:1;			/*!< bit	17	Late Frame Sync / OPMODE2	*/
		uint32_t RJUST:1;			/*!< bit	18	Right-Justified Operation Mode	*/
		uint32_t FSED:1;			/*!< bit	19	Frame Sync Edge Detect	*/
		uint32_t TFIEN:1;			/*!< bit	20	Transmit Finish Interrupt Enable	*/
		uint32_t GCLKEN:1;			/*!< bit	21	Gated Clock Enable	*/
		uint32_t :2;			/*!< bit	22..23	Reserved	*/
		uint32_t SPENSEC:1;			/*!< bit	24	Serial Port Enable (Secondary)	*/
		uint32_t SPTRAN:1;			/*!< bit	25	Serial Port Transfer Direction	*/
		uint32_t DERRSEC:1;			/*!< bit	26	Data Error Status (Secondary)	*/
		uint32_t DXSSEC:2;			/*!< bit	27..28	Data Transfer Buffer Status (Secondary)	*/
		uint32_t DERRPRI:1;			/*!< bit	29	Data Error Status (Primary)	*/
		uint32_t DXSPRI:2;			/*!< bit	30..31	Data Transfer Buffer Status (Primary)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CTL_B_Type;
#define REG_SPORT0_CTL_B		(*(RwReg *)0x2004D080UL)

#else
#define REG_SPORT0_CTL_B		(0x2004D080) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_DIV_B : (32) SPORT0 Half SPORT 'B' Divisor Register ----- */
typedef union {
	struct {
		uint32_t CLKDIV:16;			/*!< bit	0..15	Clock Divisor	*/
		uint32_t FSDIV:16;			/*!< bit	16..31	Frame Sync Divisor	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_DIV_B_Type;
#define REG_SPORT0_DIV_B		(*(RwReg *)0x2004D084UL)

#else
#define REG_SPORT0_DIV_B		(0x2004D084) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Divisor Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_MCTL_B : (32) SPORT0 Half SPORT 'B' Multi-channel Control Register ----- */
typedef union {
	struct {
		uint32_t MCE:1;			/*!< bit	0	Multi-Channel Enable	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t MCPDE:1;			/*!< bit	2	Multi-Channel Packing DMA Enable	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t MFD:4;			/*!< bit	4..7	Multi-channel Frame Delay	*/
		uint32_t WSIZE:7;			/*!< bit	8..14	Window Size	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t WOFFSET:10;			/*!< bit	16..25	Window Offset	*/
		uint32_t :6;			/*!< bit	26..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_MCTL_B_Type;
#define REG_SPORT0_MCTL_B		(*(RwReg *)0x2004D088UL)

#else
#define REG_SPORT0_MCTL_B		(0x2004D088) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Multi-channel Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CS0_B : (32) SPORT0 Half SPORT 'B' Multi-channel 0-31 Select Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CS0_B_Type;
#define REG_SPORT0_CS0_B		(*(RwReg *)0x2004D08CUL)

#else
#define REG_SPORT0_CS0_B		(0x2004D08C) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Multi-channel 0-31 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CS1_B : (32) SPORT0 Half SPORT 'B' Multi-channel 32-63 Select Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CS1_B_Type;
#define REG_SPORT0_CS1_B		(*(RwReg *)0x2004D090UL)

#else
#define REG_SPORT0_CS1_B		(0x2004D090) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Multi-channel 32-63 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CS2_B : (32) SPORT0 Half SPORT 'B' Multichannel 64-95 Select Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CS2_B_Type;
#define REG_SPORT0_CS2_B		(*(RwReg *)0x2004D094UL)

#else
#define REG_SPORT0_CS2_B		(0x2004D094) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Multichannel 64-95 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CS3_B : (32) SPORT0 Half SPORT 'B' Multichannel 96-127 Select Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CS3_B_Type;
#define REG_SPORT0_CS3_B		(*(RwReg *)0x2004D098UL)

#else
#define REG_SPORT0_CS3_B		(0x2004D098) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Multichannel 96-127 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_ERR_B : (32) SPORT0 Half SPORT 'B' Error Register ----- */
typedef union {
	struct {
		uint32_t DERRPMSK:1;			/*!< bit	0	Data Error Primary (Interrupt) Mask	*/
		uint32_t DERRSMSK:1;			/*!< bit	1	Data Error Secondary (Interrupt) Mask	*/
		uint32_t FSERRMSK:1;			/*!< bit	2	Frame Sync Error (Interrupt) Mask	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t DERRPSTAT:1;			/*!< bit	4	Data Error Primary Status	*/
		uint32_t DERRSSTAT:1;			/*!< bit	5	Data Error Secondary Status	*/
		uint32_t FSERRSTAT:1;			/*!< bit	6	Frame Sync Error Status	*/
		uint32_t :25;			/*!< bit	7..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_ERR_B_Type;
#define REG_SPORT0_ERR_B		(*(RwReg *)0x2004D0A0UL)

#else
#define REG_SPORT0_ERR_B		(0x2004D0A0) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Error Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_MSTAT_B : (32) SPORT0 Half SPORT 'B' Multi-channel Status Register ----- */
typedef union {
	struct {
		uint32_t CURCHAN:10;			/*!< bit	0..9	Current Channel	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_MSTAT_B_Type;
#define REG_SPORT0_MSTAT_B		(*(RwReg *)0x2004D0A4UL)

#else
#define REG_SPORT0_MSTAT_B		(0x2004D0A4) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Multi-channel Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_CTL2_B : (32) SPORT0 Half SPORT 'B' Control 2 Register ----- */
typedef union {
	struct {
		uint32_t FSMUXSEL:1;			/*!< bit	0	Frame Sync Multiplexer Select	*/
		uint32_t CKMUXSEL:1;			/*!< bit	1	Clock Multiplexer Select	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_CTL2_B_Type;
#define REG_SPORT0_CTL2_B		(*(RwReg *)0x2004D0A8UL)

#else
#define REG_SPORT0_CTL2_B		(0x2004D0A8) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Control 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_TXPRI_B : (32) SPORT0 Half SPORT 'B' Tx Buffer (Primary) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_TXPRI_B_Type;
#define REG_SPORT0_TXPRI_B		(*(RwReg *)0x2004D0C0UL)

#else
#define REG_SPORT0_TXPRI_B		(0x2004D0C0) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Tx Buffer (Primary) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_RXPRI_B : (32) SPORT0 Half SPORT 'B' Rx Buffer (Primary) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_RXPRI_B_Type;
#define REG_SPORT0_RXPRI_B		(*(RwReg *)0x2004D0C4UL)

#else
#define REG_SPORT0_RXPRI_B		(0x2004D0C4) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Rx Buffer (Primary) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_TXSEC_B : (32) SPORT0 Half SPORT 'B' Tx Buffer (Secondary) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_TXSEC_B_Type;
#define REG_SPORT0_TXSEC_B		(*(RwReg *)0x2004D0C8UL)

#else
#define REG_SPORT0_TXSEC_B		(0x2004D0C8) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Tx Buffer (Secondary) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPORT_RXSEC_B : (32) SPORT0 Half SPORT 'B' Rx Buffer (Secondary) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPORT_RXSEC_B_Type;
#define REG_SPORT0_RXSEC_B		(*(RwReg *)0x2004D0CCUL)

#else
#define REG_SPORT0_RXSEC_B		(0x2004D0CC) /**< \brief (SPORT0) SPORT0 Half SPORT 'B' Rx Buffer (Secondary) Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SPORT_CTL_A_Type		CTL_A;		/**< \brief SPORT0 Half SPORT 'A' Control Register */
	__IO SPORT_DIV_A_Type		DIV_A;		/**< \brief SPORT0 Half SPORT 'A' Divisor Register */
	__IO SPORT_MCTL_A_Type		MCTL_A;		/**< \brief SPORT0 Half SPORT 'A' Multi-channel Control Register */
	__IO SPORT_CS0_A_Type		CS0_A;		/**< \brief SPORT0 Half SPORT 'A' Multi-channel 0-31 Select Register */
	__IO SPORT_CS1_A_Type		CS1_A;		/**< \brief SPORT0 Half SPORT 'A' Multi-channel 32-63 Select Register */
	__IO SPORT_CS2_A_Type		CS2_A;		/**< \brief SPORT0 Half SPORT 'A' Multi-channel 64-95 Select Register */
	__IO SPORT_CS3_A_Type		CS3_A;		/**< \brief SPORT0 Half SPORT 'A' Multi-channel 96-127 Select Register */
		 RoReg8		Reserved1[0x04];		
	__IO SPORT_ERR_A_Type		ERR_A;		/**< \brief SPORT0 Half SPORT 'A' Error Register */
	__IO SPORT_MSTAT_A_Type		MSTAT_A;		/**< \brief SPORT0 Half SPORT 'A' Multi-channel Status Register */
	__IO SPORT_CTL2_A_Type		CTL2_A;		/**< \brief SPORT0 Half SPORT 'A' Control 2 Register */
		 RoReg8		Reserved2[0x14];		
	__IO SPORT_TXPRI_A_Type		TXPRI_A;		/**< \brief SPORT0 Half SPORT 'A' Tx Buffer (Primary) Register */
	__IO SPORT_RXPRI_A_Type		RXPRI_A;		/**< \brief SPORT0 Half SPORT 'A' Rx Buffer (Primary) Register */
	__IO SPORT_TXSEC_A_Type		TXSEC_A;		/**< \brief SPORT0 Half SPORT 'A' Tx Buffer (Secondary) Register */
	__IO SPORT_RXSEC_A_Type		RXSEC_A;		/**< \brief SPORT0 Half SPORT 'A' Rx Buffer (Secondary) Register */
		 RoReg8		Reserved3[0x30];		
	__IO SPORT_CTL_B_Type		CTL_B;		/**< \brief SPORT0 Half SPORT 'B' Control Register */
	__IO SPORT_DIV_B_Type		DIV_B;		/**< \brief SPORT0 Half SPORT 'B' Divisor Register */
	__IO SPORT_MCTL_B_Type		MCTL_B;		/**< \brief SPORT0 Half SPORT 'B' Multi-channel Control Register */
	__IO SPORT_CS0_B_Type		CS0_B;		/**< \brief SPORT0 Half SPORT 'B' Multi-channel 0-31 Select Register */
	__IO SPORT_CS1_B_Type		CS1_B;		/**< \brief SPORT0 Half SPORT 'B' Multi-channel 32-63 Select Register */
	__IO SPORT_CS2_B_Type		CS2_B;		/**< \brief SPORT0 Half SPORT 'B' Multichannel 64-95 Select Register */
	__IO SPORT_CS3_B_Type		CS3_B;		/**< \brief SPORT0 Half SPORT 'B' Multichannel 96-127 Select Register */
		 RoReg8		Reserved4[0x04];		
	__IO SPORT_ERR_B_Type		ERR_B;		/**< \brief SPORT0 Half SPORT 'B' Error Register */
	__IO SPORT_MSTAT_B_Type		MSTAT_B;		/**< \brief SPORT0 Half SPORT 'B' Multi-channel Status Register */
	__IO SPORT_CTL2_B_Type		CTL2_B;		/**< \brief SPORT0 Half SPORT 'B' Control 2 Register */
		 RoReg8		Reserved5[0x14];		
	__IO SPORT_TXPRI_B_Type		TXPRI_B;		/**< \brief SPORT0 Half SPORT 'B' Tx Buffer (Primary) Register */
	__IO SPORT_RXPRI_B_Type		RXPRI_B;		/**< \brief SPORT0 Half SPORT 'B' Rx Buffer (Primary) Register */
	__IO SPORT_TXSEC_B_Type		TXSEC_B;		/**< \brief SPORT0 Half SPORT 'B' Tx Buffer (Secondary) Register */
	__IO SPORT_RXSEC_B_Type		RXSEC_B;		/**< \brief SPORT0 Half SPORT 'B' Rx Buffer (Secondary) Register */
} Sportgroup;
#endif
#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CTL_A		(*(RwReg *)0x2004E000UL)

#else
#define REG_SPORT1_CTL_A		(0x2004E000) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_DIV_A		(*(RwReg *)0x2004E004UL)

#else
#define REG_SPORT1_DIV_A		(0x2004E004) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Divisor Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_MCTL_A		(*(RwReg *)0x2004E008UL)

#else
#define REG_SPORT1_MCTL_A		(0x2004E008) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Multi-channel Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CS0_A		(*(RwReg *)0x2004E00CUL)

#else
#define REG_SPORT1_CS0_A		(0x2004E00C) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Multi-channel 0-31 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CS1_A		(*(RwReg *)0x2004E010UL)

#else
#define REG_SPORT1_CS1_A		(0x2004E010) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Multi-channel 32-63 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CS2_A		(*(RwReg *)0x2004E014UL)

#else
#define REG_SPORT1_CS2_A		(0x2004E014) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Multi-channel 64-95 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CS3_A		(*(RwReg *)0x2004E018UL)

#else
#define REG_SPORT1_CS3_A		(0x2004E018) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Multi-channel 96-127 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_ERR_A		(*(RwReg *)0x2004E020UL)

#else
#define REG_SPORT1_ERR_A		(0x2004E020) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Error Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_MSTAT_A		(*(RwReg *)0x2004E024UL)

#else
#define REG_SPORT1_MSTAT_A		(0x2004E024) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Multi-channel Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CTL2_A		(*(RwReg *)0x2004E028UL)

#else
#define REG_SPORT1_CTL2_A		(0x2004E028) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Control 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_TXPRI_A		(*(RwReg *)0x2004E040UL)

#else
#define REG_SPORT1_TXPRI_A		(0x2004E040) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Tx Buffer (Primary) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_RXPRI_A		(*(RwReg *)0x2004E044UL)

#else
#define REG_SPORT1_RXPRI_A		(0x2004E044) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Rx Buffer (Primary) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_TXSEC_A		(*(RwReg *)0x2004E048UL)

#else
#define REG_SPORT1_TXSEC_A		(0x2004E048) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Tx Buffer (Secondary) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_RXSEC_A		(*(RwReg *)0x2004E04CUL)

#else
#define REG_SPORT1_RXSEC_A		(0x2004E04C) /**< \brief (SPORT1) SPORT1 Half SPORT 'A' Rx Buffer (Secondary) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CTL_B		(*(RwReg *)0x2004E080UL)

#else
#define REG_SPORT1_CTL_B		(0x2004E080) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_DIV_B		(*(RwReg *)0x2004E084UL)

#else
#define REG_SPORT1_DIV_B		(0x2004E084) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Divisor Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_MCTL_B		(*(RwReg *)0x2004E088UL)

#else
#define REG_SPORT1_MCTL_B		(0x2004E088) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Multi-channel Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CS0_B		(*(RwReg *)0x2004E08CUL)

#else
#define REG_SPORT1_CS0_B		(0x2004E08C) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Multi-channel 0-31 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CS1_B		(*(RwReg *)0x2004E090UL)

#else
#define REG_SPORT1_CS1_B		(0x2004E090) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Multi-channel 32-63 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CS2_B		(*(RwReg *)0x2004E094UL)

#else
#define REG_SPORT1_CS2_B		(0x2004E094) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Multichannel 64-95 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CS3_B		(*(RwReg *)0x2004E098UL)

#else
#define REG_SPORT1_CS3_B		(0x2004E098) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Multichannel 96-127 Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_ERR_B		(*(RwReg *)0x2004E0A0UL)

#else
#define REG_SPORT1_ERR_B		(0x2004E0A0) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Error Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_MSTAT_B		(*(RwReg *)0x2004E0A4UL)

#else
#define REG_SPORT1_MSTAT_B		(0x2004E0A4) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Multi-channel Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_CTL2_B		(*(RwReg *)0x2004E0A8UL)

#else
#define REG_SPORT1_CTL2_B		(0x2004E0A8) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Control 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_TXPRI_B		(*(RwReg *)0x2004E0C0UL)

#else
#define REG_SPORT1_TXPRI_B		(0x2004E0C0) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Tx Buffer (Primary) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_RXPRI_B		(*(RwReg *)0x2004E0C4UL)

#else
#define REG_SPORT1_RXPRI_B		(0x2004E0C4) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Rx Buffer (Primary) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_TXSEC_B		(*(RwReg *)0x2004E0C8UL)

#else
#define REG_SPORT1_TXSEC_B		(0x2004E0C8) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Tx Buffer (Secondary) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPORT1_RXSEC_B		(*(RwReg *)0x2004E0CCUL)

#else
#define REG_SPORT1_RXSEC_B		(0x2004E0CC) /**< \brief (SPORT1) SPORT1 Half SPORT 'B' Rx Buffer (Secondary) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_CTL : (32) SPI0 Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable	*/
		uint32_t MSTR:1;			/*!< bit	1	Master/Slave	*/
		uint32_t PSSE:1;			/*!< bit	2	Protected Slave Select Enable	*/
		uint32_t ODM:1;			/*!< bit	3	Open Drain Mode	*/
		uint32_t CPHA:1;			/*!< bit	4	Clock Phase	*/
		uint32_t CPOL:1;			/*!< bit	5	Clock Polarity	*/
		uint32_t ASSEL:1;			/*!< bit	6	Slave Select Pin Control	*/
		uint32_t SELST:1;			/*!< bit	7	Slave Select Polarity Between Transfers	*/
		uint32_t EMISO:1;			/*!< bit	8	Enable MISO	*/
		uint32_t SIZE:2;			/*!< bit	9..10	Word Transfer Size	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t LSBF:1;			/*!< bit	12	Least Significant Bit First	*/
		uint32_t FCEN:1;			/*!< bit	13	Flow Control Enable	*/
		uint32_t FCCH:1;			/*!< bit	14	Flow Control Channel Selection	*/
		uint32_t FCPL:1;			/*!< bit	15	Flow Control Polarity	*/
		uint32_t FCWM:2;			/*!< bit	16..17	Flow Control Watermark	*/
		uint32_t FMODE:1;			/*!< bit	18	Fast-Mode Enable	*/
		uint32_t :1;			/*!< bit	19	Reserved	*/
		uint32_t MIOM:2;			/*!< bit	20..21	Multiple I/O Mode	*/
		uint32_t SOSI:1;			/*!< bit	22	Start on MOSI	*/
		uint32_t :7;			/*!< bit	23..29	Reserved	*/
		uint32_t MMWEM:1;			/*!< bit	30	Memory Mapped Write Error Mask	*/
		uint32_t MMSE:1;			/*!< bit	31	Memory-Mapped SPI Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_CTL_Type;
#define REG_SPI0_CTL		(*(RwReg *)0x20055004UL)

#else
#define REG_SPI0_CTL		(0x20055004) /**< \brief (SPI0) SPI0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_RXCTL : (32) SPI0 Receive Control Register ----- */
typedef union {
	struct {
		uint32_t REN:1;			/*!< bit	0	Receive Enable	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t RTI:1;			/*!< bit	2	Receive Transfer Initiate	*/
		uint32_t RWCEN:1;			/*!< bit	3	Receive Word Counter Enable	*/
		uint32_t RDR:3;			/*!< bit	4..6	Receive Data Request	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t RDO:1;			/*!< bit	8	Receive Data Overrun	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t RRWM:2;			/*!< bit	12..13	Receive FIFO Regular Watermark	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t RUWM:3;			/*!< bit	16..18	Receive FIFO Urgent Watermark	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_RXCTL_Type;
#define REG_SPI0_RXCTL		(*(RwReg *)0x20055008UL)

#else
#define REG_SPI0_RXCTL		(0x20055008) /**< \brief (SPI0) SPI0 Receive Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_TXCTL : (32) SPI0 Transmit Control Register ----- */
typedef union {
	struct {
		uint32_t TEN:1;			/*!< bit	0	Transmit Enable	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t TTI:1;			/*!< bit	2	Transmit Transfer Initiate	*/
		uint32_t TWCEN:1;			/*!< bit	3	Transmit Word Counter Enable	*/
		uint32_t TDR:3;			/*!< bit	4..6	Transmit Data Request	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t TDU:1;			/*!< bit	8	Transmit Data Under-run	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t TRWM:2;			/*!< bit	12..13	FIFO Regular Watermark	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t TUWM:3;			/*!< bit	16..18	FIFO Urgent Watermark	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_TXCTL_Type;
#define REG_SPI0_TXCTL		(*(RwReg *)0x2005500CUL)

#else
#define REG_SPI0_TXCTL		(0x2005500C) /**< \brief (SPI0) SPI0 Transmit Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_CLK : (32) SPI0 Clock Rate Register ----- */
typedef union {
	struct {
		uint32_t BAUD:16;			/*!< bit	0..15	Baud Rate	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_CLK_Type;
#define REG_SPI0_CLK		(*(RwReg *)0x20055010UL)

#else
#define REG_SPI0_CLK		(0x20055010) /**< \brief (SPI0) SPI0 Clock Rate Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_DLY : (32) SPI0 Delay Register ----- */
typedef union {
	struct {
		uint32_t STOP:8;			/*!< bit	0..7	Transfer delay time in multiples of SPI clock period	*/
		uint32_t LEADX:1;			/*!< bit	8	Extended SPI Clock Lead Control	*/
		uint32_t LAGX:1;			/*!< bit	9	Extended SPI Clock Lag Control	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_DLY_Type;
#define REG_SPI0_DLY		(*(RwReg *)0x20055014UL)

#else
#define REG_SPI0_DLY		(0x20055014) /**< \brief (SPI0) SPI0 Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_SLVSEL : (32) SPI0 Slave Select Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t SSE1:1;			/*!< bit	1	Slave Select 1 Enable	*/
		uint32_t SSE2:1;			/*!< bit	2	Slave Select 2 Enable	*/
		uint32_t SSE3:1;			/*!< bit	3	Slave Select 3 Enable	*/
		uint32_t SSE4:1;			/*!< bit	4	Slave Select 4 Enable	*/
		uint32_t SSE5:1;			/*!< bit	5	Slave Select 5 Enable	*/
		uint32_t SSE6:1;			/*!< bit	6	Slave Select 6 Enable	*/
		uint32_t SSE7:1;			/*!< bit	7	Slave Select 7 Enable	*/
		uint32_t :1;			/*!< bit	8	Reserved	*/
		uint32_t SSEL1:1;			/*!< bit	9	Slave Select 1 Input	*/
		uint32_t SSEL2:1;			/*!< bit	10	Slave Select 2 Input	*/
		uint32_t SSEL3:1;			/*!< bit	11	Slave Select 3 Input	*/
		uint32_t SSEL4:1;			/*!< bit	12	Slave Select 4 Input	*/
		uint32_t SSEL5:1;			/*!< bit	13	Slave Select 5 Input	*/
		uint32_t SSEL6:1;			/*!< bit	14	Slave Select 6 Input	*/
		uint32_t SSEL7:1;			/*!< bit	15	Slave Select 7 Input	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_SLVSEL_Type;
#define REG_SPI0_SLVSEL		(*(RwReg *)0x20055018UL)

#else
#define REG_SPI0_SLVSEL		(0x20055018) /**< \brief (SPI0) SPI0 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_RWC : (32) SPI0 Received Word Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Received Word Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_RWC_Type;
#define REG_SPI0_RWC		(*(RwReg *)0x2005501CUL)

#else
#define REG_SPI0_RWC		(0x2005501C) /**< \brief (SPI0) SPI0 Received Word Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_RWCR : (32) SPI0 Received Word Count Reload Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Received Word Count Reload	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_RWCR_Type;
#define REG_SPI0_RWCR		(*(RwReg *)0x20055020UL)

#else
#define REG_SPI0_RWCR		(0x20055020) /**< \brief (SPI0) SPI0 Received Word Count Reload Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_TWC : (32) SPI0 Transmitted Word Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Transmitted Word Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_TWC_Type;
#define REG_SPI0_TWC		(*(RwReg *)0x20055024UL)

#else
#define REG_SPI0_TWC		(0x20055024) /**< \brief (SPI0) SPI0 Transmitted Word Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_TWCR : (32) SPI0 Transmitted Word Count Reload Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Transmitted Word Count Reload	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_TWCR_Type;
#define REG_SPI0_TWCR		(*(RwReg *)0x20055028UL)

#else
#define REG_SPI0_TWCR		(0x20055028) /**< \brief (SPI0) SPI0 Transmitted Word Count Reload Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_IMSK : (32) SPI0 Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t RUWM:1;			/*!< bit	1	Receive Urgent Watermark Interrupt Mask	*/
		uint32_t TUWM:1;			/*!< bit	2	Transmit Urgent Watermark Interrupt Mask	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t ROR:1;			/*!< bit	4	Receive Overrun Interrupt Mask	*/
		uint32_t TUR:1;			/*!< bit	5	Transmit Underrun Interrupt Mask	*/
		uint32_t TC:1;			/*!< bit	6	Transmit Collision Interrupt Mask	*/
		uint32_t MF:1;			/*!< bit	7	Mode Fault Interrupt Mask	*/
		uint32_t RS:1;			/*!< bit	8	Receive Start Interrupt Mask	*/
		uint32_t TS:1;			/*!< bit	9	Transmit Start Interrupt Mask	*/
		uint32_t RF:1;			/*!< bit	10	Receive Finish Interrupt Mask	*/
		uint32_t TF:1;			/*!< bit	11	Transmit Finish Interrupt Mask	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_IMSK_Type;
#define REG_SPI0_IMSK		(*(RwReg *)0x20055030UL)

#else
#define REG_SPI0_IMSK		(0x20055030) /**< \brief (SPI0) SPI0 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_IMSK_CLR : (32) SPI0 Interrupt Mask Clear Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t RUWM:1;			/*!< bit	1	Clear Receive Urgent Watermark Interrupt Mask	*/
		uint32_t TUWM:1;			/*!< bit	2	Clear Transmit Urgent Watermark Interrupt Mask	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t ROR:1;			/*!< bit	4	Clear Receive Overrun Interrupt Mask	*/
		uint32_t TUR:1;			/*!< bit	5	Clear Transmit Under-run Interrupt Mask	*/
		uint32_t TC:1;			/*!< bit	6	Clear Transmit Collision Interrupt Mask	*/
		uint32_t MF:1;			/*!< bit	7	Clear Mode Fault Interrupt Mask	*/
		uint32_t RS:1;			/*!< bit	8	Clear Receive Start Interrupt Mask	*/
		uint32_t TS:1;			/*!< bit	9	Clear Transmit Start Interrupt Mask	*/
		uint32_t RF:1;			/*!< bit	10	Clear Receive Finish Interrupt Mask	*/
		uint32_t TF:1;			/*!< bit	11	Clear Transmit Finish Interrupt Mask	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_IMSK_CLR_Type;
#define REG_SPI0_IMSK_CLR		(*(RwReg *)0x20055034UL)

#else
#define REG_SPI0_IMSK_CLR		(0x20055034) /**< \brief (SPI0) SPI0 Interrupt Mask Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_IMSK_SET : (32) SPI0 Interrupt Mask Set Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t RUWM:1;			/*!< bit	1	Set Receive Urgent Watermark Interrupt Mask	*/
		uint32_t TUWM:1;			/*!< bit	2	Set Transmit Urgent Watermark Interrupt Mask	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t ROR:1;			/*!< bit	4	Set Receive Overrun Interrupt Mask	*/
		uint32_t TUR:1;			/*!< bit	5	Set Transmit Under-run  Interrupt Mask	*/
		uint32_t TC:1;			/*!< bit	6	Set Transmit Collision Interrupt Mask	*/
		uint32_t MF:1;			/*!< bit	7	Set Mode Fault Interrupt Mask	*/
		uint32_t RS:1;			/*!< bit	8	Set Receive Start Interrupt Mask	*/
		uint32_t TS:1;			/*!< bit	9	Set Transmit Start Interrupt Mask	*/
		uint32_t RF:1;			/*!< bit	10	Set Receive Finish Interrupt Mask	*/
		uint32_t TF:1;			/*!< bit	11	Set Transmit Finish Interrupt Mask	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_IMSK_SET_Type;
#define REG_SPI0_IMSK_SET		(*(RwReg *)0x20055038UL)

#else
#define REG_SPI0_IMSK_SET		(0x20055038) /**< \brief (SPI0) SPI0 Interrupt Mask Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_STAT : (32) SPI0 Status Register ----- */
typedef union {
	struct {
		uint32_t SPIF:1;			/*!< bit	0	SPI Finished	*/
		uint32_t RUWM:1;			/*!< bit	1	Receive Urgent Watermark Breached	*/
		uint32_t TUWM:1;			/*!< bit	2	Transmit Urgent Watermark Breached	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t ROR:1;			/*!< bit	4	Receive Overrun Indication	*/
		uint32_t TUR:1;			/*!< bit	5	Transmit Underrun Indication	*/
		uint32_t TC:1;			/*!< bit	6	Transmit Collision Indication	*/
		uint32_t MF:1;			/*!< bit	7	Mode Fault Indication	*/
		uint32_t RS:1;			/*!< bit	8	Receive Start	*/
		uint32_t TS:1;			/*!< bit	9	Transmit Start	*/
		uint32_t RF:1;			/*!< bit	10	Receive Finish Indication	*/
		uint32_t TF:1;			/*!< bit	11	Transmit Finish Indication	*/
		uint32_t RFS:3;			/*!< bit	12..14	SPI_RFIFO Status	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t TFS:3;			/*!< bit	16..18	SPI_TFIFO Status	*/
		uint32_t :1;			/*!< bit	19	Reserved	*/
		uint32_t FCS:1;			/*!< bit	20	Flow Control Stall Indication	*/
		uint32_t :1;			/*!< bit	21	Reserved	*/
		uint32_t RFE:1;			/*!< bit	22	SPI_RFIFO Empty	*/
		uint32_t TFF:1;			/*!< bit	23	SPI_TFIFO Full	*/
		uint32_t :4;			/*!< bit	24..27	Reserved	*/
		uint32_t MMWE:1;			/*!< bit	28	Memory Mapped Write Error	*/
		uint32_t MMRE:1;			/*!< bit	29	Memory Mapped Read Error	*/
		uint32_t :1;			/*!< bit	30	Reserved	*/
		uint32_t MMAE:1;			/*!< bit	31	Memory Mapped Access Error	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_STAT_Type;
#define REG_SPI0_STAT		(*(RwReg *)0x20055040UL)

#else
#define REG_SPI0_STAT		(0x20055040) /**< \brief (SPI0) SPI0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_ILAT : (32) SPI0 Masked Interrupt Condition Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t RUWM:1;			/*!< bit	1	Receive Urgent Watermark Interrupt Latch	*/
		uint32_t TUWM:1;			/*!< bit	2	Transmit Urgent Watermark Interrupt Latch	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t ROR:1;			/*!< bit	4	Receive Overrun Interrupt Latch	*/
		uint32_t TUR:1;			/*!< bit	5	Transmit Under-run Interrupt Latch	*/
		uint32_t TC:1;			/*!< bit	6	Transmit Collision Interrupt Latch	*/
		uint32_t MF:1;			/*!< bit	7	Mode Fault Interrupt Latch	*/
		uint32_t RS:1;			/*!< bit	8	Receive Start Interrupt Latch	*/
		uint32_t TS:1;			/*!< bit	9	Transmit Start Interrupt Latch	*/
		uint32_t RF:1;			/*!< bit	10	Receive Finish Interrupt Latch	*/
		uint32_t TF:1;			/*!< bit	11	Transmit Finish Interrupt Latch	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_ILAT_Type;
#define REG_SPI0_ILAT		(*(RwReg *)0x20055044UL)

#else
#define REG_SPI0_ILAT		(0x20055044) /**< \brief (SPI0) SPI0 Masked Interrupt Condition Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_ILAT_CLR : (32) SPI0 Masked Interrupt Clear Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t RUWM:1;			/*!< bit	1	Clear Receive Urgent Watermark Interrupt Latch	*/
		uint32_t TUWM:1;			/*!< bit	2	Clear Transmit Urgent Watermark Interrupt Latch	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t ROR:1;			/*!< bit	4	Clear Receive Overrun Interrupt Latch	*/
		uint32_t TUR:1;			/*!< bit	5	Clear Transmit Under-run Interrupt Latch	*/
		uint32_t TC:1;			/*!< bit	6	Clear Transmit Collision Interrupt Latch	*/
		uint32_t MF:1;			/*!< bit	7	Clear Mode Fault Interrupt Latch	*/
		uint32_t RS:1;			/*!< bit	8	Clear Receive Start Interrupt Latch	*/
		uint32_t TS:1;			/*!< bit	9	Clear Transmit Start Interrupt Latch	*/
		uint32_t RF:1;			/*!< bit	10	Clear Receive Finish Interrupt Latch	*/
		uint32_t TF:1;			/*!< bit	11	Clear Transmit Finish Interrupt Latch	*/
		uint32_t :20;			/*!< bit	12..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_ILAT_CLR_Type;
#define REG_SPI0_ILAT_CLR		(*(RwReg *)0x20055048UL)

#else
#define REG_SPI0_ILAT_CLR		(0x20055048) /**< \brief (SPI0) SPI0 Masked Interrupt Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_RFIFO : (32) SPI0 Receive FIFO Data Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_RFIFO_Type;
#define REG_SPI0_RFIFO		(*(RwReg *)0x20055050UL)

#else
#define REG_SPI0_RFIFO		(0x20055050) /**< \brief (SPI0) SPI0 Receive FIFO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_TFIFO : (32) SPI0 Transmit FIFO Data Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_TFIFO_Type;
#define REG_SPI0_TFIFO		(*(RwReg *)0x20055058UL)

#else
#define REG_SPI0_TFIFO		(0x20055058) /**< \brief (SPI0) SPI0 Transmit FIFO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_MMRDH : (32) SPI0 Memory Mapped Read Header ----- */
typedef union {
	struct {
		uint32_t OPCODE:8;			/*!< bit	0..7	Read Opcode	*/
		uint32_t ADRSIZE:3;			/*!< bit	8..10	Bytes of Read Address	*/
		uint32_t ADRPINS:1;			/*!< bit	11	Pins Used for Address	*/
		uint32_t DMYSIZE:3;			/*!< bit	12..14	Bytes of Dummy/Mode	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t MODE:8;			/*!< bit	16..23	Mode Field	*/
		uint32_t TRIDMY:2;			/*!< bit	24..25	Tristate Dummy Timing	*/
		uint32_t MERGE:1;			/*!< bit	26	Merge Enable	*/
		uint32_t WRAP:1;			/*!< bit	27	SPI Memory Wrap Indicator	*/
		uint32_t CMDSKIP:1;			/*!< bit	28	Command Skip Enable	*/
		uint32_t CMDPINS:1;			/*!< bit	29	Pins Used for Command	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_MMRDH_Type;
#define REG_SPI0_MMRDH		(*(RwReg *)0x20055060UL)

#else
#define REG_SPI0_MMRDH		(0x20055060) /**< \brief (SPI0) SPI0 Memory Mapped Read Header */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPI_MMTOP : (32) SPI0 SPI Memory Top Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPI_MMTOP_Type;
#define REG_SPI0_MMTOP		(*(RwReg *)0x20055064UL)

#else
#define REG_SPI0_MMTOP		(0x20055064) /**< \brief (SPI0) SPI0 SPI Memory Top Address */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SPI_CTL_Type		CTL;		/**< \brief SPI0 Control Register */
	__IO SPI_RXCTL_Type		RXCTL;		/**< \brief SPI0 Receive Control Register */
	__IO SPI_TXCTL_Type		TXCTL;		/**< \brief SPI0 Transmit Control Register */
	__IO SPI_CLK_Type		CLK;		/**< \brief SPI0 Clock Rate Register */
	__IO SPI_DLY_Type		DLY;		/**< \brief SPI0 Delay Register */
	__IO SPI_SLVSEL_Type		SLVSEL;		/**< \brief SPI0 Slave Select Register */
	__IO SPI_RWC_Type		RWC;		/**< \brief SPI0 Received Word Count Register */
	__IO SPI_RWCR_Type		RWCR;		/**< \brief SPI0 Received Word Count Reload Register */
	__IO SPI_TWC_Type		TWC;		/**< \brief SPI0 Transmitted Word Count Register */
	__IO SPI_TWCR_Type		TWCR;		/**< \brief SPI0 Transmitted Word Count Reload Register */
		 RoReg8		Reserved1[0x04];		
	__IO SPI_IMSK_Type		IMSK;		/**< \brief SPI0 Interrupt Mask Register */
	__IO SPI_IMSK_CLR_Type		IMSK_CLR;		/**< \brief SPI0 Interrupt Mask Clear Register */
	__IO SPI_IMSK_SET_Type		IMSK_SET;		/**< \brief SPI0 Interrupt Mask Set Register */
		 RoReg8		Reserved2[0x04];		
	__IO SPI_STAT_Type		STAT;		/**< \brief SPI0 Status Register */
	__IO SPI_ILAT_Type		ILAT;		/**< \brief SPI0 Masked Interrupt Condition Register */
	__IO SPI_ILAT_CLR_Type		ILAT_CLR;		/**< \brief SPI0 Masked Interrupt Clear Register */
		 RoReg8		Reserved3[0x04];		
	__IO SPI_RFIFO_Type		RFIFO;		/**< \brief SPI0 Receive FIFO Data Register */
		 RoReg8		Reserved4[0x04];		
	__IO SPI_TFIFO_Type		TFIFO;		/**< \brief SPI0 Transmit FIFO Data Register */
		 RoReg8		Reserved5[0x04];		
	__IO SPI_MMRDH_Type		MMRDH;		/**< \brief SPI0 Memory Mapped Read Header */
	__IO SPI_MMTOP_Type		MMTOP;		/**< \brief SPI0 SPI Memory Top Address */
} Spigroup;
#endif
#if !(defined(__ASSEMBLY__))
#define REG_SPI1_CTL		(*(RwReg *)0x20056004UL)

#else
#define REG_SPI1_CTL		(0x20056004) /**< \brief (SPI1) SPI1 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_RXCTL		(*(RwReg *)0x20056008UL)

#else
#define REG_SPI1_RXCTL		(0x20056008) /**< \brief (SPI1) SPI1 Receive Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_TXCTL		(*(RwReg *)0x2005600CUL)

#else
#define REG_SPI1_TXCTL		(0x2005600C) /**< \brief (SPI1) SPI1 Transmit Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_CLK		(*(RwReg *)0x20056010UL)

#else
#define REG_SPI1_CLK		(0x20056010) /**< \brief (SPI1) SPI1 Clock Rate Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_DLY		(*(RwReg *)0x20056014UL)

#else
#define REG_SPI1_DLY		(0x20056014) /**< \brief (SPI1) SPI1 Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_SLVSEL		(*(RwReg *)0x20056018UL)

#else
#define REG_SPI1_SLVSEL		(0x20056018) /**< \brief (SPI1) SPI1 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_RWC		(*(RwReg *)0x2005601CUL)

#else
#define REG_SPI1_RWC		(0x2005601C) /**< \brief (SPI1) SPI1 Received Word Count Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_RWCR		(*(RwReg *)0x20056020UL)

#else
#define REG_SPI1_RWCR		(0x20056020) /**< \brief (SPI1) SPI1 Received Word Count Reload Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_TWC		(*(RwReg *)0x20056024UL)

#else
#define REG_SPI1_TWC		(0x20056024) /**< \brief (SPI1) SPI1 Transmitted Word Count Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_TWCR		(*(RwReg *)0x20056028UL)

#else
#define REG_SPI1_TWCR		(0x20056028) /**< \brief (SPI1) SPI1 Transmitted Word Count Reload Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_IMSK		(*(RwReg *)0x20056030UL)

#else
#define REG_SPI1_IMSK		(0x20056030) /**< \brief (SPI1) SPI1 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_IMSK_CLR		(*(RwReg *)0x20056034UL)

#else
#define REG_SPI1_IMSK_CLR		(0x20056034) /**< \brief (SPI1) SPI1 Interrupt Mask Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_IMSK_SET		(*(RwReg *)0x20056038UL)

#else
#define REG_SPI1_IMSK_SET		(0x20056038) /**< \brief (SPI1) SPI1 Interrupt Mask Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_STAT		(*(RwReg *)0x20056040UL)

#else
#define REG_SPI1_STAT		(0x20056040) /**< \brief (SPI1) SPI1 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_ILAT		(*(RwReg *)0x20056044UL)

#else
#define REG_SPI1_ILAT		(0x20056044) /**< \brief (SPI1) SPI1 Masked Interrupt Condition Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_ILAT_CLR		(*(RwReg *)0x20056048UL)

#else
#define REG_SPI1_ILAT_CLR		(0x20056048) /**< \brief (SPI1) SPI1 Masked Interrupt Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_RFIFO		(*(RwReg *)0x20056050UL)

#else
#define REG_SPI1_RFIFO		(0x20056050) /**< \brief (SPI1) SPI1 Receive FIFO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_TFIFO		(*(RwReg *)0x20056058UL)

#else
#define REG_SPI1_TFIFO		(0x20056058) /**< \brief (SPI1) SPI1 Transmit FIFO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_MMRDH		(*(RwReg *)0x20056060UL)

#else
#define REG_SPI1_MMRDH		(0x20056060) /**< \brief (SPI1) SPI1 Memory Mapped Read Header */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI1_MMTOP		(*(RwReg *)0x20056064UL)

#else
#define REG_SPI1_MMTOP		(0x20056064) /**< \brief (SPI1) SPI1 SPI Memory Top Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_CTL		(*(RwReg *)0x20057004UL)

#else
#define REG_SPI2_CTL		(0x20057004) /**< \brief (SPI2) SPI2 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_RXCTL		(*(RwReg *)0x20057008UL)

#else
#define REG_SPI2_RXCTL		(0x20057008) /**< \brief (SPI2) SPI2 Receive Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_TXCTL		(*(RwReg *)0x2005700CUL)

#else
#define REG_SPI2_TXCTL		(0x2005700C) /**< \brief (SPI2) SPI2 Transmit Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_CLK		(*(RwReg *)0x20057010UL)

#else
#define REG_SPI2_CLK		(0x20057010) /**< \brief (SPI2) SPI2 Clock Rate Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_DLY		(*(RwReg *)0x20057014UL)

#else
#define REG_SPI2_DLY		(0x20057014) /**< \brief (SPI2) SPI2 Delay Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_SLVSEL		(*(RwReg *)0x20057018UL)

#else
#define REG_SPI2_SLVSEL		(0x20057018) /**< \brief (SPI2) SPI2 Slave Select Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_RWC		(*(RwReg *)0x2005701CUL)

#else
#define REG_SPI2_RWC		(0x2005701C) /**< \brief (SPI2) SPI2 Received Word Count Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_RWCR		(*(RwReg *)0x20057020UL)

#else
#define REG_SPI2_RWCR		(0x20057020) /**< \brief (SPI2) SPI2 Received Word Count Reload Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_TWC		(*(RwReg *)0x20057024UL)

#else
#define REG_SPI2_TWC		(0x20057024) /**< \brief (SPI2) SPI2 Transmitted Word Count Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_TWCR		(*(RwReg *)0x20057028UL)

#else
#define REG_SPI2_TWCR		(0x20057028) /**< \brief (SPI2) SPI2 Transmitted Word Count Reload Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_IMSK		(*(RwReg *)0x20057030UL)

#else
#define REG_SPI2_IMSK		(0x20057030) /**< \brief (SPI2) SPI2 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_IMSK_CLR		(*(RwReg *)0x20057034UL)

#else
#define REG_SPI2_IMSK_CLR		(0x20057034) /**< \brief (SPI2) SPI2 Interrupt Mask Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_IMSK_SET		(*(RwReg *)0x20057038UL)

#else
#define REG_SPI2_IMSK_SET		(0x20057038) /**< \brief (SPI2) SPI2 Interrupt Mask Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_STAT		(*(RwReg *)0x20057040UL)

#else
#define REG_SPI2_STAT		(0x20057040) /**< \brief (SPI2) SPI2 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_ILAT		(*(RwReg *)0x20057044UL)

#else
#define REG_SPI2_ILAT		(0x20057044) /**< \brief (SPI2) SPI2 Masked Interrupt Condition Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_ILAT_CLR		(*(RwReg *)0x20057048UL)

#else
#define REG_SPI2_ILAT_CLR		(0x20057048) /**< \brief (SPI2) SPI2 Masked Interrupt Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_RFIFO		(*(RwReg *)0x20057050UL)

#else
#define REG_SPI2_RFIFO		(0x20057050) /**< \brief (SPI2) SPI2 Receive FIFO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_TFIFO		(*(RwReg *)0x20057058UL)

#else
#define REG_SPI2_TFIFO		(0x20057058) /**< \brief (SPI2) SPI2 Transmit FIFO Data Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_MMRDH		(*(RwReg *)0x20057060UL)

#else
#define REG_SPI2_MMRDH		(0x20057060) /**< \brief (SPI2) SPI2 Memory Mapped Read Header */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_SPI2_MMTOP		(*(RwReg *)0x20057064UL)

#else
#define REG_SPI2_MMTOP		(0x20057064) /**< \brief (SPI2) SPI2 SPI Memory Top Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_CTL : (32) SPIHP0 Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable	*/
		uint32_t FSRST:1;			/*!< bit	1	FIFO and Status Reset	*/
		uint32_t MSIZE:2;			/*!< bit	2..3	Memory Size	*/
		uint32_t BARSEL:4;			/*!< bit	4..7	BAR Select	*/
		uint32_t SPRDEN:1;			/*!< bit	8	Speculative Read Enable	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t RDYM:2;			/*!< bit	12..13	RDY Mode	*/
		uint32_t TRGM:2;			/*!< bit	14..15	TRG Mode	*/
		uint32_t OVFM:1;			/*!< bit	16	Overflow Mask	*/
		uint32_t UVFM:1;			/*!< bit	17	Underflow Mask	*/
		uint32_t UOPM:1;			/*!< bit	18	Unsupported Opcode Mask	*/
		uint32_t BERRM:1;			/*!< bit	19	Bus Error Mask	*/
		uint32_t BWCTL:4;			/*!< bit	20..23	Bandwidth Control	*/
		uint32_t SPISEL:4;			/*!< bit	24..27	SPI Select	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_CTL_Type;
#define REG_SPIHP0_CTL		(*(RwReg *)0x20058000UL)

#else
#define REG_SPIHP0_CTL		(0x20058000) /**< \brief (SPIHP0) SPIHP0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_STAT : (32) SPIHP0 Status Register ----- */
typedef union {
	struct {
		uint32_t RDY:1;			/*!< bit	0	Ready	*/
		uint32_t RDYSTKY:1;			/*!< bit	1	Ready Sticky	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t OVF:1;			/*!< bit	4	Overflow	*/
		uint32_t UVF:1;			/*!< bit	5	Underflow	*/
		uint32_t UOP:1;			/*!< bit	6	Unsupported Opcode	*/
		uint32_t BERR:1;			/*!< bit	7	Bus Error	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_STAT_Type;
#define REG_SPIHP0_STAT		(*(RwReg *)0x20058004UL)

#else
#define REG_SPIHP0_STAT		(0x20058004) /**< \brief (SPIHP0) SPIHP0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_RDPF : (32) SPIHP0 Read Prefetch Register ----- */
typedef union {
	struct {
		uint32_t ADDR:24;			/*!< bit	0..23	Address	*/
		uint32_t CNT:8;			/*!< bit	24..31	Count	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_RDPF_Type;
#define REG_SPIHP0_RDPF		(*(RwReg *)0x20058008UL)

#else
#define REG_SPIHP0_RDPF		(0x20058008) /**< \brief (SPIHP0) SPIHP0 Read Prefetch Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR0 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR0_Type;
#define REG_SPIHP0_BAR0		(*(RwReg *)0x20058010UL)

#else
#define REG_SPIHP0_BAR0		(0x20058010) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR1 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR1_Type;
#define REG_SPIHP0_BAR1		(*(RwReg *)0x20058014UL)

#else
#define REG_SPIHP0_BAR1		(0x20058014) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR2 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR2_Type;
#define REG_SPIHP0_BAR2		(*(RwReg *)0x20058018UL)

#else
#define REG_SPIHP0_BAR2		(0x20058018) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR3 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR3_Type;
#define REG_SPIHP0_BAR3		(*(RwReg *)0x2005801CUL)

#else
#define REG_SPIHP0_BAR3		(0x2005801C) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR4 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR4_Type;
#define REG_SPIHP0_BAR4		(*(RwReg *)0x20058020UL)

#else
#define REG_SPIHP0_BAR4		(0x20058020) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR5 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR5_Type;
#define REG_SPIHP0_BAR5		(*(RwReg *)0x20058024UL)

#else
#define REG_SPIHP0_BAR5		(0x20058024) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR6 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR6_Type;
#define REG_SPIHP0_BAR6		(*(RwReg *)0x20058028UL)

#else
#define REG_SPIHP0_BAR6		(0x20058028) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR7 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR7_Type;
#define REG_SPIHP0_BAR7		(*(RwReg *)0x2005802CUL)

#else
#define REG_SPIHP0_BAR7		(0x2005802C) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR8 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR8_Type;
#define REG_SPIHP0_BAR8		(*(RwReg *)0x20058030UL)

#else
#define REG_SPIHP0_BAR8		(0x20058030) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR9 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR9_Type;
#define REG_SPIHP0_BAR9		(*(RwReg *)0x20058034UL)

#else
#define REG_SPIHP0_BAR9		(0x20058034) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR10 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR10_Type;
#define REG_SPIHP0_BAR10		(*(RwReg *)0x20058038UL)

#else
#define REG_SPIHP0_BAR10		(0x20058038) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR11 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR11_Type;
#define REG_SPIHP0_BAR11		(*(RwReg *)0x2005803CUL)

#else
#define REG_SPIHP0_BAR11		(0x2005803C) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR12 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR12_Type;
#define REG_SPIHP0_BAR12		(*(RwReg *)0x20058040UL)

#else
#define REG_SPIHP0_BAR12		(0x20058040) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR13 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR13_Type;
#define REG_SPIHP0_BAR13		(*(RwReg *)0x20058044UL)

#else
#define REG_SPIHP0_BAR13		(0x20058044) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR14 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR14_Type;
#define REG_SPIHP0_BAR14		(*(RwReg *)0x20058048UL)

#else
#define REG_SPIHP0_BAR14		(0x20058048) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_BAR15 : (32) SPIHP0 Base Address Register ----- */
typedef union {
	struct {
		uint32_t BAO:8;			/*!< bit	0..7	Base Address Offset	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_BAR15_Type;
#define REG_SPIHP0_BAR15		(*(RwReg *)0x2005804CUL)

#else
#define REG_SPIHP0_BAR15		(0x2005804C) /**< \brief (SPIHP0) SPIHP0 Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_AUX0 : (32) SPIHP0 Auxiliary Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_AUX0_Type;
#define REG_SPIHP0_AUX0		(*(RwReg *)0x20058050UL)

#else
#define REG_SPIHP0_AUX0		(0x20058050) /**< \brief (SPIHP0) SPIHP0 Auxiliary Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_AUX1 : (32) SPIHP0 Auxiliary Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_AUX1_Type;
#define REG_SPIHP0_AUX1		(*(RwReg *)0x20058054UL)

#else
#define REG_SPIHP0_AUX1		(0x20058054) /**< \brief (SPIHP0) SPIHP0 Auxiliary Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_AUX2 : (32) SPIHP0 Auxiliary Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_AUX2_Type;
#define REG_SPIHP0_AUX2		(*(RwReg *)0x20058058UL)

#else
#define REG_SPIHP0_AUX2		(0x20058058) /**< \brief (SPIHP0) SPIHP0 Auxiliary Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SPIHP0_AUX3 : (32) SPIHP0 Auxiliary Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SPIHP0_AUX3_Type;
#define REG_SPIHP0_AUX3		(*(RwReg *)0x2005805CUL)

#else
#define REG_SPIHP0_AUX3		(0x2005805C) /**< \brief (SPIHP0) SPIHP0 Auxiliary Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SPIHP0_CTL_Type		CTL;		/**< \brief SPIHP0 Control Register */
	__IO SPIHP0_STAT_Type		STAT;		/**< \brief SPIHP0 Status Register */
	__IO SPIHP0_RDPF_Type		RDPF;		/**< \brief SPIHP0 Read Prefetch Register */
		 RoReg8		Reserved1[0x04];		
	__IO SPIHP0_BAR0_Type		BAR0;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR1_Type		BAR1;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR2_Type		BAR2;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR3_Type		BAR3;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR4_Type		BAR4;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR5_Type		BAR5;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR6_Type		BAR6;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR7_Type		BAR7;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR8_Type		BAR8;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR9_Type		BAR9;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR10_Type		BAR10;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR11_Type		BAR11;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR12_Type		BAR12;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR13_Type		BAR13;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR14_Type		BAR14;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_BAR15_Type		BAR15;		/**< \brief SPIHP0 Base Address Register */
	__IO SPIHP0_AUX0_Type		AUX0;		/**< \brief SPIHP0 Auxiliary Register */
	__IO SPIHP0_AUX1_Type		AUX1;		/**< \brief SPIHP0 Auxiliary Register */
	__IO SPIHP0_AUX2_Type		AUX2;		/**< \brief SPIHP0 Auxiliary Register */
	__IO SPIHP0_AUX3_Type		AUX3;		/**< \brief SPIHP0 Auxiliary Register */
} Spihp0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B0CTL : (32) SMC0 Bank 0 Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Bank 0 Enable	*/
		uint32_t :3;			/*!< bit	1..3	Reserved	*/
		uint32_t MODE:2;			/*!< bit	4..5	Memory Access Mode	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t SELCTRL:2;			/*!< bit	8..9	Select Control	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t RDYEN:1;			/*!< bit	12	ARDY Enable	*/
		uint32_t RDYPOL:1;			/*!< bit	13	ARDY Polarity	*/
		uint32_t RDYABTEN:1;			/*!< bit	14	ARDY Abort Enable	*/
		uint32_t :5;			/*!< bit	15..19	Reserved	*/
		uint32_t PGSZ:2;			/*!< bit	20..21	Flash Page Size	*/
		uint32_t :10;			/*!< bit	22..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B0CTL_Type;
#define REG_SMC0_B0CTL		(*(RwReg *)0x2005D00CUL)

#else
#define REG_SMC0_B0CTL		(0x2005D00C) /**< \brief (SMC0) SMC0 Bank 0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B0TIM : (32) SMC0 Bank 0 Timing Register ----- */
typedef union {
	struct {
		uint32_t WST:3;			/*!< bit	0..2	Write Setup Time	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t WHT:3;			/*!< bit	4..6	Write Hold Time	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t WAT:6;			/*!< bit	8..13	Write Access Time	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t RST:3;			/*!< bit	16..18	Read Setup Time	*/
		uint32_t :1;			/*!< bit	19	Reserved	*/
		uint32_t RHT:3;			/*!< bit	20..22	Read Hold Time	*/
		uint32_t :1;			/*!< bit	23	Reserved	*/
		uint32_t RAT:6;			/*!< bit	24..29	Read Access Time	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B0TIM_Type;
#define REG_SMC0_B0TIM		(*(RwReg *)0x2005D010UL)

#else
#define REG_SMC0_B0TIM		(0x2005D010) /**< \brief (SMC0) SMC0 Bank 0 Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B0ETIM : (32) SMC0 Bank 0 Extended Timing Register ----- */
typedef union {
	struct {
		uint32_t PREST:2;			/*!< bit	0..1	Pre Setup Time	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t PREAT:2;			/*!< bit	4..5	Pre Access Time	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t TT:3;			/*!< bit	8..10	Transition Time	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t IT:3;			/*!< bit	12..14	Idle Time	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PGWS:4;			/*!< bit	16..19	Page Wait States	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B0ETIM_Type;
#define REG_SMC0_B0ETIM		(*(RwReg *)0x2005D014UL)

#else
#define REG_SMC0_B0ETIM		(0x2005D014) /**< \brief (SMC0) SMC0 Bank 0 Extended Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B1CTL : (32) SMC0 Bank 1 Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Bank 1 Enable	*/
		uint32_t :3;			/*!< bit	1..3	Reserved	*/
		uint32_t MODE:2;			/*!< bit	4..5	Memory Access Mode	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t SELCTRL:2;			/*!< bit	8..9	Select Control	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t RDYEN:1;			/*!< bit	12	ARDY Enable	*/
		uint32_t RDYPOL:1;			/*!< bit	13	ARDY Polarity	*/
		uint32_t RDYABTEN:1;			/*!< bit	14	ARDY Abort Enable	*/
		uint32_t :5;			/*!< bit	15..19	Reserved	*/
		uint32_t PGSZ:2;			/*!< bit	20..21	Flash Page Size	*/
		uint32_t :10;			/*!< bit	22..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B1CTL_Type;
#define REG_SMC0_B1CTL		(*(RwReg *)0x2005D01CUL)

#else
#define REG_SMC0_B1CTL		(0x2005D01C) /**< \brief (SMC0) SMC0 Bank 1 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B1TIM : (32) SMC0 Bank 1 Timing Register ----- */
typedef union {
	struct {
		uint32_t WST:3;			/*!< bit	0..2	Write Setup Time	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t WHT:3;			/*!< bit	4..6	Write Hold Time	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t WAT:6;			/*!< bit	8..13	Write Access Time	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t RST:3;			/*!< bit	16..18	Read Setup Time	*/
		uint32_t :1;			/*!< bit	19	Reserved	*/
		uint32_t RHT:3;			/*!< bit	20..22	Read Hold Time	*/
		uint32_t :1;			/*!< bit	23	Reserved	*/
		uint32_t RAT:6;			/*!< bit	24..29	Read Access Time	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B1TIM_Type;
#define REG_SMC0_B1TIM		(*(RwReg *)0x2005D020UL)

#else
#define REG_SMC0_B1TIM		(0x2005D020) /**< \brief (SMC0) SMC0 Bank 1 Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B1ETIM : (32) SMC0 Bank 1 Extended Timing Register ----- */
typedef union {
	struct {
		uint32_t PREST:2;			/*!< bit	0..1	Pre Setup Time	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t PREAT:2;			/*!< bit	4..5	Pre Access Time	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t TT:3;			/*!< bit	8..10	Transition Time	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t IT:3;			/*!< bit	12..14	Idle Time	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PGWS:4;			/*!< bit	16..19	Page Wait States	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B1ETIM_Type;
#define REG_SMC0_B1ETIM		(*(RwReg *)0x2005D024UL)

#else
#define REG_SMC0_B1ETIM		(0x2005D024) /**< \brief (SMC0) SMC0 Bank 1 Extended Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B2CTL : (32) SMC0 Bank 2 Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Bank 2 Enable	*/
		uint32_t :3;			/*!< bit	1..3	Reserved	*/
		uint32_t MODE:2;			/*!< bit	4..5	Memory Access Mode	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t SELCTRL:2;			/*!< bit	8..9	Select Control	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t RDYEN:1;			/*!< bit	12	ARDY Enable	*/
		uint32_t RDYPOL:1;			/*!< bit	13	ARDY Polarity	*/
		uint32_t RDYABTEN:1;			/*!< bit	14	ARDY Abort Enable	*/
		uint32_t :5;			/*!< bit	15..19	Reserved	*/
		uint32_t PGSZ:2;			/*!< bit	20..21	Flash Page Size	*/
		uint32_t :10;			/*!< bit	22..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B2CTL_Type;
#define REG_SMC0_B2CTL		(*(RwReg *)0x2005D02CUL)

#else
#define REG_SMC0_B2CTL		(0x2005D02C) /**< \brief (SMC0) SMC0 Bank 2 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B2TIM : (32) SMC0 Bank 2 Timing Register ----- */
typedef union {
	struct {
		uint32_t WST:3;			/*!< bit	0..2	Write Setup Time	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t WHT:3;			/*!< bit	4..6	Write Hold Time	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t WAT:6;			/*!< bit	8..13	Write Access Time	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t RST:3;			/*!< bit	16..18	Read Setup Time	*/
		uint32_t :1;			/*!< bit	19	Reserved	*/
		uint32_t RHT:3;			/*!< bit	20..22	Read Hold Time	*/
		uint32_t :1;			/*!< bit	23	Reserved	*/
		uint32_t RAT:6;			/*!< bit	24..29	Read Access Time	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B2TIM_Type;
#define REG_SMC0_B2TIM		(*(RwReg *)0x2005D030UL)

#else
#define REG_SMC0_B2TIM		(0x2005D030) /**< \brief (SMC0) SMC0 Bank 2 Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B2ETIM : (32) SMC0 Bank 2 Extended Timing Register ----- */
typedef union {
	struct {
		uint32_t PREST:2;			/*!< bit	0..1	Pre Setup Time	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t PREAT:2;			/*!< bit	4..5	Pre Access Time	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t TT:3;			/*!< bit	8..10	Transition Time	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t IT:3;			/*!< bit	12..14	Idle Time	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PGWS:4;			/*!< bit	16..19	Page Wait States	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B2ETIM_Type;
#define REG_SMC0_B2ETIM		(*(RwReg *)0x2005D034UL)

#else
#define REG_SMC0_B2ETIM		(0x2005D034) /**< \brief (SMC0) SMC0 Bank 2 Extended Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B3CTL : (32) SMC0 Bank 3 Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Bank 3 Enable	*/
		uint32_t :3;			/*!< bit	1..3	Reserved	*/
		uint32_t MODE:2;			/*!< bit	4..5	Memory Access Mode	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t SELCTRL:2;			/*!< bit	8..9	Select Control	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t RDYEN:1;			/*!< bit	12	ARDY Enable	*/
		uint32_t RDYPOL:1;			/*!< bit	13	ARDY Polarity	*/
		uint32_t RDYABTEN:1;			/*!< bit	14	ARDY Abort Enable	*/
		uint32_t :5;			/*!< bit	15..19	Reserved	*/
		uint32_t PGSZ:2;			/*!< bit	20..21	Flash Page Size	*/
		uint32_t :10;			/*!< bit	22..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B3CTL_Type;
#define REG_SMC0_B3CTL		(*(RwReg *)0x2005D03CUL)

#else
#define REG_SMC0_B3CTL		(0x2005D03C) /**< \brief (SMC0) SMC0 Bank 3 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B3TIM : (32) SMC0 Bank 3 Timing Register ----- */
typedef union {
	struct {
		uint32_t WST:3;			/*!< bit	0..2	Write Setup Time	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t WHT:3;			/*!< bit	4..6	Write Hold Time	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t WAT:6;			/*!< bit	8..13	Write Access Time	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t RST:3;			/*!< bit	16..18	Read Setup Time	*/
		uint32_t :1;			/*!< bit	19	Reserved	*/
		uint32_t RHT:3;			/*!< bit	20..22	Read Hold Time	*/
		uint32_t :1;			/*!< bit	23	Reserved	*/
		uint32_t RAT:6;			/*!< bit	24..29	Read Access Time	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B3TIM_Type;
#define REG_SMC0_B3TIM		(*(RwReg *)0x2005D040UL)

#else
#define REG_SMC0_B3TIM		(0x2005D040) /**< \brief (SMC0) SMC0 Bank 3 Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SMC0_B3ETIM : (32) SMC0 Bank 3 Extended Timing Register ----- */
typedef union {
	struct {
		uint32_t PREST:2;			/*!< bit	0..1	Pre Setup Time	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t PREAT:2;			/*!< bit	4..5	Pre Access Time	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t TT:3;			/*!< bit	8..10	Transition Time	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t IT:3;			/*!< bit	12..14	Idle Time	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
		uint32_t PGWS:4;			/*!< bit	16..19	Page Wait States	*/
		uint32_t :12;			/*!< bit	20..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SMC0_B3ETIM_Type;
#define REG_SMC0_B3ETIM		(*(RwReg *)0x2005D044UL)

#else
#define REG_SMC0_B3ETIM		(0x2005D044) /**< \brief (SMC0) SMC0 Bank 3 Extended Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SMC0_B0CTL_Type		B0CTL;		/**< \brief SMC0 Bank 0 Control Register */
	__IO SMC0_B0TIM_Type		B0TIM;		/**< \brief SMC0 Bank 0 Timing Register */
	__IO SMC0_B0ETIM_Type		B0ETIM;		/**< \brief SMC0 Bank 0 Extended Timing Register */
		 RoReg8		Reserved1[0x04];		
	__IO SMC0_B1CTL_Type		B1CTL;		/**< \brief SMC0 Bank 1 Control Register */
	__IO SMC0_B1TIM_Type		B1TIM;		/**< \brief SMC0 Bank 1 Timing Register */
	__IO SMC0_B1ETIM_Type		B1ETIM;		/**< \brief SMC0 Bank 1 Extended Timing Register */
		 RoReg8		Reserved2[0x04];		
	__IO SMC0_B2CTL_Type		B2CTL;		/**< \brief SMC0 Bank 2 Control Register */
	__IO SMC0_B2TIM_Type		B2TIM;		/**< \brief SMC0 Bank 2 Timing Register */
	__IO SMC0_B2ETIM_Type		B2ETIM;		/**< \brief SMC0 Bank 2 Extended Timing Register */
		 RoReg8		Reserved3[0x04];		
	__IO SMC0_B3CTL_Type		B3CTL;		/**< \brief SMC0 Bank 3 Control Register */
	__IO SMC0_B3TIM_Type		B3TIM;		/**< \brief SMC0 Bank 3 Timing Register */
	__IO SMC0_B3ETIM_Type		B3ETIM;		/**< \brief SMC0 Bank 3 Extended Timing Register */
} Smc0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- UART_CTL : (32) UART0 Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Enable UART	*/
		uint32_t LOOP_EN:1;			/*!< bit	1	Loopback Enable	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t MOD:2;			/*!< bit	4..5	Mode of Operation	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t WLS:2;			/*!< bit	8..9	Word Length Select	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t STB:1;			/*!< bit	12	Stop Bits	*/
		uint32_t STBH:1;			/*!< bit	13	Stop Bits (Half Bit Time)	*/
		uint32_t PEN:1;			/*!< bit	14	Parity Enable	*/
		uint32_t EPS:1;			/*!< bit	15	Even Parity Select	*/
		uint32_t STP:1;			/*!< bit	16	Sticky Parity	*/
		uint32_t FPE:1;			/*!< bit	17	Force Parity Error on Transmit	*/
		uint32_t FFE:1;			/*!< bit	18	Force Framing Error on Transmit	*/
		uint32_t SB:1;			/*!< bit	19	Set Break	*/
		uint32_t :2;			/*!< bit	20..21	Reserved	*/
		uint32_t FCPOL:1;			/*!< bit	22	Flow Control Pin Polarity	*/
		uint32_t RPOLC:1;			/*!< bit	23	IrDA RX Polarity Change	*/
		uint32_t TPOLC:1;			/*!< bit	24	IrDA TX Polarity Change	*/
		uint32_t MRTS:1;			/*!< bit	25	Manual Request to Send	*/
		uint32_t XOFF:1;			/*!< bit	26	Transmitter off	*/
		uint32_t ARTS:1;			/*!< bit	27	Automatic RTS	*/
		uint32_t ACTS:1;			/*!< bit	28	Automatic CTS	*/
		uint32_t RFIT:1;			/*!< bit	29	Receive FIFO IRQ Threshold	*/
		uint32_t RFRT:1;			/*!< bit	30	Receive FIFO RTS Threshold	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_CTL_Type;
#define REG_UART0_CTL		(*(RwReg *)0x2005F004UL)

#else
#define REG_UART0_CTL		(0x2005F004) /**< \brief (UART0) UART0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_STAT : (32) UART0 Status Register ----- */
typedef union {
	struct {
		uint32_t DR:1;			/*!< bit	0	Data Ready	*/
		uint32_t OE:1;			/*!< bit	1	Overrun Error	*/
		uint32_t PE:1;			/*!< bit	2	Parity Error	*/
		uint32_t FE:1;			/*!< bit	3	Framing Error	*/
		uint32_t BI:1;			/*!< bit	4	Break Indicator	*/
		uint32_t THRE:1;			/*!< bit	5	Transmit Hold Register Empty	*/
		uint32_t :1;			/*!< bit	6	Reserved	*/
		uint32_t TEMT:1;			/*!< bit	7	TSR and THR Empty	*/
		uint32_t TFI:1;			/*!< bit	8	Transmission Finished Indicator	*/
		uint32_t ASTKY:1;			/*!< bit	9	Address Sticky	*/
		uint32_t ADDR:1;			/*!< bit	10	Address Bit Status	*/
		uint32_t RO:1;			/*!< bit	11	Reception On-going	*/
		uint32_t SCTS:1;			/*!< bit	12	Sticky CTS	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
		uint32_t CTS:1;			/*!< bit	16	Clear to Send	*/
		uint32_t RFCS:1;			/*!< bit	17	Receive FIFO Count Status	*/
		uint32_t :14;			/*!< bit	18..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_STAT_Type;
#define REG_UART0_STAT		(*(RwReg *)0x2005F008UL)

#else
#define REG_UART0_STAT		(0x2005F008) /**< \brief (UART0) UART0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_SCR : (32) UART0 Scratch Register ----- */
typedef union {
	struct {
		uint32_t VALUE:8;			/*!< bit	0..7	Stored 8-bit Data	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_SCR_Type;
#define REG_UART0_SCR		(*(RwReg *)0x2005F00CUL)

#else
#define REG_UART0_SCR		(0x2005F00C) /**< \brief (UART0) UART0 Scratch Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_CLK : (32) UART0 Clock Rate Register ----- */
typedef union {
	struct {
		uint32_t DIV:16;			/*!< bit	0..15	Divisor	*/
		uint32_t :15;			/*!< bit	16..30	Reserved	*/
		uint32_t EDBO:1;			/*!< bit	31	Enable Divide By One	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_CLK_Type;
#define REG_UART0_CLK		(*(RwReg *)0x2005F010UL)

#else
#define REG_UART0_CLK		(0x2005F010) /**< \brief (UART0) UART0 Clock Rate Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_IMSK : (32) UART0 Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t ERBFI:1;			/*!< bit	0	Enable Receive Buffer Full Interrupt Mask Status	*/
		uint32_t ETBEI:1;			/*!< bit	1	Enable Transmit Buffer Empty Interrupt Mask Status	*/
		uint32_t ELSI:1;			/*!< bit	2	Enable Line Status Interrupt Mask Status	*/
		uint32_t EDSSI:1;			/*!< bit	3	Enable Modem Status Interrupt Mask Status	*/
		uint32_t EDTPTI:1;			/*!< bit	4	Enable DMA TX Peripheral Trigerred Interrupt Mask Status	*/
		uint32_t ETFI:1;			/*!< bit	5	Enable Transmission Finished Interrupt Mask Status	*/
		uint32_t ERFCI:1;			/*!< bit	6	Enable Receive FIFO Count Interrupt Mask Status	*/
		uint32_t EAWI:1;			/*!< bit	7	Enable Address Word Interrupt Mask Status	*/
		uint32_t ERXS:1;			/*!< bit	8	Enable RX to Status Interrupt Mask Status	*/
		uint32_t ETXS:1;			/*!< bit	9	Enable TX to Status Interrupt Mask Status	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_IMSK_Type;
#define REG_UART0_IMSK		(*(RwReg *)0x2005F014UL)

#else
#define REG_UART0_IMSK		(0x2005F014) /**< \brief (UART0) UART0 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_IMSK_SET : (32) UART0 Interrupt Mask Set Register ----- */
typedef union {
	struct {
		uint32_t ERBFI:1;			/*!< bit	0	Enable Receive Buffer Full Interrupt Mask Set	*/
		uint32_t ETBEI:1;			/*!< bit	1	Enable Transmit Buffer Empty Interrupt Mask Set	*/
		uint32_t ELSI:1;			/*!< bit	2	Enable Line Status Interrupt Mask Set	*/
		uint32_t EDSSI:1;			/*!< bit	3	Enable Modem Status Interrupt Mask Set	*/
		uint32_t EDTPTI:1;			/*!< bit	4	Enable DMA TX Peripheral Triggered Interrupt Mask Set	*/
		uint32_t ETFI:1;			/*!< bit	5	Enable Transmission Finished Interrupt Mask Set	*/
		uint32_t ERFCI:1;			/*!< bit	6	Enable Receive FIFO Count Interrupt Mask Set	*/
		uint32_t EAWI:1;			/*!< bit	7	Enable Address Word Interrupt Mask Set	*/
		uint32_t ERXS:1;			/*!< bit	8	Enable RX to Status Interrupt Mask Set	*/
		uint32_t ETXS:1;			/*!< bit	9	Enable TX to Status Interrupt Mask Set	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_IMSK_SET_Type;
#define REG_UART0_IMSK_SET		(*(RwReg *)0x2005F018UL)

#else
#define REG_UART0_IMSK_SET		(0x2005F018) /**< \brief (UART0) UART0 Interrupt Mask Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_IMSK_CLR : (32) UART0 Interrupt Mask Clear Register ----- */
typedef union {
	struct {
		uint32_t ERBFI:1;			/*!< bit	0	Enable Receive Buffer Full Interrupt Mask Clear	*/
		uint32_t ETBEI:1;			/*!< bit	1	Enable Transmit Buffer Empty Interrupt Mask Clear	*/
		uint32_t ELSI:1;			/*!< bit	2	Enable Line Status Interrupt Mask Clear	*/
		uint32_t EDSSI:1;			/*!< bit	3	Enable Modem Status Interrupt Mask Clear	*/
		uint32_t EDTPTI:1;			/*!< bit	4	Enable DMA TX Peripheral Triggered Interrupt Mask Clear	*/
		uint32_t ETFI:1;			/*!< bit	5	Enable Transmission Finished Interrupt Mask Clear	*/
		uint32_t ERFCI:1;			/*!< bit	6	Enable Receive FIFO Count Interrupt Mask Clear	*/
		uint32_t EAWI:1;			/*!< bit	7	Enable Address Word Interrupt Mask Clear	*/
		uint32_t ERXS:1;			/*!< bit	8	Enable RX to Status Interrupt Mask Clear	*/
		uint32_t ETXS:1;			/*!< bit	9	Enable TX to Status Interrupt Mask Clear	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_IMSK_CLR_Type;
#define REG_UART0_IMSK_CLR		(*(RwReg *)0x2005F01CUL)

#else
#define REG_UART0_IMSK_CLR		(0x2005F01C) /**< \brief (UART0) UART0 Interrupt Mask Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_RBR : (32) UART0 Receive Buffer Register ----- */
typedef union {
	struct {
		uint32_t VALUE:8;			/*!< bit	0..7	8-bit data	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_RBR_Type;
#define REG_UART0_RBR		(*(RwReg *)0x2005F020UL)

#else
#define REG_UART0_RBR		(0x2005F020) /**< \brief (UART0) UART0 Receive Buffer Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_THR : (32) UART0 Transmit Hold Register ----- */
typedef union {
	struct {
		uint32_t VALUE:8;			/*!< bit	0..7	8 bit data	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_THR_Type;
#define REG_UART0_THR		(*(RwReg *)0x2005F024UL)

#else
#define REG_UART0_THR		(0x2005F024) /**< \brief (UART0) UART0 Transmit Hold Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_TAIP : (32) UART0 Transmit Address/Insert Pulse Register ----- */
typedef union {
	struct {
		uint32_t VALUE:8;			/*!< bit	0..7	8-bit data	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_TAIP_Type;
#define REG_UART0_TAIP		(*(RwReg *)0x2005F028UL)

#else
#define REG_UART0_TAIP		(0x2005F028) /**< \brief (UART0) UART0 Transmit Address/Insert Pulse Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_TSR : (32) UART0 Transmit Shift Register ----- */
typedef union {
	struct {
		uint32_t VALUE:11;			/*!< bit	0..10	Contents of TSR	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_TSR_Type;
#define REG_UART0_TSR		(*(RwReg *)0x2005F02CUL)

#else
#define REG_UART0_TSR		(0x2005F02C) /**< \brief (UART0) UART0 Transmit Shift Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_RSR : (32) UART0 Receive Shift Register ----- */
typedef union {
	struct {
		uint32_t VALUE:10;			/*!< bit	0..9	Contents of RSR	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_RSR_Type;
#define REG_UART0_RSR		(*(RwReg *)0x2005F030UL)

#else
#define REG_UART0_RSR		(0x2005F030) /**< \brief (UART0) UART0 Receive Shift Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_TXCNT : (32) UART0 Transmit Counter Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	16-bit Counter Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_TXCNT_Type;
#define REG_UART0_TXCNT		(*(RwReg *)0x2005F034UL)

#else
#define REG_UART0_TXCNT		(0x2005F034) /**< \brief (UART0) UART0 Transmit Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- UART_RXCNT : (32) UART0 Receive Counter Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	16-bit Counter Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} UART_RXCNT_Type;
#define REG_UART0_RXCNT		(*(RwReg *)0x2005F038UL)

#else
#define REG_UART0_RXCNT		(0x2005F038) /**< \brief (UART0) UART0 Receive Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO UART_CTL_Type		CTL;		/**< \brief UART0 Control Register */
	__IO UART_STAT_Type		STAT;		/**< \brief UART0 Status Register */
	__IO UART_SCR_Type		SCR;		/**< \brief UART0 Scratch Register */
	__IO UART_CLK_Type		CLK;		/**< \brief UART0 Clock Rate Register */
	__IO UART_IMSK_Type		IMSK;		/**< \brief UART0 Interrupt Mask Register */
	__IO UART_IMSK_SET_Type		IMSK_SET;		/**< \brief UART0 Interrupt Mask Set Register */
	__IO UART_IMSK_CLR_Type		IMSK_CLR;		/**< \brief UART0 Interrupt Mask Clear Register */
	__IO UART_RBR_Type		RBR;		/**< \brief UART0 Receive Buffer Register */
	__IO UART_THR_Type		THR;		/**< \brief UART0 Transmit Hold Register */
	__IO UART_TAIP_Type		TAIP;		/**< \brief UART0 Transmit Address/Insert Pulse Register */
	__IO UART_TSR_Type		TSR;		/**< \brief UART0 Transmit Shift Register */
	__IO UART_RSR_Type		RSR;		/**< \brief UART0 Receive Shift Register */
	__IO UART_TXCNT_Type		TXCNT;		/**< \brief UART0 Transmit Counter Register */
	__IO UART_RXCNT_Type		RXCNT;		/**< \brief UART0 Receive Counter Register */
} Uartgroup;
#endif
#if !(defined(__ASSEMBLY__))
#define REG_UART1_CTL		(*(RwReg *)0x2005F404UL)

#else
#define REG_UART1_CTL		(0x2005F404) /**< \brief (UART1) UART1 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_STAT		(*(RwReg *)0x2005F408UL)

#else
#define REG_UART1_STAT		(0x2005F408) /**< \brief (UART1) UART1 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_SCR		(*(RwReg *)0x2005F40CUL)

#else
#define REG_UART1_SCR		(0x2005F40C) /**< \brief (UART1) UART1 Scratch Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_CLK		(*(RwReg *)0x2005F410UL)

#else
#define REG_UART1_CLK		(0x2005F410) /**< \brief (UART1) UART1 Clock Rate Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_IMSK		(*(RwReg *)0x2005F414UL)

#else
#define REG_UART1_IMSK		(0x2005F414) /**< \brief (UART1) UART1 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_IMSK_SET		(*(RwReg *)0x2005F418UL)

#else
#define REG_UART1_IMSK_SET		(0x2005F418) /**< \brief (UART1) UART1 Interrupt Mask Set Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_IMSK_CLR		(*(RwReg *)0x2005F41CUL)

#else
#define REG_UART1_IMSK_CLR		(0x2005F41C) /**< \brief (UART1) UART1 Interrupt Mask Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_RBR		(*(RwReg *)0x2005F420UL)

#else
#define REG_UART1_RBR		(0x2005F420) /**< \brief (UART1) UART1 Receive Buffer Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_THR		(*(RwReg *)0x2005F424UL)

#else
#define REG_UART1_THR		(0x2005F424) /**< \brief (UART1) UART1 Transmit Hold Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_TAIP		(*(RwReg *)0x2005F428UL)

#else
#define REG_UART1_TAIP		(0x2005F428) /**< \brief (UART1) UART1 Transmit Address/Insert Pulse Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_TSR		(*(RwReg *)0x2005F42CUL)

#else
#define REG_UART1_TSR		(0x2005F42C) /**< \brief (UART1) UART1 Transmit Shift Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_RSR		(*(RwReg *)0x2005F430UL)

#else
#define REG_UART1_RSR		(0x2005F430) /**< \brief (UART1) UART1 Receive Shift Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_TXCNT		(*(RwReg *)0x2005F434UL)

#else
#define REG_UART1_TXCNT		(0x2005F434) /**< \brief (UART1) UART1 Transmit Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_UART1_RXCNT		(*(RwReg *)0x2005F438UL)

#else
#define REG_UART1_RXCNT		(0x2005F438) /**< \brief (UART1) UART1 Receive Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_STAT : (32) EPPI0 Status Register ----- */
typedef union {
	struct {
		uint32_t CFIFOERR:1;			/*!< bit	0	Chroma FIFO Error	*/
		uint32_t YFIFOERR:1;			/*!< bit	1	Luma FIFO Error	*/
		uint32_t LTERROVR:1;			/*!< bit	2	Line Track Overflow	*/
		uint32_t LTERRUNDR:1;			/*!< bit	3	Line Track Underflow	*/
		uint32_t FTERROVR:1;			/*!< bit	4	Frame Track Overflow	*/
		uint32_t FTERRUNDR:1;			/*!< bit	5	Frame Track Underflow	*/
		uint32_t ERRNCOR:1;			/*!< bit	6	Preamble Error Not Corrected	*/
		uint32_t PXPERR:1;			/*!< bit	7	PxP Ready Error	*/
		uint32_t :6;			/*!< bit	8..13	Reserved	*/
		uint32_t ERRDET:1;			/*!< bit	14	Preamble Error Detected	*/
		uint32_t FLD:1;			/*!< bit	15	Current Field Received by EPPI	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_STAT_Type;
#define REG_EPPI0_STAT		(*(RwReg *)0x20063000UL)

#else
#define REG_EPPI0_STAT		(0x20063000) /**< \brief (EPPI0) EPPI0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_HCNT : (32) EPPI0 Horizontal Transfer Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Horizontal Transfer Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_HCNT_Type;
#define REG_EPPI0_HCNT		(*(RwReg *)0x20063004UL)

#else
#define REG_EPPI0_HCNT		(0x20063004) /**< \brief (EPPI0) EPPI0 Horizontal Transfer Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_HDLY : (32) EPPI0 Horizontal Delay Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Horizontal Delay Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_HDLY_Type;
#define REG_EPPI0_HDLY		(*(RwReg *)0x20063008UL)

#else
#define REG_EPPI0_HDLY		(0x20063008) /**< \brief (EPPI0) EPPI0 Horizontal Delay Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_VCNT : (32) EPPI0 Vertical Transfer Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Vertical Transfer Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_VCNT_Type;
#define REG_EPPI0_VCNT		(*(RwReg *)0x2006300CUL)

#else
#define REG_EPPI0_VCNT		(0x2006300C) /**< \brief (EPPI0) EPPI0 Vertical Transfer Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_VDLY : (32) EPPI0 Vertical Delay Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Vertical Delay Count	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_VDLY_Type;
#define REG_EPPI0_VDLY		(*(RwReg *)0x20063010UL)

#else
#define REG_EPPI0_VDLY		(0x20063010) /**< \brief (EPPI0) EPPI0 Vertical Delay Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_FRAME : (32) EPPI0 Lines Per Frame Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Lines Per Frame	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_FRAME_Type;
#define REG_EPPI0_FRAME		(*(RwReg *)0x20063014UL)

#else
#define REG_EPPI0_FRAME		(0x20063014) /**< \brief (EPPI0) EPPI0 Lines Per Frame Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_LINE : (32) EPPI0 Samples Per Line Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Samples Per Line	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_LINE_Type;
#define REG_EPPI0_LINE		(*(RwReg *)0x20063018UL)

#else
#define REG_EPPI0_LINE		(0x20063018) /**< \brief (EPPI0) EPPI0 Samples Per Line Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_CLKDIV : (32) EPPI0 Clock Divide Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Internal Clock Divider	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_CLKDIV_Type;
#define REG_EPPI0_CLKDIV		(*(RwReg *)0x2006301CUL)

#else
#define REG_EPPI0_CLKDIV		(0x2006301C) /**< \brief (EPPI0) EPPI0 Clock Divide Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_CTL : (32) EPPI0 Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	PPI Enable	*/
		uint32_t DIR:1;			/*!< bit	1	PPI Direction	*/
		uint32_t XFRTYPE:2;			/*!< bit	2..3	Transfer Type ( Operating Mode)	*/
		uint32_t FSCFG:2;			/*!< bit	4..5	Frame Sync Configuration	*/
		uint32_t FLDSEL:1;			/*!< bit	6	Field Select/Trigger	*/
		uint32_t ITUTYPE:1;			/*!< bit	7	ITU Interlace or Progressive	*/
		uint32_t BLANKGEN:1;			/*!< bit	8	king Generation (ITU Output Mode)	*/
		uint32_t ICLKGEN:1;			/*!< bit	9	Internal Clock Generation	*/
		uint32_t IFSGEN:1;			/*!< bit	10	Internal Frame Sync Generation	*/
		uint32_t SIGNEXT:1;			/*!< bit	11	Sign Extension	*/
		uint32_t POLC:2;			/*!< bit	12..13	Clock Polarity	*/
		uint32_t POLS:2;			/*!< bit	14..15	Frame Sync Polarity	*/
		uint32_t DLEN:3;			/*!< bit	16..18	Data Length	*/
		uint32_t DMIRR:1;			/*!< bit	19	Data Mirroring	*/
		uint32_t SKIPEN:1;			/*!< bit	20	Skip Enable	*/
		uint32_t SKIPEO:1;			/*!< bit	21	Skip Even or Odd	*/
		uint32_t PACKEN:1;			/*!< bit	22	Pack/Unpack Enable	*/
		uint32_t SWAPEN:1;			/*!< bit	23	Swap Enable	*/
		uint32_t SPLTEO:1;			/*!< bit	24	Split Even and Odd Data Samples	*/
		uint32_t SUBSPLTODD:1;			/*!< bit	25	Sub-Split Odd Samples	*/
		uint32_t SPLTWRD:1;			/*!< bit	26	Split Word	*/
		uint32_t RGBFMTEN:1;			/*!< bit	27	RGB Formatting Enable	*/
		uint32_t DMACFG:1;			/*!< bit	28	One or Two DMA Channels Mode	*/
		uint32_t DMAFINEN:1;			/*!< bit	29	DMA Finish Enable	*/
		uint32_t MUXSEL:1;			/*!< bit	30	MUX Select	*/
		uint32_t CLKGATEN:1;			/*!< bit	31	Clock Gating Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_CTL_Type;
#define REG_EPPI0_CTL		(*(RwReg *)0x20063020UL)

#else
#define REG_EPPI0_CTL		(0x20063020) /**< \brief (EPPI0) EPPI0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_FS1_WLHB : (32) EPPI0 FS1 Width Register / EPPI Horizontal Blanking Samples Per Line Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_FS1_WLHB_Type;
#define REG_EPPI0_FS1_WLHB		(*(RwReg *)0x20063024UL)

#else
#define REG_EPPI0_FS1_WLHB		(0x20063024) /**< \brief (EPPI0) EPPI0 FS1 Width Register / EPPI Horizontal Blanking Samples Per Line Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_FS1_PASPL : (32) EPPI0 FS1 Period Register / EPPI Active Samples Per Line Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_FS1_PASPL_Type;
#define REG_EPPI0_FS1_PASPL		(*(RwReg *)0x20063028UL)

#else
#define REG_EPPI0_FS1_PASPL		(0x20063028) /**< \brief (EPPI0) EPPI0 FS1 Period Register / EPPI Active Samples Per Line Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_FS2_WLVB : (32) EPPI0 FS2 Width Register / EPPI Lines Of Vertical Blanking Register ----- */
typedef union {
	struct {
		uint32_t F1VBBD:8;			/*!< bit	0..7	Field 1 Vertical Blanking Before Data	*/
		uint32_t F1VBAD:8;			/*!< bit	8..15	Field 1 Vertical Blanking After Data	*/
		uint32_t F2VBBD:8;			/*!< bit	16..23	Field 2 Vertical Blanking Before Data	*/
		uint32_t F2VBAD:8;			/*!< bit	24..31	Field 2 Vertical Blanking After Data	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_FS2_WLVB_Type;
#define REG_EPPI0_FS2_WLVB		(*(RwReg *)0x2006302CUL)

#else
#define REG_EPPI0_FS2_WLVB		(0x2006302C) /**< \brief (EPPI0) EPPI0 FS2 Width Register / EPPI Lines Of Vertical Blanking Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_FS2_PALPF : (32) EPPI0 FS2 Period Register / EPPI Active Lines Per Field Register ----- */
typedef union {
	struct {
		uint32_t F1ACT:16;			/*!< bit	0..15	Field 1 Active	*/
		uint32_t F2ACT:16;			/*!< bit	16..31	Field 2 Active	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_FS2_PALPF_Type;
#define REG_EPPI0_FS2_PALPF		(*(RwReg *)0x20063030UL)

#else
#define REG_EPPI0_FS2_PALPF		(0x20063030) /**< \brief (EPPI0) EPPI0 FS2 Period Register / EPPI Active Lines Per Field Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_IMSK : (32) EPPI0 Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t CFIFOERR:1;			/*!< bit	0	CFIFO Underflow or Overflow Error Interrupt Mask	*/
		uint32_t YFIFOERR:1;			/*!< bit	1	YFIFO Underflow or Overflow Error Interrupt Mask	*/
		uint32_t LTERROVR:1;			/*!< bit	2	Line Track Overflow Error Interrupt Mask	*/
		uint32_t LTERRUNDR:1;			/*!< bit	3	Line Track Underflow Error Interrupt Mask	*/
		uint32_t FTERROVR:1;			/*!< bit	4	Frame Track Overflow Error Interrupt Mask	*/
		uint32_t FTERRUNDR:1;			/*!< bit	5	Frame Track Underflow Error Interrupt Mask	*/
		uint32_t ERRNCOR:1;			/*!< bit	6	ITU Preamble Error Not Corrected Interrupt Mask	*/
		uint32_t PXPERR:1;			/*!< bit	7	PxP Ready Error Interrupt Mask	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_IMSK_Type;
#define REG_EPPI0_IMSK		(*(RwReg *)0x20063034UL)

#else
#define REG_EPPI0_IMSK		(0x20063034) /**< \brief (EPPI0) EPPI0 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_ODDCLIP : (32) EPPI0 Clipping Register for ODD (Chroma) Data ----- */
typedef union {
	struct {
		uint32_t LOWODD:16;			/*!< bit	0..15	Low Odd Clipping Threshold (Chroma Data)	*/
		uint32_t HIGHODD:16;			/*!< bit	16..31	High Odd Clipping Threshold (Chroma Data)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_ODDCLIP_Type;
#define REG_EPPI0_ODDCLIP		(*(RwReg *)0x2006303CUL)

#else
#define REG_EPPI0_ODDCLIP		(0x2006303C) /**< \brief (EPPI0) EPPI0 Clipping Register for ODD (Chroma) Data */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_EVENCLIP : (32) EPPI0 Clipping Register for EVEN (Luma) Data ----- */
typedef union {
	struct {
		uint32_t LOWEVEN:16;			/*!< bit	0..15	Low Even Clipping Threshold (Luma Data)	*/
		uint32_t HIGHEVEN:16;			/*!< bit	16..31	High Even Clipping Threshold (Luma Data)	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_EVENCLIP_Type;
#define REG_EPPI0_EVENCLIP		(*(RwReg *)0x20063040UL)

#else
#define REG_EPPI0_EVENCLIP		(0x20063040) /**< \brief (EPPI0) EPPI0 Clipping Register for EVEN (Luma) Data */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_FS1_DLY : (32) EPPI0 Frame Sync 1 Delay Value ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_FS1_DLY_Type;
#define REG_EPPI0_FS1_DLY		(*(RwReg *)0x20063044UL)

#else
#define REG_EPPI0_FS1_DLY		(0x20063044) /**< \brief (EPPI0) EPPI0 Frame Sync 1 Delay Value */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_FS2_DLY : (32) EPPI0 Frame Sync 2 Delay Value ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_FS2_DLY_Type;
#define REG_EPPI0_FS2_DLY		(*(RwReg *)0x20063048UL)

#else
#define REG_EPPI0_FS2_DLY		(0x20063048) /**< \brief (EPPI0) EPPI0 Frame Sync 2 Delay Value */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- EPPI0_CTL2 : (32) EPPI0 Control Register 2 ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t FS1FINEN:1;			/*!< bit	1	HSYNC Finish Enable	*/
		uint32_t :31;			/*!< bit	1..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} EPPI0_CTL2_Type;
#define REG_EPPI0_CTL2		(*(RwReg *)0x2006304CUL)

#else
#define REG_EPPI0_CTL2		(0x2006304C) /**< \brief (EPPI0) EPPI0 Control Register 2 */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO EPPI0_STAT_Type		STAT;		/**< \brief EPPI0 Status Register */
	__IO EPPI0_HCNT_Type		HCNT;		/**< \brief EPPI0 Horizontal Transfer Count Register */
	__IO EPPI0_HDLY_Type		HDLY;		/**< \brief EPPI0 Horizontal Delay Count Register */
	__IO EPPI0_VCNT_Type		VCNT;		/**< \brief EPPI0 Vertical Transfer Count Register */
	__IO EPPI0_VDLY_Type		VDLY;		/**< \brief EPPI0 Vertical Delay Count Register */
	__IO EPPI0_FRAME_Type		FRAME;		/**< \brief EPPI0 Lines Per Frame Register */
	__IO EPPI0_LINE_Type		LINE;		/**< \brief EPPI0 Samples Per Line Register */
	__IO EPPI0_CLKDIV_Type		CLKDIV;		/**< \brief EPPI0 Clock Divide Register */
	__IO EPPI0_CTL_Type		CTL;		/**< \brief EPPI0 Control Register */
	__IO EPPI0_FS1_WLHB_Type		FS1_WLHB;		/**< \brief EPPI0 FS1 Width Register / EPPI Horizontal Blanking Samples Per Line Register */
	__IO EPPI0_FS1_PASPL_Type		FS1_PASPL;		/**< \brief EPPI0 FS1 Period Register / EPPI Active Samples Per Line Register */
	__IO EPPI0_FS2_WLVB_Type		FS2_WLVB;		/**< \brief EPPI0 FS2 Width Register / EPPI Lines Of Vertical Blanking Register */
	__IO EPPI0_FS2_PALPF_Type		FS2_PALPF;		/**< \brief EPPI0 FS2 Period Register / EPPI Active Lines Per Field Register */
	__IO EPPI0_IMSK_Type		IMSK;		/**< \brief EPPI0 Interrupt Mask Register */
		 RoReg8		Reserved1[0x04];		
	__IO EPPI0_ODDCLIP_Type		ODDCLIP;		/**< \brief EPPI0 Clipping Register for ODD (Chroma) Data */
	__IO EPPI0_EVENCLIP_Type		EVENCLIP;		/**< \brief EPPI0 Clipping Register for EVEN (Luma) Data */
	__IO EPPI0_FS1_DLY_Type		FS1_DLY;		/**< \brief EPPI0 Frame Sync 1 Delay Value */
	__IO EPPI0_FS2_DLY_Type		FS2_DLY;		/**< \brief EPPI0 Frame Sync 2 Delay Value */
	__IO EPPI0_CTL2_Type		CTL2;		/**< \brief EPPI0 Control Register 2 */
} Eppi0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- CAN_MC1 : (32) CAN0 Mailbox Configuration 1 Register ----- */
typedef union {
	struct {
		uint32_t MB00:1;			/*!< bit	0	Mailbox n Enable/Disable	*/
		uint32_t MB01:1;			/*!< bit	1	Mailbox n Enable/Disable	*/
		uint32_t MB02:1;			/*!< bit	2	Mailbox n Enable/Disable	*/
		uint32_t MB03:1;			/*!< bit	3	Mailbox n Enable/Disable	*/
		uint32_t MB04:1;			/*!< bit	4	Mailbox n Enable/Disable	*/
		uint32_t MB05:1;			/*!< bit	5	Mailbox n Enable/Disable	*/
		uint32_t MB06:1;			/*!< bit	6	Mailbox n Enable/Disable	*/
		uint32_t MB07:1;			/*!< bit	7	Mailbox n Enable/Disable	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Enable/Disable	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Enable/Disable	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Enable/Disable	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Enable/Disable	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Enable/Disable	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Enable/Disable	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Enable/Disable	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Enable/Disable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MC1_Type;
#define REG_CAN0_MC1		(*(RwReg *)0x2006C200UL)

#else
#define REG_CAN0_MC1		(0x2006C200) /**< \brief (CAN0) CAN0 Mailbox Configuration 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MD1 : (32) CAN0 Mailbox Direction 1 Register ----- */
typedef union {
	struct {
		uint32_t :8;			/*!< bit	0..7	Reserved	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Transmit/Receive	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Transmit/Receive	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Transmit/Receive	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Transmit/Receive	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Transmit/Receive	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Transmit/Receive	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Transmit/Receive	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Transmit/Receive	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MD1_Type;
#define REG_CAN0_MD1		(*(RwReg *)0x2006C204UL)

#else
#define REG_CAN0_MD1		(0x2006C204) /**< \brief (CAN0) CAN0 Mailbox Direction 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_TRS1 : (32) CAN0 Transmission Request Set 1 Register ----- */
typedef union {
	struct {
		uint32_t :8;			/*!< bit	0..7	Reserved	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Transmit Request	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Transmit Request	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Transmit Request	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Transmit Request	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Transmit Request	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Transmit Request	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Transmit Request	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Transmit Request	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_TRS1_Type;
#define REG_CAN0_TRS1		(*(RwReg *)0x2006C208UL)

#else
#define REG_CAN0_TRS1		(0x2006C208) /**< \brief (CAN0) CAN0 Transmission Request Set 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_TRR1 : (32) CAN0 Transmission Request Reset 1 Register ----- */
typedef union {
	struct {
		uint32_t :8;			/*!< bit	0..7	Reserved	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Transmit Abort	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Transmit Abort	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Transmit Abort	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Transmit Abort	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Transmit Abort	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Transmit Abort	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Transmit Abort	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Transmit Abort	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_TRR1_Type;
#define REG_CAN0_TRR1		(*(RwReg *)0x2006C20CUL)

#else
#define REG_CAN0_TRR1		(0x2006C20C) /**< \brief (CAN0) CAN0 Transmission Request Reset 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_TA1 : (32) CAN0 Transmission Acknowledge 1 Register ----- */
typedef union {
	struct {
		uint32_t :8;			/*!< bit	0..7	Reserved	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Transmit Acknowledge	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Transmit Acknowledge	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Transmit Acknowledge	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Transmit Acknowledge	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Transmit Acknowledge	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Transmit Acknowledge	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Transmit Acknowledge	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Transmit Acknowledge	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_TA1_Type;
#define REG_CAN0_TA1		(*(RwReg *)0x2006C210UL)

#else
#define REG_CAN0_TA1		(0x2006C210) /**< \brief (CAN0) CAN0 Transmission Acknowledge 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AA1 : (32) CAN0 Abort Acknowledge 1 Register ----- */
typedef union {
	struct {
		uint32_t :8;			/*!< bit	0..7	Reserved	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Abort Acknowledge	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Abort Acknowledge	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Abort Acknowledge	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Abort Acknowledge	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Abort Acknowledge	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Abort Acknowledge	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Abort Acknowledge	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Abort Acknowledge	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AA1_Type;
#define REG_CAN0_AA1		(*(RwReg *)0x2006C214UL)

#else
#define REG_CAN0_AA1		(0x2006C214) /**< \brief (CAN0) CAN0 Abort Acknowledge 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_RMP1 : (32) CAN0 Receive Message Pending 1 Register ----- */
typedef union {
	struct {
		uint32_t MB00:1;			/*!< bit	0	Mailbox n Message Pending	*/
		uint32_t MB01:1;			/*!< bit	1	Mailbox n Message Pending	*/
		uint32_t MB02:1;			/*!< bit	2	Mailbox n Message Pending	*/
		uint32_t MB03:1;			/*!< bit	3	Mailbox n Message Pending	*/
		uint32_t MB04:1;			/*!< bit	4	Mailbox n Message Pending	*/
		uint32_t MB05:1;			/*!< bit	5	Mailbox n Message Pending	*/
		uint32_t MB06:1;			/*!< bit	6	Mailbox n Message Pending	*/
		uint32_t MB07:1;			/*!< bit	7	Mailbox n Message Pending	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Message Pending	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Message Pending	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Message Pending	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Message Pending	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Message Pending	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Message Pending	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Message Pending	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Message Pending	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_RMP1_Type;
#define REG_CAN0_RMP1		(*(RwReg *)0x2006C218UL)

#else
#define REG_CAN0_RMP1		(0x2006C218) /**< \brief (CAN0) CAN0 Receive Message Pending 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_RML1 : (32) CAN0 Receive Message Lost 1 Register ----- */
typedef union {
	struct {
		uint32_t MB00:1;			/*!< bit	0	Mailbox n Message Lost	*/
		uint32_t MB01:1;			/*!< bit	1	Mailbox n Message Lost	*/
		uint32_t MB02:1;			/*!< bit	2	Mailbox n Message Lost	*/
		uint32_t MB03:1;			/*!< bit	3	Mailbox n Message Lost	*/
		uint32_t MB04:1;			/*!< bit	4	Mailbox n Message Lost	*/
		uint32_t MB05:1;			/*!< bit	5	Mailbox n Message Lost	*/
		uint32_t MB06:1;			/*!< bit	6	Mailbox n Message Lost	*/
		uint32_t MB07:1;			/*!< bit	7	Mailbox n Message Lost	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Message Lost	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Message Lost	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Message Lost	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Message Lost	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Message Lost	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Message Lost	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Message Lost	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Message Lost	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_RML1_Type;
#define REG_CAN0_RML1		(*(RwReg *)0x2006C21CUL)

#else
#define REG_CAN0_RML1		(0x2006C21C) /**< \brief (CAN0) CAN0 Receive Message Lost 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MBTIF1 : (32) CAN0 Mailbox Transmit Interrupt Flag 1 Register ----- */
typedef union {
	struct {
		uint32_t :8;			/*!< bit	0..7	Reserved	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Transmit Interrupt Pending	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Transmit Interrupt Pending	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MBTIF1_Type;
#define REG_CAN0_MBTIF1		(*(RwReg *)0x2006C220UL)

#else
#define REG_CAN0_MBTIF1		(0x2006C220) /**< \brief (CAN0) CAN0 Mailbox Transmit Interrupt Flag 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MBRIF1 : (32) CAN0 Mailbox Receive Interrupt Flag 1 Register ----- */
typedef union {
	struct {
		uint32_t MB00:1;			/*!< bit	0	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB01:1;			/*!< bit	1	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB02:1;			/*!< bit	2	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB03:1;			/*!< bit	3	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB04:1;			/*!< bit	4	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB05:1;			/*!< bit	5	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB06:1;			/*!< bit	6	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB07:1;			/*!< bit	7	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Receive Interrupt Pending	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MBRIF1_Type;
#define REG_CAN0_MBRIF1		(*(RwReg *)0x2006C224UL)

#else
#define REG_CAN0_MBRIF1		(0x2006C224) /**< \brief (CAN0) CAN0 Mailbox Receive Interrupt Flag 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MBIM1 : (32) CAN0 Mailbox Interrupt Mask 1 Register ----- */
typedef union {
	struct {
		uint32_t MB00:1;			/*!< bit	0	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB01:1;			/*!< bit	1	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB02:1;			/*!< bit	2	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB03:1;			/*!< bit	3	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB04:1;			/*!< bit	4	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB05:1;			/*!< bit	5	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB06:1;			/*!< bit	6	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB07:1;			/*!< bit	7	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MBIM1_Type;
#define REG_CAN0_MBIM1		(*(RwReg *)0x2006C228UL)

#else
#define REG_CAN0_MBIM1		(0x2006C228) /**< \brief (CAN0) CAN0 Mailbox Interrupt Mask 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_RFH1 : (32) CAN0 Remote Frame Handling 1 Register ----- */
typedef union {
	struct {
		uint32_t :8;			/*!< bit	0..7	Reserved	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Remote Frame Handling Enable	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Remote Frame Handling Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_RFH1_Type;
#define REG_CAN0_RFH1		(*(RwReg *)0x2006C22CUL)

#else
#define REG_CAN0_RFH1		(0x2006C22C) /**< \brief (CAN0) CAN0 Remote Frame Handling 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_OPSS1 : (32) CAN0 Overwrite Protection/Single Shot Transmission 1 Register ----- */
typedef union {
	struct {
		uint32_t MB00:1;			/*!< bit	0	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB01:1;			/*!< bit	1	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB02:1;			/*!< bit	2	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB03:1;			/*!< bit	3	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB04:1;			/*!< bit	4	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB05:1;			/*!< bit	5	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB06:1;			/*!< bit	6	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB07:1;			/*!< bit	7	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB08:1;			/*!< bit	8	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB09:1;			/*!< bit	9	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB10:1;			/*!< bit	10	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB11:1;			/*!< bit	11	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB12:1;			/*!< bit	12	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB13:1;			/*!< bit	13	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB14:1;			/*!< bit	14	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB15:1;			/*!< bit	15	Mailbox n Overwrite Protection Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_OPSS1_Type;
#define REG_CAN0_OPSS1		(*(RwReg *)0x2006C230UL)

#else
#define REG_CAN0_OPSS1		(0x2006C230) /**< \brief (CAN0) CAN0 Overwrite Protection/Single Shot Transmission 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MC2 : (32) CAN0 Mailbox Configuration 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Enable/Disable	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Enable/Disable	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Enable/Disable	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Enable/Disable	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Enable/Disable	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Enable/Disable	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Enable/Disable	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Enable/Disable	*/
		uint32_t MB24:1;			/*!< bit	8	Mailbox n Enable/Disable	*/
		uint32_t MB25:1;			/*!< bit	9	Mailbox n Enable/Disable	*/
		uint32_t MB26:1;			/*!< bit	10	Mailbox n Enable/Disable	*/
		uint32_t MB27:1;			/*!< bit	11	Mailbox n Enable/Disable	*/
		uint32_t MB28:1;			/*!< bit	12	Mailbox n Enable/Disable	*/
		uint32_t MB29:1;			/*!< bit	13	Mailbox n Enable/Disable	*/
		uint32_t MB30:1;			/*!< bit	14	Mailbox n Enable/Disable	*/
		uint32_t MB31:1;			/*!< bit	15	Mailbox n Enable/Disable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MC2_Type;
#define REG_CAN0_MC2		(*(RwReg *)0x2006C240UL)

#else
#define REG_CAN0_MC2		(0x2006C240) /**< \brief (CAN0) CAN0 Mailbox Configuration 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MD2 : (32) CAN0 Mailbox Direction 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Transmit/Receive	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Transmit/Receive	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Transmit/Receive	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Transmit/Receive	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Transmit/Receive	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Transmit/Receive	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Transmit/Receive	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Transmit/Receive	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MD2_Type;
#define REG_CAN0_MD2		(*(RwReg *)0x2006C244UL)

#else
#define REG_CAN0_MD2		(0x2006C244) /**< \brief (CAN0) CAN0 Mailbox Direction 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_TRS2 : (32) CAN0 Transmission Request Set 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Transmit Request	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Transmit Request	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Transmit Request	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Transmit Request	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Transmit Request	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Transmit Request	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Transmit Request	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Transmit Request	*/
		uint32_t MB24:1;			/*!< bit	8	Mailbox n Transmit Request	*/
		uint32_t MB25:1;			/*!< bit	9	Mailbox n Transmit Request	*/
		uint32_t MB26:1;			/*!< bit	10	Mailbox n Transmit Request	*/
		uint32_t MB27:1;			/*!< bit	11	Mailbox n Transmit Request	*/
		uint32_t MB28:1;			/*!< bit	12	Mailbox n Transmit Request	*/
		uint32_t MB29:1;			/*!< bit	13	Mailbox n Transmit Request	*/
		uint32_t MB30:1;			/*!< bit	14	Mailbox n Transmit Request	*/
		uint32_t MB31:1;			/*!< bit	15	Mailbox n Transmit Request	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_TRS2_Type;
#define REG_CAN0_TRS2		(*(RwReg *)0x2006C248UL)

#else
#define REG_CAN0_TRS2		(0x2006C248) /**< \brief (CAN0) CAN0 Transmission Request Set 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_TRR2 : (32) CAN0 Transmission Request Reset 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Transmit Abort	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Transmit Abort	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Transmit Abort	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Transmit Abort	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Transmit Abort	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Transmit Abort	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Transmit Abort	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Transmit Abort	*/
		uint32_t MB24:1;			/*!< bit	8	Mailbox n Transmit Abort	*/
		uint32_t MB25:1;			/*!< bit	9	Mailbox n Transmit Abort	*/
		uint32_t MB26:1;			/*!< bit	10	Mailbox n Transmit Abort	*/
		uint32_t MB27:1;			/*!< bit	11	Mailbox n Transmit Abort	*/
		uint32_t MB28:1;			/*!< bit	12	Mailbox n Transmit Abort	*/
		uint32_t MB29:1;			/*!< bit	13	Mailbox n Transmit Abort	*/
		uint32_t MB30:1;			/*!< bit	14	Mailbox n Transmit Abort	*/
		uint32_t MB31:1;			/*!< bit	15	Mailbox n Transmit Abort	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_TRR2_Type;
#define REG_CAN0_TRR2		(*(RwReg *)0x2006C24CUL)

#else
#define REG_CAN0_TRR2		(0x2006C24C) /**< \brief (CAN0) CAN0 Transmission Request Reset 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_TA2 : (32) CAN0 Transmission Acknowledge 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Transmit Acknowledge	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Transmit Acknowledge	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Transmit Acknowledge	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Transmit Acknowledge	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Transmit Acknowledge	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Transmit Acknowledge	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Transmit Acknowledge	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Transmit Acknowledge	*/
		uint32_t MB24:1;			/*!< bit	8	Mailbox n Transmit Acknowledge	*/
		uint32_t MB25:1;			/*!< bit	9	Mailbox n Transmit Acknowledge	*/
		uint32_t MB26:1;			/*!< bit	10	Mailbox n Transmit Acknowledge	*/
		uint32_t MB27:1;			/*!< bit	11	Mailbox n Transmit Acknowledge	*/
		uint32_t MB28:1;			/*!< bit	12	Mailbox n Transmit Acknowledge	*/
		uint32_t MB29:1;			/*!< bit	13	Mailbox n Transmit Acknowledge	*/
		uint32_t MB30:1;			/*!< bit	14	Mailbox n Transmit Acknowledge	*/
		uint32_t MB31:1;			/*!< bit	15	Mailbox n Transmit Acknowledge	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_TA2_Type;
#define REG_CAN0_TA2		(*(RwReg *)0x2006C250UL)

#else
#define REG_CAN0_TA2		(0x2006C250) /**< \brief (CAN0) CAN0 Transmission Acknowledge 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AA2 : (32) CAN0 Abort Acknowledge 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Abort Acknowledge	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Abort Acknowledge	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Abort Acknowledge	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Abort Acknowledge	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Abort Acknowledge	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Abort Acknowledge	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Abort Acknowledge	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Abort Acknowledge	*/
		uint32_t MB24:1;			/*!< bit	8	Mailbox n Abort Acknowledge	*/
		uint32_t MB25:1;			/*!< bit	9	Mailbox n Abort Acknowledge	*/
		uint32_t MB26:1;			/*!< bit	10	Mailbox n Abort Acknowledge	*/
		uint32_t MB27:1;			/*!< bit	11	Mailbox n Abort Acknowledge	*/
		uint32_t MB28:1;			/*!< bit	12	Mailbox n Abort Acknowledge	*/
		uint32_t MB29:1;			/*!< bit	13	Mailbox n Abort Acknowledge	*/
		uint32_t MB30:1;			/*!< bit	14	Mailbox n Abort Acknowledge	*/
		uint32_t MB31:1;			/*!< bit	15	Mailbox n Abort Acknowledge	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AA2_Type;
#define REG_CAN0_AA2		(*(RwReg *)0x2006C254UL)

#else
#define REG_CAN0_AA2		(0x2006C254) /**< \brief (CAN0) CAN0 Abort Acknowledge 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_RMP2 : (32) CAN0 Receive Message Pending 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Message Pending	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Message Pending	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Message Pending	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Message Pending	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Message Pending	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Message Pending	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Message Pending	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Message Pending	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_RMP2_Type;
#define REG_CAN0_RMP2		(*(RwReg *)0x2006C258UL)

#else
#define REG_CAN0_RMP2		(0x2006C258) /**< \brief (CAN0) CAN0 Receive Message Pending 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_RML2 : (32) CAN0 Receive Message Lost 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Message Lost	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Message Lost	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Message Lost	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Message Lost	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Message Lost	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Message Lost	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Message Lost	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Message Lost	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_RML2_Type;
#define REG_CAN0_RML2		(*(RwReg *)0x2006C25CUL)

#else
#define REG_CAN0_RML2		(0x2006C25C) /**< \brief (CAN0) CAN0 Receive Message Lost 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MBTIF2 : (32) CAN0 Mailbox Transmit Interrupt Flag 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB24:1;			/*!< bit	8	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB25:1;			/*!< bit	9	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB26:1;			/*!< bit	10	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB27:1;			/*!< bit	11	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB28:1;			/*!< bit	12	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB29:1;			/*!< bit	13	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB30:1;			/*!< bit	14	Mailbox n Transmit Interrupt Pending	*/
		uint32_t MB31:1;			/*!< bit	15	Mailbox n Transmit Interrupt Pending	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MBTIF2_Type;
#define REG_CAN0_MBTIF2		(*(RwReg *)0x2006C260UL)

#else
#define REG_CAN0_MBTIF2		(0x2006C260) /**< \brief (CAN0) CAN0 Mailbox Transmit Interrupt Flag 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MBRIF2 : (32) CAN0 Mailbox Receive Interrupt Flag 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Receive Interrupt Pending	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Receive Interrupt Pending	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MBRIF2_Type;
#define REG_CAN0_MBRIF2		(*(RwReg *)0x2006C264UL)

#else
#define REG_CAN0_MBRIF2		(0x2006C264) /**< \brief (CAN0) CAN0 Mailbox Receive Interrupt Flag 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MBIM2 : (32) CAN0 Mailbox Interrupt Mask 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB24:1;			/*!< bit	8	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB25:1;			/*!< bit	9	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB26:1;			/*!< bit	10	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB27:1;			/*!< bit	11	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB28:1;			/*!< bit	12	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB29:1;			/*!< bit	13	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB30:1;			/*!< bit	14	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t MB31:1;			/*!< bit	15	Mailbox n Transmit and Receive Interrupt Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MBIM2_Type;
#define REG_CAN0_MBIM2		(*(RwReg *)0x2006C268UL)

#else
#define REG_CAN0_MBIM2		(0x2006C268) /**< \brief (CAN0) CAN0 Mailbox Interrupt Mask 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_RFH2 : (32) CAN0 Remote Frame Handling 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Remote Frame Handling Enable	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Remote Frame Handling Enable	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_RFH2_Type;
#define REG_CAN0_RFH2		(*(RwReg *)0x2006C26CUL)

#else
#define REG_CAN0_RFH2		(0x2006C26C) /**< \brief (CAN0) CAN0 Remote Frame Handling 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_OPSS2 : (32) CAN0 Overwrite Protection/Single Shot Transmission 2 Register ----- */
typedef union {
	struct {
		uint32_t MB16:1;			/*!< bit	0	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB17:1;			/*!< bit	1	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB18:1;			/*!< bit	2	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB19:1;			/*!< bit	3	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB20:1;			/*!< bit	4	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB21:1;			/*!< bit	5	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB22:1;			/*!< bit	6	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB23:1;			/*!< bit	7	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB24:1;			/*!< bit	8	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB25:1;			/*!< bit	9	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB26:1;			/*!< bit	10	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB27:1;			/*!< bit	11	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB28:1;			/*!< bit	12	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB29:1;			/*!< bit	13	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB30:1;			/*!< bit	14	Mailbox n Overwrite Protection Enable	*/
		uint32_t MB31:1;			/*!< bit	15	Mailbox n Overwrite Protection Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_OPSS2_Type;
#define REG_CAN0_OPSS2		(*(RwReg *)0x2006C270UL)

#else
#define REG_CAN0_OPSS2		(0x2006C270) /**< \brief (CAN0) CAN0 Overwrite Protection/Single Shot Transmission 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_CLK : (32) CAN0 Clock Register ----- */
typedef union {
	struct {
		uint32_t BRP:10;			/*!< bit	0..9	Bit Rate Prescaler	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_CLK_Type;
#define REG_CAN0_CLK		(*(RwReg *)0x2006C280UL)

#else
#define REG_CAN0_CLK		(0x2006C280) /**< \brief (CAN0) CAN0 Clock Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_TIMING : (32) CAN0 Timing Register ----- */
typedef union {
	struct {
		uint32_t TSEG1:4;			/*!< bit	0..3	Time Segment 1	*/
		uint32_t TSEG2:3;			/*!< bit	4..6	Time Segment 2	*/
		uint32_t SAM:1;			/*!< bit	7	Sampling	*/
		uint32_t SJW:2;			/*!< bit	8..9	Synchronization Jump Width	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_TIMING_Type;
#define REG_CAN0_TIMING		(*(RwReg *)0x2006C284UL)

#else
#define REG_CAN0_TIMING		(0x2006C284) /**< \brief (CAN0) CAN0 Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_DBG : (32) CAN0 Debug Register ----- */
typedef union {
	struct {
		uint32_t DEC:1;			/*!< bit	0	Disable Transmit and Receive Error Counters	*/
		uint32_t DRI:1;			/*!< bit	1	Disable Receive Input Pin	*/
		uint32_t DTO:1;			/*!< bit	2	Disable Tx Output Pin	*/
		uint32_t DIL:1;			/*!< bit	3	Disable Internal Loop	*/
		uint32_t MAA:1;			/*!< bit	4	Mode Auto Acknowledge	*/
		uint32_t MRB:1;			/*!< bit	5	Mode Read Back	*/
		uint32_t :9;			/*!< bit	6..14	Reserved	*/
		uint32_t CDE:1;			/*!< bit	15	CAN Debug Mode Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_DBG_Type;
#define REG_CAN0_DBG		(*(RwReg *)0x2006C288UL)

#else
#define REG_CAN0_DBG		(0x2006C288) /**< \brief (CAN0) CAN0 Debug Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_STAT : (32) CAN0 Status Register ----- */
typedef union {
	struct {
		uint32_t WT:1;			/*!< bit	0	CAN Transmit Warning Flag	*/
		uint32_t WR:1;			/*!< bit	1	CAN Receive Warning Flag	*/
		uint32_t EP:1;			/*!< bit	2	CAN Error Passive Mode	*/
		uint32_t EBO:1;			/*!< bit	3	CAN Error Bus Off Mode	*/
		uint32_t :2;			/*!< bit	4..5	Reserved	*/
		uint32_t CSA:1;			/*!< bit	6	CAN Suspend Mode Acknowledge	*/
		uint32_t CCA:1;			/*!< bit	7	CAN Configuration Mode Acknowledge	*/
		uint32_t MBPTR:5;			/*!< bit	8..12	Mailbox Pointer	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t TRM:1;			/*!< bit	14	Transmit Mode	*/
		uint32_t REC:1;			/*!< bit	15	Receive Mode	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_STAT_Type;
#define REG_CAN0_STAT		(*(RwReg *)0x2006C28CUL)

#else
#define REG_CAN0_STAT		(0x2006C28C) /**< \brief (CAN0) CAN0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_CEC : (32) CAN0 Error Counter Register ----- */
typedef union {
	struct {
		uint32_t RXECNT:8;			/*!< bit	0..7	Receive Error Counter	*/
		uint32_t TXECNT:8;			/*!< bit	8..15	Transmit Error Counter	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_CEC_Type;
#define REG_CAN0_CEC		(*(RwReg *)0x2006C290UL)

#else
#define REG_CAN0_CEC		(0x2006C290) /**< \brief (CAN0) CAN0 Error Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_GIS : (32) CAN0 Global CAN Interrupt Status Register ----- */
typedef union {
	struct {
		uint32_t EWTIS:1;			/*!< bit	0	Error Warning Transmit Interrupt Status	*/
		uint32_t EWRIS:1;			/*!< bit	1	Error Warning Receive  Interrupt Status	*/
		uint32_t EPIS:1;			/*!< bit	2	Error Passive Interrupt Status	*/
		uint32_t BOIS:1;			/*!< bit	3	Bus Off Interrupt Status	*/
		uint32_t WUIS:1;			/*!< bit	4	Wake Up Interrupt Status	*/
		uint32_t UIAIS:1;			/*!< bit	5	Unimplemented Address Interrupt Status	*/
		uint32_t AAIS:1;			/*!< bit	6	Abort Acknowledge Interrupt Status	*/
		uint32_t RMLIS:1;			/*!< bit	7	Receive Message Lost Interrupt Status	*/
		uint32_t UCEIS:1;			/*!< bit	8	Universal Counter Exceeded Interrupt Status	*/
		uint32_t :1;			/*!< bit	9	Reserved	*/
		uint32_t ADIS:1;			/*!< bit	10	Access Denied Interrupt Status	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_GIS_Type;
#define REG_CAN0_GIS		(*(RwReg *)0x2006C294UL)

#else
#define REG_CAN0_GIS		(0x2006C294) /**< \brief (CAN0) CAN0 Global CAN Interrupt Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_GIM : (32) CAN0 Global CAN Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t EWTIM:1;			/*!< bit	0	Error Warning Transmit Interrupt Mask	*/
		uint32_t EWRIM:1;			/*!< bit	1	Error Warning Receive Interrupt Mask	*/
		uint32_t EPIM:1;			/*!< bit	2	Error Passive Interrupt Mask	*/
		uint32_t BOIM:1;			/*!< bit	3	Bus Off Interrupt Mask	*/
		uint32_t WUIM:1;			/*!< bit	4	Wake Up Interrupt Mask	*/
		uint32_t UIAIM:1;			/*!< bit	5	Unimplemented Address Interrupt Mask	*/
		uint32_t AAIM:1;			/*!< bit	6	Abort Acknowledge Interrupt Mask	*/
		uint32_t RMLIM:1;			/*!< bit	7	Receive Message Lost Interrupt Mask	*/
		uint32_t UCEIM:1;			/*!< bit	8	Universal Counter Exceeded Interrupt Mask	*/
		uint32_t :1;			/*!< bit	9	Reserved	*/
		uint32_t ADIM:1;			/*!< bit	10	Access Denied Interrupt Mask	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_GIM_Type;
#define REG_CAN0_GIM		(*(RwReg *)0x2006C298UL)

#else
#define REG_CAN0_GIM		(0x2006C298) /**< \brief (CAN0) CAN0 Global CAN Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_GIF : (32) CAN0 Global CAN Interrupt Flag Register ----- */
typedef union {
	struct {
		uint32_t EWTIF:1;			/*!< bit	0	Error Warning Transmit Interrupt Flag	*/
		uint32_t EWRIF:1;			/*!< bit	1	Error Warning Receive Interrupt Flag	*/
		uint32_t EPIF:1;			/*!< bit	2	Error Passive Interrupt Flag	*/
		uint32_t BOIF:1;			/*!< bit	3	Bus Off Interrupt Flag	*/
		uint32_t WUIF:1;			/*!< bit	4	Wake Up Interrupt Flag	*/
		uint32_t UIAIF:1;			/*!< bit	5	Unimplemented Address Interrupt Flag	*/
		uint32_t AAIF:1;			/*!< bit	6	Abort Acknowledge Interrupt Flag	*/
		uint32_t RMLIF:1;			/*!< bit	7	Receive Message Lost Interrupt Flag	*/
		uint32_t UCEIF:1;			/*!< bit	8	Universal Counter Exceeded Interrupt Flag	*/
		uint32_t :1;			/*!< bit	9	Reserved	*/
		uint32_t ADIF:1;			/*!< bit	10	Access Denied Interrupt Flag	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_GIF_Type;
#define REG_CAN0_GIF		(*(RwReg *)0x2006C29CUL)

#else
#define REG_CAN0_GIF		(0x2006C29C) /**< \brief (CAN0) CAN0 Global CAN Interrupt Flag Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_CTL : (32) CAN0 CAN Master Control Register ----- */
typedef union {
	struct {
		uint32_t SRS:1;			/*!< bit	0	Software Reset	*/
		uint32_t DNM:1;			/*!< bit	1	Device Net Mode	*/
		uint32_t ABO:1;			/*!< bit	2	Auto Bus On	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t WBA:1;			/*!< bit	4	Wake Up on CAN Bus Activity	*/
		uint32_t SMR:1;			/*!< bit	5	Sleep Mode Request	*/
		uint32_t CSR:1;			/*!< bit	6	CAN Suspend Mode Request	*/
		uint32_t CCR:1;			/*!< bit	7	CAN Configuration Mode Request	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_CTL_Type;
#define REG_CAN0_CTL		(*(RwReg *)0x2006C2A0UL)

#else
#define REG_CAN0_CTL		(0x2006C2A0) /**< \brief (CAN0) CAN0 CAN Master Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_INT : (32) CAN0 Interrupt Pending Register ----- */
typedef union {
	struct {
		uint32_t MBRIRQ:1;			/*!< bit	0	Mailbox Receive Interrupt Output	*/
		uint32_t MBTIRQ:1;			/*!< bit	1	Mailbox Transmit Interrupt Output	*/
		uint32_t GIRQ:1;			/*!< bit	2	Global CAN Interrupt Output	*/
		uint32_t SMACK:1;			/*!< bit	3	Sleep Mode Acknowledge	*/
		uint32_t :2;			/*!< bit	4..5	Reserved	*/
		uint32_t CANTX:1;			/*!< bit	6	Serial Input To Transceiver	*/
		uint32_t CANRX:1;			/*!< bit	7	Serial Input From Transceiver	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_INT_Type;
#define REG_CAN0_INT		(*(RwReg *)0x2006C2A4UL)

#else
#define REG_CAN0_INT		(0x2006C2A4) /**< \brief (CAN0) CAN0 Interrupt Pending Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MBTD : (32) CAN0 Temporary Mailbox Disable Register ----- */
typedef union {
	struct {
		uint32_t TDPTR:5;			/*!< bit	0..4	Temporary Disable Pointer	*/
		uint32_t :1;			/*!< bit	5	Reserved	*/
		uint32_t TDA:1;			/*!< bit	6	Temporary Disable Acknowledge	*/
		uint32_t TDR:1;			/*!< bit	7	Temporary Disable Request	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MBTD_Type;
#define REG_CAN0_MBTD		(*(RwReg *)0x2006C2ACUL)

#else
#define REG_CAN0_MBTD		(0x2006C2AC) /**< \brief (CAN0) CAN0 Temporary Mailbox Disable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_EWR : (32) CAN0 Error Counter Warning Level Register ----- */
typedef union {
	struct {
		uint32_t EWLREC:8;			/*!< bit	0..7	Receive Error Warning Limit	*/
		uint32_t EWLTEC:8;			/*!< bit	8..15	Transmit Error Warning Limit	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_EWR_Type;
#define REG_CAN0_EWR		(*(RwReg *)0x2006C2B0UL)

#else
#define REG_CAN0_EWR		(0x2006C2B0) /**< \brief (CAN0) CAN0 Error Counter Warning Level Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_ESR : (32) CAN0 Error Status Register ----- */
typedef union {
	struct {
		uint32_t :2;			/*!< bit	0..1	Reserved	*/
		uint32_t ACKE:1;			/*!< bit	2	Acknowledge Error	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
		uint32_t SER:1;			/*!< bit	3	Stuff Bit Error	*/
		uint32_t CRCE:1;			/*!< bit	4	CRC Error	*/
		uint32_t SAO:1;			/*!< bit	5	Stuck at Dominant	*/
		uint32_t BEF:1;			/*!< bit	6	Bit Error Flag	*/
		uint32_t FER:1;			/*!< bit	7	Form Error	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_ESR_Type;
#define REG_CAN0_ESR		(*(RwReg *)0x2006C2B4UL)

#else
#define REG_CAN0_ESR		(0x2006C2B4) /**< \brief (CAN0) CAN0 Error Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_UCCNT : (32) CAN0 Universal Counter Register ----- */
typedef union {
	struct {
		uint32_t COUNT:16;			/*!< bit	0..15	Count Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_UCCNT_Type;
#define REG_CAN0_UCCNT		(*(RwReg *)0x2006C2C4UL)

#else
#define REG_CAN0_UCCNT		(0x2006C2C4) /**< \brief (CAN0) CAN0 Universal Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_UCRC : (32) CAN0 Universal Counter Reload/Capture Register ----- */
typedef union {
	struct {
		uint32_t UCVAL:16;			/*!< bit	0..15	Universal Counter Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_UCRC_Type;
#define REG_CAN0_UCRC		(*(RwReg *)0x2006C2C8UL)

#else
#define REG_CAN0_UCRC		(0x2006C2C8) /**< \brief (CAN0) CAN0 Universal Counter Reload/Capture Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_UCCNF : (32) CAN0 Universal Counter Configuration Mode Register ----- */
typedef union {
	struct {
		uint32_t UCCNF:4;			/*!< bit	0..3	Universal Counter Configuration	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t UCRC:1;			/*!< bit	5	Universal Counter Reload/Clear	*/
		uint32_t UCCT:1;			/*!< bit	6	Universal Counter CAN Trigger	*/
		uint32_t UCE:1;			/*!< bit	7	Universal Counter Enable	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_UCCNF_Type;
#define REG_CAN0_UCCNF		(*(RwReg *)0x2006C2CCUL)

#else
#define REG_CAN0_UCCNF		(0x2006C2CC) /**< \brief (CAN0) CAN0 Universal Counter Configuration Mode Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM00L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM00L_Type;
#define REG_CAN0_AM00L		(*(RwReg *)0x2006C300UL)

#else
#define REG_CAN0_AM00L		(0x2006C300) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM01L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM01L_Type;
#define REG_CAN0_AM01L		(*(RwReg *)0x2006C308UL)

#else
#define REG_CAN0_AM01L		(0x2006C308) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM02L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM02L_Type;
#define REG_CAN0_AM02L		(*(RwReg *)0x2006C310UL)

#else
#define REG_CAN0_AM02L		(0x2006C310) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM03L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM03L_Type;
#define REG_CAN0_AM03L		(*(RwReg *)0x2006C318UL)

#else
#define REG_CAN0_AM03L		(0x2006C318) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM04L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM04L_Type;
#define REG_CAN0_AM04L		(*(RwReg *)0x2006C320UL)

#else
#define REG_CAN0_AM04L		(0x2006C320) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM05L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM05L_Type;
#define REG_CAN0_AM05L		(*(RwReg *)0x2006C328UL)

#else
#define REG_CAN0_AM05L		(0x2006C328) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM06L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM06L_Type;
#define REG_CAN0_AM06L		(*(RwReg *)0x2006C330UL)

#else
#define REG_CAN0_AM06L		(0x2006C330) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM07L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM07L_Type;
#define REG_CAN0_AM07L		(*(RwReg *)0x2006C338UL)

#else
#define REG_CAN0_AM07L		(0x2006C338) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM08L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM08L_Type;
#define REG_CAN0_AM08L		(*(RwReg *)0x2006C340UL)

#else
#define REG_CAN0_AM08L		(0x2006C340) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM09L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM09L_Type;
#define REG_CAN0_AM09L		(*(RwReg *)0x2006C348UL)

#else
#define REG_CAN0_AM09L		(0x2006C348) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM10L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM10L_Type;
#define REG_CAN0_AM10L		(*(RwReg *)0x2006C350UL)

#else
#define REG_CAN0_AM10L		(0x2006C350) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM11L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM11L_Type;
#define REG_CAN0_AM11L		(*(RwReg *)0x2006C358UL)

#else
#define REG_CAN0_AM11L		(0x2006C358) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM12L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM12L_Type;
#define REG_CAN0_AM12L		(*(RwReg *)0x2006C360UL)

#else
#define REG_CAN0_AM12L		(0x2006C360) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM13L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM13L_Type;
#define REG_CAN0_AM13L		(*(RwReg *)0x2006C368UL)

#else
#define REG_CAN0_AM13L		(0x2006C368) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM14L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM14L_Type;
#define REG_CAN0_AM14L		(*(RwReg *)0x2006C370UL)

#else
#define REG_CAN0_AM14L		(0x2006C370) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM15L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM15L_Type;
#define REG_CAN0_AM15L		(*(RwReg *)0x2006C378UL)

#else
#define REG_CAN0_AM15L		(0x2006C378) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM16L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM16L_Type;
#define REG_CAN0_AM16L		(*(RwReg *)0x2006C380UL)

#else
#define REG_CAN0_AM16L		(0x2006C380) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM17L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM17L_Type;
#define REG_CAN0_AM17L		(*(RwReg *)0x2006C388UL)

#else
#define REG_CAN0_AM17L		(0x2006C388) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM18L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM18L_Type;
#define REG_CAN0_AM18L		(*(RwReg *)0x2006C390UL)

#else
#define REG_CAN0_AM18L		(0x2006C390) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM19L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM19L_Type;
#define REG_CAN0_AM19L		(*(RwReg *)0x2006C398UL)

#else
#define REG_CAN0_AM19L		(0x2006C398) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM20L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM20L_Type;
#define REG_CAN0_AM20L		(*(RwReg *)0x2006C3A0UL)

#else
#define REG_CAN0_AM20L		(0x2006C3A0) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM21L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM21L_Type;
#define REG_CAN0_AM21L		(*(RwReg *)0x2006C3A8UL)

#else
#define REG_CAN0_AM21L		(0x2006C3A8) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM22L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM22L_Type;
#define REG_CAN0_AM22L		(*(RwReg *)0x2006C3B0UL)

#else
#define REG_CAN0_AM22L		(0x2006C3B0) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM23L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM23L_Type;
#define REG_CAN0_AM23L		(*(RwReg *)0x2006C3B8UL)

#else
#define REG_CAN0_AM23L		(0x2006C3B8) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM24L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM24L_Type;
#define REG_CAN0_AM24L		(*(RwReg *)0x2006C3C0UL)

#else
#define REG_CAN0_AM24L		(0x2006C3C0) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM25L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM25L_Type;
#define REG_CAN0_AM25L		(*(RwReg *)0x2006C3C8UL)

#else
#define REG_CAN0_AM25L		(0x2006C3C8) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM26L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM26L_Type;
#define REG_CAN0_AM26L		(*(RwReg *)0x2006C3D0UL)

#else
#define REG_CAN0_AM26L		(0x2006C3D0) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM27L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM27L_Type;
#define REG_CAN0_AM27L		(*(RwReg *)0x2006C3D8UL)

#else
#define REG_CAN0_AM27L		(0x2006C3D8) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM28L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM28L_Type;
#define REG_CAN0_AM28L		(*(RwReg *)0x2006C3E0UL)

#else
#define REG_CAN0_AM28L		(0x2006C3E0) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM29L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM29L_Type;
#define REG_CAN0_AM29L		(*(RwReg *)0x2006C3E8UL)

#else
#define REG_CAN0_AM29L		(0x2006C3E8) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM30L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM30L_Type;
#define REG_CAN0_AM30L		(*(RwReg *)0x2006C3F0UL)

#else
#define REG_CAN0_AM30L		(0x2006C3F0) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM31L : (32) CAN0 Acceptance Mask (L) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Mask	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM31L_Type;
#define REG_CAN0_AM31L		(*(RwReg *)0x2006C3F8UL)

#else
#define REG_CAN0_AM31L		(0x2006C3F8) /**< \brief (CAN0) CAN0 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM00H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM00H_Type;
#define REG_CAN0_AM00H		(*(RwReg *)0x2006C304UL)

#else
#define REG_CAN0_AM00H		(0x2006C304) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM01H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM01H_Type;
#define REG_CAN0_AM01H		(*(RwReg *)0x2006C30CUL)

#else
#define REG_CAN0_AM01H		(0x2006C30C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM02H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM02H_Type;
#define REG_CAN0_AM02H		(*(RwReg *)0x2006C314UL)

#else
#define REG_CAN0_AM02H		(0x2006C314) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM03H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM03H_Type;
#define REG_CAN0_AM03H		(*(RwReg *)0x2006C31CUL)

#else
#define REG_CAN0_AM03H		(0x2006C31C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM04H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM04H_Type;
#define REG_CAN0_AM04H		(*(RwReg *)0x2006C324UL)

#else
#define REG_CAN0_AM04H		(0x2006C324) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM05H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM05H_Type;
#define REG_CAN0_AM05H		(*(RwReg *)0x2006C32CUL)

#else
#define REG_CAN0_AM05H		(0x2006C32C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM06H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM06H_Type;
#define REG_CAN0_AM06H		(*(RwReg *)0x2006C334UL)

#else
#define REG_CAN0_AM06H		(0x2006C334) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM07H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM07H_Type;
#define REG_CAN0_AM07H		(*(RwReg *)0x2006C33CUL)

#else
#define REG_CAN0_AM07H		(0x2006C33C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM08H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM08H_Type;
#define REG_CAN0_AM08H		(*(RwReg *)0x2006C344UL)

#else
#define REG_CAN0_AM08H		(0x2006C344) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM09H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM09H_Type;
#define REG_CAN0_AM09H		(*(RwReg *)0x2006C34CUL)

#else
#define REG_CAN0_AM09H		(0x2006C34C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM10H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM10H_Type;
#define REG_CAN0_AM10H		(*(RwReg *)0x2006C354UL)

#else
#define REG_CAN0_AM10H		(0x2006C354) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM11H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM11H_Type;
#define REG_CAN0_AM11H		(*(RwReg *)0x2006C35CUL)

#else
#define REG_CAN0_AM11H		(0x2006C35C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM12H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM12H_Type;
#define REG_CAN0_AM12H		(*(RwReg *)0x2006C364UL)

#else
#define REG_CAN0_AM12H		(0x2006C364) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM13H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM13H_Type;
#define REG_CAN0_AM13H		(*(RwReg *)0x2006C36CUL)

#else
#define REG_CAN0_AM13H		(0x2006C36C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM14H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM14H_Type;
#define REG_CAN0_AM14H		(*(RwReg *)0x2006C374UL)

#else
#define REG_CAN0_AM14H		(0x2006C374) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM15H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM15H_Type;
#define REG_CAN0_AM15H		(*(RwReg *)0x2006C37CUL)

#else
#define REG_CAN0_AM15H		(0x2006C37C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM16H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM16H_Type;
#define REG_CAN0_AM16H		(*(RwReg *)0x2006C384UL)

#else
#define REG_CAN0_AM16H		(0x2006C384) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM17H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM17H_Type;
#define REG_CAN0_AM17H		(*(RwReg *)0x2006C38CUL)

#else
#define REG_CAN0_AM17H		(0x2006C38C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM18H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM18H_Type;
#define REG_CAN0_AM18H		(*(RwReg *)0x2006C394UL)

#else
#define REG_CAN0_AM18H		(0x2006C394) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM19H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM19H_Type;
#define REG_CAN0_AM19H		(*(RwReg *)0x2006C39CUL)

#else
#define REG_CAN0_AM19H		(0x2006C39C) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM20H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM20H_Type;
#define REG_CAN0_AM20H		(*(RwReg *)0x2006C3A4UL)

#else
#define REG_CAN0_AM20H		(0x2006C3A4) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM21H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM21H_Type;
#define REG_CAN0_AM21H		(*(RwReg *)0x2006C3ACUL)

#else
#define REG_CAN0_AM21H		(0x2006C3AC) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM22H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM22H_Type;
#define REG_CAN0_AM22H		(*(RwReg *)0x2006C3B4UL)

#else
#define REG_CAN0_AM22H		(0x2006C3B4) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM23H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM23H_Type;
#define REG_CAN0_AM23H		(*(RwReg *)0x2006C3BCUL)

#else
#define REG_CAN0_AM23H		(0x2006C3BC) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM24H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM24H_Type;
#define REG_CAN0_AM24H		(*(RwReg *)0x2006C3C4UL)

#else
#define REG_CAN0_AM24H		(0x2006C3C4) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM25H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM25H_Type;
#define REG_CAN0_AM25H		(*(RwReg *)0x2006C3CCUL)

#else
#define REG_CAN0_AM25H		(0x2006C3CC) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM26H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM26H_Type;
#define REG_CAN0_AM26H		(*(RwReg *)0x2006C3D4UL)

#else
#define REG_CAN0_AM26H		(0x2006C3D4) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM27H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM27H_Type;
#define REG_CAN0_AM27H		(*(RwReg *)0x2006C3DCUL)

#else
#define REG_CAN0_AM27H		(0x2006C3DC) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM28H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM28H_Type;
#define REG_CAN0_AM28H		(*(RwReg *)0x2006C3E4UL)

#else
#define REG_CAN0_AM28H		(0x2006C3E4) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM29H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM29H_Type;
#define REG_CAN0_AM29H		(*(RwReg *)0x2006C3ECUL)

#else
#define REG_CAN0_AM29H		(0x2006C3EC) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM30H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM30H_Type;
#define REG_CAN0_AM30H		(*(RwReg *)0x2006C3F4UL)

#else
#define REG_CAN0_AM30H		(0x2006C3F4) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_AM31H : (32) CAN0 Acceptance Mask (H) Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t AMIDE:1;			/*!< bit	13	Acceptance Mask Identifier Extension	*/
		uint32_t FMD:1;			/*!< bit	14	Full Mask Data	*/
		uint32_t FDF:1;			/*!< bit	15	Filter on Delay Field	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_AM31H_Type;
#define REG_CAN0_AM31H		(*(RwReg *)0x2006C3FCUL)

#else
#define REG_CAN0_AM31H		(0x2006C3FC) /**< \brief (CAN0) CAN0 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB00_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB00_DATA0_Type;
#define REG_CAN0_MB00_DATA0		(*(RwReg *)0x2006C400UL)

#else
#define REG_CAN0_MB00_DATA0		(0x2006C400) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB01_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB01_DATA0_Type;
#define REG_CAN0_MB01_DATA0		(*(RwReg *)0x2006C420UL)

#else
#define REG_CAN0_MB01_DATA0		(0x2006C420) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB02_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB02_DATA0_Type;
#define REG_CAN0_MB02_DATA0		(*(RwReg *)0x2006C440UL)

#else
#define REG_CAN0_MB02_DATA0		(0x2006C440) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB03_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB03_DATA0_Type;
#define REG_CAN0_MB03_DATA0		(*(RwReg *)0x2006C460UL)

#else
#define REG_CAN0_MB03_DATA0		(0x2006C460) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB04_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB04_DATA0_Type;
#define REG_CAN0_MB04_DATA0		(*(RwReg *)0x2006C480UL)

#else
#define REG_CAN0_MB04_DATA0		(0x2006C480) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB05_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB05_DATA0_Type;
#define REG_CAN0_MB05_DATA0		(*(RwReg *)0x2006C4A0UL)

#else
#define REG_CAN0_MB05_DATA0		(0x2006C4A0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB06_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB06_DATA0_Type;
#define REG_CAN0_MB06_DATA0		(*(RwReg *)0x2006C4C0UL)

#else
#define REG_CAN0_MB06_DATA0		(0x2006C4C0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB07_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB07_DATA0_Type;
#define REG_CAN0_MB07_DATA0		(*(RwReg *)0x2006C4E0UL)

#else
#define REG_CAN0_MB07_DATA0		(0x2006C4E0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB08_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB08_DATA0_Type;
#define REG_CAN0_MB08_DATA0		(*(RwReg *)0x2006C500UL)

#else
#define REG_CAN0_MB08_DATA0		(0x2006C500) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB09_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB09_DATA0_Type;
#define REG_CAN0_MB09_DATA0		(*(RwReg *)0x2006C520UL)

#else
#define REG_CAN0_MB09_DATA0		(0x2006C520) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB10_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB10_DATA0_Type;
#define REG_CAN0_MB10_DATA0		(*(RwReg *)0x2006C540UL)

#else
#define REG_CAN0_MB10_DATA0		(0x2006C540) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB11_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB11_DATA0_Type;
#define REG_CAN0_MB11_DATA0		(*(RwReg *)0x2006C560UL)

#else
#define REG_CAN0_MB11_DATA0		(0x2006C560) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB12_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB12_DATA0_Type;
#define REG_CAN0_MB12_DATA0		(*(RwReg *)0x2006C580UL)

#else
#define REG_CAN0_MB12_DATA0		(0x2006C580) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB13_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB13_DATA0_Type;
#define REG_CAN0_MB13_DATA0		(*(RwReg *)0x2006C5A0UL)

#else
#define REG_CAN0_MB13_DATA0		(0x2006C5A0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB14_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB14_DATA0_Type;
#define REG_CAN0_MB14_DATA0		(*(RwReg *)0x2006C5C0UL)

#else
#define REG_CAN0_MB14_DATA0		(0x2006C5C0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB15_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB15_DATA0_Type;
#define REG_CAN0_MB15_DATA0		(*(RwReg *)0x2006C5E0UL)

#else
#define REG_CAN0_MB15_DATA0		(0x2006C5E0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB16_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB16_DATA0_Type;
#define REG_CAN0_MB16_DATA0		(*(RwReg *)0x2006C600UL)

#else
#define REG_CAN0_MB16_DATA0		(0x2006C600) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB17_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB17_DATA0_Type;
#define REG_CAN0_MB17_DATA0		(*(RwReg *)0x2006C620UL)

#else
#define REG_CAN0_MB17_DATA0		(0x2006C620) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB18_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB18_DATA0_Type;
#define REG_CAN0_MB18_DATA0		(*(RwReg *)0x2006C640UL)

#else
#define REG_CAN0_MB18_DATA0		(0x2006C640) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB19_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB19_DATA0_Type;
#define REG_CAN0_MB19_DATA0		(*(RwReg *)0x2006C660UL)

#else
#define REG_CAN0_MB19_DATA0		(0x2006C660) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB20_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB20_DATA0_Type;
#define REG_CAN0_MB20_DATA0		(*(RwReg *)0x2006C680UL)

#else
#define REG_CAN0_MB20_DATA0		(0x2006C680) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB21_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB21_DATA0_Type;
#define REG_CAN0_MB21_DATA0		(*(RwReg *)0x2006C6A0UL)

#else
#define REG_CAN0_MB21_DATA0		(0x2006C6A0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB22_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB22_DATA0_Type;
#define REG_CAN0_MB22_DATA0		(*(RwReg *)0x2006C6C0UL)

#else
#define REG_CAN0_MB22_DATA0		(0x2006C6C0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB23_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB23_DATA0_Type;
#define REG_CAN0_MB23_DATA0		(*(RwReg *)0x2006C6E0UL)

#else
#define REG_CAN0_MB23_DATA0		(0x2006C6E0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB24_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB24_DATA0_Type;
#define REG_CAN0_MB24_DATA0		(*(RwReg *)0x2006C700UL)

#else
#define REG_CAN0_MB24_DATA0		(0x2006C700) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB25_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB25_DATA0_Type;
#define REG_CAN0_MB25_DATA0		(*(RwReg *)0x2006C720UL)

#else
#define REG_CAN0_MB25_DATA0		(0x2006C720) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB26_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB26_DATA0_Type;
#define REG_CAN0_MB26_DATA0		(*(RwReg *)0x2006C740UL)

#else
#define REG_CAN0_MB26_DATA0		(0x2006C740) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB27_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB27_DATA0_Type;
#define REG_CAN0_MB27_DATA0		(*(RwReg *)0x2006C760UL)

#else
#define REG_CAN0_MB27_DATA0		(0x2006C760) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB28_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB28_DATA0_Type;
#define REG_CAN0_MB28_DATA0		(*(RwReg *)0x2006C780UL)

#else
#define REG_CAN0_MB28_DATA0		(0x2006C780) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB29_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB29_DATA0_Type;
#define REG_CAN0_MB29_DATA0		(*(RwReg *)0x2006C7A0UL)

#else
#define REG_CAN0_MB29_DATA0		(0x2006C7A0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB30_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB30_DATA0_Type;
#define REG_CAN0_MB30_DATA0		(*(RwReg *)0x2006C7C0UL)

#else
#define REG_CAN0_MB30_DATA0		(0x2006C7C0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB31_DATA0 : (32) CAN0 Mailbox Word 0 Register ----- */
typedef union {
	struct {
		uint32_t DFB7:8;			/*!< bit	0..7	Data Field Byte 7	*/
		uint32_t DFB6:8;			/*!< bit	8..15	Data Field Byte 6	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB31_DATA0_Type;
#define REG_CAN0_MB31_DATA0		(*(RwReg *)0x2006C7E0UL)

#else
#define REG_CAN0_MB31_DATA0		(0x2006C7E0) /**< \brief (CAN0) CAN0 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB00_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB00_DATA1_Type;
#define REG_CAN0_MB00_DATA1		(*(RwReg *)0x2006C404UL)

#else
#define REG_CAN0_MB00_DATA1		(0x2006C404) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB01_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB01_DATA1_Type;
#define REG_CAN0_MB01_DATA1		(*(RwReg *)0x2006C424UL)

#else
#define REG_CAN0_MB01_DATA1		(0x2006C424) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB02_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB02_DATA1_Type;
#define REG_CAN0_MB02_DATA1		(*(RwReg *)0x2006C444UL)

#else
#define REG_CAN0_MB02_DATA1		(0x2006C444) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB03_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB03_DATA1_Type;
#define REG_CAN0_MB03_DATA1		(*(RwReg *)0x2006C464UL)

#else
#define REG_CAN0_MB03_DATA1		(0x2006C464) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB04_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB04_DATA1_Type;
#define REG_CAN0_MB04_DATA1		(*(RwReg *)0x2006C484UL)

#else
#define REG_CAN0_MB04_DATA1		(0x2006C484) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB05_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB05_DATA1_Type;
#define REG_CAN0_MB05_DATA1		(*(RwReg *)0x2006C4A4UL)

#else
#define REG_CAN0_MB05_DATA1		(0x2006C4A4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB06_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB06_DATA1_Type;
#define REG_CAN0_MB06_DATA1		(*(RwReg *)0x2006C4C4UL)

#else
#define REG_CAN0_MB06_DATA1		(0x2006C4C4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB07_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB07_DATA1_Type;
#define REG_CAN0_MB07_DATA1		(*(RwReg *)0x2006C4E4UL)

#else
#define REG_CAN0_MB07_DATA1		(0x2006C4E4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB08_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB08_DATA1_Type;
#define REG_CAN0_MB08_DATA1		(*(RwReg *)0x2006C504UL)

#else
#define REG_CAN0_MB08_DATA1		(0x2006C504) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB09_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB09_DATA1_Type;
#define REG_CAN0_MB09_DATA1		(*(RwReg *)0x2006C524UL)

#else
#define REG_CAN0_MB09_DATA1		(0x2006C524) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB10_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB10_DATA1_Type;
#define REG_CAN0_MB10_DATA1		(*(RwReg *)0x2006C544UL)

#else
#define REG_CAN0_MB10_DATA1		(0x2006C544) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB11_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB11_DATA1_Type;
#define REG_CAN0_MB11_DATA1		(*(RwReg *)0x2006C564UL)

#else
#define REG_CAN0_MB11_DATA1		(0x2006C564) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB12_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB12_DATA1_Type;
#define REG_CAN0_MB12_DATA1		(*(RwReg *)0x2006C584UL)

#else
#define REG_CAN0_MB12_DATA1		(0x2006C584) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB13_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB13_DATA1_Type;
#define REG_CAN0_MB13_DATA1		(*(RwReg *)0x2006C5A4UL)

#else
#define REG_CAN0_MB13_DATA1		(0x2006C5A4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB14_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB14_DATA1_Type;
#define REG_CAN0_MB14_DATA1		(*(RwReg *)0x2006C5C4UL)

#else
#define REG_CAN0_MB14_DATA1		(0x2006C5C4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB15_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB15_DATA1_Type;
#define REG_CAN0_MB15_DATA1		(*(RwReg *)0x2006C5E4UL)

#else
#define REG_CAN0_MB15_DATA1		(0x2006C5E4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB16_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB16_DATA1_Type;
#define REG_CAN0_MB16_DATA1		(*(RwReg *)0x2006C604UL)

#else
#define REG_CAN0_MB16_DATA1		(0x2006C604) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB17_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB17_DATA1_Type;
#define REG_CAN0_MB17_DATA1		(*(RwReg *)0x2006C624UL)

#else
#define REG_CAN0_MB17_DATA1		(0x2006C624) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB18_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB18_DATA1_Type;
#define REG_CAN0_MB18_DATA1		(*(RwReg *)0x2006C644UL)

#else
#define REG_CAN0_MB18_DATA1		(0x2006C644) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB19_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB19_DATA1_Type;
#define REG_CAN0_MB19_DATA1		(*(RwReg *)0x2006C664UL)

#else
#define REG_CAN0_MB19_DATA1		(0x2006C664) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB20_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB20_DATA1_Type;
#define REG_CAN0_MB20_DATA1		(*(RwReg *)0x2006C684UL)

#else
#define REG_CAN0_MB20_DATA1		(0x2006C684) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB21_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB21_DATA1_Type;
#define REG_CAN0_MB21_DATA1		(*(RwReg *)0x2006C6A4UL)

#else
#define REG_CAN0_MB21_DATA1		(0x2006C6A4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB22_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB22_DATA1_Type;
#define REG_CAN0_MB22_DATA1		(*(RwReg *)0x2006C6C4UL)

#else
#define REG_CAN0_MB22_DATA1		(0x2006C6C4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB23_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB23_DATA1_Type;
#define REG_CAN0_MB23_DATA1		(*(RwReg *)0x2006C6E4UL)

#else
#define REG_CAN0_MB23_DATA1		(0x2006C6E4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB24_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB24_DATA1_Type;
#define REG_CAN0_MB24_DATA1		(*(RwReg *)0x2006C704UL)

#else
#define REG_CAN0_MB24_DATA1		(0x2006C704) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB25_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB25_DATA1_Type;
#define REG_CAN0_MB25_DATA1		(*(RwReg *)0x2006C724UL)

#else
#define REG_CAN0_MB25_DATA1		(0x2006C724) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB26_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB26_DATA1_Type;
#define REG_CAN0_MB26_DATA1		(*(RwReg *)0x2006C744UL)

#else
#define REG_CAN0_MB26_DATA1		(0x2006C744) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB27_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB27_DATA1_Type;
#define REG_CAN0_MB27_DATA1		(*(RwReg *)0x2006C764UL)

#else
#define REG_CAN0_MB27_DATA1		(0x2006C764) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB28_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB28_DATA1_Type;
#define REG_CAN0_MB28_DATA1		(*(RwReg *)0x2006C784UL)

#else
#define REG_CAN0_MB28_DATA1		(0x2006C784) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB29_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB29_DATA1_Type;
#define REG_CAN0_MB29_DATA1		(*(RwReg *)0x2006C7A4UL)

#else
#define REG_CAN0_MB29_DATA1		(0x2006C7A4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB30_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB30_DATA1_Type;
#define REG_CAN0_MB30_DATA1		(*(RwReg *)0x2006C7C4UL)

#else
#define REG_CAN0_MB30_DATA1		(0x2006C7C4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB31_DATA1 : (32) CAN0 Mailbox Word 1 Register ----- */
typedef union {
	struct {
		uint32_t DFB5:8;			/*!< bit	0..7	Data Field Byte 5	*/
		uint32_t DFB4:8;			/*!< bit	8..15	Data Field Byte 4	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB31_DATA1_Type;
#define REG_CAN0_MB31_DATA1		(*(RwReg *)0x2006C7E4UL)

#else
#define REG_CAN0_MB31_DATA1		(0x2006C7E4) /**< \brief (CAN0) CAN0 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB00_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB00_DATA2_Type;
#define REG_CAN0_MB00_DATA2		(*(RwReg *)0x2006C408UL)

#else
#define REG_CAN0_MB00_DATA2		(0x2006C408) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB01_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB01_DATA2_Type;
#define REG_CAN0_MB01_DATA2		(*(RwReg *)0x2006C428UL)

#else
#define REG_CAN0_MB01_DATA2		(0x2006C428) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB02_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB02_DATA2_Type;
#define REG_CAN0_MB02_DATA2		(*(RwReg *)0x2006C448UL)

#else
#define REG_CAN0_MB02_DATA2		(0x2006C448) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB03_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB03_DATA2_Type;
#define REG_CAN0_MB03_DATA2		(*(RwReg *)0x2006C468UL)

#else
#define REG_CAN0_MB03_DATA2		(0x2006C468) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB04_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB04_DATA2_Type;
#define REG_CAN0_MB04_DATA2		(*(RwReg *)0x2006C488UL)

#else
#define REG_CAN0_MB04_DATA2		(0x2006C488) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB05_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB05_DATA2_Type;
#define REG_CAN0_MB05_DATA2		(*(RwReg *)0x2006C4A8UL)

#else
#define REG_CAN0_MB05_DATA2		(0x2006C4A8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB06_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB06_DATA2_Type;
#define REG_CAN0_MB06_DATA2		(*(RwReg *)0x2006C4C8UL)

#else
#define REG_CAN0_MB06_DATA2		(0x2006C4C8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB07_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB07_DATA2_Type;
#define REG_CAN0_MB07_DATA2		(*(RwReg *)0x2006C4E8UL)

#else
#define REG_CAN0_MB07_DATA2		(0x2006C4E8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB08_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB08_DATA2_Type;
#define REG_CAN0_MB08_DATA2		(*(RwReg *)0x2006C508UL)

#else
#define REG_CAN0_MB08_DATA2		(0x2006C508) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB09_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB09_DATA2_Type;
#define REG_CAN0_MB09_DATA2		(*(RwReg *)0x2006C528UL)

#else
#define REG_CAN0_MB09_DATA2		(0x2006C528) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB10_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB10_DATA2_Type;
#define REG_CAN0_MB10_DATA2		(*(RwReg *)0x2006C548UL)

#else
#define REG_CAN0_MB10_DATA2		(0x2006C548) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB11_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB11_DATA2_Type;
#define REG_CAN0_MB11_DATA2		(*(RwReg *)0x2006C568UL)

#else
#define REG_CAN0_MB11_DATA2		(0x2006C568) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB12_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB12_DATA2_Type;
#define REG_CAN0_MB12_DATA2		(*(RwReg *)0x2006C588UL)

#else
#define REG_CAN0_MB12_DATA2		(0x2006C588) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB13_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB13_DATA2_Type;
#define REG_CAN0_MB13_DATA2		(*(RwReg *)0x2006C5A8UL)

#else
#define REG_CAN0_MB13_DATA2		(0x2006C5A8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB14_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB14_DATA2_Type;
#define REG_CAN0_MB14_DATA2		(*(RwReg *)0x2006C5C8UL)

#else
#define REG_CAN0_MB14_DATA2		(0x2006C5C8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB15_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB15_DATA2_Type;
#define REG_CAN0_MB15_DATA2		(*(RwReg *)0x2006C5E8UL)

#else
#define REG_CAN0_MB15_DATA2		(0x2006C5E8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB16_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB16_DATA2_Type;
#define REG_CAN0_MB16_DATA2		(*(RwReg *)0x2006C608UL)

#else
#define REG_CAN0_MB16_DATA2		(0x2006C608) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB17_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB17_DATA2_Type;
#define REG_CAN0_MB17_DATA2		(*(RwReg *)0x2006C628UL)

#else
#define REG_CAN0_MB17_DATA2		(0x2006C628) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB18_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB18_DATA2_Type;
#define REG_CAN0_MB18_DATA2		(*(RwReg *)0x2006C648UL)

#else
#define REG_CAN0_MB18_DATA2		(0x2006C648) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB19_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB19_DATA2_Type;
#define REG_CAN0_MB19_DATA2		(*(RwReg *)0x2006C668UL)

#else
#define REG_CAN0_MB19_DATA2		(0x2006C668) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB20_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB20_DATA2_Type;
#define REG_CAN0_MB20_DATA2		(*(RwReg *)0x2006C688UL)

#else
#define REG_CAN0_MB20_DATA2		(0x2006C688) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB21_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB21_DATA2_Type;
#define REG_CAN0_MB21_DATA2		(*(RwReg *)0x2006C6A8UL)

#else
#define REG_CAN0_MB21_DATA2		(0x2006C6A8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB22_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB22_DATA2_Type;
#define REG_CAN0_MB22_DATA2		(*(RwReg *)0x2006C6C8UL)

#else
#define REG_CAN0_MB22_DATA2		(0x2006C6C8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB23_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB23_DATA2_Type;
#define REG_CAN0_MB23_DATA2		(*(RwReg *)0x2006C6E8UL)

#else
#define REG_CAN0_MB23_DATA2		(0x2006C6E8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB24_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB24_DATA2_Type;
#define REG_CAN0_MB24_DATA2		(*(RwReg *)0x2006C708UL)

#else
#define REG_CAN0_MB24_DATA2		(0x2006C708) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB25_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB25_DATA2_Type;
#define REG_CAN0_MB25_DATA2		(*(RwReg *)0x2006C728UL)

#else
#define REG_CAN0_MB25_DATA2		(0x2006C728) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB26_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB26_DATA2_Type;
#define REG_CAN0_MB26_DATA2		(*(RwReg *)0x2006C748UL)

#else
#define REG_CAN0_MB26_DATA2		(0x2006C748) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB27_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB27_DATA2_Type;
#define REG_CAN0_MB27_DATA2		(*(RwReg *)0x2006C768UL)

#else
#define REG_CAN0_MB27_DATA2		(0x2006C768) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB28_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB28_DATA2_Type;
#define REG_CAN0_MB28_DATA2		(*(RwReg *)0x2006C788UL)

#else
#define REG_CAN0_MB28_DATA2		(0x2006C788) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB29_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB29_DATA2_Type;
#define REG_CAN0_MB29_DATA2		(*(RwReg *)0x2006C7A8UL)

#else
#define REG_CAN0_MB29_DATA2		(0x2006C7A8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB30_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB30_DATA2_Type;
#define REG_CAN0_MB30_DATA2		(*(RwReg *)0x2006C7C8UL)

#else
#define REG_CAN0_MB30_DATA2		(0x2006C7C8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB31_DATA2 : (32) CAN0 Mailbox Word 2 Register ----- */
typedef union {
	struct {
		uint32_t DFB3:8;			/*!< bit	0..7	Data Field Byte 3	*/
		uint32_t DFB2:8;			/*!< bit	8..15	Data Field Byte 2	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB31_DATA2_Type;
#define REG_CAN0_MB31_DATA2		(*(RwReg *)0x2006C7E8UL)

#else
#define REG_CAN0_MB31_DATA2		(0x2006C7E8) /**< \brief (CAN0) CAN0 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB00_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB00_DATA3_Type;
#define REG_CAN0_MB00_DATA3		(*(RwReg *)0x2006C40CUL)

#else
#define REG_CAN0_MB00_DATA3		(0x2006C40C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB01_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB01_DATA3_Type;
#define REG_CAN0_MB01_DATA3		(*(RwReg *)0x2006C42CUL)

#else
#define REG_CAN0_MB01_DATA3		(0x2006C42C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB02_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB02_DATA3_Type;
#define REG_CAN0_MB02_DATA3		(*(RwReg *)0x2006C44CUL)

#else
#define REG_CAN0_MB02_DATA3		(0x2006C44C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB03_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB03_DATA3_Type;
#define REG_CAN0_MB03_DATA3		(*(RwReg *)0x2006C46CUL)

#else
#define REG_CAN0_MB03_DATA3		(0x2006C46C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB04_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB04_DATA3_Type;
#define REG_CAN0_MB04_DATA3		(*(RwReg *)0x2006C48CUL)

#else
#define REG_CAN0_MB04_DATA3		(0x2006C48C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB05_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB05_DATA3_Type;
#define REG_CAN0_MB05_DATA3		(*(RwReg *)0x2006C4ACUL)

#else
#define REG_CAN0_MB05_DATA3		(0x2006C4AC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB06_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB06_DATA3_Type;
#define REG_CAN0_MB06_DATA3		(*(RwReg *)0x2006C4CCUL)

#else
#define REG_CAN0_MB06_DATA3		(0x2006C4CC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB07_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB07_DATA3_Type;
#define REG_CAN0_MB07_DATA3		(*(RwReg *)0x2006C4ECUL)

#else
#define REG_CAN0_MB07_DATA3		(0x2006C4EC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB08_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB08_DATA3_Type;
#define REG_CAN0_MB08_DATA3		(*(RwReg *)0x2006C50CUL)

#else
#define REG_CAN0_MB08_DATA3		(0x2006C50C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB09_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB09_DATA3_Type;
#define REG_CAN0_MB09_DATA3		(*(RwReg *)0x2006C52CUL)

#else
#define REG_CAN0_MB09_DATA3		(0x2006C52C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB10_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB10_DATA3_Type;
#define REG_CAN0_MB10_DATA3		(*(RwReg *)0x2006C54CUL)

#else
#define REG_CAN0_MB10_DATA3		(0x2006C54C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB11_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB11_DATA3_Type;
#define REG_CAN0_MB11_DATA3		(*(RwReg *)0x2006C56CUL)

#else
#define REG_CAN0_MB11_DATA3		(0x2006C56C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB12_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB12_DATA3_Type;
#define REG_CAN0_MB12_DATA3		(*(RwReg *)0x2006C58CUL)

#else
#define REG_CAN0_MB12_DATA3		(0x2006C58C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB13_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB13_DATA3_Type;
#define REG_CAN0_MB13_DATA3		(*(RwReg *)0x2006C5ACUL)

#else
#define REG_CAN0_MB13_DATA3		(0x2006C5AC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB14_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB14_DATA3_Type;
#define REG_CAN0_MB14_DATA3		(*(RwReg *)0x2006C5CCUL)

#else
#define REG_CAN0_MB14_DATA3		(0x2006C5CC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB15_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB15_DATA3_Type;
#define REG_CAN0_MB15_DATA3		(*(RwReg *)0x2006C5ECUL)

#else
#define REG_CAN0_MB15_DATA3		(0x2006C5EC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB16_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB16_DATA3_Type;
#define REG_CAN0_MB16_DATA3		(*(RwReg *)0x2006C60CUL)

#else
#define REG_CAN0_MB16_DATA3		(0x2006C60C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB17_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB17_DATA3_Type;
#define REG_CAN0_MB17_DATA3		(*(RwReg *)0x2006C62CUL)

#else
#define REG_CAN0_MB17_DATA3		(0x2006C62C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB18_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB18_DATA3_Type;
#define REG_CAN0_MB18_DATA3		(*(RwReg *)0x2006C64CUL)

#else
#define REG_CAN0_MB18_DATA3		(0x2006C64C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB19_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB19_DATA3_Type;
#define REG_CAN0_MB19_DATA3		(*(RwReg *)0x2006C66CUL)

#else
#define REG_CAN0_MB19_DATA3		(0x2006C66C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB20_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB20_DATA3_Type;
#define REG_CAN0_MB20_DATA3		(*(RwReg *)0x2006C68CUL)

#else
#define REG_CAN0_MB20_DATA3		(0x2006C68C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB21_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB21_DATA3_Type;
#define REG_CAN0_MB21_DATA3		(*(RwReg *)0x2006C6ACUL)

#else
#define REG_CAN0_MB21_DATA3		(0x2006C6AC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB22_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB22_DATA3_Type;
#define REG_CAN0_MB22_DATA3		(*(RwReg *)0x2006C6CCUL)

#else
#define REG_CAN0_MB22_DATA3		(0x2006C6CC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB23_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB23_DATA3_Type;
#define REG_CAN0_MB23_DATA3		(*(RwReg *)0x2006C6ECUL)

#else
#define REG_CAN0_MB23_DATA3		(0x2006C6EC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB24_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB24_DATA3_Type;
#define REG_CAN0_MB24_DATA3		(*(RwReg *)0x2006C70CUL)

#else
#define REG_CAN0_MB24_DATA3		(0x2006C70C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB25_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB25_DATA3_Type;
#define REG_CAN0_MB25_DATA3		(*(RwReg *)0x2006C72CUL)

#else
#define REG_CAN0_MB25_DATA3		(0x2006C72C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB26_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB26_DATA3_Type;
#define REG_CAN0_MB26_DATA3		(*(RwReg *)0x2006C74CUL)

#else
#define REG_CAN0_MB26_DATA3		(0x2006C74C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB27_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB27_DATA3_Type;
#define REG_CAN0_MB27_DATA3		(*(RwReg *)0x2006C76CUL)

#else
#define REG_CAN0_MB27_DATA3		(0x2006C76C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB28_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB28_DATA3_Type;
#define REG_CAN0_MB28_DATA3		(*(RwReg *)0x2006C78CUL)

#else
#define REG_CAN0_MB28_DATA3		(0x2006C78C) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB29_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB29_DATA3_Type;
#define REG_CAN0_MB29_DATA3		(*(RwReg *)0x2006C7ACUL)

#else
#define REG_CAN0_MB29_DATA3		(0x2006C7AC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB30_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB30_DATA3_Type;
#define REG_CAN0_MB30_DATA3		(*(RwReg *)0x2006C7CCUL)

#else
#define REG_CAN0_MB30_DATA3		(0x2006C7CC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB31_DATA3 : (32) CAN0 Mailbox Word 3 Register ----- */
typedef union {
	struct {
		uint32_t DFB1:8;			/*!< bit	0..7	Data Field Byte 1	*/
		uint32_t DFB0:8;			/*!< bit	8..15	Data Field Byte 0	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB31_DATA3_Type;
#define REG_CAN0_MB31_DATA3		(*(RwReg *)0x2006C7ECUL)

#else
#define REG_CAN0_MB31_DATA3		(0x2006C7EC) /**< \brief (CAN0) CAN0 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB00_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB00_LENGTH_Type;
#define REG_CAN0_MB00_LENGTH		(*(RwReg *)0x2006C410UL)

#else
#define REG_CAN0_MB00_LENGTH		(0x2006C410) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB01_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB01_LENGTH_Type;
#define REG_CAN0_MB01_LENGTH		(*(RwReg *)0x2006C430UL)

#else
#define REG_CAN0_MB01_LENGTH		(0x2006C430) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB02_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB02_LENGTH_Type;
#define REG_CAN0_MB02_LENGTH		(*(RwReg *)0x2006C450UL)

#else
#define REG_CAN0_MB02_LENGTH		(0x2006C450) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB03_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB03_LENGTH_Type;
#define REG_CAN0_MB03_LENGTH		(*(RwReg *)0x2006C470UL)

#else
#define REG_CAN0_MB03_LENGTH		(0x2006C470) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB04_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB04_LENGTH_Type;
#define REG_CAN0_MB04_LENGTH		(*(RwReg *)0x2006C490UL)

#else
#define REG_CAN0_MB04_LENGTH		(0x2006C490) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB05_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB05_LENGTH_Type;
#define REG_CAN0_MB05_LENGTH		(*(RwReg *)0x2006C4B0UL)

#else
#define REG_CAN0_MB05_LENGTH		(0x2006C4B0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB06_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB06_LENGTH_Type;
#define REG_CAN0_MB06_LENGTH		(*(RwReg *)0x2006C4D0UL)

#else
#define REG_CAN0_MB06_LENGTH		(0x2006C4D0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB07_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB07_LENGTH_Type;
#define REG_CAN0_MB07_LENGTH		(*(RwReg *)0x2006C4F0UL)

#else
#define REG_CAN0_MB07_LENGTH		(0x2006C4F0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB08_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB08_LENGTH_Type;
#define REG_CAN0_MB08_LENGTH		(*(RwReg *)0x2006C510UL)

#else
#define REG_CAN0_MB08_LENGTH		(0x2006C510) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB09_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB09_LENGTH_Type;
#define REG_CAN0_MB09_LENGTH		(*(RwReg *)0x2006C530UL)

#else
#define REG_CAN0_MB09_LENGTH		(0x2006C530) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB10_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB10_LENGTH_Type;
#define REG_CAN0_MB10_LENGTH		(*(RwReg *)0x2006C550UL)

#else
#define REG_CAN0_MB10_LENGTH		(0x2006C550) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB11_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB11_LENGTH_Type;
#define REG_CAN0_MB11_LENGTH		(*(RwReg *)0x2006C570UL)

#else
#define REG_CAN0_MB11_LENGTH		(0x2006C570) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB12_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB12_LENGTH_Type;
#define REG_CAN0_MB12_LENGTH		(*(RwReg *)0x2006C590UL)

#else
#define REG_CAN0_MB12_LENGTH		(0x2006C590) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB13_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB13_LENGTH_Type;
#define REG_CAN0_MB13_LENGTH		(*(RwReg *)0x2006C5B0UL)

#else
#define REG_CAN0_MB13_LENGTH		(0x2006C5B0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB14_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB14_LENGTH_Type;
#define REG_CAN0_MB14_LENGTH		(*(RwReg *)0x2006C5D0UL)

#else
#define REG_CAN0_MB14_LENGTH		(0x2006C5D0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB15_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB15_LENGTH_Type;
#define REG_CAN0_MB15_LENGTH		(*(RwReg *)0x2006C5F0UL)

#else
#define REG_CAN0_MB15_LENGTH		(0x2006C5F0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB16_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB16_LENGTH_Type;
#define REG_CAN0_MB16_LENGTH		(*(RwReg *)0x2006C610UL)

#else
#define REG_CAN0_MB16_LENGTH		(0x2006C610) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB17_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB17_LENGTH_Type;
#define REG_CAN0_MB17_LENGTH		(*(RwReg *)0x2006C630UL)

#else
#define REG_CAN0_MB17_LENGTH		(0x2006C630) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB18_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB18_LENGTH_Type;
#define REG_CAN0_MB18_LENGTH		(*(RwReg *)0x2006C650UL)

#else
#define REG_CAN0_MB18_LENGTH		(0x2006C650) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB19_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB19_LENGTH_Type;
#define REG_CAN0_MB19_LENGTH		(*(RwReg *)0x2006C670UL)

#else
#define REG_CAN0_MB19_LENGTH		(0x2006C670) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB20_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB20_LENGTH_Type;
#define REG_CAN0_MB20_LENGTH		(*(RwReg *)0x2006C690UL)

#else
#define REG_CAN0_MB20_LENGTH		(0x2006C690) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB21_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB21_LENGTH_Type;
#define REG_CAN0_MB21_LENGTH		(*(RwReg *)0x2006C6B0UL)

#else
#define REG_CAN0_MB21_LENGTH		(0x2006C6B0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB22_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB22_LENGTH_Type;
#define REG_CAN0_MB22_LENGTH		(*(RwReg *)0x2006C6D0UL)

#else
#define REG_CAN0_MB22_LENGTH		(0x2006C6D0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB23_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB23_LENGTH_Type;
#define REG_CAN0_MB23_LENGTH		(*(RwReg *)0x2006C6F0UL)

#else
#define REG_CAN0_MB23_LENGTH		(0x2006C6F0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB24_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB24_LENGTH_Type;
#define REG_CAN0_MB24_LENGTH		(*(RwReg *)0x2006C710UL)

#else
#define REG_CAN0_MB24_LENGTH		(0x2006C710) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB25_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB25_LENGTH_Type;
#define REG_CAN0_MB25_LENGTH		(*(RwReg *)0x2006C730UL)

#else
#define REG_CAN0_MB25_LENGTH		(0x2006C730) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB26_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB26_LENGTH_Type;
#define REG_CAN0_MB26_LENGTH		(*(RwReg *)0x2006C750UL)

#else
#define REG_CAN0_MB26_LENGTH		(0x2006C750) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB27_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB27_LENGTH_Type;
#define REG_CAN0_MB27_LENGTH		(*(RwReg *)0x2006C770UL)

#else
#define REG_CAN0_MB27_LENGTH		(0x2006C770) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB28_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB28_LENGTH_Type;
#define REG_CAN0_MB28_LENGTH		(*(RwReg *)0x2006C790UL)

#else
#define REG_CAN0_MB28_LENGTH		(0x2006C790) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB29_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB29_LENGTH_Type;
#define REG_CAN0_MB29_LENGTH		(*(RwReg *)0x2006C7B0UL)

#else
#define REG_CAN0_MB29_LENGTH		(0x2006C7B0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB30_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB30_LENGTH_Type;
#define REG_CAN0_MB30_LENGTH		(*(RwReg *)0x2006C7D0UL)

#else
#define REG_CAN0_MB30_LENGTH		(0x2006C7D0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB31_LENGTH : (32) CAN0 Mailbox Length Register ----- */
typedef union {
	struct {
		uint32_t DLC:4;			/*!< bit	0..3	Data Length Code	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB31_LENGTH_Type;
#define REG_CAN0_MB31_LENGTH		(*(RwReg *)0x2006C7F0UL)

#else
#define REG_CAN0_MB31_LENGTH		(0x2006C7F0) /**< \brief (CAN0) CAN0 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB00_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB00_TIMESTAMP_Type;
#define REG_CAN0_MB00_TIMESTAMP		(*(RwReg *)0x2006C414UL)

#else
#define REG_CAN0_MB00_TIMESTAMP		(0x2006C414) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB01_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB01_TIMESTAMP_Type;
#define REG_CAN0_MB01_TIMESTAMP		(*(RwReg *)0x2006C434UL)

#else
#define REG_CAN0_MB01_TIMESTAMP		(0x2006C434) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB02_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB02_TIMESTAMP_Type;
#define REG_CAN0_MB02_TIMESTAMP		(*(RwReg *)0x2006C454UL)

#else
#define REG_CAN0_MB02_TIMESTAMP		(0x2006C454) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB03_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB03_TIMESTAMP_Type;
#define REG_CAN0_MB03_TIMESTAMP		(*(RwReg *)0x2006C474UL)

#else
#define REG_CAN0_MB03_TIMESTAMP		(0x2006C474) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB04_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB04_TIMESTAMP_Type;
#define REG_CAN0_MB04_TIMESTAMP		(*(RwReg *)0x2006C494UL)

#else
#define REG_CAN0_MB04_TIMESTAMP		(0x2006C494) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB05_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB05_TIMESTAMP_Type;
#define REG_CAN0_MB05_TIMESTAMP		(*(RwReg *)0x2006C4B4UL)

#else
#define REG_CAN0_MB05_TIMESTAMP		(0x2006C4B4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB06_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB06_TIMESTAMP_Type;
#define REG_CAN0_MB06_TIMESTAMP		(*(RwReg *)0x2006C4D4UL)

#else
#define REG_CAN0_MB06_TIMESTAMP		(0x2006C4D4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB07_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB07_TIMESTAMP_Type;
#define REG_CAN0_MB07_TIMESTAMP		(*(RwReg *)0x2006C4F4UL)

#else
#define REG_CAN0_MB07_TIMESTAMP		(0x2006C4F4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB08_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB08_TIMESTAMP_Type;
#define REG_CAN0_MB08_TIMESTAMP		(*(RwReg *)0x2006C514UL)

#else
#define REG_CAN0_MB08_TIMESTAMP		(0x2006C514) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB09_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB09_TIMESTAMP_Type;
#define REG_CAN0_MB09_TIMESTAMP		(*(RwReg *)0x2006C534UL)

#else
#define REG_CAN0_MB09_TIMESTAMP		(0x2006C534) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB10_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB10_TIMESTAMP_Type;
#define REG_CAN0_MB10_TIMESTAMP		(*(RwReg *)0x2006C554UL)

#else
#define REG_CAN0_MB10_TIMESTAMP		(0x2006C554) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB11_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB11_TIMESTAMP_Type;
#define REG_CAN0_MB11_TIMESTAMP		(*(RwReg *)0x2006C574UL)

#else
#define REG_CAN0_MB11_TIMESTAMP		(0x2006C574) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB12_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB12_TIMESTAMP_Type;
#define REG_CAN0_MB12_TIMESTAMP		(*(RwReg *)0x2006C594UL)

#else
#define REG_CAN0_MB12_TIMESTAMP		(0x2006C594) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB13_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB13_TIMESTAMP_Type;
#define REG_CAN0_MB13_TIMESTAMP		(*(RwReg *)0x2006C5B4UL)

#else
#define REG_CAN0_MB13_TIMESTAMP		(0x2006C5B4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB14_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB14_TIMESTAMP_Type;
#define REG_CAN0_MB14_TIMESTAMP		(*(RwReg *)0x2006C5D4UL)

#else
#define REG_CAN0_MB14_TIMESTAMP		(0x2006C5D4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB15_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB15_TIMESTAMP_Type;
#define REG_CAN0_MB15_TIMESTAMP		(*(RwReg *)0x2006C5F4UL)

#else
#define REG_CAN0_MB15_TIMESTAMP		(0x2006C5F4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB16_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB16_TIMESTAMP_Type;
#define REG_CAN0_MB16_TIMESTAMP		(*(RwReg *)0x2006C614UL)

#else
#define REG_CAN0_MB16_TIMESTAMP		(0x2006C614) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB17_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB17_TIMESTAMP_Type;
#define REG_CAN0_MB17_TIMESTAMP		(*(RwReg *)0x2006C634UL)

#else
#define REG_CAN0_MB17_TIMESTAMP		(0x2006C634) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB18_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB18_TIMESTAMP_Type;
#define REG_CAN0_MB18_TIMESTAMP		(*(RwReg *)0x2006C654UL)

#else
#define REG_CAN0_MB18_TIMESTAMP		(0x2006C654) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB19_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB19_TIMESTAMP_Type;
#define REG_CAN0_MB19_TIMESTAMP		(*(RwReg *)0x2006C674UL)

#else
#define REG_CAN0_MB19_TIMESTAMP		(0x2006C674) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB20_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB20_TIMESTAMP_Type;
#define REG_CAN0_MB20_TIMESTAMP		(*(RwReg *)0x2006C694UL)

#else
#define REG_CAN0_MB20_TIMESTAMP		(0x2006C694) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB21_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB21_TIMESTAMP_Type;
#define REG_CAN0_MB21_TIMESTAMP		(*(RwReg *)0x2006C6B4UL)

#else
#define REG_CAN0_MB21_TIMESTAMP		(0x2006C6B4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB22_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB22_TIMESTAMP_Type;
#define REG_CAN0_MB22_TIMESTAMP		(*(RwReg *)0x2006C6D4UL)

#else
#define REG_CAN0_MB22_TIMESTAMP		(0x2006C6D4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB23_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB23_TIMESTAMP_Type;
#define REG_CAN0_MB23_TIMESTAMP		(*(RwReg *)0x2006C6F4UL)

#else
#define REG_CAN0_MB23_TIMESTAMP		(0x2006C6F4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB24_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB24_TIMESTAMP_Type;
#define REG_CAN0_MB24_TIMESTAMP		(*(RwReg *)0x2006C714UL)

#else
#define REG_CAN0_MB24_TIMESTAMP		(0x2006C714) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB25_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB25_TIMESTAMP_Type;
#define REG_CAN0_MB25_TIMESTAMP		(*(RwReg *)0x2006C734UL)

#else
#define REG_CAN0_MB25_TIMESTAMP		(0x2006C734) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB26_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB26_TIMESTAMP_Type;
#define REG_CAN0_MB26_TIMESTAMP		(*(RwReg *)0x2006C754UL)

#else
#define REG_CAN0_MB26_TIMESTAMP		(0x2006C754) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB27_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB27_TIMESTAMP_Type;
#define REG_CAN0_MB27_TIMESTAMP		(*(RwReg *)0x2006C774UL)

#else
#define REG_CAN0_MB27_TIMESTAMP		(0x2006C774) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB28_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB28_TIMESTAMP_Type;
#define REG_CAN0_MB28_TIMESTAMP		(*(RwReg *)0x2006C794UL)

#else
#define REG_CAN0_MB28_TIMESTAMP		(0x2006C794) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB29_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB29_TIMESTAMP_Type;
#define REG_CAN0_MB29_TIMESTAMP		(*(RwReg *)0x2006C7B4UL)

#else
#define REG_CAN0_MB29_TIMESTAMP		(0x2006C7B4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB30_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB30_TIMESTAMP_Type;
#define REG_CAN0_MB30_TIMESTAMP		(*(RwReg *)0x2006C7D4UL)

#else
#define REG_CAN0_MB30_TIMESTAMP		(0x2006C7D4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB31_TIMESTAMP : (32) CAN0 Mailbox Timestamp Register ----- */
typedef union {
	struct {
		uint32_t TSV:16;			/*!< bit	0..15	Time Stamp Value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB31_TIMESTAMP_Type;
#define REG_CAN0_MB31_TIMESTAMP		(*(RwReg *)0x2006C7F4UL)

#else
#define REG_CAN0_MB31_TIMESTAMP		(0x2006C7F4) /**< \brief (CAN0) CAN0 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB00_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB00_ID0_Type;
#define REG_CAN0_MB00_ID0		(*(RwReg *)0x2006C418UL)

#else
#define REG_CAN0_MB00_ID0		(0x2006C418) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB01_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB01_ID0_Type;
#define REG_CAN0_MB01_ID0		(*(RwReg *)0x2006C438UL)

#else
#define REG_CAN0_MB01_ID0		(0x2006C438) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB02_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB02_ID0_Type;
#define REG_CAN0_MB02_ID0		(*(RwReg *)0x2006C458UL)

#else
#define REG_CAN0_MB02_ID0		(0x2006C458) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB03_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB03_ID0_Type;
#define REG_CAN0_MB03_ID0		(*(RwReg *)0x2006C478UL)

#else
#define REG_CAN0_MB03_ID0		(0x2006C478) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB04_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB04_ID0_Type;
#define REG_CAN0_MB04_ID0		(*(RwReg *)0x2006C498UL)

#else
#define REG_CAN0_MB04_ID0		(0x2006C498) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB05_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB05_ID0_Type;
#define REG_CAN0_MB05_ID0		(*(RwReg *)0x2006C4B8UL)

#else
#define REG_CAN0_MB05_ID0		(0x2006C4B8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB06_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB06_ID0_Type;
#define REG_CAN0_MB06_ID0		(*(RwReg *)0x2006C4D8UL)

#else
#define REG_CAN0_MB06_ID0		(0x2006C4D8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB07_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB07_ID0_Type;
#define REG_CAN0_MB07_ID0		(*(RwReg *)0x2006C4F8UL)

#else
#define REG_CAN0_MB07_ID0		(0x2006C4F8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB08_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB08_ID0_Type;
#define REG_CAN0_MB08_ID0		(*(RwReg *)0x2006C518UL)

#else
#define REG_CAN0_MB08_ID0		(0x2006C518) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB09_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB09_ID0_Type;
#define REG_CAN0_MB09_ID0		(*(RwReg *)0x2006C538UL)

#else
#define REG_CAN0_MB09_ID0		(0x2006C538) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB10_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB10_ID0_Type;
#define REG_CAN0_MB10_ID0		(*(RwReg *)0x2006C558UL)

#else
#define REG_CAN0_MB10_ID0		(0x2006C558) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB11_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB11_ID0_Type;
#define REG_CAN0_MB11_ID0		(*(RwReg *)0x2006C578UL)

#else
#define REG_CAN0_MB11_ID0		(0x2006C578) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB12_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB12_ID0_Type;
#define REG_CAN0_MB12_ID0		(*(RwReg *)0x2006C598UL)

#else
#define REG_CAN0_MB12_ID0		(0x2006C598) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB13_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB13_ID0_Type;
#define REG_CAN0_MB13_ID0		(*(RwReg *)0x2006C5B8UL)

#else
#define REG_CAN0_MB13_ID0		(0x2006C5B8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB14_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB14_ID0_Type;
#define REG_CAN0_MB14_ID0		(*(RwReg *)0x2006C5D8UL)

#else
#define REG_CAN0_MB14_ID0		(0x2006C5D8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB15_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB15_ID0_Type;
#define REG_CAN0_MB15_ID0		(*(RwReg *)0x2006C5F8UL)

#else
#define REG_CAN0_MB15_ID0		(0x2006C5F8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB16_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB16_ID0_Type;
#define REG_CAN0_MB16_ID0		(*(RwReg *)0x2006C618UL)

#else
#define REG_CAN0_MB16_ID0		(0x2006C618) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB17_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB17_ID0_Type;
#define REG_CAN0_MB17_ID0		(*(RwReg *)0x2006C638UL)

#else
#define REG_CAN0_MB17_ID0		(0x2006C638) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB18_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB18_ID0_Type;
#define REG_CAN0_MB18_ID0		(*(RwReg *)0x2006C658UL)

#else
#define REG_CAN0_MB18_ID0		(0x2006C658) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB19_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB19_ID0_Type;
#define REG_CAN0_MB19_ID0		(*(RwReg *)0x2006C678UL)

#else
#define REG_CAN0_MB19_ID0		(0x2006C678) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB20_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB20_ID0_Type;
#define REG_CAN0_MB20_ID0		(*(RwReg *)0x2006C698UL)

#else
#define REG_CAN0_MB20_ID0		(0x2006C698) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB21_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB21_ID0_Type;
#define REG_CAN0_MB21_ID0		(*(RwReg *)0x2006C6B8UL)

#else
#define REG_CAN0_MB21_ID0		(0x2006C6B8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB22_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB22_ID0_Type;
#define REG_CAN0_MB22_ID0		(*(RwReg *)0x2006C6D8UL)

#else
#define REG_CAN0_MB22_ID0		(0x2006C6D8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB23_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB23_ID0_Type;
#define REG_CAN0_MB23_ID0		(*(RwReg *)0x2006C6F8UL)

#else
#define REG_CAN0_MB23_ID0		(0x2006C6F8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB24_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB24_ID0_Type;
#define REG_CAN0_MB24_ID0		(*(RwReg *)0x2006C718UL)

#else
#define REG_CAN0_MB24_ID0		(0x2006C718) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB25_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB25_ID0_Type;
#define REG_CAN0_MB25_ID0		(*(RwReg *)0x2006C738UL)

#else
#define REG_CAN0_MB25_ID0		(0x2006C738) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB26_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB26_ID0_Type;
#define REG_CAN0_MB26_ID0		(*(RwReg *)0x2006C758UL)

#else
#define REG_CAN0_MB26_ID0		(0x2006C758) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB27_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB27_ID0_Type;
#define REG_CAN0_MB27_ID0		(*(RwReg *)0x2006C778UL)

#else
#define REG_CAN0_MB27_ID0		(0x2006C778) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB28_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB28_ID0_Type;
#define REG_CAN0_MB28_ID0		(*(RwReg *)0x2006C798UL)

#else
#define REG_CAN0_MB28_ID0		(0x2006C798) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB29_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB29_ID0_Type;
#define REG_CAN0_MB29_ID0		(*(RwReg *)0x2006C7B8UL)

#else
#define REG_CAN0_MB29_ID0		(0x2006C7B8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB30_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB30_ID0_Type;
#define REG_CAN0_MB30_ID0		(*(RwReg *)0x2006C7D8UL)

#else
#define REG_CAN0_MB30_ID0		(0x2006C7D8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB31_ID0 : (32) CAN0 Mailbox ID 0 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:16;			/*!< bit	0..15	Extended Identifier/Data Field Acceptance Code	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB31_ID0_Type;
#define REG_CAN0_MB31_ID0		(*(RwReg *)0x2006C7F8UL)

#else
#define REG_CAN0_MB31_ID0		(0x2006C7F8) /**< \brief (CAN0) CAN0 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB00_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB00_ID1_Type;
#define REG_CAN0_MB00_ID1		(*(RwReg *)0x2006C41CUL)

#else
#define REG_CAN0_MB00_ID1		(0x2006C41C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB01_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB01_ID1_Type;
#define REG_CAN0_MB01_ID1		(*(RwReg *)0x2006C43CUL)

#else
#define REG_CAN0_MB01_ID1		(0x2006C43C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB02_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB02_ID1_Type;
#define REG_CAN0_MB02_ID1		(*(RwReg *)0x2006C45CUL)

#else
#define REG_CAN0_MB02_ID1		(0x2006C45C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB03_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB03_ID1_Type;
#define REG_CAN0_MB03_ID1		(*(RwReg *)0x2006C47CUL)

#else
#define REG_CAN0_MB03_ID1		(0x2006C47C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB04_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB04_ID1_Type;
#define REG_CAN0_MB04_ID1		(*(RwReg *)0x2006C49CUL)

#else
#define REG_CAN0_MB04_ID1		(0x2006C49C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB05_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB05_ID1_Type;
#define REG_CAN0_MB05_ID1		(*(RwReg *)0x2006C4BCUL)

#else
#define REG_CAN0_MB05_ID1		(0x2006C4BC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB06_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB06_ID1_Type;
#define REG_CAN0_MB06_ID1		(*(RwReg *)0x2006C4DCUL)

#else
#define REG_CAN0_MB06_ID1		(0x2006C4DC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB07_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB07_ID1_Type;
#define REG_CAN0_MB07_ID1		(*(RwReg *)0x2006C4FCUL)

#else
#define REG_CAN0_MB07_ID1		(0x2006C4FC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB08_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB08_ID1_Type;
#define REG_CAN0_MB08_ID1		(*(RwReg *)0x2006C51CUL)

#else
#define REG_CAN0_MB08_ID1		(0x2006C51C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB09_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB09_ID1_Type;
#define REG_CAN0_MB09_ID1		(*(RwReg *)0x2006C53CUL)

#else
#define REG_CAN0_MB09_ID1		(0x2006C53C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB10_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB10_ID1_Type;
#define REG_CAN0_MB10_ID1		(*(RwReg *)0x2006C55CUL)

#else
#define REG_CAN0_MB10_ID1		(0x2006C55C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB11_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB11_ID1_Type;
#define REG_CAN0_MB11_ID1		(*(RwReg *)0x2006C57CUL)

#else
#define REG_CAN0_MB11_ID1		(0x2006C57C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB12_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB12_ID1_Type;
#define REG_CAN0_MB12_ID1		(*(RwReg *)0x2006C59CUL)

#else
#define REG_CAN0_MB12_ID1		(0x2006C59C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB13_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB13_ID1_Type;
#define REG_CAN0_MB13_ID1		(*(RwReg *)0x2006C5BCUL)

#else
#define REG_CAN0_MB13_ID1		(0x2006C5BC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB14_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB14_ID1_Type;
#define REG_CAN0_MB14_ID1		(*(RwReg *)0x2006C5DCUL)

#else
#define REG_CAN0_MB14_ID1		(0x2006C5DC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB15_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB15_ID1_Type;
#define REG_CAN0_MB15_ID1		(*(RwReg *)0x2006C5FCUL)

#else
#define REG_CAN0_MB15_ID1		(0x2006C5FC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB16_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB16_ID1_Type;
#define REG_CAN0_MB16_ID1		(*(RwReg *)0x2006C61CUL)

#else
#define REG_CAN0_MB16_ID1		(0x2006C61C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB17_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB17_ID1_Type;
#define REG_CAN0_MB17_ID1		(*(RwReg *)0x2006C63CUL)

#else
#define REG_CAN0_MB17_ID1		(0x2006C63C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB18_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB18_ID1_Type;
#define REG_CAN0_MB18_ID1		(*(RwReg *)0x2006C65CUL)

#else
#define REG_CAN0_MB18_ID1		(0x2006C65C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB19_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB19_ID1_Type;
#define REG_CAN0_MB19_ID1		(*(RwReg *)0x2006C67CUL)

#else
#define REG_CAN0_MB19_ID1		(0x2006C67C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB20_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB20_ID1_Type;
#define REG_CAN0_MB20_ID1		(*(RwReg *)0x2006C69CUL)

#else
#define REG_CAN0_MB20_ID1		(0x2006C69C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB21_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB21_ID1_Type;
#define REG_CAN0_MB21_ID1		(*(RwReg *)0x2006C6BCUL)

#else
#define REG_CAN0_MB21_ID1		(0x2006C6BC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB22_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB22_ID1_Type;
#define REG_CAN0_MB22_ID1		(*(RwReg *)0x2006C6DCUL)

#else
#define REG_CAN0_MB22_ID1		(0x2006C6DC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB23_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB23_ID1_Type;
#define REG_CAN0_MB23_ID1		(*(RwReg *)0x2006C6FCUL)

#else
#define REG_CAN0_MB23_ID1		(0x2006C6FC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB24_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB24_ID1_Type;
#define REG_CAN0_MB24_ID1		(*(RwReg *)0x2006C71CUL)

#else
#define REG_CAN0_MB24_ID1		(0x2006C71C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB25_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB25_ID1_Type;
#define REG_CAN0_MB25_ID1		(*(RwReg *)0x2006C73CUL)

#else
#define REG_CAN0_MB25_ID1		(0x2006C73C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB26_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB26_ID1_Type;
#define REG_CAN0_MB26_ID1		(*(RwReg *)0x2006C75CUL)

#else
#define REG_CAN0_MB26_ID1		(0x2006C75C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB27_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB27_ID1_Type;
#define REG_CAN0_MB27_ID1		(*(RwReg *)0x2006C77CUL)

#else
#define REG_CAN0_MB27_ID1		(0x2006C77C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB28_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB28_ID1_Type;
#define REG_CAN0_MB28_ID1		(*(RwReg *)0x2006C79CUL)

#else
#define REG_CAN0_MB28_ID1		(0x2006C79C) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB29_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB29_ID1_Type;
#define REG_CAN0_MB29_ID1		(*(RwReg *)0x2006C7BCUL)

#else
#define REG_CAN0_MB29_ID1		(0x2006C7BC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB30_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB30_ID1_Type;
#define REG_CAN0_MB30_ID1		(*(RwReg *)0x2006C7DCUL)

#else
#define REG_CAN0_MB30_ID1		(0x2006C7DC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CAN_MB31_ID1 : (32) CAN0 Mailbox ID 1 Register ----- */
typedef union {
	struct {
		uint32_t EXTID:2;			/*!< bit	0..1	Extended Identifier	*/
		uint32_t BASEID:11;			/*!< bit	2..12	Base Identifier	*/
		uint32_t IDE:1;			/*!< bit	13	Identifier Extension	*/
		uint32_t RTR:1;			/*!< bit	14	Remote Transmission Request	*/
		uint32_t AME:1;			/*!< bit	15	Acceptance Mask Enable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CAN_MB31_ID1_Type;
#define REG_CAN0_MB31_ID1		(*(RwReg *)0x2006C7FCUL)

#else
#define REG_CAN0_MB31_ID1		(0x2006C7FC) /**< \brief (CAN0) CAN0 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO CAN_MC1_Type		MC1;		/**< \brief CAN0 Mailbox Configuration 1 Register */
	__IO CAN_MD1_Type		MD1;		/**< \brief CAN0 Mailbox Direction 1 Register */
	__IO CAN_TRS1_Type		TRS1;		/**< \brief CAN0 Transmission Request Set 1 Register */
	__IO CAN_TRR1_Type		TRR1;		/**< \brief CAN0 Transmission Request Reset 1 Register */
	__IO CAN_TA1_Type		TA1;		/**< \brief CAN0 Transmission Acknowledge 1 Register */
	__IO CAN_AA1_Type		AA1;		/**< \brief CAN0 Abort Acknowledge 1 Register */
	__IO CAN_RMP1_Type		RMP1;		/**< \brief CAN0 Receive Message Pending 1 Register */
	__IO CAN_RML1_Type		RML1;		/**< \brief CAN0 Receive Message Lost 1 Register */
	__IO CAN_MBTIF1_Type		MBTIF1;		/**< \brief CAN0 Mailbox Transmit Interrupt Flag 1 Register */
	__IO CAN_MBRIF1_Type		MBRIF1;		/**< \brief CAN0 Mailbox Receive Interrupt Flag 1 Register */
	__IO CAN_MBIM1_Type		MBIM1;		/**< \brief CAN0 Mailbox Interrupt Mask 1 Register */
	__IO CAN_RFH1_Type		RFH1;		/**< \brief CAN0 Remote Frame Handling 1 Register */
	__IO CAN_OPSS1_Type		OPSS1;		/**< \brief CAN0 Overwrite Protection/Single Shot Transmission 1 Register */
		 RoReg8		Reserved1[0x0c];		
	__IO CAN_MC2_Type		MC2;		/**< \brief CAN0 Mailbox Configuration 2 Register */
	__IO CAN_MD2_Type		MD2;		/**< \brief CAN0 Mailbox Direction 2 Register */
	__IO CAN_TRS2_Type		TRS2;		/**< \brief CAN0 Transmission Request Set 2 Register */
	__IO CAN_TRR2_Type		TRR2;		/**< \brief CAN0 Transmission Request Reset 2 Register */
	__IO CAN_TA2_Type		TA2;		/**< \brief CAN0 Transmission Acknowledge 2 Register */
	__IO CAN_AA2_Type		AA2;		/**< \brief CAN0 Abort Acknowledge 2 Register */
	__IO CAN_RMP2_Type		RMP2;		/**< \brief CAN0 Receive Message Pending 2 Register */
	__IO CAN_RML2_Type		RML2;		/**< \brief CAN0 Receive Message Lost 2 Register */
	__IO CAN_MBTIF2_Type		MBTIF2;		/**< \brief CAN0 Mailbox Transmit Interrupt Flag 2 Register */
	__IO CAN_MBRIF2_Type		MBRIF2;		/**< \brief CAN0 Mailbox Receive Interrupt Flag 2 Register */
	__IO CAN_MBIM2_Type		MBIM2;		/**< \brief CAN0 Mailbox Interrupt Mask 2 Register */
	__IO CAN_RFH2_Type		RFH2;		/**< \brief CAN0 Remote Frame Handling 2 Register */
	__IO CAN_OPSS2_Type		OPSS2;		/**< \brief CAN0 Overwrite Protection/Single Shot Transmission 2 Register */
		 RoReg8		Reserved2[0x0c];		
	__IO CAN_CLK_Type		CLK;		/**< \brief CAN0 Clock Register */
	__IO CAN_TIMING_Type		TIMING;		/**< \brief CAN0 Timing Register */
	__IO CAN_DBG_Type		DBG;		/**< \brief CAN0 Debug Register */
	__IO CAN_STAT_Type		STAT;		/**< \brief CAN0 Status Register */
	__IO CAN_CEC_Type		CEC;		/**< \brief CAN0 Error Counter Register */
	__IO CAN_GIS_Type		GIS;		/**< \brief CAN0 Global CAN Interrupt Status Register */
	__IO CAN_GIM_Type		GIM;		/**< \brief CAN0 Global CAN Interrupt Mask Register */
	__IO CAN_GIF_Type		GIF;		/**< \brief CAN0 Global CAN Interrupt Flag Register */
	__IO CAN_CTL_Type		CTL;		/**< \brief CAN0 CAN Master Control Register */
	__IO CAN_INT_Type		INT;		/**< \brief CAN0 Interrupt Pending Register */
		 RoReg8		Reserved3[0x04];		
	__IO CAN_MBTD_Type		MBTD;		/**< \brief CAN0 Temporary Mailbox Disable Register */
	__IO CAN_EWR_Type		EWR;		/**< \brief CAN0 Error Counter Warning Level Register */
	__IO CAN_ESR_Type		ESR;		/**< \brief CAN0 Error Status Register */
		 RoReg8		Reserved4[0x0c];		
	__IO CAN_UCCNT_Type		UCCNT;		/**< \brief CAN0 Universal Counter Register */
	__IO CAN_UCRC_Type		UCRC;		/**< \brief CAN0 Universal Counter Reload/Capture Register */
	__IO CAN_UCCNF_Type		UCCNF;		/**< \brief CAN0 Universal Counter Configuration Mode Register */
		 RoReg8		Reserved5[0x30];		
	__IO CAN_AM00L_Type		AM00L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM00H_Type		AM00H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM01L_Type		AM01L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM01H_Type		AM01H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM02L_Type		AM02L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM02H_Type		AM02H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM03L_Type		AM03L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM03H_Type		AM03H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM04L_Type		AM04L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM04H_Type		AM04H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM05L_Type		AM05L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM05H_Type		AM05H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM06L_Type		AM06L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM06H_Type		AM06H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM07L_Type		AM07L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM07H_Type		AM07H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM08L_Type		AM08L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM08H_Type		AM08H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM09L_Type		AM09L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM09H_Type		AM09H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM10L_Type		AM10L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM10H_Type		AM10H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM11L_Type		AM11L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM11H_Type		AM11H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM12L_Type		AM12L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM12H_Type		AM12H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM13L_Type		AM13L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM13H_Type		AM13H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM14L_Type		AM14L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM14H_Type		AM14H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM15L_Type		AM15L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM15H_Type		AM15H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM16L_Type		AM16L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM16H_Type		AM16H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM17L_Type		AM17L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM17H_Type		AM17H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM18L_Type		AM18L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM18H_Type		AM18H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM19L_Type		AM19L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM19H_Type		AM19H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM20L_Type		AM20L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM20H_Type		AM20H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM21L_Type		AM21L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM21H_Type		AM21H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM22L_Type		AM22L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM22H_Type		AM22H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM23L_Type		AM23L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM23H_Type		AM23H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM24L_Type		AM24L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM24H_Type		AM24H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM25L_Type		AM25L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM25H_Type		AM25H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM26L_Type		AM26L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM26H_Type		AM26H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM27L_Type		AM27L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM27H_Type		AM27H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM28L_Type		AM28L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM28H_Type		AM28H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM29L_Type		AM29L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM29H_Type		AM29H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM30L_Type		AM30L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM30H_Type		AM30H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_AM31L_Type		AM31L;		/**< \brief CAN0 Acceptance Mask (L) Register */
	__IO CAN_AM31H_Type		AM31H;		/**< \brief CAN0 Acceptance Mask (H) Register */
	__IO CAN_MB00_DATA0_Type		MB00_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB00_DATA1_Type		MB00_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB00_DATA2_Type		MB00_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB00_DATA3_Type		MB00_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB00_LENGTH_Type		MB00_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB00_TIMESTAMP_Type		MB00_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB00_ID0_Type		MB00_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB00_ID1_Type		MB00_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB01_DATA0_Type		MB01_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB01_DATA1_Type		MB01_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB01_DATA2_Type		MB01_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB01_DATA3_Type		MB01_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB01_LENGTH_Type		MB01_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB01_TIMESTAMP_Type		MB01_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB01_ID0_Type		MB01_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB01_ID1_Type		MB01_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB02_DATA0_Type		MB02_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB02_DATA1_Type		MB02_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB02_DATA2_Type		MB02_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB02_DATA3_Type		MB02_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB02_LENGTH_Type		MB02_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB02_TIMESTAMP_Type		MB02_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB02_ID0_Type		MB02_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB02_ID1_Type		MB02_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB03_DATA0_Type		MB03_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB03_DATA1_Type		MB03_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB03_DATA2_Type		MB03_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB03_DATA3_Type		MB03_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB03_LENGTH_Type		MB03_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB03_TIMESTAMP_Type		MB03_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB03_ID0_Type		MB03_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB03_ID1_Type		MB03_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB04_DATA0_Type		MB04_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB04_DATA1_Type		MB04_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB04_DATA2_Type		MB04_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB04_DATA3_Type		MB04_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB04_LENGTH_Type		MB04_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB04_TIMESTAMP_Type		MB04_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB04_ID0_Type		MB04_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB04_ID1_Type		MB04_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB05_DATA0_Type		MB05_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB05_DATA1_Type		MB05_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB05_DATA2_Type		MB05_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB05_DATA3_Type		MB05_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB05_LENGTH_Type		MB05_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB05_TIMESTAMP_Type		MB05_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB05_ID0_Type		MB05_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB05_ID1_Type		MB05_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB06_DATA0_Type		MB06_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB06_DATA1_Type		MB06_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB06_DATA2_Type		MB06_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB06_DATA3_Type		MB06_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB06_LENGTH_Type		MB06_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB06_TIMESTAMP_Type		MB06_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB06_ID0_Type		MB06_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB06_ID1_Type		MB06_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB07_DATA0_Type		MB07_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB07_DATA1_Type		MB07_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB07_DATA2_Type		MB07_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB07_DATA3_Type		MB07_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB07_LENGTH_Type		MB07_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB07_TIMESTAMP_Type		MB07_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB07_ID0_Type		MB07_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB07_ID1_Type		MB07_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB08_DATA0_Type		MB08_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB08_DATA1_Type		MB08_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB08_DATA2_Type		MB08_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB08_DATA3_Type		MB08_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB08_LENGTH_Type		MB08_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB08_TIMESTAMP_Type		MB08_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB08_ID0_Type		MB08_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB08_ID1_Type		MB08_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB09_DATA0_Type		MB09_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB09_DATA1_Type		MB09_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB09_DATA2_Type		MB09_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB09_DATA3_Type		MB09_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB09_LENGTH_Type		MB09_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB09_TIMESTAMP_Type		MB09_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB09_ID0_Type		MB09_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB09_ID1_Type		MB09_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB10_DATA0_Type		MB10_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB10_DATA1_Type		MB10_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB10_DATA2_Type		MB10_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB10_DATA3_Type		MB10_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB10_LENGTH_Type		MB10_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB10_TIMESTAMP_Type		MB10_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB10_ID0_Type		MB10_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB10_ID1_Type		MB10_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB11_DATA0_Type		MB11_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB11_DATA1_Type		MB11_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB11_DATA2_Type		MB11_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB11_DATA3_Type		MB11_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB11_LENGTH_Type		MB11_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB11_TIMESTAMP_Type		MB11_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB11_ID0_Type		MB11_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB11_ID1_Type		MB11_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB12_DATA0_Type		MB12_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB12_DATA1_Type		MB12_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB12_DATA2_Type		MB12_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB12_DATA3_Type		MB12_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB12_LENGTH_Type		MB12_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB12_TIMESTAMP_Type		MB12_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB12_ID0_Type		MB12_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB12_ID1_Type		MB12_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB13_DATA0_Type		MB13_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB13_DATA1_Type		MB13_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB13_DATA2_Type		MB13_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB13_DATA3_Type		MB13_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB13_LENGTH_Type		MB13_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB13_TIMESTAMP_Type		MB13_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB13_ID0_Type		MB13_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB13_ID1_Type		MB13_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB14_DATA0_Type		MB14_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB14_DATA1_Type		MB14_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB14_DATA2_Type		MB14_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB14_DATA3_Type		MB14_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB14_LENGTH_Type		MB14_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB14_TIMESTAMP_Type		MB14_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB14_ID0_Type		MB14_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB14_ID1_Type		MB14_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB15_DATA0_Type		MB15_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB15_DATA1_Type		MB15_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB15_DATA2_Type		MB15_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB15_DATA3_Type		MB15_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB15_LENGTH_Type		MB15_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB15_TIMESTAMP_Type		MB15_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB15_ID0_Type		MB15_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB15_ID1_Type		MB15_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB16_DATA0_Type		MB16_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB16_DATA1_Type		MB16_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB16_DATA2_Type		MB16_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB16_DATA3_Type		MB16_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB16_LENGTH_Type		MB16_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB16_TIMESTAMP_Type		MB16_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB16_ID0_Type		MB16_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB16_ID1_Type		MB16_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB17_DATA0_Type		MB17_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB17_DATA1_Type		MB17_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB17_DATA2_Type		MB17_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB17_DATA3_Type		MB17_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB17_LENGTH_Type		MB17_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB17_TIMESTAMP_Type		MB17_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB17_ID0_Type		MB17_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB17_ID1_Type		MB17_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB18_DATA0_Type		MB18_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB18_DATA1_Type		MB18_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB18_DATA2_Type		MB18_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB18_DATA3_Type		MB18_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB18_LENGTH_Type		MB18_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB18_TIMESTAMP_Type		MB18_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB18_ID0_Type		MB18_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB18_ID1_Type		MB18_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB19_DATA0_Type		MB19_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB19_DATA1_Type		MB19_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB19_DATA2_Type		MB19_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB19_DATA3_Type		MB19_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB19_LENGTH_Type		MB19_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB19_TIMESTAMP_Type		MB19_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB19_ID0_Type		MB19_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB19_ID1_Type		MB19_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB20_DATA0_Type		MB20_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB20_DATA1_Type		MB20_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB20_DATA2_Type		MB20_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB20_DATA3_Type		MB20_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB20_LENGTH_Type		MB20_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB20_TIMESTAMP_Type		MB20_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB20_ID0_Type		MB20_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB20_ID1_Type		MB20_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB21_DATA0_Type		MB21_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB21_DATA1_Type		MB21_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB21_DATA2_Type		MB21_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB21_DATA3_Type		MB21_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB21_LENGTH_Type		MB21_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB21_TIMESTAMP_Type		MB21_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB21_ID0_Type		MB21_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB21_ID1_Type		MB21_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB22_DATA0_Type		MB22_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB22_DATA1_Type		MB22_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB22_DATA2_Type		MB22_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB22_DATA3_Type		MB22_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB22_LENGTH_Type		MB22_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB22_TIMESTAMP_Type		MB22_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB22_ID0_Type		MB22_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB22_ID1_Type		MB22_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB23_DATA0_Type		MB23_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB23_DATA1_Type		MB23_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB23_DATA2_Type		MB23_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB23_DATA3_Type		MB23_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB23_LENGTH_Type		MB23_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB23_TIMESTAMP_Type		MB23_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB23_ID0_Type		MB23_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB23_ID1_Type		MB23_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB24_DATA0_Type		MB24_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB24_DATA1_Type		MB24_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB24_DATA2_Type		MB24_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB24_DATA3_Type		MB24_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB24_LENGTH_Type		MB24_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB24_TIMESTAMP_Type		MB24_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB24_ID0_Type		MB24_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB24_ID1_Type		MB24_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB25_DATA0_Type		MB25_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB25_DATA1_Type		MB25_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB25_DATA2_Type		MB25_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB25_DATA3_Type		MB25_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB25_LENGTH_Type		MB25_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB25_TIMESTAMP_Type		MB25_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB25_ID0_Type		MB25_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB25_ID1_Type		MB25_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB26_DATA0_Type		MB26_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB26_DATA1_Type		MB26_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB26_DATA2_Type		MB26_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB26_DATA3_Type		MB26_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB26_LENGTH_Type		MB26_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB26_TIMESTAMP_Type		MB26_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB26_ID0_Type		MB26_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB26_ID1_Type		MB26_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB27_DATA0_Type		MB27_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB27_DATA1_Type		MB27_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB27_DATA2_Type		MB27_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB27_DATA3_Type		MB27_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB27_LENGTH_Type		MB27_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB27_TIMESTAMP_Type		MB27_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB27_ID0_Type		MB27_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB27_ID1_Type		MB27_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB28_DATA0_Type		MB28_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB28_DATA1_Type		MB28_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB28_DATA2_Type		MB28_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB28_DATA3_Type		MB28_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB28_LENGTH_Type		MB28_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB28_TIMESTAMP_Type		MB28_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB28_ID0_Type		MB28_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB28_ID1_Type		MB28_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB29_DATA0_Type		MB29_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB29_DATA1_Type		MB29_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB29_DATA2_Type		MB29_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB29_DATA3_Type		MB29_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB29_LENGTH_Type		MB29_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB29_TIMESTAMP_Type		MB29_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB29_ID0_Type		MB29_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB29_ID1_Type		MB29_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB30_DATA0_Type		MB30_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB30_DATA1_Type		MB30_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB30_DATA2_Type		MB30_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB30_DATA3_Type		MB30_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB30_LENGTH_Type		MB30_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB30_TIMESTAMP_Type		MB30_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB30_ID0_Type		MB30_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB30_ID1_Type		MB30_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
	__IO CAN_MB31_DATA0_Type		MB31_DATA0;		/**< \brief CAN0 Mailbox Word 0 Register */
	__IO CAN_MB31_DATA1_Type		MB31_DATA1;		/**< \brief CAN0 Mailbox Word 1 Register */
	__IO CAN_MB31_DATA2_Type		MB31_DATA2;		/**< \brief CAN0 Mailbox Word 2 Register */
	__IO CAN_MB31_DATA3_Type		MB31_DATA3;		/**< \brief CAN0 Mailbox Word 3 Register */
	__IO CAN_MB31_LENGTH_Type		MB31_LENGTH;		/**< \brief CAN0 Mailbox Length Register */
	__IO CAN_MB31_TIMESTAMP_Type		MB31_TIMESTAMP;		/**< \brief CAN0 Mailbox Timestamp Register */
	__IO CAN_MB31_ID0_Type		MB31_ID0;		/**< \brief CAN0 Mailbox ID 0 Register */
	__IO CAN_MB31_ID1_Type		MB31_ID1;		/**< \brief CAN0 Mailbox ID 1 Register */
} Cangroup;
#endif
#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MC1		(*(RwReg *)0x2006D200UL)

#else
#define REG_CAN1_MC1		(0x2006D200) /**< \brief (CAN1) CAN1 Mailbox Configuration 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MD1		(*(RwReg *)0x2006D204UL)

#else
#define REG_CAN1_MD1		(0x2006D204) /**< \brief (CAN1) CAN1 Mailbox Direction 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_TRS1		(*(RwReg *)0x2006D208UL)

#else
#define REG_CAN1_TRS1		(0x2006D208) /**< \brief (CAN1) CAN1 Transmission Request Set 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_TRR1		(*(RwReg *)0x2006D20CUL)

#else
#define REG_CAN1_TRR1		(0x2006D20C) /**< \brief (CAN1) CAN1 Transmission Request Reset 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_TA1		(*(RwReg *)0x2006D210UL)

#else
#define REG_CAN1_TA1		(0x2006D210) /**< \brief (CAN1) CAN1 Transmission Acknowledge 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AA1		(*(RwReg *)0x2006D214UL)

#else
#define REG_CAN1_AA1		(0x2006D214) /**< \brief (CAN1) CAN1 Abort Acknowledge 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_RMP1		(*(RwReg *)0x2006D218UL)

#else
#define REG_CAN1_RMP1		(0x2006D218) /**< \brief (CAN1) CAN1 Receive Message Pending 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_RML1		(*(RwReg *)0x2006D21CUL)

#else
#define REG_CAN1_RML1		(0x2006D21C) /**< \brief (CAN1) CAN1 Receive Message Lost 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MBTIF1		(*(RwReg *)0x2006D220UL)

#else
#define REG_CAN1_MBTIF1		(0x2006D220) /**< \brief (CAN1) CAN1 Mailbox Transmit Interrupt Flag 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MBRIF1		(*(RwReg *)0x2006D224UL)

#else
#define REG_CAN1_MBRIF1		(0x2006D224) /**< \brief (CAN1) CAN1 Mailbox Receive Interrupt Flag 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MBIM1		(*(RwReg *)0x2006D228UL)

#else
#define REG_CAN1_MBIM1		(0x2006D228) /**< \brief (CAN1) CAN1 Mailbox Interrupt Mask 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_RFH1		(*(RwReg *)0x2006D22CUL)

#else
#define REG_CAN1_RFH1		(0x2006D22C) /**< \brief (CAN1) CAN1 Remote Frame Handling 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_OPSS1		(*(RwReg *)0x2006D230UL)

#else
#define REG_CAN1_OPSS1		(0x2006D230) /**< \brief (CAN1) CAN1 Overwrite Protection/Single Shot Transmission 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MC2		(*(RwReg *)0x2006D240UL)

#else
#define REG_CAN1_MC2		(0x2006D240) /**< \brief (CAN1) CAN1 Mailbox Configuration 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MD2		(*(RwReg *)0x2006D244UL)

#else
#define REG_CAN1_MD2		(0x2006D244) /**< \brief (CAN1) CAN1 Mailbox Direction 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_TRS2		(*(RwReg *)0x2006D248UL)

#else
#define REG_CAN1_TRS2		(0x2006D248) /**< \brief (CAN1) CAN1 Transmission Request Set 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_TRR2		(*(RwReg *)0x2006D24CUL)

#else
#define REG_CAN1_TRR2		(0x2006D24C) /**< \brief (CAN1) CAN1 Transmission Request Reset 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_TA2		(*(RwReg *)0x2006D250UL)

#else
#define REG_CAN1_TA2		(0x2006D250) /**< \brief (CAN1) CAN1 Transmission Acknowledge 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AA2		(*(RwReg *)0x2006D254UL)

#else
#define REG_CAN1_AA2		(0x2006D254) /**< \brief (CAN1) CAN1 Abort Acknowledge 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_RMP2		(*(RwReg *)0x2006D258UL)

#else
#define REG_CAN1_RMP2		(0x2006D258) /**< \brief (CAN1) CAN1 Receive Message Pending 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_RML2		(*(RwReg *)0x2006D25CUL)

#else
#define REG_CAN1_RML2		(0x2006D25C) /**< \brief (CAN1) CAN1 Receive Message Lost 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MBTIF2		(*(RwReg *)0x2006D260UL)

#else
#define REG_CAN1_MBTIF2		(0x2006D260) /**< \brief (CAN1) CAN1 Mailbox Transmit Interrupt Flag 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MBRIF2		(*(RwReg *)0x2006D264UL)

#else
#define REG_CAN1_MBRIF2		(0x2006D264) /**< \brief (CAN1) CAN1 Mailbox Receive Interrupt Flag 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MBIM2		(*(RwReg *)0x2006D268UL)

#else
#define REG_CAN1_MBIM2		(0x2006D268) /**< \brief (CAN1) CAN1 Mailbox Interrupt Mask 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_RFH2		(*(RwReg *)0x2006D26CUL)

#else
#define REG_CAN1_RFH2		(0x2006D26C) /**< \brief (CAN1) CAN1 Remote Frame Handling 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_OPSS2		(*(RwReg *)0x2006D270UL)

#else
#define REG_CAN1_OPSS2		(0x2006D270) /**< \brief (CAN1) CAN1 Overwrite Protection/Single Shot Transmission 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_CLK		(*(RwReg *)0x2006D280UL)

#else
#define REG_CAN1_CLK		(0x2006D280) /**< \brief (CAN1) CAN1 Clock Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_TIMING		(*(RwReg *)0x2006D284UL)

#else
#define REG_CAN1_TIMING		(0x2006D284) /**< \brief (CAN1) CAN1 Timing Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_DBG		(*(RwReg *)0x2006D288UL)

#else
#define REG_CAN1_DBG		(0x2006D288) /**< \brief (CAN1) CAN1 Debug Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_STAT		(*(RwReg *)0x2006D28CUL)

#else
#define REG_CAN1_STAT		(0x2006D28C) /**< \brief (CAN1) CAN1 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_CEC		(*(RwReg *)0x2006D290UL)

#else
#define REG_CAN1_CEC		(0x2006D290) /**< \brief (CAN1) CAN1 Error Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_GIS		(*(RwReg *)0x2006D294UL)

#else
#define REG_CAN1_GIS		(0x2006D294) /**< \brief (CAN1) CAN1 Global CAN Interrupt Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_GIM		(*(RwReg *)0x2006D298UL)

#else
#define REG_CAN1_GIM		(0x2006D298) /**< \brief (CAN1) CAN1 Global CAN Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_GIF		(*(RwReg *)0x2006D29CUL)

#else
#define REG_CAN1_GIF		(0x2006D29C) /**< \brief (CAN1) CAN1 Global CAN Interrupt Flag Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_CTL		(*(RwReg *)0x2006D2A0UL)

#else
#define REG_CAN1_CTL		(0x2006D2A0) /**< \brief (CAN1) CAN1 CAN Master Control Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_INT		(*(RwReg *)0x2006D2A4UL)

#else
#define REG_CAN1_INT		(0x2006D2A4) /**< \brief (CAN1) CAN1 Interrupt Pending Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MBTD		(*(RwReg *)0x2006D2ACUL)

#else
#define REG_CAN1_MBTD		(0x2006D2AC) /**< \brief (CAN1) CAN1 Temporary Mailbox Disable Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_EWR		(*(RwReg *)0x2006D2B0UL)

#else
#define REG_CAN1_EWR		(0x2006D2B0) /**< \brief (CAN1) CAN1 Error Counter Warning Level Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_ESR		(*(RwReg *)0x2006D2B4UL)

#else
#define REG_CAN1_ESR		(0x2006D2B4) /**< \brief (CAN1) CAN1 Error Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_UCCNT		(*(RwReg *)0x2006D2C4UL)

#else
#define REG_CAN1_UCCNT		(0x2006D2C4) /**< \brief (CAN1) CAN1 Universal Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_UCRC		(*(RwReg *)0x2006D2C8UL)

#else
#define REG_CAN1_UCRC		(0x2006D2C8) /**< \brief (CAN1) CAN1 Universal Counter Reload/Capture Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_UCCNF		(*(RwReg *)0x2006D2CCUL)

#else
#define REG_CAN1_UCCNF		(0x2006D2CC) /**< \brief (CAN1) CAN1 Universal Counter Configuration Mode Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM00L		(*(RwReg *)0x2006D300UL)

#else
#define REG_CAN1_AM00L		(0x2006D300) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM01L		(*(RwReg *)0x2006D308UL)

#else
#define REG_CAN1_AM01L		(0x2006D308) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM02L		(*(RwReg *)0x2006D310UL)

#else
#define REG_CAN1_AM02L		(0x2006D310) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM03L		(*(RwReg *)0x2006D318UL)

#else
#define REG_CAN1_AM03L		(0x2006D318) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM04L		(*(RwReg *)0x2006D320UL)

#else
#define REG_CAN1_AM04L		(0x2006D320) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM05L		(*(RwReg *)0x2006D328UL)

#else
#define REG_CAN1_AM05L		(0x2006D328) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM06L		(*(RwReg *)0x2006D330UL)

#else
#define REG_CAN1_AM06L		(0x2006D330) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM07L		(*(RwReg *)0x2006D338UL)

#else
#define REG_CAN1_AM07L		(0x2006D338) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM08L		(*(RwReg *)0x2006D340UL)

#else
#define REG_CAN1_AM08L		(0x2006D340) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM09L		(*(RwReg *)0x2006D348UL)

#else
#define REG_CAN1_AM09L		(0x2006D348) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM10L		(*(RwReg *)0x2006D350UL)

#else
#define REG_CAN1_AM10L		(0x2006D350) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM11L		(*(RwReg *)0x2006D358UL)

#else
#define REG_CAN1_AM11L		(0x2006D358) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM12L		(*(RwReg *)0x2006D360UL)

#else
#define REG_CAN1_AM12L		(0x2006D360) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM13L		(*(RwReg *)0x2006D368UL)

#else
#define REG_CAN1_AM13L		(0x2006D368) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM14L		(*(RwReg *)0x2006D370UL)

#else
#define REG_CAN1_AM14L		(0x2006D370) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM15L		(*(RwReg *)0x2006D378UL)

#else
#define REG_CAN1_AM15L		(0x2006D378) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM16L		(*(RwReg *)0x2006D380UL)

#else
#define REG_CAN1_AM16L		(0x2006D380) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM17L		(*(RwReg *)0x2006D388UL)

#else
#define REG_CAN1_AM17L		(0x2006D388) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM18L		(*(RwReg *)0x2006D390UL)

#else
#define REG_CAN1_AM18L		(0x2006D390) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM19L		(*(RwReg *)0x2006D398UL)

#else
#define REG_CAN1_AM19L		(0x2006D398) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM20L		(*(RwReg *)0x2006D3A0UL)

#else
#define REG_CAN1_AM20L		(0x2006D3A0) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM21L		(*(RwReg *)0x2006D3A8UL)

#else
#define REG_CAN1_AM21L		(0x2006D3A8) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM22L		(*(RwReg *)0x2006D3B0UL)

#else
#define REG_CAN1_AM22L		(0x2006D3B0) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM23L		(*(RwReg *)0x2006D3B8UL)

#else
#define REG_CAN1_AM23L		(0x2006D3B8) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM24L		(*(RwReg *)0x2006D3C0UL)

#else
#define REG_CAN1_AM24L		(0x2006D3C0) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM25L		(*(RwReg *)0x2006D3C8UL)

#else
#define REG_CAN1_AM25L		(0x2006D3C8) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM26L		(*(RwReg *)0x2006D3D0UL)

#else
#define REG_CAN1_AM26L		(0x2006D3D0) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM27L		(*(RwReg *)0x2006D3D8UL)

#else
#define REG_CAN1_AM27L		(0x2006D3D8) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM28L		(*(RwReg *)0x2006D3E0UL)

#else
#define REG_CAN1_AM28L		(0x2006D3E0) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM29L		(*(RwReg *)0x2006D3E8UL)

#else
#define REG_CAN1_AM29L		(0x2006D3E8) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM30L		(*(RwReg *)0x2006D3F0UL)

#else
#define REG_CAN1_AM30L		(0x2006D3F0) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM31L		(*(RwReg *)0x2006D3F8UL)

#else
#define REG_CAN1_AM31L		(0x2006D3F8) /**< \brief (CAN1) CAN1 Acceptance Mask (L) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM00H		(*(RwReg *)0x2006D304UL)

#else
#define REG_CAN1_AM00H		(0x2006D304) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM01H		(*(RwReg *)0x2006D30CUL)

#else
#define REG_CAN1_AM01H		(0x2006D30C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM02H		(*(RwReg *)0x2006D314UL)

#else
#define REG_CAN1_AM02H		(0x2006D314) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM03H		(*(RwReg *)0x2006D31CUL)

#else
#define REG_CAN1_AM03H		(0x2006D31C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM04H		(*(RwReg *)0x2006D324UL)

#else
#define REG_CAN1_AM04H		(0x2006D324) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM05H		(*(RwReg *)0x2006D32CUL)

#else
#define REG_CAN1_AM05H		(0x2006D32C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM06H		(*(RwReg *)0x2006D334UL)

#else
#define REG_CAN1_AM06H		(0x2006D334) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM07H		(*(RwReg *)0x2006D33CUL)

#else
#define REG_CAN1_AM07H		(0x2006D33C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM08H		(*(RwReg *)0x2006D344UL)

#else
#define REG_CAN1_AM08H		(0x2006D344) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM09H		(*(RwReg *)0x2006D34CUL)

#else
#define REG_CAN1_AM09H		(0x2006D34C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM10H		(*(RwReg *)0x2006D354UL)

#else
#define REG_CAN1_AM10H		(0x2006D354) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM11H		(*(RwReg *)0x2006D35CUL)

#else
#define REG_CAN1_AM11H		(0x2006D35C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM12H		(*(RwReg *)0x2006D364UL)

#else
#define REG_CAN1_AM12H		(0x2006D364) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM13H		(*(RwReg *)0x2006D36CUL)

#else
#define REG_CAN1_AM13H		(0x2006D36C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM14H		(*(RwReg *)0x2006D374UL)

#else
#define REG_CAN1_AM14H		(0x2006D374) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM15H		(*(RwReg *)0x2006D37CUL)

#else
#define REG_CAN1_AM15H		(0x2006D37C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM16H		(*(RwReg *)0x2006D384UL)

#else
#define REG_CAN1_AM16H		(0x2006D384) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM17H		(*(RwReg *)0x2006D38CUL)

#else
#define REG_CAN1_AM17H		(0x2006D38C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM18H		(*(RwReg *)0x2006D394UL)

#else
#define REG_CAN1_AM18H		(0x2006D394) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM19H		(*(RwReg *)0x2006D39CUL)

#else
#define REG_CAN1_AM19H		(0x2006D39C) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM20H		(*(RwReg *)0x2006D3A4UL)

#else
#define REG_CAN1_AM20H		(0x2006D3A4) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM21H		(*(RwReg *)0x2006D3ACUL)

#else
#define REG_CAN1_AM21H		(0x2006D3AC) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM22H		(*(RwReg *)0x2006D3B4UL)

#else
#define REG_CAN1_AM22H		(0x2006D3B4) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM23H		(*(RwReg *)0x2006D3BCUL)

#else
#define REG_CAN1_AM23H		(0x2006D3BC) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM24H		(*(RwReg *)0x2006D3C4UL)

#else
#define REG_CAN1_AM24H		(0x2006D3C4) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM25H		(*(RwReg *)0x2006D3CCUL)

#else
#define REG_CAN1_AM25H		(0x2006D3CC) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM26H		(*(RwReg *)0x2006D3D4UL)

#else
#define REG_CAN1_AM26H		(0x2006D3D4) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM27H		(*(RwReg *)0x2006D3DCUL)

#else
#define REG_CAN1_AM27H		(0x2006D3DC) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM28H		(*(RwReg *)0x2006D3E4UL)

#else
#define REG_CAN1_AM28H		(0x2006D3E4) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM29H		(*(RwReg *)0x2006D3ECUL)

#else
#define REG_CAN1_AM29H		(0x2006D3EC) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM30H		(*(RwReg *)0x2006D3F4UL)

#else
#define REG_CAN1_AM30H		(0x2006D3F4) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_AM31H		(*(RwReg *)0x2006D3FCUL)

#else
#define REG_CAN1_AM31H		(0x2006D3FC) /**< \brief (CAN1) CAN1 Acceptance Mask (H) Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB00_DATA0		(*(RwReg *)0x2006D400UL)

#else
#define REG_CAN1_MB00_DATA0		(0x2006D400) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB01_DATA0		(*(RwReg *)0x2006D420UL)

#else
#define REG_CAN1_MB01_DATA0		(0x2006D420) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB02_DATA0		(*(RwReg *)0x2006D440UL)

#else
#define REG_CAN1_MB02_DATA0		(0x2006D440) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB03_DATA0		(*(RwReg *)0x2006D460UL)

#else
#define REG_CAN1_MB03_DATA0		(0x2006D460) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB04_DATA0		(*(RwReg *)0x2006D480UL)

#else
#define REG_CAN1_MB04_DATA0		(0x2006D480) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB05_DATA0		(*(RwReg *)0x2006D4A0UL)

#else
#define REG_CAN1_MB05_DATA0		(0x2006D4A0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB06_DATA0		(*(RwReg *)0x2006D4C0UL)

#else
#define REG_CAN1_MB06_DATA0		(0x2006D4C0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB07_DATA0		(*(RwReg *)0x2006D4E0UL)

#else
#define REG_CAN1_MB07_DATA0		(0x2006D4E0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB08_DATA0		(*(RwReg *)0x2006D500UL)

#else
#define REG_CAN1_MB08_DATA0		(0x2006D500) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB09_DATA0		(*(RwReg *)0x2006D520UL)

#else
#define REG_CAN1_MB09_DATA0		(0x2006D520) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB10_DATA0		(*(RwReg *)0x2006D540UL)

#else
#define REG_CAN1_MB10_DATA0		(0x2006D540) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB11_DATA0		(*(RwReg *)0x2006D560UL)

#else
#define REG_CAN1_MB11_DATA0		(0x2006D560) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB12_DATA0		(*(RwReg *)0x2006D580UL)

#else
#define REG_CAN1_MB12_DATA0		(0x2006D580) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB13_DATA0		(*(RwReg *)0x2006D5A0UL)

#else
#define REG_CAN1_MB13_DATA0		(0x2006D5A0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB14_DATA0		(*(RwReg *)0x2006D5C0UL)

#else
#define REG_CAN1_MB14_DATA0		(0x2006D5C0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB15_DATA0		(*(RwReg *)0x2006D5E0UL)

#else
#define REG_CAN1_MB15_DATA0		(0x2006D5E0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB16_DATA0		(*(RwReg *)0x2006D600UL)

#else
#define REG_CAN1_MB16_DATA0		(0x2006D600) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB17_DATA0		(*(RwReg *)0x2006D620UL)

#else
#define REG_CAN1_MB17_DATA0		(0x2006D620) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB18_DATA0		(*(RwReg *)0x2006D640UL)

#else
#define REG_CAN1_MB18_DATA0		(0x2006D640) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB19_DATA0		(*(RwReg *)0x2006D660UL)

#else
#define REG_CAN1_MB19_DATA0		(0x2006D660) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB20_DATA0		(*(RwReg *)0x2006D680UL)

#else
#define REG_CAN1_MB20_DATA0		(0x2006D680) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB21_DATA0		(*(RwReg *)0x2006D6A0UL)

#else
#define REG_CAN1_MB21_DATA0		(0x2006D6A0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB22_DATA0		(*(RwReg *)0x2006D6C0UL)

#else
#define REG_CAN1_MB22_DATA0		(0x2006D6C0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB23_DATA0		(*(RwReg *)0x2006D6E0UL)

#else
#define REG_CAN1_MB23_DATA0		(0x2006D6E0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB24_DATA0		(*(RwReg *)0x2006D700UL)

#else
#define REG_CAN1_MB24_DATA0		(0x2006D700) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB25_DATA0		(*(RwReg *)0x2006D720UL)

#else
#define REG_CAN1_MB25_DATA0		(0x2006D720) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB26_DATA0		(*(RwReg *)0x2006D740UL)

#else
#define REG_CAN1_MB26_DATA0		(0x2006D740) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB27_DATA0		(*(RwReg *)0x2006D760UL)

#else
#define REG_CAN1_MB27_DATA0		(0x2006D760) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB28_DATA0		(*(RwReg *)0x2006D780UL)

#else
#define REG_CAN1_MB28_DATA0		(0x2006D780) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB29_DATA0		(*(RwReg *)0x2006D7A0UL)

#else
#define REG_CAN1_MB29_DATA0		(0x2006D7A0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB30_DATA0		(*(RwReg *)0x2006D7C0UL)

#else
#define REG_CAN1_MB30_DATA0		(0x2006D7C0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB31_DATA0		(*(RwReg *)0x2006D7E0UL)

#else
#define REG_CAN1_MB31_DATA0		(0x2006D7E0) /**< \brief (CAN1) CAN1 Mailbox Word 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB00_DATA1		(*(RwReg *)0x2006D404UL)

#else
#define REG_CAN1_MB00_DATA1		(0x2006D404) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB01_DATA1		(*(RwReg *)0x2006D424UL)

#else
#define REG_CAN1_MB01_DATA1		(0x2006D424) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB02_DATA1		(*(RwReg *)0x2006D444UL)

#else
#define REG_CAN1_MB02_DATA1		(0x2006D444) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB03_DATA1		(*(RwReg *)0x2006D464UL)

#else
#define REG_CAN1_MB03_DATA1		(0x2006D464) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB04_DATA1		(*(RwReg *)0x2006D484UL)

#else
#define REG_CAN1_MB04_DATA1		(0x2006D484) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB05_DATA1		(*(RwReg *)0x2006D4A4UL)

#else
#define REG_CAN1_MB05_DATA1		(0x2006D4A4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB06_DATA1		(*(RwReg *)0x2006D4C4UL)

#else
#define REG_CAN1_MB06_DATA1		(0x2006D4C4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB07_DATA1		(*(RwReg *)0x2006D4E4UL)

#else
#define REG_CAN1_MB07_DATA1		(0x2006D4E4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB08_DATA1		(*(RwReg *)0x2006D504UL)

#else
#define REG_CAN1_MB08_DATA1		(0x2006D504) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB09_DATA1		(*(RwReg *)0x2006D524UL)

#else
#define REG_CAN1_MB09_DATA1		(0x2006D524) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB10_DATA1		(*(RwReg *)0x2006D544UL)

#else
#define REG_CAN1_MB10_DATA1		(0x2006D544) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB11_DATA1		(*(RwReg *)0x2006D564UL)

#else
#define REG_CAN1_MB11_DATA1		(0x2006D564) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB12_DATA1		(*(RwReg *)0x2006D584UL)

#else
#define REG_CAN1_MB12_DATA1		(0x2006D584) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB13_DATA1		(*(RwReg *)0x2006D5A4UL)

#else
#define REG_CAN1_MB13_DATA1		(0x2006D5A4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB14_DATA1		(*(RwReg *)0x2006D5C4UL)

#else
#define REG_CAN1_MB14_DATA1		(0x2006D5C4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB15_DATA1		(*(RwReg *)0x2006D5E4UL)

#else
#define REG_CAN1_MB15_DATA1		(0x2006D5E4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB16_DATA1		(*(RwReg *)0x2006D604UL)

#else
#define REG_CAN1_MB16_DATA1		(0x2006D604) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB17_DATA1		(*(RwReg *)0x2006D624UL)

#else
#define REG_CAN1_MB17_DATA1		(0x2006D624) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB18_DATA1		(*(RwReg *)0x2006D644UL)

#else
#define REG_CAN1_MB18_DATA1		(0x2006D644) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB19_DATA1		(*(RwReg *)0x2006D664UL)

#else
#define REG_CAN1_MB19_DATA1		(0x2006D664) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB20_DATA1		(*(RwReg *)0x2006D684UL)

#else
#define REG_CAN1_MB20_DATA1		(0x2006D684) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB21_DATA1		(*(RwReg *)0x2006D6A4UL)

#else
#define REG_CAN1_MB21_DATA1		(0x2006D6A4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB22_DATA1		(*(RwReg *)0x2006D6C4UL)

#else
#define REG_CAN1_MB22_DATA1		(0x2006D6C4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB23_DATA1		(*(RwReg *)0x2006D6E4UL)

#else
#define REG_CAN1_MB23_DATA1		(0x2006D6E4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB24_DATA1		(*(RwReg *)0x2006D704UL)

#else
#define REG_CAN1_MB24_DATA1		(0x2006D704) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB25_DATA1		(*(RwReg *)0x2006D724UL)

#else
#define REG_CAN1_MB25_DATA1		(0x2006D724) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB26_DATA1		(*(RwReg *)0x2006D744UL)

#else
#define REG_CAN1_MB26_DATA1		(0x2006D744) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB27_DATA1		(*(RwReg *)0x2006D764UL)

#else
#define REG_CAN1_MB27_DATA1		(0x2006D764) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB28_DATA1		(*(RwReg *)0x2006D784UL)

#else
#define REG_CAN1_MB28_DATA1		(0x2006D784) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB29_DATA1		(*(RwReg *)0x2006D7A4UL)

#else
#define REG_CAN1_MB29_DATA1		(0x2006D7A4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB30_DATA1		(*(RwReg *)0x2006D7C4UL)

#else
#define REG_CAN1_MB30_DATA1		(0x2006D7C4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB31_DATA1		(*(RwReg *)0x2006D7E4UL)

#else
#define REG_CAN1_MB31_DATA1		(0x2006D7E4) /**< \brief (CAN1) CAN1 Mailbox Word 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB00_DATA2		(*(RwReg *)0x2006D408UL)

#else
#define REG_CAN1_MB00_DATA2		(0x2006D408) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB01_DATA2		(*(RwReg *)0x2006D428UL)

#else
#define REG_CAN1_MB01_DATA2		(0x2006D428) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB02_DATA2		(*(RwReg *)0x2006D448UL)

#else
#define REG_CAN1_MB02_DATA2		(0x2006D448) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB03_DATA2		(*(RwReg *)0x2006D468UL)

#else
#define REG_CAN1_MB03_DATA2		(0x2006D468) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB04_DATA2		(*(RwReg *)0x2006D488UL)

#else
#define REG_CAN1_MB04_DATA2		(0x2006D488) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB05_DATA2		(*(RwReg *)0x2006D4A8UL)

#else
#define REG_CAN1_MB05_DATA2		(0x2006D4A8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB06_DATA2		(*(RwReg *)0x2006D4C8UL)

#else
#define REG_CAN1_MB06_DATA2		(0x2006D4C8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB07_DATA2		(*(RwReg *)0x2006D4E8UL)

#else
#define REG_CAN1_MB07_DATA2		(0x2006D4E8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB08_DATA2		(*(RwReg *)0x2006D508UL)

#else
#define REG_CAN1_MB08_DATA2		(0x2006D508) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB09_DATA2		(*(RwReg *)0x2006D528UL)

#else
#define REG_CAN1_MB09_DATA2		(0x2006D528) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB10_DATA2		(*(RwReg *)0x2006D548UL)

#else
#define REG_CAN1_MB10_DATA2		(0x2006D548) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB11_DATA2		(*(RwReg *)0x2006D568UL)

#else
#define REG_CAN1_MB11_DATA2		(0x2006D568) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB12_DATA2		(*(RwReg *)0x2006D588UL)

#else
#define REG_CAN1_MB12_DATA2		(0x2006D588) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB13_DATA2		(*(RwReg *)0x2006D5A8UL)

#else
#define REG_CAN1_MB13_DATA2		(0x2006D5A8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB14_DATA2		(*(RwReg *)0x2006D5C8UL)

#else
#define REG_CAN1_MB14_DATA2		(0x2006D5C8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB15_DATA2		(*(RwReg *)0x2006D5E8UL)

#else
#define REG_CAN1_MB15_DATA2		(0x2006D5E8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB16_DATA2		(*(RwReg *)0x2006D608UL)

#else
#define REG_CAN1_MB16_DATA2		(0x2006D608) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB17_DATA2		(*(RwReg *)0x2006D628UL)

#else
#define REG_CAN1_MB17_DATA2		(0x2006D628) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB18_DATA2		(*(RwReg *)0x2006D648UL)

#else
#define REG_CAN1_MB18_DATA2		(0x2006D648) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB19_DATA2		(*(RwReg *)0x2006D668UL)

#else
#define REG_CAN1_MB19_DATA2		(0x2006D668) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB20_DATA2		(*(RwReg *)0x2006D688UL)

#else
#define REG_CAN1_MB20_DATA2		(0x2006D688) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB21_DATA2		(*(RwReg *)0x2006D6A8UL)

#else
#define REG_CAN1_MB21_DATA2		(0x2006D6A8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB22_DATA2		(*(RwReg *)0x2006D6C8UL)

#else
#define REG_CAN1_MB22_DATA2		(0x2006D6C8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB23_DATA2		(*(RwReg *)0x2006D6E8UL)

#else
#define REG_CAN1_MB23_DATA2		(0x2006D6E8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB24_DATA2		(*(RwReg *)0x2006D708UL)

#else
#define REG_CAN1_MB24_DATA2		(0x2006D708) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB25_DATA2		(*(RwReg *)0x2006D728UL)

#else
#define REG_CAN1_MB25_DATA2		(0x2006D728) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB26_DATA2		(*(RwReg *)0x2006D748UL)

#else
#define REG_CAN1_MB26_DATA2		(0x2006D748) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB27_DATA2		(*(RwReg *)0x2006D768UL)

#else
#define REG_CAN1_MB27_DATA2		(0x2006D768) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB28_DATA2		(*(RwReg *)0x2006D788UL)

#else
#define REG_CAN1_MB28_DATA2		(0x2006D788) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB29_DATA2		(*(RwReg *)0x2006D7A8UL)

#else
#define REG_CAN1_MB29_DATA2		(0x2006D7A8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB30_DATA2		(*(RwReg *)0x2006D7C8UL)

#else
#define REG_CAN1_MB30_DATA2		(0x2006D7C8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB31_DATA2		(*(RwReg *)0x2006D7E8UL)

#else
#define REG_CAN1_MB31_DATA2		(0x2006D7E8) /**< \brief (CAN1) CAN1 Mailbox Word 2 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB00_DATA3		(*(RwReg *)0x2006D40CUL)

#else
#define REG_CAN1_MB00_DATA3		(0x2006D40C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB01_DATA3		(*(RwReg *)0x2006D42CUL)

#else
#define REG_CAN1_MB01_DATA3		(0x2006D42C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB02_DATA3		(*(RwReg *)0x2006D44CUL)

#else
#define REG_CAN1_MB02_DATA3		(0x2006D44C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB03_DATA3		(*(RwReg *)0x2006D46CUL)

#else
#define REG_CAN1_MB03_DATA3		(0x2006D46C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB04_DATA3		(*(RwReg *)0x2006D48CUL)

#else
#define REG_CAN1_MB04_DATA3		(0x2006D48C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB05_DATA3		(*(RwReg *)0x2006D4ACUL)

#else
#define REG_CAN1_MB05_DATA3		(0x2006D4AC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB06_DATA3		(*(RwReg *)0x2006D4CCUL)

#else
#define REG_CAN1_MB06_DATA3		(0x2006D4CC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB07_DATA3		(*(RwReg *)0x2006D4ECUL)

#else
#define REG_CAN1_MB07_DATA3		(0x2006D4EC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB08_DATA3		(*(RwReg *)0x2006D50CUL)

#else
#define REG_CAN1_MB08_DATA3		(0x2006D50C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB09_DATA3		(*(RwReg *)0x2006D52CUL)

#else
#define REG_CAN1_MB09_DATA3		(0x2006D52C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB10_DATA3		(*(RwReg *)0x2006D54CUL)

#else
#define REG_CAN1_MB10_DATA3		(0x2006D54C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB11_DATA3		(*(RwReg *)0x2006D56CUL)

#else
#define REG_CAN1_MB11_DATA3		(0x2006D56C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB12_DATA3		(*(RwReg *)0x2006D58CUL)

#else
#define REG_CAN1_MB12_DATA3		(0x2006D58C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB13_DATA3		(*(RwReg *)0x2006D5ACUL)

#else
#define REG_CAN1_MB13_DATA3		(0x2006D5AC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB14_DATA3		(*(RwReg *)0x2006D5CCUL)

#else
#define REG_CAN1_MB14_DATA3		(0x2006D5CC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB15_DATA3		(*(RwReg *)0x2006D5ECUL)

#else
#define REG_CAN1_MB15_DATA3		(0x2006D5EC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB16_DATA3		(*(RwReg *)0x2006D60CUL)

#else
#define REG_CAN1_MB16_DATA3		(0x2006D60C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB17_DATA3		(*(RwReg *)0x2006D62CUL)

#else
#define REG_CAN1_MB17_DATA3		(0x2006D62C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB18_DATA3		(*(RwReg *)0x2006D64CUL)

#else
#define REG_CAN1_MB18_DATA3		(0x2006D64C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB19_DATA3		(*(RwReg *)0x2006D66CUL)

#else
#define REG_CAN1_MB19_DATA3		(0x2006D66C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB20_DATA3		(*(RwReg *)0x2006D68CUL)

#else
#define REG_CAN1_MB20_DATA3		(0x2006D68C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB21_DATA3		(*(RwReg *)0x2006D6ACUL)

#else
#define REG_CAN1_MB21_DATA3		(0x2006D6AC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB22_DATA3		(*(RwReg *)0x2006D6CCUL)

#else
#define REG_CAN1_MB22_DATA3		(0x2006D6CC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB23_DATA3		(*(RwReg *)0x2006D6ECUL)

#else
#define REG_CAN1_MB23_DATA3		(0x2006D6EC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB24_DATA3		(*(RwReg *)0x2006D70CUL)

#else
#define REG_CAN1_MB24_DATA3		(0x2006D70C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB25_DATA3		(*(RwReg *)0x2006D72CUL)

#else
#define REG_CAN1_MB25_DATA3		(0x2006D72C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB26_DATA3		(*(RwReg *)0x2006D74CUL)

#else
#define REG_CAN1_MB26_DATA3		(0x2006D74C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB27_DATA3		(*(RwReg *)0x2006D76CUL)

#else
#define REG_CAN1_MB27_DATA3		(0x2006D76C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB28_DATA3		(*(RwReg *)0x2006D78CUL)

#else
#define REG_CAN1_MB28_DATA3		(0x2006D78C) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB29_DATA3		(*(RwReg *)0x2006D7ACUL)

#else
#define REG_CAN1_MB29_DATA3		(0x2006D7AC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB30_DATA3		(*(RwReg *)0x2006D7CCUL)

#else
#define REG_CAN1_MB30_DATA3		(0x2006D7CC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB31_DATA3		(*(RwReg *)0x2006D7ECUL)

#else
#define REG_CAN1_MB31_DATA3		(0x2006D7EC) /**< \brief (CAN1) CAN1 Mailbox Word 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB00_LENGTH		(*(RwReg *)0x2006D410UL)

#else
#define REG_CAN1_MB00_LENGTH		(0x2006D410) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB01_LENGTH		(*(RwReg *)0x2006D430UL)

#else
#define REG_CAN1_MB01_LENGTH		(0x2006D430) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB02_LENGTH		(*(RwReg *)0x2006D450UL)

#else
#define REG_CAN1_MB02_LENGTH		(0x2006D450) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB03_LENGTH		(*(RwReg *)0x2006D470UL)

#else
#define REG_CAN1_MB03_LENGTH		(0x2006D470) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB04_LENGTH		(*(RwReg *)0x2006D490UL)

#else
#define REG_CAN1_MB04_LENGTH		(0x2006D490) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB05_LENGTH		(*(RwReg *)0x2006D4B0UL)

#else
#define REG_CAN1_MB05_LENGTH		(0x2006D4B0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB06_LENGTH		(*(RwReg *)0x2006D4D0UL)

#else
#define REG_CAN1_MB06_LENGTH		(0x2006D4D0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB07_LENGTH		(*(RwReg *)0x2006D4F0UL)

#else
#define REG_CAN1_MB07_LENGTH		(0x2006D4F0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB08_LENGTH		(*(RwReg *)0x2006D510UL)

#else
#define REG_CAN1_MB08_LENGTH		(0x2006D510) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB09_LENGTH		(*(RwReg *)0x2006D530UL)

#else
#define REG_CAN1_MB09_LENGTH		(0x2006D530) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB10_LENGTH		(*(RwReg *)0x2006D550UL)

#else
#define REG_CAN1_MB10_LENGTH		(0x2006D550) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB11_LENGTH		(*(RwReg *)0x2006D570UL)

#else
#define REG_CAN1_MB11_LENGTH		(0x2006D570) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB12_LENGTH		(*(RwReg *)0x2006D590UL)

#else
#define REG_CAN1_MB12_LENGTH		(0x2006D590) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB13_LENGTH		(*(RwReg *)0x2006D5B0UL)

#else
#define REG_CAN1_MB13_LENGTH		(0x2006D5B0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB14_LENGTH		(*(RwReg *)0x2006D5D0UL)

#else
#define REG_CAN1_MB14_LENGTH		(0x2006D5D0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB15_LENGTH		(*(RwReg *)0x2006D5F0UL)

#else
#define REG_CAN1_MB15_LENGTH		(0x2006D5F0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB16_LENGTH		(*(RwReg *)0x2006D610UL)

#else
#define REG_CAN1_MB16_LENGTH		(0x2006D610) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB17_LENGTH		(*(RwReg *)0x2006D630UL)

#else
#define REG_CAN1_MB17_LENGTH		(0x2006D630) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB18_LENGTH		(*(RwReg *)0x2006D650UL)

#else
#define REG_CAN1_MB18_LENGTH		(0x2006D650) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB19_LENGTH		(*(RwReg *)0x2006D670UL)

#else
#define REG_CAN1_MB19_LENGTH		(0x2006D670) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB20_LENGTH		(*(RwReg *)0x2006D690UL)

#else
#define REG_CAN1_MB20_LENGTH		(0x2006D690) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB21_LENGTH		(*(RwReg *)0x2006D6B0UL)

#else
#define REG_CAN1_MB21_LENGTH		(0x2006D6B0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB22_LENGTH		(*(RwReg *)0x2006D6D0UL)

#else
#define REG_CAN1_MB22_LENGTH		(0x2006D6D0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB23_LENGTH		(*(RwReg *)0x2006D6F0UL)

#else
#define REG_CAN1_MB23_LENGTH		(0x2006D6F0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB24_LENGTH		(*(RwReg *)0x2006D710UL)

#else
#define REG_CAN1_MB24_LENGTH		(0x2006D710) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB25_LENGTH		(*(RwReg *)0x2006D730UL)

#else
#define REG_CAN1_MB25_LENGTH		(0x2006D730) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB26_LENGTH		(*(RwReg *)0x2006D750UL)

#else
#define REG_CAN1_MB26_LENGTH		(0x2006D750) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB27_LENGTH		(*(RwReg *)0x2006D770UL)

#else
#define REG_CAN1_MB27_LENGTH		(0x2006D770) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB28_LENGTH		(*(RwReg *)0x2006D790UL)

#else
#define REG_CAN1_MB28_LENGTH		(0x2006D790) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB29_LENGTH		(*(RwReg *)0x2006D7B0UL)

#else
#define REG_CAN1_MB29_LENGTH		(0x2006D7B0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB30_LENGTH		(*(RwReg *)0x2006D7D0UL)

#else
#define REG_CAN1_MB30_LENGTH		(0x2006D7D0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB31_LENGTH		(*(RwReg *)0x2006D7F0UL)

#else
#define REG_CAN1_MB31_LENGTH		(0x2006D7F0) /**< \brief (CAN1) CAN1 Mailbox Length Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB00_TIMESTAMP		(*(RwReg *)0x2006D414UL)

#else
#define REG_CAN1_MB00_TIMESTAMP		(0x2006D414) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB01_TIMESTAMP		(*(RwReg *)0x2006D434UL)

#else
#define REG_CAN1_MB01_TIMESTAMP		(0x2006D434) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB02_TIMESTAMP		(*(RwReg *)0x2006D454UL)

#else
#define REG_CAN1_MB02_TIMESTAMP		(0x2006D454) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB03_TIMESTAMP		(*(RwReg *)0x2006D474UL)

#else
#define REG_CAN1_MB03_TIMESTAMP		(0x2006D474) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB04_TIMESTAMP		(*(RwReg *)0x2006D494UL)

#else
#define REG_CAN1_MB04_TIMESTAMP		(0x2006D494) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB05_TIMESTAMP		(*(RwReg *)0x2006D4B4UL)

#else
#define REG_CAN1_MB05_TIMESTAMP		(0x2006D4B4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB06_TIMESTAMP		(*(RwReg *)0x2006D4D4UL)

#else
#define REG_CAN1_MB06_TIMESTAMP		(0x2006D4D4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB07_TIMESTAMP		(*(RwReg *)0x2006D4F4UL)

#else
#define REG_CAN1_MB07_TIMESTAMP		(0x2006D4F4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB08_TIMESTAMP		(*(RwReg *)0x2006D514UL)

#else
#define REG_CAN1_MB08_TIMESTAMP		(0x2006D514) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB09_TIMESTAMP		(*(RwReg *)0x2006D534UL)

#else
#define REG_CAN1_MB09_TIMESTAMP		(0x2006D534) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB10_TIMESTAMP		(*(RwReg *)0x2006D554UL)

#else
#define REG_CAN1_MB10_TIMESTAMP		(0x2006D554) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB11_TIMESTAMP		(*(RwReg *)0x2006D574UL)

#else
#define REG_CAN1_MB11_TIMESTAMP		(0x2006D574) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB12_TIMESTAMP		(*(RwReg *)0x2006D594UL)

#else
#define REG_CAN1_MB12_TIMESTAMP		(0x2006D594) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB13_TIMESTAMP		(*(RwReg *)0x2006D5B4UL)

#else
#define REG_CAN1_MB13_TIMESTAMP		(0x2006D5B4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB14_TIMESTAMP		(*(RwReg *)0x2006D5D4UL)

#else
#define REG_CAN1_MB14_TIMESTAMP		(0x2006D5D4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB15_TIMESTAMP		(*(RwReg *)0x2006D5F4UL)

#else
#define REG_CAN1_MB15_TIMESTAMP		(0x2006D5F4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB16_TIMESTAMP		(*(RwReg *)0x2006D614UL)

#else
#define REG_CAN1_MB16_TIMESTAMP		(0x2006D614) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB17_TIMESTAMP		(*(RwReg *)0x2006D634UL)

#else
#define REG_CAN1_MB17_TIMESTAMP		(0x2006D634) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB18_TIMESTAMP		(*(RwReg *)0x2006D654UL)

#else
#define REG_CAN1_MB18_TIMESTAMP		(0x2006D654) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB19_TIMESTAMP		(*(RwReg *)0x2006D674UL)

#else
#define REG_CAN1_MB19_TIMESTAMP		(0x2006D674) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB20_TIMESTAMP		(*(RwReg *)0x2006D694UL)

#else
#define REG_CAN1_MB20_TIMESTAMP		(0x2006D694) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB21_TIMESTAMP		(*(RwReg *)0x2006D6B4UL)

#else
#define REG_CAN1_MB21_TIMESTAMP		(0x2006D6B4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB22_TIMESTAMP		(*(RwReg *)0x2006D6D4UL)

#else
#define REG_CAN1_MB22_TIMESTAMP		(0x2006D6D4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB23_TIMESTAMP		(*(RwReg *)0x2006D6F4UL)

#else
#define REG_CAN1_MB23_TIMESTAMP		(0x2006D6F4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB24_TIMESTAMP		(*(RwReg *)0x2006D714UL)

#else
#define REG_CAN1_MB24_TIMESTAMP		(0x2006D714) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB25_TIMESTAMP		(*(RwReg *)0x2006D734UL)

#else
#define REG_CAN1_MB25_TIMESTAMP		(0x2006D734) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB26_TIMESTAMP		(*(RwReg *)0x2006D754UL)

#else
#define REG_CAN1_MB26_TIMESTAMP		(0x2006D754) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB27_TIMESTAMP		(*(RwReg *)0x2006D774UL)

#else
#define REG_CAN1_MB27_TIMESTAMP		(0x2006D774) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB28_TIMESTAMP		(*(RwReg *)0x2006D794UL)

#else
#define REG_CAN1_MB28_TIMESTAMP		(0x2006D794) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB29_TIMESTAMP		(*(RwReg *)0x2006D7B4UL)

#else
#define REG_CAN1_MB29_TIMESTAMP		(0x2006D7B4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB30_TIMESTAMP		(*(RwReg *)0x2006D7D4UL)

#else
#define REG_CAN1_MB30_TIMESTAMP		(0x2006D7D4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB31_TIMESTAMP		(*(RwReg *)0x2006D7F4UL)

#else
#define REG_CAN1_MB31_TIMESTAMP		(0x2006D7F4) /**< \brief (CAN1) CAN1 Mailbox Timestamp Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB00_ID0		(*(RwReg *)0x2006D418UL)

#else
#define REG_CAN1_MB00_ID0		(0x2006D418) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB01_ID0		(*(RwReg *)0x2006D438UL)

#else
#define REG_CAN1_MB01_ID0		(0x2006D438) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB02_ID0		(*(RwReg *)0x2006D458UL)

#else
#define REG_CAN1_MB02_ID0		(0x2006D458) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB03_ID0		(*(RwReg *)0x2006D478UL)

#else
#define REG_CAN1_MB03_ID0		(0x2006D478) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB04_ID0		(*(RwReg *)0x2006D498UL)

#else
#define REG_CAN1_MB04_ID0		(0x2006D498) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB05_ID0		(*(RwReg *)0x2006D4B8UL)

#else
#define REG_CAN1_MB05_ID0		(0x2006D4B8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB06_ID0		(*(RwReg *)0x2006D4D8UL)

#else
#define REG_CAN1_MB06_ID0		(0x2006D4D8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB07_ID0		(*(RwReg *)0x2006D4F8UL)

#else
#define REG_CAN1_MB07_ID0		(0x2006D4F8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB08_ID0		(*(RwReg *)0x2006D518UL)

#else
#define REG_CAN1_MB08_ID0		(0x2006D518) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB09_ID0		(*(RwReg *)0x2006D538UL)

#else
#define REG_CAN1_MB09_ID0		(0x2006D538) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB10_ID0		(*(RwReg *)0x2006D558UL)

#else
#define REG_CAN1_MB10_ID0		(0x2006D558) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB11_ID0		(*(RwReg *)0x2006D578UL)

#else
#define REG_CAN1_MB11_ID0		(0x2006D578) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB12_ID0		(*(RwReg *)0x2006D598UL)

#else
#define REG_CAN1_MB12_ID0		(0x2006D598) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB13_ID0		(*(RwReg *)0x2006D5B8UL)

#else
#define REG_CAN1_MB13_ID0		(0x2006D5B8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB14_ID0		(*(RwReg *)0x2006D5D8UL)

#else
#define REG_CAN1_MB14_ID0		(0x2006D5D8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB15_ID0		(*(RwReg *)0x2006D5F8UL)

#else
#define REG_CAN1_MB15_ID0		(0x2006D5F8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB16_ID0		(*(RwReg *)0x2006D618UL)

#else
#define REG_CAN1_MB16_ID0		(0x2006D618) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB17_ID0		(*(RwReg *)0x2006D638UL)

#else
#define REG_CAN1_MB17_ID0		(0x2006D638) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB18_ID0		(*(RwReg *)0x2006D658UL)

#else
#define REG_CAN1_MB18_ID0		(0x2006D658) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB19_ID0		(*(RwReg *)0x2006D678UL)

#else
#define REG_CAN1_MB19_ID0		(0x2006D678) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB20_ID0		(*(RwReg *)0x2006D698UL)

#else
#define REG_CAN1_MB20_ID0		(0x2006D698) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB21_ID0		(*(RwReg *)0x2006D6B8UL)

#else
#define REG_CAN1_MB21_ID0		(0x2006D6B8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB22_ID0		(*(RwReg *)0x2006D6D8UL)

#else
#define REG_CAN1_MB22_ID0		(0x2006D6D8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB23_ID0		(*(RwReg *)0x2006D6F8UL)

#else
#define REG_CAN1_MB23_ID0		(0x2006D6F8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB24_ID0		(*(RwReg *)0x2006D718UL)

#else
#define REG_CAN1_MB24_ID0		(0x2006D718) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB25_ID0		(*(RwReg *)0x2006D738UL)

#else
#define REG_CAN1_MB25_ID0		(0x2006D738) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB26_ID0		(*(RwReg *)0x2006D758UL)

#else
#define REG_CAN1_MB26_ID0		(0x2006D758) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB27_ID0		(*(RwReg *)0x2006D778UL)

#else
#define REG_CAN1_MB27_ID0		(0x2006D778) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB28_ID0		(*(RwReg *)0x2006D798UL)

#else
#define REG_CAN1_MB28_ID0		(0x2006D798) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB29_ID0		(*(RwReg *)0x2006D7B8UL)

#else
#define REG_CAN1_MB29_ID0		(0x2006D7B8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB30_ID0		(*(RwReg *)0x2006D7D8UL)

#else
#define REG_CAN1_MB30_ID0		(0x2006D7D8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB31_ID0		(*(RwReg *)0x2006D7F8UL)

#else
#define REG_CAN1_MB31_ID0		(0x2006D7F8) /**< \brief (CAN1) CAN1 Mailbox ID 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB00_ID1		(*(RwReg *)0x2006D41CUL)

#else
#define REG_CAN1_MB00_ID1		(0x2006D41C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB01_ID1		(*(RwReg *)0x2006D43CUL)

#else
#define REG_CAN1_MB01_ID1		(0x2006D43C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB02_ID1		(*(RwReg *)0x2006D45CUL)

#else
#define REG_CAN1_MB02_ID1		(0x2006D45C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB03_ID1		(*(RwReg *)0x2006D47CUL)

#else
#define REG_CAN1_MB03_ID1		(0x2006D47C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB04_ID1		(*(RwReg *)0x2006D49CUL)

#else
#define REG_CAN1_MB04_ID1		(0x2006D49C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB05_ID1		(*(RwReg *)0x2006D4BCUL)

#else
#define REG_CAN1_MB05_ID1		(0x2006D4BC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB06_ID1		(*(RwReg *)0x2006D4DCUL)

#else
#define REG_CAN1_MB06_ID1		(0x2006D4DC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB07_ID1		(*(RwReg *)0x2006D4FCUL)

#else
#define REG_CAN1_MB07_ID1		(0x2006D4FC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB08_ID1		(*(RwReg *)0x2006D51CUL)

#else
#define REG_CAN1_MB08_ID1		(0x2006D51C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB09_ID1		(*(RwReg *)0x2006D53CUL)

#else
#define REG_CAN1_MB09_ID1		(0x2006D53C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB10_ID1		(*(RwReg *)0x2006D55CUL)

#else
#define REG_CAN1_MB10_ID1		(0x2006D55C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB11_ID1		(*(RwReg *)0x2006D57CUL)

#else
#define REG_CAN1_MB11_ID1		(0x2006D57C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB12_ID1		(*(RwReg *)0x2006D59CUL)

#else
#define REG_CAN1_MB12_ID1		(0x2006D59C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB13_ID1		(*(RwReg *)0x2006D5BCUL)

#else
#define REG_CAN1_MB13_ID1		(0x2006D5BC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB14_ID1		(*(RwReg *)0x2006D5DCUL)

#else
#define REG_CAN1_MB14_ID1		(0x2006D5DC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB15_ID1		(*(RwReg *)0x2006D5FCUL)

#else
#define REG_CAN1_MB15_ID1		(0x2006D5FC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB16_ID1		(*(RwReg *)0x2006D61CUL)

#else
#define REG_CAN1_MB16_ID1		(0x2006D61C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB17_ID1		(*(RwReg *)0x2006D63CUL)

#else
#define REG_CAN1_MB17_ID1		(0x2006D63C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB18_ID1		(*(RwReg *)0x2006D65CUL)

#else
#define REG_CAN1_MB18_ID1		(0x2006D65C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB19_ID1		(*(RwReg *)0x2006D67CUL)

#else
#define REG_CAN1_MB19_ID1		(0x2006D67C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB20_ID1		(*(RwReg *)0x2006D69CUL)

#else
#define REG_CAN1_MB20_ID1		(0x2006D69C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB21_ID1		(*(RwReg *)0x2006D6BCUL)

#else
#define REG_CAN1_MB21_ID1		(0x2006D6BC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB22_ID1		(*(RwReg *)0x2006D6DCUL)

#else
#define REG_CAN1_MB22_ID1		(0x2006D6DC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB23_ID1		(*(RwReg *)0x2006D6FCUL)

#else
#define REG_CAN1_MB23_ID1		(0x2006D6FC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB24_ID1		(*(RwReg *)0x2006D71CUL)

#else
#define REG_CAN1_MB24_ID1		(0x2006D71C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB25_ID1		(*(RwReg *)0x2006D73CUL)

#else
#define REG_CAN1_MB25_ID1		(0x2006D73C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB26_ID1		(*(RwReg *)0x2006D75CUL)

#else
#define REG_CAN1_MB26_ID1		(0x2006D75C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB27_ID1		(*(RwReg *)0x2006D77CUL)

#else
#define REG_CAN1_MB27_ID1		(0x2006D77C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB28_ID1		(*(RwReg *)0x2006D79CUL)

#else
#define REG_CAN1_MB28_ID1		(0x2006D79C) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB29_ID1		(*(RwReg *)0x2006D7BCUL)

#else
#define REG_CAN1_MB29_ID1		(0x2006D7BC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB30_ID1		(*(RwReg *)0x2006D7DCUL)

#else
#define REG_CAN1_MB30_ID1		(0x2006D7DC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_CAN1_MB31_ID1		(*(RwReg *)0x2006D7FCUL)

#else
#define REG_CAN1_MB31_ID1		(0x2006D7FC) /**< \brief (CAN1) CAN1 Mailbox ID 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CNT0_CFG : (32) CNT0 Configuration Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	Counter Enable	*/
		uint32_t DEBEN:1;			/*!< bit	1	Debounce Enable	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t CDGINV:1;			/*!< bit	4	CDG Pin Polarity Invert	*/
		uint32_t CUDINV:1;			/*!< bit	5	CUD Pin Polarity Invert	*/
		uint32_t CZMINV:1;			/*!< bit	6	CZM Pin Polarity Invert	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t CNTMODE:3;			/*!< bit	8..10	Counter Operating Mode	*/
		uint32_t ZMZC:1;			/*!< bit	11	CZM Zeroes Counter Enable	*/
		uint32_t BNDMODE:2;			/*!< bit	12..13	Boundary Register Mode	*/
		uint32_t :1;			/*!< bit	14	Reserved	*/
		uint32_t INPDIS:1;			/*!< bit	15	CUD and CDG Pin Input Disable	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CNT0_CFG_Type;
#define REG_CNT0_CFG		(*(RwReg *)0x20070000UL)

#else
#define REG_CNT0_CFG		(0x20070000) /**< \brief (CNT0) CNT0 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CNT0_IMSK : (32) CNT0 Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t IC:1;			/*!< bit	0	Illegal Gray/Binary Code Interrupt Enable	*/
		uint32_t UC:1;			/*!< bit	1	Upcount Interrupt Enable	*/
		uint32_t DC:1;			/*!< bit	2	Downcount Interrupt Enable	*/
		uint32_t MINC:1;			/*!< bit	3	Min Count Interrupt Enable	*/
		uint32_t MAXC:1;			/*!< bit	4	Max Count Interrupt Enable	*/
		uint32_t COV31:1;			/*!< bit	5	Bit 31 Overflow Interrupt Enable	*/
		uint32_t COV15:1;			/*!< bit	6	Bit 15 Overflow Interrupt Enable	*/
		uint32_t CZERO:1;			/*!< bit	7	CNT_CNTR Counts To Zero Interrupt Enable	*/
		uint32_t CZM:1;			/*!< bit	8	CZM Pin/Pushbutton Interrupt Enable	*/
		uint32_t CZME:1;			/*!< bit	9	Zero Marker Error Interrupt Enable	*/
		uint32_t CZMZ:1;			/*!< bit	10	Counter Zeroed by Zero Marker Interrupt Enable	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CNT0_IMSK_Type;
#define REG_CNT0_IMSK		(*(RwReg *)0x20070004UL)

#else
#define REG_CNT0_IMSK		(0x20070004) /**< \brief (CNT0) CNT0 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CNT0_STAT : (32) CNT0 Status Register ----- */
typedef union {
	struct {
		uint32_t IC:1;			/*!< bit	0	Illegal Gray/Binary Code Interrupt	*/
		uint32_t UC:1;			/*!< bit	1	Up Count Interrupt	*/
		uint32_t DC:1;			/*!< bit	2	Down Count Interrupt	*/
		uint32_t MINC:1;			/*!< bit	3	Min Count Interrupt	*/
		uint32_t MAXC:1;			/*!< bit	4	Max Count Interrupt	*/
		uint32_t COV31:1;			/*!< bit	5	Bit 31 Overflow Interrupt	*/
		uint32_t COV15:1;			/*!< bit	6	Bit 15 Overflow Interrupt	*/
		uint32_t CZERO:1;			/*!< bit	7	CNT_CNTR Counts To Zero Interrupt	*/
		uint32_t CZM:1;			/*!< bit	8	CZM Pin/Pushbutton Interrupt	*/
		uint32_t CZME:1;			/*!< bit	9	Zero Marker Error Interrupt	*/
		uint32_t CZMZ:1;			/*!< bit	10	Counter Zeroed By Zero Marker Interrupt	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CNT0_STAT_Type;
#define REG_CNT0_STAT		(*(RwReg *)0x20070008UL)

#else
#define REG_CNT0_STAT		(0x20070008) /**< \brief (CNT0) CNT0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CNT0_CMD : (32) CNT0 Command Register ----- */
typedef union {
	struct {
		uint32_t W1LCNTZERO:1;			/*!< bit	0	Write 1 CNTR to Zero	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t W1LCNTMIN:1;			/*!< bit	2	Write 1 CNTR Load from MIN	*/
		uint32_t W1LCNTMAX:1;			/*!< bit	3	Write 1 CNTR Load from MAX	*/
		uint32_t W1LMINZERO:1;			/*!< bit	4	Write 1 MIN to Zero	*/
		uint32_t W1LMINCNT:1;			/*!< bit	5	Write 1 MIN Capture from CNTR	*/
		uint32_t :1;			/*!< bit	6	Reserved	*/
		uint32_t W1LMINMAX:1;			/*!< bit	7	Write 1 MIN Copy from MAX	*/
		uint32_t W1LMAXZERO:1;			/*!< bit	8	Write 1 MAX to Zero	*/
		uint32_t W1LMAXCNT:1;			/*!< bit	9	Write 1 MAX Capture from CNTR	*/
		uint32_t W1LMAXMIN:1;			/*!< bit	10	Write 1 MAX Copy from MIN	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t W1ZMONCE:1;			/*!< bit	12	Write 1 Zero Marker Clear Once Enable	*/
		uint32_t :19;			/*!< bit	13..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CNT0_CMD_Type;
#define REG_CNT0_CMD		(*(RwReg *)0x2007000CUL)

#else
#define REG_CNT0_CMD		(0x2007000C) /**< \brief (CNT0) CNT0 Command Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CNT0_DEBNCE : (32) CNT0 Debounce Register ----- */
typedef union {
	struct {
		uint32_t DPRESCALE:5;			/*!< bit	0..4	Debounce Prescale	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CNT0_DEBNCE_Type;
#define REG_CNT0_DEBNCE		(*(RwReg *)0x20070010UL)

#else
#define REG_CNT0_DEBNCE		(0x20070010) /**< \brief (CNT0) CNT0 Debounce Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CNT0_CNTR : (32) CNT0 Counter Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CNT0_CNTR_Type;
#define REG_CNT0_CNTR		(*(RwReg *)0x20070014UL)

#else
#define REG_CNT0_CNTR		(0x20070014) /**< \brief (CNT0) CNT0 Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CNT0_MAX : (32) CNT0 Maximum Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CNT0_MAX_Type;
#define REG_CNT0_MAX		(*(RwReg *)0x20070018UL)

#else
#define REG_CNT0_MAX		(0x20070018) /**< \brief (CNT0) CNT0 Maximum Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CNT0_MIN : (32) CNT0 Minimum Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CNT0_MIN_Type;
#define REG_CNT0_MIN		(*(RwReg *)0x2007001CUL)

#else
#define REG_CNT0_MIN		(0x2007001C) /**< \brief (CNT0) CNT0 Minimum Count Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO CNT0_CFG_Type		CFG;		/**< \brief CNT0 Configuration Register */
	__IO CNT0_IMSK_Type		IMSK;		/**< \brief CNT0 Interrupt Mask Register */
	__IO CNT0_STAT_Type		STAT;		/**< \brief CNT0 Status Register */
	__IO CNT0_CMD_Type		CMD;		/**< \brief CNT0 Command Register */
	__IO CNT0_DEBNCE_Type		DEBNCE;		/**< \brief CNT0 Debounce Register */
	__IO CNT0_CNTR_Type		CNTR;		/**< \brief CNT0 Counter Register */
	__IO CNT0_MAX_Type		MAX;		/**< \brief CNT0 Maximum Count Register */
	__IO CNT0_MIN_Type		MIN;		/**< \brief CNT0 Minimum Count Register */
} Cnt0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- OTPC0_STAT : (32) OTPC0 OTPCTL status register ----- */
typedef union {
	struct {
		uint32_t :13;			/*!< bit	0..12	Reserved	*/
		uint32_t ADDRERR:2;			/*!< bit	13..14	OTP Address Error	*/
		uint32_t :19;			/*!< bit	13..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} OTPC0_STAT_Type;
#define REG_OTPC0_STAT		(*(RwReg *)0x20075004UL)

#else
#define REG_OTPC0_STAT		(0x20075004) /**< \brief (OTPC0) OTPC0 OTPCTL status register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- OTPC0_SECU_STATE : (32) OTPC0 OTP Security State Register ----- */
typedef union {
	struct {
		uint32_t PARTLOCK:2;			/*!< bit	0..1	Indicates locked part	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} OTPC0_SECU_STATE_Type;
#define REG_OTPC0_SECU_STATE		(*(RwReg *)0x2007502CUL)

#else
#define REG_OTPC0_SECU_STATE		(0x2007502C) /**< \brief (OTPC0) OTPC0 OTP Security State Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO OTPC0_STAT_Type		STAT;		/**< \brief OTPC0 OTPCTL status register */
		 RoReg8		Reserved1[0x24];		
	__IO OTPC0_SECU_STATE_Type		SECU_STATE;		/**< \brief OTPC0 OTP Security State Register */
} Otpc0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- MSI0_CTL : (32) MSI0 Contorl register ----- */
typedef union {
	struct {
		uint32_t CTLRST:1;			/*!< bit	0	Controller Reset	*/
		uint32_t FIFORST:1;			/*!< bit	1	Fifo Reset	*/
		uint32_t DMARST:1;			/*!< bit	2	Dma Reset	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t INTEN:1;			/*!< bit	4	Int Enable	*/
		uint32_t DMAEN:1;			/*!< bit	5	Dma Enable	*/
		uint32_t RDWAIT:1;			/*!< bit	6	Read Wait	*/
		uint32_t IRQRESP:1;			/*!< bit	7	Send Irq Response	*/
		uint32_t RDABORT:1;			/*!< bit	8	Abort Read Data	*/
		uint32_t CCSD:1;			/*!< bit	9	Send Ccsd	*/
		uint32_t AUTOSTOP:1;			/*!< bit	10	Send Auto Stop Ccsd	*/
		uint32_t :14;			/*!< bit	11..24	Reserved	*/
		uint32_t INTDMAC:1;			/*!< bit	25	Use Internal Dmac	*/
		uint32_t :6;			/*!< bit	26..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_CTL_Type;
#define REG_MSI0_CTL		(*(RwReg *)0x20076000UL)

#else
#define REG_MSI0_CTL		(0x20076000) /**< \brief (MSI0) MSI0 Contorl register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_PWREN : (32) MSI0 Power Enable Register ----- */
typedef union {
	struct {
		uint32_t EN0:1;			/*!< bit	0	Power Enable for Card 0	*/
		uint32_t :31;			/*!< bit	1..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_PWREN_Type;
#define REG_MSI0_PWREN		(*(RwReg *)0x20076004UL)

#else
#define REG_MSI0_PWREN		(0x20076004) /**< \brief (MSI0) MSI0 Power Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_CLKDIV : (32) MSI0 Clock Divider Register ----- */
typedef union {
	struct {
		uint32_t DIV0:8;			/*!< bit	0..7	Clk Divider for Card Block 0	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_CLKDIV_Type;
#define REG_MSI0_CLKDIV		(*(RwReg *)0x20076008UL)

#else
#define REG_MSI0_CLKDIV		(0x20076008) /**< \brief (MSI0) MSI0 Clock Divider Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_CLKEN : (32) MSI0 Clock Enable Register ----- */
typedef union {
	struct {
		uint32_t EN0:1;			/*!< bit	0	MSI Clock Enable for Card 0	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t LP0:1;			/*!< bit	16	Clock Low Power Mode for Card 0	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_CLKEN_Type;
#define REG_MSI0_CLKEN		(*(RwReg *)0x20076010UL)

#else
#define REG_MSI0_CLKEN		(0x20076010) /**< \brief (MSI0) MSI0 Clock Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_TMOUT : (32) MSI0 Timeout Register ----- */
typedef union {
	struct {
		uint32_t RESPONSE:8;			/*!< bit	0..7	Response Timeout	*/
		uint32_t DATA:24;			/*!< bit	8..31	Data Timeout	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_TMOUT_Type;
#define REG_MSI0_TMOUT		(*(RwReg *)0x20076014UL)

#else
#define REG_MSI0_TMOUT		(0x20076014) /**< \brief (MSI0) MSI0 Timeout Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_CTYPE : (32) MSI0 Card Type Register ----- */
typedef union {
	struct {
		uint32_t WIDNIB0:1;			/*!< bit	0	Enable 4-bit mode for Card 0	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t WIDBYTE0:1;			/*!< bit	16	Enable 8-bit mode for Card 0	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_CTYPE_Type;
#define REG_MSI0_CTYPE		(*(RwReg *)0x20076018UL)

#else
#define REG_MSI0_CTYPE		(0x20076018) /**< \brief (MSI0) MSI0 Card Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_BLKSIZ : (32) MSI0 Block Size Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Block Size	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_BLKSIZ_Type;
#define REG_MSI0_BLKSIZ		(*(RwReg *)0x2007601CUL)

#else
#define REG_MSI0_BLKSIZ		(0x2007601C) /**< \brief (MSI0) MSI0 Block Size Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_BYTCNT : (32) MSI0 Byte Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_BYTCNT_Type;
#define REG_MSI0_BYTCNT		(*(RwReg *)0x20076020UL)

#else
#define REG_MSI0_BYTCNT		(0x20076020) /**< \brief (MSI0) MSI0 Byte Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_IMSK : (32) MSI0 Interrupt Mask Register ----- */
typedef union {
	struct {
		uint32_t CD:1;			/*!< bit	0	Card detect	*/
		uint32_t RE:1;			/*!< bit	1	Response error	*/
		uint32_t CMDDONE:1;			/*!< bit	2	Command done	*/
		uint32_t DTO:1;			/*!< bit	3	Data transfer over	*/
		uint32_t TXDR:1;			/*!< bit	4	Transmit FIFO data request	*/
		uint32_t RXDR:1;			/*!< bit	5	Receive FIFO data request	*/
		uint32_t RCRC:1;			/*!< bit	6	Response CRC error	*/
		uint32_t DCRC:1;			/*!< bit	7	Data CRC error	*/
		uint32_t RTO:1;			/*!< bit	8	Response timeout	*/
		uint32_t DRTO:1;			/*!< bit	9	Data read timeout	*/
		uint32_t HTO:1;			/*!< bit	10	Data starvation by host timeout	*/
		uint32_t FRUN:1;			/*!< bit	11	FIFO underrun/overrun error	*/
		uint32_t HLE:1;			/*!< bit	12	Hardware locked write error	*/
		uint32_t SBEBCI:1;			/*!< bit	13	Start Bit Error(SBE)/Busy Complete Interrupt (BCI)	*/
		uint32_t ACD:1;			/*!< bit	14	Auto command done	*/
		uint32_t EBE:1;			/*!< bit	15	End-bit error (read)/write no CRC	*/
		uint32_t SDIOMSK0:16;			/*!< bit	16..31	SDIO Int Mask for SDIO Device 0	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_IMSK_Type;
#define REG_MSI0_IMSK		(*(RwReg *)0x20076024UL)

#else
#define REG_MSI0_IMSK		(0x20076024) /**< \brief (MSI0) MSI0 Interrupt Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_CMDARG : (32) MSI0 Command Argument Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_CMDARG_Type;
#define REG_MSI0_CMDARG		(*(RwReg *)0x20076028UL)

#else
#define REG_MSI0_CMDARG		(0x20076028) /**< \brief (MSI0) MSI0 Command Argument Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_CMD : (32) MSI0 Command Register ----- */
typedef union {
	struct {
		uint32_t INDX:6;			/*!< bit	0..5	Cmd Index	*/
		uint32_t RXPECT:1;			/*!< bit	6	Response Expect	*/
		uint32_t RLEN:1;			/*!< bit	7	Response Length	*/
		uint32_t CHKRESPCRC:1;			/*!< bit	8	Check Response Crc	*/
		uint32_t DXPECT:1;			/*!< bit	9	Data Expected	*/
		uint32_t RDWR:1;			/*!< bit	10	Read from or Write to card	*/
		uint32_t XFRMODE:1;			/*!< bit	11	Transfer Mode	*/
		uint32_t SENDASTOP:1;			/*!< bit	12	Send Auto Stop	*/
		uint32_t WTPRIVDATA:1;			/*!< bit	13	Wait Prvdata Complete	*/
		uint32_t STPABORTCMD:1;			/*!< bit	14	Stop Abort Cmd	*/
		uint32_t SENDINIT:1;			/*!< bit	15	Send Initialization	*/
		uint32_t CARDNUM:5;			/*!< bit	16..20	Card Number	*/
		uint32_t UCLKREGS:1;			/*!< bit	21	Update Clock Registers Only	*/
		uint32_t :2;			/*!< bit	22..23	Reserved	*/
		uint32_t BOOTEN:1;			/*!< bit	24	Enable Boot	*/
		uint32_t XPECTBOOTACK:1;			/*!< bit	25	Expect Boot Ack	*/
		uint32_t BOOTDIS:1;			/*!< bit	26	Disable Boot	*/
		uint32_t BOOTMODE:1;			/*!< bit	27	Boot Mode	*/
		uint32_t :1;			/*!< bit	28	Reserved	*/
		uint32_t USEHOLDREG:1;			/*!< bit	29	Use Hold Reg	*/
		uint32_t :1;			/*!< bit	30	Reserved	*/
		uint32_t STARTCMD:1;			/*!< bit	31	Start Cmd	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_CMD_Type;
#define REG_MSI0_CMD		(*(RwReg *)0x2007602CUL)

#else
#define REG_MSI0_CMD		(0x2007602C) /**< \brief (MSI0) MSI0 Command Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_RESP0 : (32) MSI0 Response Register 0 ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_RESP0_Type;
#define REG_MSI0_RESP0		(*(RwReg *)0x20076030UL)

#else
#define REG_MSI0_RESP0		(0x20076030) /**< \brief (MSI0) MSI0 Response Register 0 */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_RESP1 : (32) MSI0 Response Register 1 ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_RESP1_Type;
#define REG_MSI0_RESP1		(*(RwReg *)0x20076034UL)

#else
#define REG_MSI0_RESP1		(0x20076034) /**< \brief (MSI0) MSI0 Response Register 1 */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_RESP2 : (32) MSI0 Response Register 2 ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_RESP2_Type;
#define REG_MSI0_RESP2		(*(RwReg *)0x20076038UL)

#else
#define REG_MSI0_RESP2		(0x20076038) /**< \brief (MSI0) MSI0 Response Register 2 */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_RESP3 : (32) MSI0 Response Register 3 ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_RESP3_Type;
#define REG_MSI0_RESP3		(*(RwReg *)0x2007603CUL)

#else
#define REG_MSI0_RESP3		(0x2007603C) /**< \brief (MSI0) MSI0 Response Register 3 */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_MSKISTAT : (32) MSI0 Masked Interrupt Status Register ----- */
typedef union {
	struct {
		uint32_t CD:1;			/*!< bit	0	Card detect	*/
		uint32_t RE:1;			/*!< bit	1	Response error	*/
		uint32_t CMDDONE:1;			/*!< bit	2	Command done	*/
		uint32_t DTO:1;			/*!< bit	3	Data transfer over	*/
		uint32_t TXDR:1;			/*!< bit	4	Transmit FIFO data request	*/
		uint32_t RXDR:1;			/*!< bit	5	Receive FIFO data request	*/
		uint32_t RCRC:1;			/*!< bit	6	Response CRC error	*/
		uint32_t DCRC:1;			/*!< bit	7	Data CRC error	*/
		uint32_t RTO:1;			/*!< bit	8	Response timeout	*/
		uint32_t DRTO:1;			/*!< bit	9	Data read timeout	*/
		uint32_t HTO:1;			/*!< bit	10	Data starvation by host timeout	*/
		uint32_t FRUN:1;			/*!< bit	11	FIFO underrun/overrun error	*/
		uint32_t HLE:1;			/*!< bit	12	Hardware locked write error	*/
		uint32_t SBEBCI:1;			/*!< bit	13	Start Bit Error(SBE)/Busy Complete Interrupt (BCI)	*/
		uint32_t ACD:1;			/*!< bit	14	Auto command done	*/
		uint32_t EBE:1;			/*!< bit	15	End-bit error (read)/write no CRC	*/
		uint32_t SDIOINT0:1;			/*!< bit	16	SDIO Interrupt for Device 0	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_MSKISTAT_Type;
#define REG_MSI0_MSKISTAT		(*(RwReg *)0x20076040UL)

#else
#define REG_MSI0_MSKISTAT		(0x20076040) /**< \brief (MSI0) MSI0 Masked Interrupt Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_ISTAT : (32) MSI0 Raw Interrupt Status Register ----- */
typedef union {
	struct {
		uint32_t CD:1;			/*!< bit	0	Card detect	*/
		uint32_t RE:1;			/*!< bit	1	Response error	*/
		uint32_t CMDDONE:1;			/*!< bit	2	Command done	*/
		uint32_t DTO:1;			/*!< bit	3	Data transfer over	*/
		uint32_t TXDR:1;			/*!< bit	4	Transmit FIFO data request	*/
		uint32_t RXDR:1;			/*!< bit	5	Receive FIFO data request	*/
		uint32_t RCRC:1;			/*!< bit	6	Response CRC error	*/
		uint32_t DCRC:1;			/*!< bit	7	Data CRC error	*/
		uint32_t RTO:1;			/*!< bit	8	Response timeout	*/
		uint32_t DRTO:1;			/*!< bit	9	Data read timeout	*/
		uint32_t HTO:1;			/*!< bit	10	Data starvation by host timeout	*/
		uint32_t FRUN:1;			/*!< bit	11	FIFO underrun/overrun error	*/
		uint32_t HLE:1;			/*!< bit	12	Hardware locked write error	*/
		uint32_t SBEBCI:1;			/*!< bit	13	Start Bit Error(SBE)/Busy Complete Interrupt (BCI)	*/
		uint32_t ACD:1;			/*!< bit	14	Auto command done	*/
		uint32_t EBE:1;			/*!< bit	15	End-bit error (read)/write no CRC	*/
		uint32_t SDIOINT0:1;			/*!< bit	16	SDIO Interrupt for Device 0	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_ISTAT_Type;
#define REG_MSI0_ISTAT		(*(RwReg *)0x20076044UL)

#else
#define REG_MSI0_ISTAT		(0x20076044) /**< \brief (MSI0) MSI0 Raw Interrupt Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_STAT : (32) MSI0 Status Register ----- */
typedef union {
	struct {
		uint32_t FIFORXWM:1;			/*!< bit	0	Fifo Rx Watermark	*/
		uint32_t FIFOTXWM:1;			/*!< bit	1	Fifo Tx Watermark	*/
		uint32_t FIFOEMPTY:1;			/*!< bit	2	Fifo Empty	*/
		uint32_t FIFOFULL:1;			/*!< bit	3	Fifo Full	*/
		uint32_t CMDFSM:4;			/*!< bit	4..7	Command Fsm States	*/
		uint32_t D33STAT:1;			/*!< bit	8	Data 3 Status	*/
		uint32_t DBUSY:1;			/*!< bit	9	Data Busy	*/
		uint32_t DMCBUSY:1;			/*!< bit	10	Data State Mc Busy	*/
		uint32_t RSPINDX:6;			/*!< bit	11..16	Response Index	*/
		uint32_t FIFOCNT:13;			/*!< bit	17..29	Fifo Count	*/
		uint32_t DMAACK:1;			/*!< bit	30	Dma Ack	*/
		uint32_t DMAREQ:1;			/*!< bit	31	Dma Req	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_STAT_Type;
#define REG_MSI0_STAT		(*(RwReg *)0x20076048UL)

#else
#define REG_MSI0_STAT		(0x20076048) /**< \brief (MSI0) MSI0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_FIFOTH : (32) MSI0 FIFO Threshold Watermark Register ----- */
typedef union {
	struct {
		uint32_t TXWM:12;			/*!< bit	0..11	TX Watermark	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t RXWM:12;			/*!< bit	16..27	RX Watermark	*/
		uint32_t DMAMSZ:3;			/*!< bit	28..30	DMA Multiple Transaction Size	*/
		uint32_t :1;			/*!< bit	31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_FIFOTH_Type;
#define REG_MSI0_FIFOTH		(*(RwReg *)0x2007604CUL)

#else
#define REG_MSI0_FIFOTH		(0x2007604C) /**< \brief (MSI0) MSI0 FIFO Threshold Watermark Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_CDETECT : (32) MSI0 Card Detect Register ----- */
typedef union {
	struct {
		uint32_t CD0:1;			/*!< bit	0	Card Detect for Card 0	*/
		uint32_t :31;			/*!< bit	1..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_CDETECT_Type;
#define REG_MSI0_CDETECT		(*(RwReg *)0x20076050UL)

#else
#define REG_MSI0_CDETECT		(0x20076050) /**< \brief (MSI0) MSI0 Card Detect Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_TCBCNT : (32) MSI0 Transferred CIU Card Byte Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_TCBCNT_Type;
#define REG_MSI0_TCBCNT		(*(RwReg *)0x2007605CUL)

#else
#define REG_MSI0_TCBCNT		(0x2007605C) /**< \brief (MSI0) MSI0 Transferred CIU Card Byte Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_TBBCNT : (32) MSI0 Transferred Host to BIU-FIFO Byte Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_TBBCNT_Type;
#define REG_MSI0_TBBCNT		(*(RwReg *)0x20076060UL)

#else
#define REG_MSI0_TBBCNT		(0x20076060) /**< \brief (MSI0) MSI0 Transferred Host to BIU-FIFO Byte Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_DEBNCE : (32) MSI0 Debounce Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:24;			/*!< bit	0..23	Debounce Count	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_DEBNCE_Type;
#define REG_MSI0_DEBNCE		(*(RwReg *)0x20076064UL)

#else
#define REG_MSI0_DEBNCE		(0x20076064) /**< \brief (MSI0) MSI0 Debounce Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_USRID : (32) MSI0 User ID Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_USRID_Type;
#define REG_MSI0_USRID		(*(RwReg *)0x20076068UL)

#else
#define REG_MSI0_USRID		(0x20076068) /**< \brief (MSI0) MSI0 User ID Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_VERID : (32) MSI0 Version ID Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_VERID_Type;
#define REG_MSI0_VERID		(*(RwReg *)0x2007606CUL)

#else
#define REG_MSI0_VERID		(0x2007606C) /**< \brief (MSI0) MSI0 Version ID Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_HWCFG : (32) MSI0 Hardware Configuration Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_HWCFG_Type;
#define REG_MSI0_HWCFG		(*(RwReg *)0x20076070UL)

#else
#define REG_MSI0_HWCFG		(0x20076070) /**< \brief (MSI0) MSI0 Hardware Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_BUSMODE : (32) MSI0 Bus Mode Register ----- */
typedef union {
	struct {
		uint32_t SWR:1;			/*!< bit	0	Software Reset	*/
		uint32_t FB:1;			/*!< bit	1	Fixed Burst	*/
		uint32_t DSL:5;			/*!< bit	2..6	Descriptor Skip Length	*/
		uint32_t DE:1;			/*!< bit	7	IDMAC Enable	*/
		uint32_t PBL:3;			/*!< bit	8..10	Programmable Burst Length	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_BUSMODE_Type;
#define REG_MSI0_BUSMODE		(*(RwReg *)0x20076080UL)

#else
#define REG_MSI0_BUSMODE		(0x20076080) /**< \brief (MSI0) MSI0 Bus Mode Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_PLDMND : (32) MSI0 Poll Demand Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_PLDMND_Type;
#define REG_MSI0_PLDMND		(*(RwReg *)0x20076084UL)

#else
#define REG_MSI0_PLDMND		(0x20076084) /**< \brief (MSI0) MSI0 Poll Demand Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_DBADDR : (32) MSI0 Descriptor List Base Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_DBADDR_Type;
#define REG_MSI0_DBADDR		(*(RwReg *)0x20076088UL)

#else
#define REG_MSI0_DBADDR		(0x20076088) /**< \brief (MSI0) MSI0 Descriptor List Base Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_IDSTS : (32) MSI0 Internal DMA Status Register ----- */
typedef union {
	struct {
		uint32_t TI:1;			/*!< bit	0	Transmit Interrupt	*/
		uint32_t RI:1;			/*!< bit	1	Receive Interrupt	*/
		uint32_t FBE:1;			/*!< bit	2	Fatal Bus Error Interrupt	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t DU:1;			/*!< bit	4	Descriptor Unavailable Interrupt	*/
		uint32_t CES:1;			/*!< bit	5	Card Error Summary	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t NIS:1;			/*!< bit	8	Normal Interrupt Summary	*/
		uint32_t AIS:1;			/*!< bit	9	Abnormal Interrupt Summary	*/
		uint32_t EB:3;			/*!< bit	10..12	Error Bits	*/
		uint32_t FSM:4;			/*!< bit	13..16	DMAC FSM Present State	*/
		uint32_t :15;			/*!< bit	17..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_IDSTS_Type;
#define REG_MSI0_IDSTS		(*(RwReg *)0x2007608CUL)

#else
#define REG_MSI0_IDSTS		(0x2007608C) /**< \brief (MSI0) MSI0 Internal DMA Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_IDINTEN : (32) MSI0 Internal DMA Interrupt Enable Register ----- */
typedef union {
	struct {
		uint32_t TI:1;			/*!< bit	0	Transmit Interrupt	*/
		uint32_t RI:1;			/*!< bit	1	Receive Interrupt	*/
		uint32_t FBE:1;			/*!< bit	2	Fatal Bus Error	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t DU:1;			/*!< bit	4	Descriptor Unavailable	*/
		uint32_t CES:1;			/*!< bit	5	Card Error Summary	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
		uint32_t NI:1;			/*!< bit	8	Normal Interrupt Summary	*/
		uint32_t AI:1;			/*!< bit	9	Abnormal Interrupt Summary	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_IDINTEN_Type;
#define REG_MSI0_IDINTEN		(*(RwReg *)0x20076090UL)

#else
#define REG_MSI0_IDINTEN		(0x20076090) /**< \brief (MSI0) MSI0 Internal DMA Interrupt Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_DSCADDR : (32) MSI0 Current Host Descriptor Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_DSCADDR_Type;
#define REG_MSI0_DSCADDR		(*(RwReg *)0x20076094UL)

#else
#define REG_MSI0_DSCADDR		(0x20076094) /**< \brief (MSI0) MSI0 Current Host Descriptor Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_BUFADDR : (32) MSI0 Current Buffer Descriptor Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_BUFADDR_Type;
#define REG_MSI0_BUFADDR		(*(RwReg *)0x20076098UL)

#else
#define REG_MSI0_BUFADDR		(0x20076098) /**< \brief (MSI0) MSI0 Current Buffer Descriptor Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_CDTHRCTL : (32) MSI0 Card Threshold Control Register ----- */
typedef union {
	struct {
		uint32_t RDTHREN:1;			/*!< bit	0	Card Read Threshold Enable	*/
		uint32_t BSYCLRIEN:1;			/*!< bit	1	Busy Clear Interrupt Enable	*/
		uint32_t :14;			/*!< bit	2..15	Reserved	*/
		uint32_t RDTHR:12;			/*!< bit	16..27	Card Read Threshold Size	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_CDTHRCTL_Type;
#define REG_MSI0_CDTHRCTL		(*(RwReg *)0x20076100UL)

#else
#define REG_MSI0_CDTHRCTL		(0x20076100) /**< \brief (MSI0) MSI0 Card Threshold Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_UHS_EXT : (32) MSI0 UHS Register Extention ----- */
typedef union {
	struct {
		uint32_t :30;			/*!< bit	0..29	Reserved	*/
		uint32_t EXTCLKMUX:2;			/*!< bit	30..31	Ext Clk Mux Ctrl	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_UHS_EXT_Type;
#define REG_MSI0_UHS_EXT		(*(RwReg *)0x20076108UL)

#else
#define REG_MSI0_UHS_EXT		(0x20076108) /**< \brief (MSI0) MSI0 UHS Register Extention */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- MSI0_ENSHIFT : (32) MSI0 Register to control the amount of shift on enables ----- */
typedef union {
	struct {
		uint32_t CD0:2;			/*!< bit	0..1	Enable Shift for Card 0	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} MSI0_ENSHIFT_Type;
#define REG_MSI0_ENSHIFT		(*(RwReg *)0x20076110UL)

#else
#define REG_MSI0_ENSHIFT		(0x20076110) /**< \brief (MSI0) MSI0 Register to control the amount of shift on enables */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO MSI0_CTL_Type		CTL;		/**< \brief MSI0 Contorl register */
	__IO MSI0_PWREN_Type		PWREN;		/**< \brief MSI0 Power Enable Register */
	__IO MSI0_CLKDIV_Type		CLKDIV;		/**< \brief MSI0 Clock Divider Register */
		 RoReg8		Reserved1[0x04];		
	__IO MSI0_CLKEN_Type		CLKEN;		/**< \brief MSI0 Clock Enable Register */
	__IO MSI0_TMOUT_Type		TMOUT;		/**< \brief MSI0 Timeout Register */
	__IO MSI0_CTYPE_Type		CTYPE;		/**< \brief MSI0 Card Type Register */
	__IO MSI0_BLKSIZ_Type		BLKSIZ;		/**< \brief MSI0 Block Size Register */
	__IO MSI0_BYTCNT_Type		BYTCNT;		/**< \brief MSI0 Byte Count Register */
	__IO MSI0_IMSK_Type		IMSK;		/**< \brief MSI0 Interrupt Mask Register */
	__IO MSI0_CMDARG_Type		CMDARG;		/**< \brief MSI0 Command Argument Register */
	__IO MSI0_CMD_Type		CMD;		/**< \brief MSI0 Command Register */
	__IO MSI0_RESP0_Type		RESP0;		/**< \brief MSI0 Response Register 0 */
	__IO MSI0_RESP1_Type		RESP1;		/**< \brief MSI0 Response Register 1 */
	__IO MSI0_RESP2_Type		RESP2;		/**< \brief MSI0 Response Register 2 */
	__IO MSI0_RESP3_Type		RESP3;		/**< \brief MSI0 Response Register 3 */
	__IO MSI0_MSKISTAT_Type		MSKISTAT;		/**< \brief MSI0 Masked Interrupt Status Register */
	__IO MSI0_ISTAT_Type		ISTAT;		/**< \brief MSI0 Raw Interrupt Status Register */
	__IO MSI0_STAT_Type		STAT;		/**< \brief MSI0 Status Register */
	__IO MSI0_FIFOTH_Type		FIFOTH;		/**< \brief MSI0 FIFO Threshold Watermark Register */
	__IO MSI0_CDETECT_Type		CDETECT;		/**< \brief MSI0 Card Detect Register */
		 RoReg8		Reserved2[0x08];		
	__IO MSI0_TCBCNT_Type		TCBCNT;		/**< \brief MSI0 Transferred CIU Card Byte Count Register */
	__IO MSI0_TBBCNT_Type		TBBCNT;		/**< \brief MSI0 Transferred Host to BIU-FIFO Byte Count Register */
	__IO MSI0_DEBNCE_Type		DEBNCE;		/**< \brief MSI0 Debounce Count Register */
	__IO MSI0_USRID_Type		USRID;		/**< \brief MSI0 User ID Register */
	__IO MSI0_VERID_Type		VERID;		/**< \brief MSI0 Version ID Register */
	__IO MSI0_HWCFG_Type		HWCFG;		/**< \brief MSI0 Hardware Configuration Register */
		 RoReg8		Reserved3[0x0c];		
	__IO MSI0_BUSMODE_Type		BUSMODE;		/**< \brief MSI0 Bus Mode Register */
	__IO MSI0_PLDMND_Type		PLDMND;		/**< \brief MSI0 Poll Demand Register */
	__IO MSI0_DBADDR_Type		DBADDR;		/**< \brief MSI0 Descriptor List Base Address Register */
	__IO MSI0_IDSTS_Type		IDSTS;		/**< \brief MSI0 Internal DMA Status Register */
	__IO MSI0_IDINTEN_Type		IDINTEN;		/**< \brief MSI0 Internal DMA Interrupt Enable Register */
	__IO MSI0_DSCADDR_Type		DSCADDR;		/**< \brief MSI0 Current Host Descriptor Address Register */
	__IO MSI0_BUFADDR_Type		BUFADDR;		/**< \brief MSI0 Current Buffer Descriptor Address Register */
		 RoReg8		Reserved4[0x64];		
	__IO MSI0_CDTHRCTL_Type		CDTHRCTL;		/**< \brief MSI0 Card Threshold Control Register */
		 RoReg8		Reserved5[0x04];		
	__IO MSI0_UHS_EXT_Type		UHS_EXT;		/**< \brief MSI0 UHS Register Extention */
		 RoReg8		Reserved6[0x04];		
	__IO MSI0_ENSHIFT_Type		ENSHIFT;		/**< \brief MSI0 Register to control the amount of shift on enables */
} Msi0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- DMA_DSCPTR_NXT : (32) DMA0 Pointer to Next Initial Descriptor ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_DSCPTR_NXT_Type;
#define REG_DMA0_DSCPTR_NXT		(*(RwReg *)0x2007C000UL)

#else
#define REG_DMA0_DSCPTR_NXT		(0x2007C000) /**< \brief (DMA0) DMA0 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_ADDRSTART : (32) DMA0 Start Address of Current Buffer ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_ADDRSTART_Type;
#define REG_DMA0_ADDRSTART		(*(RwReg *)0x2007C004UL)

#else
#define REG_DMA0_ADDRSTART		(0x2007C004) /**< \brief (DMA0) DMA0 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_CFG : (32) DMA0 Configuration Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Channel Enable	*/
		uint32_t WNR:1;			/*!< bit	1	Write/Read Channel Direction	*/
		uint32_t SYNC:1;			/*!< bit	2	Synchronize Work Unit Transitions	*/
		uint32_t CADDR:1;			/*!< bit	3	Use Current Address	*/
		uint32_t PSIZE:3;			/*!< bit	4..6	Peripheral Transfer Word Size	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t MSIZE:3;			/*!< bit	8..10	Memory Transfer Word Size	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t FLOW:3;			/*!< bit	12..14	Next Operation	*/
		uint32_t TWAIT:1;			/*!< bit	15	Wait for Trigger	*/
		uint32_t NDSIZE:3;			/*!< bit	16..18	Next Descriptor Set Size	*/
		uint32_t :1;			/*!< bit	19	Reserved	*/
		uint32_t INT:2;			/*!< bit	20..21	Generate Interrupt	*/
		uint32_t TRIG:2;			/*!< bit	22..23	Generate Outgoing Trigger	*/
		uint32_t TOVEN:1;			/*!< bit	24	Trigger Overrun Error Enable	*/
		uint32_t DESCIDCPY:1;			/*!< bit	25	Descriptor ID Copy Control	*/
		uint32_t TWOD:1;			/*!< bit	26	Two Dimension Addressing Enable	*/
		uint32_t :1;			/*!< bit	27	Reserved	*/
		uint32_t PDRF:1;			/*!< bit	28	Peripheral Data Request Forward	*/
		uint32_t :3;			/*!< bit	29..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_CFG_Type;
#define REG_DMA0_CFG		(*(RwReg *)0x2007C008UL)

#else
#define REG_DMA0_CFG		(0x2007C008) /**< \brief (DMA0) DMA0 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_XCNT : (32) DMA0 Inner Loop Count Start Value ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_XCNT_Type;
#define REG_DMA0_XCNT		(*(RwReg *)0x2007C00CUL)

#else
#define REG_DMA0_XCNT		(0x2007C00C) /**< \brief (DMA0) DMA0 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_XMOD : (32) DMA0 Inner Loop Address Increment ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_XMOD_Type;
#define REG_DMA0_XMOD		(*(RwReg *)0x2007C010UL)

#else
#define REG_DMA0_XMOD		(0x2007C010) /**< \brief (DMA0) DMA0 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_YCNT : (32) DMA0 Outer Loop Count Start Value (2D only) ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_YCNT_Type;
#define REG_DMA0_YCNT		(*(RwReg *)0x2007C014UL)

#else
#define REG_DMA0_YCNT		(0x2007C014) /**< \brief (DMA0) DMA0 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_YMOD : (32) DMA0 Outer Loop Address Increment (2D only) ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_YMOD_Type;
#define REG_DMA0_YMOD		(*(RwReg *)0x2007C018UL)

#else
#define REG_DMA0_YMOD		(0x2007C018) /**< \brief (DMA0) DMA0 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_DSCPTR_CUR : (32) DMA0 Current Descriptor Pointer ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_DSCPTR_CUR_Type;
#define REG_DMA0_DSCPTR_CUR		(*(RwReg *)0x2007C024UL)

#else
#define REG_DMA0_DSCPTR_CUR		(0x2007C024) /**< \brief (DMA0) DMA0 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_DSCPTR_PRV : (32) DMA0 Previous Initial Descriptor Pointer ----- */
typedef union {
	struct {
		uint32_t PDPO:1;			/*!< bit	0	Previous Descriptor Pointer Overrun	*/
		uint32_t :1;			/*!< bit	1	Reserved	*/
		uint32_t DESCPPREV:30;			/*!< bit	2..31	Pointer for Previous Descriptor Element	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_DSCPTR_PRV_Type;
#define REG_DMA0_DSCPTR_PRV		(*(RwReg *)0x2007C028UL)

#else
#define REG_DMA0_DSCPTR_PRV		(0x2007C028) /**< \brief (DMA0) DMA0 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_ADDR_CUR : (32) DMA0 Current Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_ADDR_CUR_Type;
#define REG_DMA0_ADDR_CUR		(*(RwReg *)0x2007C02CUL)

#else
#define REG_DMA0_ADDR_CUR		(0x2007C02C) /**< \brief (DMA0) DMA0 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_STAT : (32) DMA0 Status Register ----- */
typedef union {
	struct {
		uint32_t IRQDONE:1;			/*!< bit	0	Work Unit/Row Done Interrupt	*/
		uint32_t IRQERR:1;			/*!< bit	1	Error Interrupt	*/
		uint32_t PIRQ:1;			/*!< bit	2	Peripheral Interrupt Request	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t ERRC:3;			/*!< bit	4..6	Error Cause	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
		uint32_t RUN:3;			/*!< bit	8..10	Run Status	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t PBWID:2;			/*!< bit	12..13	Peripheral Bus Width	*/
		uint32_t MBWID:2;			/*!< bit	14..15	Memory Bus Width	*/
		uint32_t FIFOFILL:3;			/*!< bit	16..18	FIFO Fill Status	*/
		uint32_t :1;			/*!< bit	19	Reserved	*/
		uint32_t TWAIT:1;			/*!< bit	20	Trigger Wait Status	*/
		uint32_t :11;			/*!< bit	21..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_STAT_Type;
#define REG_DMA0_STAT		(*(RwReg *)0x2007C030UL)

#else
#define REG_DMA0_STAT		(0x2007C030) /**< \brief (DMA0) DMA0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_XCNT_CUR : (32) DMA0 Current Count(1D) or intra-row XCNT (2D) ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_XCNT_CUR_Type;
#define REG_DMA0_XCNT_CUR		(*(RwReg *)0x2007C034UL)

#else
#define REG_DMA0_XCNT_CUR		(0x2007C034) /**< \brief (DMA0) DMA0 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMA_YCNT_CUR : (32) DMA0 Current Row Count (2D only) ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMA_YCNT_CUR_Type;
#define REG_DMA0_YCNT_CUR		(*(RwReg *)0x2007C038UL)

#else
#define REG_DMA0_YCNT_CUR		(0x2007C038) /**< \brief (DMA0) DMA0 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO DMA_DSCPTR_NXT_Type		DSCPTR_NXT;		/**< \brief DMA0 Pointer to Next Initial Descriptor */
	__IO DMA_ADDRSTART_Type		ADDRSTART;		/**< \brief DMA0 Start Address of Current Buffer */
	__IO DMA_CFG_Type		CFG;		/**< \brief DMA0 Configuration Register */
	__IO DMA_XCNT_Type		XCNT;		/**< \brief DMA0 Inner Loop Count Start Value */
	__IO DMA_XMOD_Type		XMOD;		/**< \brief DMA0 Inner Loop Address Increment */
	__IO DMA_YCNT_Type		YCNT;		/**< \brief DMA0 Outer Loop Count Start Value (2D only) */
	__IO DMA_YMOD_Type		YMOD;		/**< \brief DMA0 Outer Loop Address Increment (2D only) */
		 RoReg8		Reserved1[0x08];		
	__IO DMA_DSCPTR_CUR_Type		DSCPTR_CUR;		/**< \brief DMA0 Current Descriptor Pointer */
	__IO DMA_DSCPTR_PRV_Type		DSCPTR_PRV;		/**< \brief DMA0 Previous Initial Descriptor Pointer */
	__IO DMA_ADDR_CUR_Type		ADDR_CUR;		/**< \brief DMA0 Current Address */
	__IO DMA_STAT_Type		STAT;		/**< \brief DMA0 Status Register */
	__IO DMA_XCNT_CUR_Type		XCNT_CUR;		/**< \brief DMA0 Current Count(1D) or intra-row XCNT (2D) */
	__IO DMA_YCNT_CUR_Type		YCNT_CUR;		/**< \brief DMA0 Current Row Count (2D only) */
} Dmagroup;
#endif
#if !(defined(__ASSEMBLY__))
#define REG_DMA1_DSCPTR_NXT		(*(RwReg *)0x2007D000UL)

#else
#define REG_DMA1_DSCPTR_NXT		(0x2007D000) /**< \brief (DMA1) DMA1 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_ADDRSTART		(*(RwReg *)0x2007D004UL)

#else
#define REG_DMA1_ADDRSTART		(0x2007D004) /**< \brief (DMA1) DMA1 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_CFG		(*(RwReg *)0x2007D008UL)

#else
#define REG_DMA1_CFG		(0x2007D008) /**< \brief (DMA1) DMA1 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_XCNT		(*(RwReg *)0x2007D00CUL)

#else
#define REG_DMA1_XCNT		(0x2007D00C) /**< \brief (DMA1) DMA1 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_XMOD		(*(RwReg *)0x2007D010UL)

#else
#define REG_DMA1_XMOD		(0x2007D010) /**< \brief (DMA1) DMA1 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_YCNT		(*(RwReg *)0x2007D014UL)

#else
#define REG_DMA1_YCNT		(0x2007D014) /**< \brief (DMA1) DMA1 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_YMOD		(*(RwReg *)0x2007D018UL)

#else
#define REG_DMA1_YMOD		(0x2007D018) /**< \brief (DMA1) DMA1 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_DSCPTR_CUR		(*(RwReg *)0x2007D024UL)

#else
#define REG_DMA1_DSCPTR_CUR		(0x2007D024) /**< \brief (DMA1) DMA1 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_DSCPTR_PRV		(*(RwReg *)0x2007D028UL)

#else
#define REG_DMA1_DSCPTR_PRV		(0x2007D028) /**< \brief (DMA1) DMA1 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_ADDR_CUR		(*(RwReg *)0x2007D02CUL)

#else
#define REG_DMA1_ADDR_CUR		(0x2007D02C) /**< \brief (DMA1) DMA1 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_STAT		(*(RwReg *)0x2007D030UL)

#else
#define REG_DMA1_STAT		(0x2007D030) /**< \brief (DMA1) DMA1 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_XCNT_CUR		(*(RwReg *)0x2007D034UL)

#else
#define REG_DMA1_XCNT_CUR		(0x2007D034) /**< \brief (DMA1) DMA1 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA1_YCNT_CUR		(*(RwReg *)0x2007D038UL)

#else
#define REG_DMA1_YCNT_CUR		(0x2007D038) /**< \brief (DMA1) DMA1 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_DSCPTR_NXT		(*(RwReg *)0x2007E000UL)

#else
#define REG_DMA2_DSCPTR_NXT		(0x2007E000) /**< \brief (DMA2) DMA2 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_ADDRSTART		(*(RwReg *)0x2007E004UL)

#else
#define REG_DMA2_ADDRSTART		(0x2007E004) /**< \brief (DMA2) DMA2 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_CFG		(*(RwReg *)0x2007E008UL)

#else
#define REG_DMA2_CFG		(0x2007E008) /**< \brief (DMA2) DMA2 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_XCNT		(*(RwReg *)0x2007E00CUL)

#else
#define REG_DMA2_XCNT		(0x2007E00C) /**< \brief (DMA2) DMA2 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_XMOD		(*(RwReg *)0x2007E010UL)

#else
#define REG_DMA2_XMOD		(0x2007E010) /**< \brief (DMA2) DMA2 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_YCNT		(*(RwReg *)0x2007E014UL)

#else
#define REG_DMA2_YCNT		(0x2007E014) /**< \brief (DMA2) DMA2 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_YMOD		(*(RwReg *)0x2007E018UL)

#else
#define REG_DMA2_YMOD		(0x2007E018) /**< \brief (DMA2) DMA2 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_DSCPTR_CUR		(*(RwReg *)0x2007E024UL)

#else
#define REG_DMA2_DSCPTR_CUR		(0x2007E024) /**< \brief (DMA2) DMA2 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_DSCPTR_PRV		(*(RwReg *)0x2007E028UL)

#else
#define REG_DMA2_DSCPTR_PRV		(0x2007E028) /**< \brief (DMA2) DMA2 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_ADDR_CUR		(*(RwReg *)0x2007E02CUL)

#else
#define REG_DMA2_ADDR_CUR		(0x2007E02C) /**< \brief (DMA2) DMA2 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_STAT		(*(RwReg *)0x2007E030UL)

#else
#define REG_DMA2_STAT		(0x2007E030) /**< \brief (DMA2) DMA2 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_XCNT_CUR		(*(RwReg *)0x2007E034UL)

#else
#define REG_DMA2_XCNT_CUR		(0x2007E034) /**< \brief (DMA2) DMA2 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA2_YCNT_CUR		(*(RwReg *)0x2007E038UL)

#else
#define REG_DMA2_YCNT_CUR		(0x2007E038) /**< \brief (DMA2) DMA2 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_DSCPTR_NXT		(*(RwReg *)0x2007F000UL)

#else
#define REG_DMA3_DSCPTR_NXT		(0x2007F000) /**< \brief (DMA3) DMA3 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_ADDRSTART		(*(RwReg *)0x2007F004UL)

#else
#define REG_DMA3_ADDRSTART		(0x2007F004) /**< \brief (DMA3) DMA3 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_CFG		(*(RwReg *)0x2007F008UL)

#else
#define REG_DMA3_CFG		(0x2007F008) /**< \brief (DMA3) DMA3 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_XCNT		(*(RwReg *)0x2007F00CUL)

#else
#define REG_DMA3_XCNT		(0x2007F00C) /**< \brief (DMA3) DMA3 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_XMOD		(*(RwReg *)0x2007F010UL)

#else
#define REG_DMA3_XMOD		(0x2007F010) /**< \brief (DMA3) DMA3 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_YCNT		(*(RwReg *)0x2007F014UL)

#else
#define REG_DMA3_YCNT		(0x2007F014) /**< \brief (DMA3) DMA3 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_YMOD		(*(RwReg *)0x2007F018UL)

#else
#define REG_DMA3_YMOD		(0x2007F018) /**< \brief (DMA3) DMA3 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_DSCPTR_CUR		(*(RwReg *)0x2007F024UL)

#else
#define REG_DMA3_DSCPTR_CUR		(0x2007F024) /**< \brief (DMA3) DMA3 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_DSCPTR_PRV		(*(RwReg *)0x2007F028UL)

#else
#define REG_DMA3_DSCPTR_PRV		(0x2007F028) /**< \brief (DMA3) DMA3 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_ADDR_CUR		(*(RwReg *)0x2007F02CUL)

#else
#define REG_DMA3_ADDR_CUR		(0x2007F02C) /**< \brief (DMA3) DMA3 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_STAT		(*(RwReg *)0x2007F030UL)

#else
#define REG_DMA3_STAT		(0x2007F030) /**< \brief (DMA3) DMA3 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_XCNT_CUR		(*(RwReg *)0x2007F034UL)

#else
#define REG_DMA3_XCNT_CUR		(0x2007F034) /**< \brief (DMA3) DMA3 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA3_YCNT_CUR		(*(RwReg *)0x2007F038UL)

#else
#define REG_DMA3_YCNT_CUR		(0x2007F038) /**< \brief (DMA3) DMA3 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_DSCPTR_NXT		(*(RwReg *)0x20080000UL)

#else
#define REG_DMA4_DSCPTR_NXT		(0x20080000) /**< \brief (DMA4) DMA4 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_ADDRSTART		(*(RwReg *)0x20080004UL)

#else
#define REG_DMA4_ADDRSTART		(0x20080004) /**< \brief (DMA4) DMA4 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_CFG		(*(RwReg *)0x20080008UL)

#else
#define REG_DMA4_CFG		(0x20080008) /**< \brief (DMA4) DMA4 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_XCNT		(*(RwReg *)0x2008000CUL)

#else
#define REG_DMA4_XCNT		(0x2008000C) /**< \brief (DMA4) DMA4 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_XMOD		(*(RwReg *)0x20080010UL)

#else
#define REG_DMA4_XMOD		(0x20080010) /**< \brief (DMA4) DMA4 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_YCNT		(*(RwReg *)0x20080014UL)

#else
#define REG_DMA4_YCNT		(0x20080014) /**< \brief (DMA4) DMA4 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_YMOD		(*(RwReg *)0x20080018UL)

#else
#define REG_DMA4_YMOD		(0x20080018) /**< \brief (DMA4) DMA4 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_DSCPTR_CUR		(*(RwReg *)0x20080024UL)

#else
#define REG_DMA4_DSCPTR_CUR		(0x20080024) /**< \brief (DMA4) DMA4 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_DSCPTR_PRV		(*(RwReg *)0x20080028UL)

#else
#define REG_DMA4_DSCPTR_PRV		(0x20080028) /**< \brief (DMA4) DMA4 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_ADDR_CUR		(*(RwReg *)0x2008002CUL)

#else
#define REG_DMA4_ADDR_CUR		(0x2008002C) /**< \brief (DMA4) DMA4 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_STAT		(*(RwReg *)0x20080030UL)

#else
#define REG_DMA4_STAT		(0x20080030) /**< \brief (DMA4) DMA4 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_XCNT_CUR		(*(RwReg *)0x20080034UL)

#else
#define REG_DMA4_XCNT_CUR		(0x20080034) /**< \brief (DMA4) DMA4 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA4_YCNT_CUR		(*(RwReg *)0x20080038UL)

#else
#define REG_DMA4_YCNT_CUR		(0x20080038) /**< \brief (DMA4) DMA4 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_DSCPTR_NXT		(*(RwReg *)0x20081000UL)

#else
#define REG_DMA5_DSCPTR_NXT		(0x20081000) /**< \brief (DMA5) DMA5 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_ADDRSTART		(*(RwReg *)0x20081004UL)

#else
#define REG_DMA5_ADDRSTART		(0x20081004) /**< \brief (DMA5) DMA5 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_CFG		(*(RwReg *)0x20081008UL)

#else
#define REG_DMA5_CFG		(0x20081008) /**< \brief (DMA5) DMA5 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_XCNT		(*(RwReg *)0x2008100CUL)

#else
#define REG_DMA5_XCNT		(0x2008100C) /**< \brief (DMA5) DMA5 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_XMOD		(*(RwReg *)0x20081010UL)

#else
#define REG_DMA5_XMOD		(0x20081010) /**< \brief (DMA5) DMA5 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_YCNT		(*(RwReg *)0x20081014UL)

#else
#define REG_DMA5_YCNT		(0x20081014) /**< \brief (DMA5) DMA5 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_YMOD		(*(RwReg *)0x20081018UL)

#else
#define REG_DMA5_YMOD		(0x20081018) /**< \brief (DMA5) DMA5 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_DSCPTR_CUR		(*(RwReg *)0x20081024UL)

#else
#define REG_DMA5_DSCPTR_CUR		(0x20081024) /**< \brief (DMA5) DMA5 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_DSCPTR_PRV		(*(RwReg *)0x20081028UL)

#else
#define REG_DMA5_DSCPTR_PRV		(0x20081028) /**< \brief (DMA5) DMA5 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_ADDR_CUR		(*(RwReg *)0x2008102CUL)

#else
#define REG_DMA5_ADDR_CUR		(0x2008102C) /**< \brief (DMA5) DMA5 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_STAT		(*(RwReg *)0x20081030UL)

#else
#define REG_DMA5_STAT		(0x20081030) /**< \brief (DMA5) DMA5 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_XCNT_CUR		(*(RwReg *)0x20081034UL)

#else
#define REG_DMA5_XCNT_CUR		(0x20081034) /**< \brief (DMA5) DMA5 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA5_YCNT_CUR		(*(RwReg *)0x20081038UL)

#else
#define REG_DMA5_YCNT_CUR		(0x20081038) /**< \brief (DMA5) DMA5 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_DSCPTR_NXT		(*(RwReg *)0x20082000UL)

#else
#define REG_DMA6_DSCPTR_NXT		(0x20082000) /**< \brief (DMA6) DMA6 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_ADDRSTART		(*(RwReg *)0x20082004UL)

#else
#define REG_DMA6_ADDRSTART		(0x20082004) /**< \brief (DMA6) DMA6 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_CFG		(*(RwReg *)0x20082008UL)

#else
#define REG_DMA6_CFG		(0x20082008) /**< \brief (DMA6) DMA6 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_XCNT		(*(RwReg *)0x2008200CUL)

#else
#define REG_DMA6_XCNT		(0x2008200C) /**< \brief (DMA6) DMA6 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_XMOD		(*(RwReg *)0x20082010UL)

#else
#define REG_DMA6_XMOD		(0x20082010) /**< \brief (DMA6) DMA6 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_YCNT		(*(RwReg *)0x20082014UL)

#else
#define REG_DMA6_YCNT		(0x20082014) /**< \brief (DMA6) DMA6 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_YMOD		(*(RwReg *)0x20082018UL)

#else
#define REG_DMA6_YMOD		(0x20082018) /**< \brief (DMA6) DMA6 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_DSCPTR_CUR		(*(RwReg *)0x20082024UL)

#else
#define REG_DMA6_DSCPTR_CUR		(0x20082024) /**< \brief (DMA6) DMA6 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_DSCPTR_PRV		(*(RwReg *)0x20082028UL)

#else
#define REG_DMA6_DSCPTR_PRV		(0x20082028) /**< \brief (DMA6) DMA6 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_ADDR_CUR		(*(RwReg *)0x2008202CUL)

#else
#define REG_DMA6_ADDR_CUR		(0x2008202C) /**< \brief (DMA6) DMA6 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_STAT		(*(RwReg *)0x20082030UL)

#else
#define REG_DMA6_STAT		(0x20082030) /**< \brief (DMA6) DMA6 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_XCNT_CUR		(*(RwReg *)0x20082034UL)

#else
#define REG_DMA6_XCNT_CUR		(0x20082034) /**< \brief (DMA6) DMA6 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA6_YCNT_CUR		(*(RwReg *)0x20082038UL)

#else
#define REG_DMA6_YCNT_CUR		(0x20082038) /**< \brief (DMA6) DMA6 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_DSCPTR_NXT		(*(RwReg *)0x20083000UL)

#else
#define REG_DMA7_DSCPTR_NXT		(0x20083000) /**< \brief (DMA7) DMA7 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_ADDRSTART		(*(RwReg *)0x20083004UL)

#else
#define REG_DMA7_ADDRSTART		(0x20083004) /**< \brief (DMA7) DMA7 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_CFG		(*(RwReg *)0x20083008UL)

#else
#define REG_DMA7_CFG		(0x20083008) /**< \brief (DMA7) DMA7 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_XCNT		(*(RwReg *)0x2008300CUL)

#else
#define REG_DMA7_XCNT		(0x2008300C) /**< \brief (DMA7) DMA7 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_XMOD		(*(RwReg *)0x20083010UL)

#else
#define REG_DMA7_XMOD		(0x20083010) /**< \brief (DMA7) DMA7 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_YCNT		(*(RwReg *)0x20083014UL)

#else
#define REG_DMA7_YCNT		(0x20083014) /**< \brief (DMA7) DMA7 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_YMOD		(*(RwReg *)0x20083018UL)

#else
#define REG_DMA7_YMOD		(0x20083018) /**< \brief (DMA7) DMA7 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_DSCPTR_CUR		(*(RwReg *)0x20083024UL)

#else
#define REG_DMA7_DSCPTR_CUR		(0x20083024) /**< \brief (DMA7) DMA7 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_DSCPTR_PRV		(*(RwReg *)0x20083028UL)

#else
#define REG_DMA7_DSCPTR_PRV		(0x20083028) /**< \brief (DMA7) DMA7 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_ADDR_CUR		(*(RwReg *)0x2008302CUL)

#else
#define REG_DMA7_ADDR_CUR		(0x2008302C) /**< \brief (DMA7) DMA7 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_STAT		(*(RwReg *)0x20083030UL)

#else
#define REG_DMA7_STAT		(0x20083030) /**< \brief (DMA7) DMA7 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_XCNT_CUR		(*(RwReg *)0x20083034UL)

#else
#define REG_DMA7_XCNT_CUR		(0x20083034) /**< \brief (DMA7) DMA7 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA7_YCNT_CUR		(*(RwReg *)0x20083038UL)

#else
#define REG_DMA7_YCNT_CUR		(0x20083038) /**< \brief (DMA7) DMA7 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_DSCPTR_NXT		(*(RwReg *)0x20084000UL)

#else
#define REG_DMA8_DSCPTR_NXT		(0x20084000) /**< \brief (DMA8) DMA8 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_ADDRSTART		(*(RwReg *)0x20084004UL)

#else
#define REG_DMA8_ADDRSTART		(0x20084004) /**< \brief (DMA8) DMA8 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_CFG		(*(RwReg *)0x20084008UL)

#else
#define REG_DMA8_CFG		(0x20084008) /**< \brief (DMA8) DMA8 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_XCNT		(*(RwReg *)0x2008400CUL)

#else
#define REG_DMA8_XCNT		(0x2008400C) /**< \brief (DMA8) DMA8 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_XMOD		(*(RwReg *)0x20084010UL)

#else
#define REG_DMA8_XMOD		(0x20084010) /**< \brief (DMA8) DMA8 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_YCNT		(*(RwReg *)0x20084014UL)

#else
#define REG_DMA8_YCNT		(0x20084014) /**< \brief (DMA8) DMA8 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_YMOD		(*(RwReg *)0x20084018UL)

#else
#define REG_DMA8_YMOD		(0x20084018) /**< \brief (DMA8) DMA8 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_DSCPTR_CUR		(*(RwReg *)0x20084024UL)

#else
#define REG_DMA8_DSCPTR_CUR		(0x20084024) /**< \brief (DMA8) DMA8 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_DSCPTR_PRV		(*(RwReg *)0x20084028UL)

#else
#define REG_DMA8_DSCPTR_PRV		(0x20084028) /**< \brief (DMA8) DMA8 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_ADDR_CUR		(*(RwReg *)0x2008402CUL)

#else
#define REG_DMA8_ADDR_CUR		(0x2008402C) /**< \brief (DMA8) DMA8 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_STAT		(*(RwReg *)0x20084030UL)

#else
#define REG_DMA8_STAT		(0x20084030) /**< \brief (DMA8) DMA8 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_XCNT_CUR		(*(RwReg *)0x20084034UL)

#else
#define REG_DMA8_XCNT_CUR		(0x20084034) /**< \brief (DMA8) DMA8 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA8_YCNT_CUR		(*(RwReg *)0x20084038UL)

#else
#define REG_DMA8_YCNT_CUR		(0x20084038) /**< \brief (DMA8) DMA8 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_DSCPTR_NXT		(*(RwReg *)0x20085000UL)

#else
#define REG_DMA9_DSCPTR_NXT		(0x20085000) /**< \brief (DMA9) DMA9 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_ADDRSTART		(*(RwReg *)0x20085004UL)

#else
#define REG_DMA9_ADDRSTART		(0x20085004) /**< \brief (DMA9) DMA9 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_CFG		(*(RwReg *)0x20085008UL)

#else
#define REG_DMA9_CFG		(0x20085008) /**< \brief (DMA9) DMA9 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_XCNT		(*(RwReg *)0x2008500CUL)

#else
#define REG_DMA9_XCNT		(0x2008500C) /**< \brief (DMA9) DMA9 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_XMOD		(*(RwReg *)0x20085010UL)

#else
#define REG_DMA9_XMOD		(0x20085010) /**< \brief (DMA9) DMA9 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_YCNT		(*(RwReg *)0x20085014UL)

#else
#define REG_DMA9_YCNT		(0x20085014) /**< \brief (DMA9) DMA9 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_YMOD		(*(RwReg *)0x20085018UL)

#else
#define REG_DMA9_YMOD		(0x20085018) /**< \brief (DMA9) DMA9 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_DSCPTR_CUR		(*(RwReg *)0x20085024UL)

#else
#define REG_DMA9_DSCPTR_CUR		(0x20085024) /**< \brief (DMA9) DMA9 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_DSCPTR_PRV		(*(RwReg *)0x20085028UL)

#else
#define REG_DMA9_DSCPTR_PRV		(0x20085028) /**< \brief (DMA9) DMA9 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_ADDR_CUR		(*(RwReg *)0x2008502CUL)

#else
#define REG_DMA9_ADDR_CUR		(0x2008502C) /**< \brief (DMA9) DMA9 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_STAT		(*(RwReg *)0x20085030UL)

#else
#define REG_DMA9_STAT		(0x20085030) /**< \brief (DMA9) DMA9 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_XCNT_CUR		(*(RwReg *)0x20085034UL)

#else
#define REG_DMA9_XCNT_CUR		(0x20085034) /**< \brief (DMA9) DMA9 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA9_YCNT_CUR		(*(RwReg *)0x20085038UL)

#else
#define REG_DMA9_YCNT_CUR		(0x20085038) /**< \brief (DMA9) DMA9 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_DSCPTR_NXT		(*(RwReg *)0x20086000UL)

#else
#define REG_DMA10_DSCPTR_NXT		(0x20086000) /**< \brief (DMA10) DMA10 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_ADDRSTART		(*(RwReg *)0x20086004UL)

#else
#define REG_DMA10_ADDRSTART		(0x20086004) /**< \brief (DMA10) DMA10 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_CFG		(*(RwReg *)0x20086008UL)

#else
#define REG_DMA10_CFG		(0x20086008) /**< \brief (DMA10) DMA10 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_XCNT		(*(RwReg *)0x2008600CUL)

#else
#define REG_DMA10_XCNT		(0x2008600C) /**< \brief (DMA10) DMA10 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_XMOD		(*(RwReg *)0x20086010UL)

#else
#define REG_DMA10_XMOD		(0x20086010) /**< \brief (DMA10) DMA10 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_YCNT		(*(RwReg *)0x20086014UL)

#else
#define REG_DMA10_YCNT		(0x20086014) /**< \brief (DMA10) DMA10 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_YMOD		(*(RwReg *)0x20086018UL)

#else
#define REG_DMA10_YMOD		(0x20086018) /**< \brief (DMA10) DMA10 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_DSCPTR_CUR		(*(RwReg *)0x20086024UL)

#else
#define REG_DMA10_DSCPTR_CUR		(0x20086024) /**< \brief (DMA10) DMA10 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_DSCPTR_PRV		(*(RwReg *)0x20086028UL)

#else
#define REG_DMA10_DSCPTR_PRV		(0x20086028) /**< \brief (DMA10) DMA10 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_ADDR_CUR		(*(RwReg *)0x2008602CUL)

#else
#define REG_DMA10_ADDR_CUR		(0x2008602C) /**< \brief (DMA10) DMA10 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_STAT		(*(RwReg *)0x20086030UL)

#else
#define REG_DMA10_STAT		(0x20086030) /**< \brief (DMA10) DMA10 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_XCNT_CUR		(*(RwReg *)0x20086034UL)

#else
#define REG_DMA10_XCNT_CUR		(0x20086034) /**< \brief (DMA10) DMA10 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA10_YCNT_CUR		(*(RwReg *)0x20086038UL)

#else
#define REG_DMA10_YCNT_CUR		(0x20086038) /**< \brief (DMA10) DMA10 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_DSCPTR_NXT		(*(RwReg *)0x20087000UL)

#else
#define REG_DMA11_DSCPTR_NXT		(0x20087000) /**< \brief (DMA11) DMA11 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_ADDRSTART		(*(RwReg *)0x20087004UL)

#else
#define REG_DMA11_ADDRSTART		(0x20087004) /**< \brief (DMA11) DMA11 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_CFG		(*(RwReg *)0x20087008UL)

#else
#define REG_DMA11_CFG		(0x20087008) /**< \brief (DMA11) DMA11 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_XCNT		(*(RwReg *)0x2008700CUL)

#else
#define REG_DMA11_XCNT		(0x2008700C) /**< \brief (DMA11) DMA11 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_XMOD		(*(RwReg *)0x20087010UL)

#else
#define REG_DMA11_XMOD		(0x20087010) /**< \brief (DMA11) DMA11 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_YCNT		(*(RwReg *)0x20087014UL)

#else
#define REG_DMA11_YCNT		(0x20087014) /**< \brief (DMA11) DMA11 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_YMOD		(*(RwReg *)0x20087018UL)

#else
#define REG_DMA11_YMOD		(0x20087018) /**< \brief (DMA11) DMA11 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_DSCPTR_CUR		(*(RwReg *)0x20087024UL)

#else
#define REG_DMA11_DSCPTR_CUR		(0x20087024) /**< \brief (DMA11) DMA11 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_DSCPTR_PRV		(*(RwReg *)0x20087028UL)

#else
#define REG_DMA11_DSCPTR_PRV		(0x20087028) /**< \brief (DMA11) DMA11 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_ADDR_CUR		(*(RwReg *)0x2008702CUL)

#else
#define REG_DMA11_ADDR_CUR		(0x2008702C) /**< \brief (DMA11) DMA11 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_STAT		(*(RwReg *)0x20087030UL)

#else
#define REG_DMA11_STAT		(0x20087030) /**< \brief (DMA11) DMA11 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_XCNT_CUR		(*(RwReg *)0x20087034UL)

#else
#define REG_DMA11_XCNT_CUR		(0x20087034) /**< \brief (DMA11) DMA11 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA11_YCNT_CUR		(*(RwReg *)0x20087038UL)

#else
#define REG_DMA11_YCNT_CUR		(0x20087038) /**< \brief (DMA11) DMA11 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_DSCPTR_NXT		(*(RwReg *)0x20088000UL)

#else
#define REG_DMA12_DSCPTR_NXT		(0x20088000) /**< \brief (DMA12) DMA12 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_ADDRSTART		(*(RwReg *)0x20088004UL)

#else
#define REG_DMA12_ADDRSTART		(0x20088004) /**< \brief (DMA12) DMA12 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_CFG		(*(RwReg *)0x20088008UL)

#else
#define REG_DMA12_CFG		(0x20088008) /**< \brief (DMA12) DMA12 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_XCNT		(*(RwReg *)0x2008800CUL)

#else
#define REG_DMA12_XCNT		(0x2008800C) /**< \brief (DMA12) DMA12 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_XMOD		(*(RwReg *)0x20088010UL)

#else
#define REG_DMA12_XMOD		(0x20088010) /**< \brief (DMA12) DMA12 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_YCNT		(*(RwReg *)0x20088014UL)

#else
#define REG_DMA12_YCNT		(0x20088014) /**< \brief (DMA12) DMA12 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_YMOD		(*(RwReg *)0x20088018UL)

#else
#define REG_DMA12_YMOD		(0x20088018) /**< \brief (DMA12) DMA12 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_DSCPTR_CUR		(*(RwReg *)0x20088024UL)

#else
#define REG_DMA12_DSCPTR_CUR		(0x20088024) /**< \brief (DMA12) DMA12 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_DSCPTR_PRV		(*(RwReg *)0x20088028UL)

#else
#define REG_DMA12_DSCPTR_PRV		(0x20088028) /**< \brief (DMA12) DMA12 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_ADDR_CUR		(*(RwReg *)0x2008802CUL)

#else
#define REG_DMA12_ADDR_CUR		(0x2008802C) /**< \brief (DMA12) DMA12 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_STAT		(*(RwReg *)0x20088030UL)

#else
#define REG_DMA12_STAT		(0x20088030) /**< \brief (DMA12) DMA12 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_XCNT_CUR		(*(RwReg *)0x20088034UL)

#else
#define REG_DMA12_XCNT_CUR		(0x20088034) /**< \brief (DMA12) DMA12 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA12_YCNT_CUR		(*(RwReg *)0x20088038UL)

#else
#define REG_DMA12_YCNT_CUR		(0x20088038) /**< \brief (DMA12) DMA12 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_DSCPTR_NXT		(*(RwReg *)0x20089000UL)

#else
#define REG_DMA13_DSCPTR_NXT		(0x20089000) /**< \brief (DMA13) DMA13 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_ADDRSTART		(*(RwReg *)0x20089004UL)

#else
#define REG_DMA13_ADDRSTART		(0x20089004) /**< \brief (DMA13) DMA13 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_CFG		(*(RwReg *)0x20089008UL)

#else
#define REG_DMA13_CFG		(0x20089008) /**< \brief (DMA13) DMA13 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_XCNT		(*(RwReg *)0x2008900CUL)

#else
#define REG_DMA13_XCNT		(0x2008900C) /**< \brief (DMA13) DMA13 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_XMOD		(*(RwReg *)0x20089010UL)

#else
#define REG_DMA13_XMOD		(0x20089010) /**< \brief (DMA13) DMA13 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_YCNT		(*(RwReg *)0x20089014UL)

#else
#define REG_DMA13_YCNT		(0x20089014) /**< \brief (DMA13) DMA13 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_YMOD		(*(RwReg *)0x20089018UL)

#else
#define REG_DMA13_YMOD		(0x20089018) /**< \brief (DMA13) DMA13 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_DSCPTR_CUR		(*(RwReg *)0x20089024UL)

#else
#define REG_DMA13_DSCPTR_CUR		(0x20089024) /**< \brief (DMA13) DMA13 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_DSCPTR_PRV		(*(RwReg *)0x20089028UL)

#else
#define REG_DMA13_DSCPTR_PRV		(0x20089028) /**< \brief (DMA13) DMA13 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_ADDR_CUR		(*(RwReg *)0x2008902CUL)

#else
#define REG_DMA13_ADDR_CUR		(0x2008902C) /**< \brief (DMA13) DMA13 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_STAT		(*(RwReg *)0x20089030UL)

#else
#define REG_DMA13_STAT		(0x20089030) /**< \brief (DMA13) DMA13 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_XCNT_CUR		(*(RwReg *)0x20089034UL)

#else
#define REG_DMA13_XCNT_CUR		(0x20089034) /**< \brief (DMA13) DMA13 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA13_YCNT_CUR		(*(RwReg *)0x20089038UL)

#else
#define REG_DMA13_YCNT_CUR		(0x20089038) /**< \brief (DMA13) DMA13 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_DSCPTR_NXT		(*(RwReg *)0x2008A000UL)

#else
#define REG_DMA14_DSCPTR_NXT		(0x2008A000) /**< \brief (DMA14) DMA14 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_ADDRSTART		(*(RwReg *)0x2008A004UL)

#else
#define REG_DMA14_ADDRSTART		(0x2008A004) /**< \brief (DMA14) DMA14 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_CFG		(*(RwReg *)0x2008A008UL)

#else
#define REG_DMA14_CFG		(0x2008A008) /**< \brief (DMA14) DMA14 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_XCNT		(*(RwReg *)0x2008A00CUL)

#else
#define REG_DMA14_XCNT		(0x2008A00C) /**< \brief (DMA14) DMA14 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_XMOD		(*(RwReg *)0x2008A010UL)

#else
#define REG_DMA14_XMOD		(0x2008A010) /**< \brief (DMA14) DMA14 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_YCNT		(*(RwReg *)0x2008A014UL)

#else
#define REG_DMA14_YCNT		(0x2008A014) /**< \brief (DMA14) DMA14 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_YMOD		(*(RwReg *)0x2008A018UL)

#else
#define REG_DMA14_YMOD		(0x2008A018) /**< \brief (DMA14) DMA14 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_DSCPTR_CUR		(*(RwReg *)0x2008A024UL)

#else
#define REG_DMA14_DSCPTR_CUR		(0x2008A024) /**< \brief (DMA14) DMA14 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_DSCPTR_PRV		(*(RwReg *)0x2008A028UL)

#else
#define REG_DMA14_DSCPTR_PRV		(0x2008A028) /**< \brief (DMA14) DMA14 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_ADDR_CUR		(*(RwReg *)0x2008A02CUL)

#else
#define REG_DMA14_ADDR_CUR		(0x2008A02C) /**< \brief (DMA14) DMA14 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_STAT		(*(RwReg *)0x2008A030UL)

#else
#define REG_DMA14_STAT		(0x2008A030) /**< \brief (DMA14) DMA14 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_XCNT_CUR		(*(RwReg *)0x2008A034UL)

#else
#define REG_DMA14_XCNT_CUR		(0x2008A034) /**< \brief (DMA14) DMA14 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA14_YCNT_CUR		(*(RwReg *)0x2008A038UL)

#else
#define REG_DMA14_YCNT_CUR		(0x2008A038) /**< \brief (DMA14) DMA14 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_DSCPTR_NXT		(*(RwReg *)0x2008B000UL)

#else
#define REG_DMA15_DSCPTR_NXT		(0x2008B000) /**< \brief (DMA15) DMA15 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_ADDRSTART		(*(RwReg *)0x2008B004UL)

#else
#define REG_DMA15_ADDRSTART		(0x2008B004) /**< \brief (DMA15) DMA15 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_CFG		(*(RwReg *)0x2008B008UL)

#else
#define REG_DMA15_CFG		(0x2008B008) /**< \brief (DMA15) DMA15 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_XCNT		(*(RwReg *)0x2008B00CUL)

#else
#define REG_DMA15_XCNT		(0x2008B00C) /**< \brief (DMA15) DMA15 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_XMOD		(*(RwReg *)0x2008B010UL)

#else
#define REG_DMA15_XMOD		(0x2008B010) /**< \brief (DMA15) DMA15 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_YCNT		(*(RwReg *)0x2008B014UL)

#else
#define REG_DMA15_YCNT		(0x2008B014) /**< \brief (DMA15) DMA15 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_YMOD		(*(RwReg *)0x2008B018UL)

#else
#define REG_DMA15_YMOD		(0x2008B018) /**< \brief (DMA15) DMA15 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_DSCPTR_CUR		(*(RwReg *)0x2008B024UL)

#else
#define REG_DMA15_DSCPTR_CUR		(0x2008B024) /**< \brief (DMA15) DMA15 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_DSCPTR_PRV		(*(RwReg *)0x2008B028UL)

#else
#define REG_DMA15_DSCPTR_PRV		(0x2008B028) /**< \brief (DMA15) DMA15 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_ADDR_CUR		(*(RwReg *)0x2008B02CUL)

#else
#define REG_DMA15_ADDR_CUR		(0x2008B02C) /**< \brief (DMA15) DMA15 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_STAT		(*(RwReg *)0x2008B030UL)

#else
#define REG_DMA15_STAT		(0x2008B030) /**< \brief (DMA15) DMA15 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_XCNT_CUR		(*(RwReg *)0x2008B034UL)

#else
#define REG_DMA15_XCNT_CUR		(0x2008B034) /**< \brief (DMA15) DMA15 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA15_YCNT_CUR		(*(RwReg *)0x2008B038UL)

#else
#define REG_DMA15_YCNT_CUR		(0x2008B038) /**< \brief (DMA15) DMA15 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_DSCPTR_NXT		(*(RwReg *)0x2008C000UL)

#else
#define REG_DMA16_DSCPTR_NXT		(0x2008C000) /**< \brief (DMA16) DMA16 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_ADDRSTART		(*(RwReg *)0x2008C004UL)

#else
#define REG_DMA16_ADDRSTART		(0x2008C004) /**< \brief (DMA16) DMA16 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_CFG		(*(RwReg *)0x2008C008UL)

#else
#define REG_DMA16_CFG		(0x2008C008) /**< \brief (DMA16) DMA16 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_XCNT		(*(RwReg *)0x2008C00CUL)

#else
#define REG_DMA16_XCNT		(0x2008C00C) /**< \brief (DMA16) DMA16 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_XMOD		(*(RwReg *)0x2008C010UL)

#else
#define REG_DMA16_XMOD		(0x2008C010) /**< \brief (DMA16) DMA16 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_YCNT		(*(RwReg *)0x2008C014UL)

#else
#define REG_DMA16_YCNT		(0x2008C014) /**< \brief (DMA16) DMA16 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_YMOD		(*(RwReg *)0x2008C018UL)

#else
#define REG_DMA16_YMOD		(0x2008C018) /**< \brief (DMA16) DMA16 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_DSCPTR_CUR		(*(RwReg *)0x2008C024UL)

#else
#define REG_DMA16_DSCPTR_CUR		(0x2008C024) /**< \brief (DMA16) DMA16 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_DSCPTR_PRV		(*(RwReg *)0x2008C028UL)

#else
#define REG_DMA16_DSCPTR_PRV		(0x2008C028) /**< \brief (DMA16) DMA16 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_ADDR_CUR		(*(RwReg *)0x2008C02CUL)

#else
#define REG_DMA16_ADDR_CUR		(0x2008C02C) /**< \brief (DMA16) DMA16 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_STAT		(*(RwReg *)0x2008C030UL)

#else
#define REG_DMA16_STAT		(0x2008C030) /**< \brief (DMA16) DMA16 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_XCNT_CUR		(*(RwReg *)0x2008C034UL)

#else
#define REG_DMA16_XCNT_CUR		(0x2008C034) /**< \brief (DMA16) DMA16 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_YCNT_CUR		(*(RwReg *)0x2008C038UL)

#else
#define REG_DMA16_YCNT_CUR		(0x2008C038) /**< \brief (DMA16) DMA16 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_BWLCNT		(*(RwReg *)0x2008C040UL)

#else
#define REG_DMA16_BWLCNT		(0x2008C040) /**< \brief (DMA16) DMA16 Bandwidth Limit Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_BWLCNT_CUR		(*(RwReg *)0x2008C044UL)

#else
#define REG_DMA16_BWLCNT_CUR		(0x2008C044) /**< \brief (DMA16) DMA16 Bandwidth Limit Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_BWMCNT		(*(RwReg *)0x2008C048UL)

#else
#define REG_DMA16_BWMCNT		(0x2008C048) /**< \brief (DMA16) DMA16 Bandwidth Monitor Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA16_BWMCNT_CUR		(*(RwReg *)0x2008C04CUL)

#else
#define REG_DMA16_BWMCNT_CUR		(0x2008C04C) /**< \brief (DMA16) DMA16 Bandwidth Monitor Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_DSCPTR_NXT		(*(RwReg *)0x2008D000UL)

#else
#define REG_DMA17_DSCPTR_NXT		(0x2008D000) /**< \brief (DMA17) DMA17 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_ADDRSTART		(*(RwReg *)0x2008D004UL)

#else
#define REG_DMA17_ADDRSTART		(0x2008D004) /**< \brief (DMA17) DMA17 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_CFG		(*(RwReg *)0x2008D008UL)

#else
#define REG_DMA17_CFG		(0x2008D008) /**< \brief (DMA17) DMA17 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_XCNT		(*(RwReg *)0x2008D00CUL)

#else
#define REG_DMA17_XCNT		(0x2008D00C) /**< \brief (DMA17) DMA17 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_XMOD		(*(RwReg *)0x2008D010UL)

#else
#define REG_DMA17_XMOD		(0x2008D010) /**< \brief (DMA17) DMA17 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_YCNT		(*(RwReg *)0x2008D014UL)

#else
#define REG_DMA17_YCNT		(0x2008D014) /**< \brief (DMA17) DMA17 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_YMOD		(*(RwReg *)0x2008D018UL)

#else
#define REG_DMA17_YMOD		(0x2008D018) /**< \brief (DMA17) DMA17 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_DSCPTR_CUR		(*(RwReg *)0x2008D024UL)

#else
#define REG_DMA17_DSCPTR_CUR		(0x2008D024) /**< \brief (DMA17) DMA17 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_DSCPTR_PRV		(*(RwReg *)0x2008D028UL)

#else
#define REG_DMA17_DSCPTR_PRV		(0x2008D028) /**< \brief (DMA17) DMA17 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_ADDR_CUR		(*(RwReg *)0x2008D02CUL)

#else
#define REG_DMA17_ADDR_CUR		(0x2008D02C) /**< \brief (DMA17) DMA17 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_STAT		(*(RwReg *)0x2008D030UL)

#else
#define REG_DMA17_STAT		(0x2008D030) /**< \brief (DMA17) DMA17 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_XCNT_CUR		(*(RwReg *)0x2008D034UL)

#else
#define REG_DMA17_XCNT_CUR		(0x2008D034) /**< \brief (DMA17) DMA17 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_YCNT_CUR		(*(RwReg *)0x2008D038UL)

#else
#define REG_DMA17_YCNT_CUR		(0x2008D038) /**< \brief (DMA17) DMA17 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_BWLCNT		(*(RwReg *)0x2008D040UL)

#else
#define REG_DMA17_BWLCNT		(0x2008D040) /**< \brief (DMA17) DMA17 Bandwidth Limit Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_BWLCNT_CUR		(*(RwReg *)0x2008D044UL)

#else
#define REG_DMA17_BWLCNT_CUR		(0x2008D044) /**< \brief (DMA17) DMA17 Bandwidth Limit Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_BWMCNT		(*(RwReg *)0x2008D048UL)

#else
#define REG_DMA17_BWMCNT		(0x2008D048) /**< \brief (DMA17) DMA17 Bandwidth Monitor Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA17_BWMCNT_CUR		(*(RwReg *)0x2008D04CUL)

#else
#define REG_DMA17_BWMCNT_CUR		(0x2008D04C) /**< \brief (DMA17) DMA17 Bandwidth Monitor Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_DSCPTR_NXT		(*(RwReg *)0x200A0000UL)

#else
#define REG_DMA18_DSCPTR_NXT		(0x200A0000) /**< \brief (DMA18) DMA18 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_ADDRSTART		(*(RwReg *)0x200A0004UL)

#else
#define REG_DMA18_ADDRSTART		(0x200A0004) /**< \brief (DMA18) DMA18 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_CFG		(*(RwReg *)0x200A0008UL)

#else
#define REG_DMA18_CFG		(0x200A0008) /**< \brief (DMA18) DMA18 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_XCNT		(*(RwReg *)0x200A000CUL)

#else
#define REG_DMA18_XCNT		(0x200A000C) /**< \brief (DMA18) DMA18 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_XMOD		(*(RwReg *)0x200A0010UL)

#else
#define REG_DMA18_XMOD		(0x200A0010) /**< \brief (DMA18) DMA18 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_YCNT		(*(RwReg *)0x200A0014UL)

#else
#define REG_DMA18_YCNT		(0x200A0014) /**< \brief (DMA18) DMA18 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_YMOD		(*(RwReg *)0x200A0018UL)

#else
#define REG_DMA18_YMOD		(0x200A0018) /**< \brief (DMA18) DMA18 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_DSCPTR_CUR		(*(RwReg *)0x200A0024UL)

#else
#define REG_DMA18_DSCPTR_CUR		(0x200A0024) /**< \brief (DMA18) DMA18 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_DSCPTR_PRV		(*(RwReg *)0x200A0028UL)

#else
#define REG_DMA18_DSCPTR_PRV		(0x200A0028) /**< \brief (DMA18) DMA18 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_ADDR_CUR		(*(RwReg *)0x200A002CUL)

#else
#define REG_DMA18_ADDR_CUR		(0x200A002C) /**< \brief (DMA18) DMA18 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_STAT		(*(RwReg *)0x200A0030UL)

#else
#define REG_DMA18_STAT		(0x200A0030) /**< \brief (DMA18) DMA18 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_XCNT_CUR		(*(RwReg *)0x200A0034UL)

#else
#define REG_DMA18_XCNT_CUR		(0x200A0034) /**< \brief (DMA18) DMA18 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_YCNT_CUR		(*(RwReg *)0x200A0038UL)

#else
#define REG_DMA18_YCNT_CUR		(0x200A0038) /**< \brief (DMA18) DMA18 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_BWLCNT		(*(RwReg *)0x200A0040UL)

#else
#define REG_DMA18_BWLCNT		(0x200A0040) /**< \brief (DMA18) DMA18 Bandwidth Limit Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_BWLCNT_CUR		(*(RwReg *)0x200A0044UL)

#else
#define REG_DMA18_BWLCNT_CUR		(0x200A0044) /**< \brief (DMA18) DMA18 Bandwidth Limit Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_BWMCNT		(*(RwReg *)0x200A0048UL)

#else
#define REG_DMA18_BWMCNT		(0x200A0048) /**< \brief (DMA18) DMA18 Bandwidth Monitor Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA18_BWMCNT_CUR		(*(RwReg *)0x200A004CUL)

#else
#define REG_DMA18_BWMCNT_CUR		(0x200A004C) /**< \brief (DMA18) DMA18 Bandwidth Monitor Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_DSCPTR_NXT		(*(RwReg *)0x200A1000UL)

#else
#define REG_DMA19_DSCPTR_NXT		(0x200A1000) /**< \brief (DMA19) DMA19 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_ADDRSTART		(*(RwReg *)0x200A1004UL)

#else
#define REG_DMA19_ADDRSTART		(0x200A1004) /**< \brief (DMA19) DMA19 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_CFG		(*(RwReg *)0x200A1008UL)

#else
#define REG_DMA19_CFG		(0x200A1008) /**< \brief (DMA19) DMA19 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_XCNT		(*(RwReg *)0x200A100CUL)

#else
#define REG_DMA19_XCNT		(0x200A100C) /**< \brief (DMA19) DMA19 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_XMOD		(*(RwReg *)0x200A1010UL)

#else
#define REG_DMA19_XMOD		(0x200A1010) /**< \brief (DMA19) DMA19 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_YCNT		(*(RwReg *)0x200A1014UL)

#else
#define REG_DMA19_YCNT		(0x200A1014) /**< \brief (DMA19) DMA19 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_YMOD		(*(RwReg *)0x200A1018UL)

#else
#define REG_DMA19_YMOD		(0x200A1018) /**< \brief (DMA19) DMA19 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_DSCPTR_CUR		(*(RwReg *)0x200A1024UL)

#else
#define REG_DMA19_DSCPTR_CUR		(0x200A1024) /**< \brief (DMA19) DMA19 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_DSCPTR_PRV		(*(RwReg *)0x200A1028UL)

#else
#define REG_DMA19_DSCPTR_PRV		(0x200A1028) /**< \brief (DMA19) DMA19 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_ADDR_CUR		(*(RwReg *)0x200A102CUL)

#else
#define REG_DMA19_ADDR_CUR		(0x200A102C) /**< \brief (DMA19) DMA19 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_STAT		(*(RwReg *)0x200A1030UL)

#else
#define REG_DMA19_STAT		(0x200A1030) /**< \brief (DMA19) DMA19 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_XCNT_CUR		(*(RwReg *)0x200A1034UL)

#else
#define REG_DMA19_XCNT_CUR		(0x200A1034) /**< \brief (DMA19) DMA19 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_YCNT_CUR		(*(RwReg *)0x200A1038UL)

#else
#define REG_DMA19_YCNT_CUR		(0x200A1038) /**< \brief (DMA19) DMA19 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_BWLCNT		(*(RwReg *)0x200A1040UL)

#else
#define REG_DMA19_BWLCNT		(0x200A1040) /**< \brief (DMA19) DMA19 Bandwidth Limit Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_BWLCNT_CUR		(*(RwReg *)0x200A1044UL)

#else
#define REG_DMA19_BWLCNT_CUR		(0x200A1044) /**< \brief (DMA19) DMA19 Bandwidth Limit Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_BWMCNT		(*(RwReg *)0x200A1048UL)

#else
#define REG_DMA19_BWMCNT		(0x200A1048) /**< \brief (DMA19) DMA19 Bandwidth Monitor Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA19_BWMCNT_CUR		(*(RwReg *)0x200A104CUL)

#else
#define REG_DMA19_BWMCNT_CUR		(0x200A104C) /**< \brief (DMA19) DMA19 Bandwidth Monitor Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_DSCPTR_NXT		(*(RwReg *)0x200A2000UL)

#else
#define REG_DMA20_DSCPTR_NXT		(0x200A2000) /**< \brief (DMA20) DMA20 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_ADDRSTART		(*(RwReg *)0x200A2004UL)

#else
#define REG_DMA20_ADDRSTART		(0x200A2004) /**< \brief (DMA20) DMA20 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_CFG		(*(RwReg *)0x200A2008UL)

#else
#define REG_DMA20_CFG		(0x200A2008) /**< \brief (DMA20) DMA20 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_XCNT		(*(RwReg *)0x200A200CUL)

#else
#define REG_DMA20_XCNT		(0x200A200C) /**< \brief (DMA20) DMA20 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_XMOD		(*(RwReg *)0x200A2010UL)

#else
#define REG_DMA20_XMOD		(0x200A2010) /**< \brief (DMA20) DMA20 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_YCNT		(*(RwReg *)0x200A2014UL)

#else
#define REG_DMA20_YCNT		(0x200A2014) /**< \brief (DMA20) DMA20 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_YMOD		(*(RwReg *)0x200A2018UL)

#else
#define REG_DMA20_YMOD		(0x200A2018) /**< \brief (DMA20) DMA20 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_DSCPTR_CUR		(*(RwReg *)0x200A2024UL)

#else
#define REG_DMA20_DSCPTR_CUR		(0x200A2024) /**< \brief (DMA20) DMA20 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_DSCPTR_PRV		(*(RwReg *)0x200A2028UL)

#else
#define REG_DMA20_DSCPTR_PRV		(0x200A2028) /**< \brief (DMA20) DMA20 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_ADDR_CUR		(*(RwReg *)0x200A202CUL)

#else
#define REG_DMA20_ADDR_CUR		(0x200A202C) /**< \brief (DMA20) DMA20 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_STAT		(*(RwReg *)0x200A2030UL)

#else
#define REG_DMA20_STAT		(0x200A2030) /**< \brief (DMA20) DMA20 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_XCNT_CUR		(*(RwReg *)0x200A2034UL)

#else
#define REG_DMA20_XCNT_CUR		(0x200A2034) /**< \brief (DMA20) DMA20 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_YCNT_CUR		(*(RwReg *)0x200A2038UL)

#else
#define REG_DMA20_YCNT_CUR		(0x200A2038) /**< \brief (DMA20) DMA20 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_BWLCNT		(*(RwReg *)0x200A2040UL)

#else
#define REG_DMA20_BWLCNT		(0x200A2040) /**< \brief (DMA20) DMA20 Bandwidth Limit Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_BWLCNT_CUR		(*(RwReg *)0x200A2044UL)

#else
#define REG_DMA20_BWLCNT_CUR		(0x200A2044) /**< \brief (DMA20) DMA20 Bandwidth Limit Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_BWMCNT		(*(RwReg *)0x200A2048UL)

#else
#define REG_DMA20_BWMCNT		(0x200A2048) /**< \brief (DMA20) DMA20 Bandwidth Monitor Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA20_BWMCNT_CUR		(*(RwReg *)0x200A204CUL)

#else
#define REG_DMA20_BWMCNT_CUR		(0x200A204C) /**< \brief (DMA20) DMA20 Bandwidth Monitor Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_DSCPTR_NXT		(*(RwReg *)0x200A3000UL)

#else
#define REG_DMA21_DSCPTR_NXT		(0x200A3000) /**< \brief (DMA21) DMA21 Pointer to Next Initial Descriptor */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_ADDRSTART		(*(RwReg *)0x200A3004UL)

#else
#define REG_DMA21_ADDRSTART		(0x200A3004) /**< \brief (DMA21) DMA21 Start Address of Current Buffer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_CFG		(*(RwReg *)0x200A3008UL)

#else
#define REG_DMA21_CFG		(0x200A3008) /**< \brief (DMA21) DMA21 Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_XCNT		(*(RwReg *)0x200A300CUL)

#else
#define REG_DMA21_XCNT		(0x200A300C) /**< \brief (DMA21) DMA21 Inner Loop Count Start Value */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_XMOD		(*(RwReg *)0x200A3010UL)

#else
#define REG_DMA21_XMOD		(0x200A3010) /**< \brief (DMA21) DMA21 Inner Loop Address Increment */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_YCNT		(*(RwReg *)0x200A3014UL)

#else
#define REG_DMA21_YCNT		(0x200A3014) /**< \brief (DMA21) DMA21 Outer Loop Count Start Value (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_YMOD		(*(RwReg *)0x200A3018UL)

#else
#define REG_DMA21_YMOD		(0x200A3018) /**< \brief (DMA21) DMA21 Outer Loop Address Increment (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_DSCPTR_CUR		(*(RwReg *)0x200A3024UL)

#else
#define REG_DMA21_DSCPTR_CUR		(0x200A3024) /**< \brief (DMA21) DMA21 Current Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_DSCPTR_PRV		(*(RwReg *)0x200A3028UL)

#else
#define REG_DMA21_DSCPTR_PRV		(0x200A3028) /**< \brief (DMA21) DMA21 Previous Initial Descriptor Pointer */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_ADDR_CUR		(*(RwReg *)0x200A302CUL)

#else
#define REG_DMA21_ADDR_CUR		(0x200A302C) /**< \brief (DMA21) DMA21 Current Address */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_STAT		(*(RwReg *)0x200A3030UL)

#else
#define REG_DMA21_STAT		(0x200A3030) /**< \brief (DMA21) DMA21 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_XCNT_CUR		(*(RwReg *)0x200A3034UL)

#else
#define REG_DMA21_XCNT_CUR		(0x200A3034) /**< \brief (DMA21) DMA21 Current Count(1D) or intra-row XCNT (2D) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_YCNT_CUR		(*(RwReg *)0x200A3038UL)

#else
#define REG_DMA21_YCNT_CUR		(0x200A3038) /**< \brief (DMA21) DMA21 Current Row Count (2D only) */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_BWLCNT		(*(RwReg *)0x200A3040UL)

#else
#define REG_DMA21_BWLCNT		(0x200A3040) /**< \brief (DMA21) DMA21 Bandwidth Limit Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_BWLCNT_CUR		(*(RwReg *)0x200A3044UL)

#else
#define REG_DMA21_BWLCNT_CUR		(0x200A3044) /**< \brief (DMA21) DMA21 Bandwidth Limit Count Current */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_BWMCNT		(*(RwReg *)0x200A3048UL)

#else
#define REG_DMA21_BWMCNT		(0x200A3048) /**< \brief (DMA21) DMA21 Bandwidth Monitor Count */
#endif

#if !(defined(__ASSEMBLY__))
#define REG_DMA21_BWMCNT_CUR		(*(RwReg *)0x200A304CUL)

#else
#define REG_DMA21_BWMCNT_CUR		(0x200A304C) /**< \brief (DMA21) DMA21 Bandwidth Monitor Count Current */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_CTL : (32) CRC0 Control Register ----- */
typedef union {
	struct {
		uint32_t BLKEN:1;			/*!< bit	0	Block Enable	*/
		uint32_t :3;			/*!< bit	1..3	Reserved	*/
		uint32_t OPMODE:4;			/*!< bit	4..7	Operation Mode	*/
		uint32_t AUTOCLRZ:1;			/*!< bit	8	Auto Clear to Zero	*/
		uint32_t AUTOCLRF:1;			/*!< bit	9	Auto Clear to One	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t OBRSTALL:1;			/*!< bit	12	Output Buffer Ready Stall	*/
		uint32_t IRRSTALL:1;			/*!< bit	13	Intermediate Result Ready Stall	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t BITMIRR:1;			/*!< bit	16	Bit Mirroring	*/
		uint32_t BYTMIRR:1;			/*!< bit	17	Byte Mirroring	*/
		uint32_t W16SWP:1;			/*!< bit	18	Word16 Swapping	*/
		uint32_t FDSEL:1;			/*!< bit	19	FIFO Data Select	*/
		uint32_t RSLTMIRR:1;			/*!< bit	20	Result Register Mirroring	*/
		uint32_t POLYMIRR:1;			/*!< bit	21	Polynomial Register Mirroring	*/
		uint32_t CMPMIRR:1;			/*!< bit	22	COMPARE Register Mirroring	*/
		uint32_t :9;			/*!< bit	23..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_CTL_Type;
#define REG_CRC0_CTL		(*(RwReg *)0x200B0000UL)

#else
#define REG_CRC0_CTL		(0x200B0000) /**< \brief (CRC0) CRC0 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_DCNT : (32) CRC0 Data Word Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_DCNT_Type;
#define REG_CRC0_DCNT		(*(RwReg *)0x200B0004UL)

#else
#define REG_CRC0_DCNT		(0x200B0004) /**< \brief (CRC0) CRC0 Data Word Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_DCNTRLD : (32) CRC0 Data Word Count Reload Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_DCNTRLD_Type;
#define REG_CRC0_DCNTRLD		(*(RwReg *)0x200B0008UL)

#else
#define REG_CRC0_DCNTRLD		(0x200B0008) /**< \brief (CRC0) CRC0 Data Word Count Reload Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_COMP : (32) CRC0 Data Compare Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_COMP_Type;
#define REG_CRC0_COMP		(*(RwReg *)0x200B0014UL)

#else
#define REG_CRC0_COMP		(0x200B0014) /**< \brief (CRC0) CRC0 Data Compare Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_FILLVAL : (32) CRC0 Fill Value Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_FILLVAL_Type;
#define REG_CRC0_FILLVAL		(*(RwReg *)0x200B0018UL)

#else
#define REG_CRC0_FILLVAL		(0x200B0018) /**< \brief (CRC0) CRC0 Fill Value Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_DFIFO : (32) CRC0 Data FIFO Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_DFIFO_Type;
#define REG_CRC0_DFIFO		(*(RwReg *)0x200B001CUL)

#else
#define REG_CRC0_DFIFO		(0x200B001C) /**< \brief (CRC0) CRC0 Data FIFO Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_INEN : (32) CRC0 Interrupt Enable Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t CMPERR:1;			/*!< bit	1	Compare Error Interrupt Enable	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DCNTEXP:1;			/*!< bit	4	Data Count Expired (Status) Interrupt Enable	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_INEN_Type;
#define REG_CRC0_INEN		(*(RwReg *)0x200B0020UL)

#else
#define REG_CRC0_INEN		(0x200B0020) /**< \brief (CRC0) CRC0 Interrupt Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_INEN_SET : (32) CRC0 Interrupt Enable Set Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t CMPERR:1;			/*!< bit	1	Compare Error Interrupt Enable Set	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DCNTEXP:1;			/*!< bit	4	Data Count Expired (Status) Interrupt Enable Set	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_INEN_SET_Type;
#define REG_CRC0_INEN_SET		(*(RwReg *)0x200B0024UL)

#else
#define REG_CRC0_INEN_SET		(0x200B0024) /**< \brief (CRC0) CRC0 Interrupt Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_INEN_CLR : (32) CRC0 Interrupt Enable Clear Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t CMPERR:1;			/*!< bit	1	Compare Error Interrupt Enable Clear	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DCNTEXP:1;			/*!< bit	4	Data Count Expired (Status) Interrupt Enable Clear	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_INEN_CLR_Type;
#define REG_CRC0_INEN_CLR		(*(RwReg *)0x200B0028UL)

#else
#define REG_CRC0_INEN_CLR		(0x200B0028) /**< \brief (CRC0) CRC0 Interrupt Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_POLY : (32) CRC0 Polynomial Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_POLY_Type;
#define REG_CRC0_POLY		(*(RwReg *)0x200B002CUL)

#else
#define REG_CRC0_POLY		(0x200B002C) /**< \brief (CRC0) CRC0 Polynomial Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_STAT : (32) CRC0 Status Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t CMPERR:1;			/*!< bit	1	Compare Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DCNTEXP:1;			/*!< bit	4	Data Count Expired	*/
		uint32_t :11;			/*!< bit	5..15	Reserved	*/
		uint32_t IBR:1;			/*!< bit	16	Input Buffer Ready	*/
		uint32_t OBR:1;			/*!< bit	17	Output Buffer Ready	*/
		uint32_t IRR:1;			/*!< bit	18	Intermediate Result Ready	*/
		uint32_t LUTDONE:1;			/*!< bit	19	Look Up Table Done	*/
		uint32_t FSTAT:3;			/*!< bit	20..22	FIFO Status	*/
		uint32_t :9;			/*!< bit	23..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_STAT_Type;
#define REG_CRC0_STAT		(*(RwReg *)0x200B0040UL)

#else
#define REG_CRC0_STAT		(0x200B0040) /**< \brief (CRC0) CRC0 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_DCNTCAP : (32) CRC0 Data Count Capture Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_DCNTCAP_Type;
#define REG_CRC0_DCNTCAP		(*(RwReg *)0x200B0044UL)

#else
#define REG_CRC0_DCNTCAP		(0x200B0044) /**< \brief (CRC0) CRC0 Data Count Capture Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_RESULT_FIN : (32) CRC0 CRC Final Result Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_RESULT_FIN_Type;
#define REG_CRC0_RESULT_FIN		(*(RwReg *)0x200B004CUL)

#else
#define REG_CRC0_RESULT_FIN		(0x200B004C) /**< \brief (CRC0) CRC0 CRC Final Result Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC0_RESULT_CUR : (32) CRC0 CRC Current Result Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC0_RESULT_CUR_Type;
#define REG_CRC0_RESULT_CUR		(*(RwReg *)0x200B0050UL)

#else
#define REG_CRC0_RESULT_CUR		(0x200B0050) /**< \brief (CRC0) CRC0 CRC Current Result Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO CRC0_CTL_Type		CTL;		/**< \brief CRC0 Control Register */
	__IO CRC0_DCNT_Type		DCNT;		/**< \brief CRC0 Data Word Count Register */
	__IO CRC0_DCNTRLD_Type		DCNTRLD;		/**< \brief CRC0 Data Word Count Reload Register */
		 RoReg8		Reserved1[0x08];		
	__IO CRC0_COMP_Type		COMP;		/**< \brief CRC0 Data Compare Register */
	__IO CRC0_FILLVAL_Type		FILLVAL;		/**< \brief CRC0 Fill Value Register */
	__IO CRC0_DFIFO_Type		DFIFO;		/**< \brief CRC0 Data FIFO Register */
	__IO CRC0_INEN_Type		INEN;		/**< \brief CRC0 Interrupt Enable Register */
	__IO CRC0_INEN_SET_Type		INEN_SET;		/**< \brief CRC0 Interrupt Enable Set Register */
	__IO CRC0_INEN_CLR_Type		INEN_CLR;		/**< \brief CRC0 Interrupt Enable Clear Register */
	__IO CRC0_POLY_Type		POLY;		/**< \brief CRC0 Polynomial Register */
		 RoReg8		Reserved2[0x10];		
	__IO CRC0_STAT_Type		STAT;		/**< \brief CRC0 Status Register */
	__IO CRC0_DCNTCAP_Type		DCNTCAP;		/**< \brief CRC0 Data Count Capture Register */
		 RoReg8		Reserved3[0x04];		
	__IO CRC0_RESULT_FIN_Type		RESULT_FIN;		/**< \brief CRC0 CRC Final Result Register */
	__IO CRC0_RESULT_CUR_Type		RESULT_CUR;		/**< \brief CRC0 CRC Current Result Register */
} Crc0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- CRC1_CTL : (32) CRC1 Control Register ----- */
typedef union {
	struct {
		uint32_t BLKEN:1;			/*!< bit	0	Block Enable	*/
		uint32_t :3;			/*!< bit	1..3	Reserved	*/
		uint32_t OPMODE:4;			/*!< bit	4..7	Operation Mode	*/
		uint32_t AUTOCLRZ:1;			/*!< bit	8	Auto Clear to Zero	*/
		uint32_t AUTOCLRF:1;			/*!< bit	9	Auto Clear to One	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t OBRSTALL:1;			/*!< bit	12	Output Buffer Ready Stall	*/
		uint32_t IRRSTALL:1;			/*!< bit	13	Intermediate Result Ready Stall	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t BITMIRR:1;			/*!< bit	16	Bit Mirroring	*/
		uint32_t BYTMIRR:1;			/*!< bit	17	Byte Mirroring	*/
		uint32_t W16SWP:1;			/*!< bit	18	Word16 Swapping	*/
		uint32_t FDSEL:1;			/*!< bit	19	FIFO Data Select	*/
		uint32_t RSLTMIRR:1;			/*!< bit	20	Result Register Mirroring	*/
		uint32_t POLYMIRR:1;			/*!< bit	21	Polynomial Register Mirroring	*/
		uint32_t CMPMIRR:1;			/*!< bit	22	COMPARE Register Mirroring	*/
		uint32_t :9;			/*!< bit	23..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_CTL_Type;
#define REG_CRC1_CTL		(*(RwReg *)0x200B1000UL)

#else
#define REG_CRC1_CTL		(0x200B1000) /**< \brief (CRC1) CRC1 Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_DCNT : (32) CRC1 Data Word Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_DCNT_Type;
#define REG_CRC1_DCNT		(*(RwReg *)0x200B1004UL)

#else
#define REG_CRC1_DCNT		(0x200B1004) /**< \brief (CRC1) CRC1 Data Word Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_DCNTRLD : (32) CRC1 Data Word Count Reload Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_DCNTRLD_Type;
#define REG_CRC1_DCNTRLD		(*(RwReg *)0x200B1008UL)

#else
#define REG_CRC1_DCNTRLD		(0x200B1008) /**< \brief (CRC1) CRC1 Data Word Count Reload Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_COMP : (32) CRC1 Data Compare Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_COMP_Type;
#define REG_CRC1_COMP		(*(RwReg *)0x200B1014UL)

#else
#define REG_CRC1_COMP		(0x200B1014) /**< \brief (CRC1) CRC1 Data Compare Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_FILLVAL : (32) CRC1 Fill Value Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_FILLVAL_Type;
#define REG_CRC1_FILLVAL		(*(RwReg *)0x200B1018UL)

#else
#define REG_CRC1_FILLVAL		(0x200B1018) /**< \brief (CRC1) CRC1 Fill Value Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_DFIFO : (32) CRC1 Data FIFO Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_DFIFO_Type;
#define REG_CRC1_DFIFO		(*(RwReg *)0x200B101CUL)

#else
#define REG_CRC1_DFIFO		(0x200B101C) /**< \brief (CRC1) CRC1 Data FIFO Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_INEN : (32) CRC1 Interrupt Enable Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t CMPERR:1;			/*!< bit	1	Compare Error Interrupt Enable	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DCNTEXP:1;			/*!< bit	4	Data Count Expired (Status) Interrupt Enable	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_INEN_Type;
#define REG_CRC1_INEN		(*(RwReg *)0x200B1020UL)

#else
#define REG_CRC1_INEN		(0x200B1020) /**< \brief (CRC1) CRC1 Interrupt Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_INEN_SET : (32) CRC1 Interrupt Enable Set Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t CMPERR:1;			/*!< bit	1	Compare Error Interrupt Enable Set	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DCNTEXP:1;			/*!< bit	4	Data Count Expired (Status) Interrupt Enable Set	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_INEN_SET_Type;
#define REG_CRC1_INEN_SET		(*(RwReg *)0x200B1024UL)

#else
#define REG_CRC1_INEN_SET		(0x200B1024) /**< \brief (CRC1) CRC1 Interrupt Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_INEN_CLR : (32) CRC1 Interrupt Enable Clear Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t CMPERR:1;			/*!< bit	1	Compare Error Interrupt Enable Clear	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DCNTEXP:1;			/*!< bit	4	Data Count Expired (Status) Interrupt Enable Clear	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_INEN_CLR_Type;
#define REG_CRC1_INEN_CLR		(*(RwReg *)0x200B1028UL)

#else
#define REG_CRC1_INEN_CLR		(0x200B1028) /**< \brief (CRC1) CRC1 Interrupt Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_POLY : (32) CRC1 Polynomial Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_POLY_Type;
#define REG_CRC1_POLY		(*(RwReg *)0x200B102CUL)

#else
#define REG_CRC1_POLY		(0x200B102C) /**< \brief (CRC1) CRC1 Polynomial Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_STAT : (32) CRC1 Status Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t CMPERR:1;			/*!< bit	1	Compare Error	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DCNTEXP:1;			/*!< bit	4	Data Count Expired	*/
		uint32_t :11;			/*!< bit	5..15	Reserved	*/
		uint32_t IBR:1;			/*!< bit	16	Input Buffer Ready	*/
		uint32_t OBR:1;			/*!< bit	17	Output Buffer Ready	*/
		uint32_t IRR:1;			/*!< bit	18	Intermediate Result Ready	*/
		uint32_t LUTDONE:1;			/*!< bit	19	Look Up Table Done	*/
		uint32_t FSTAT:3;			/*!< bit	20..22	FIFO Status	*/
		uint32_t :9;			/*!< bit	23..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_STAT_Type;
#define REG_CRC1_STAT		(*(RwReg *)0x200B1040UL)

#else
#define REG_CRC1_STAT		(0x200B1040) /**< \brief (CRC1) CRC1 Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_DCNTCAP : (32) CRC1 Data Count Capture Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_DCNTCAP_Type;
#define REG_CRC1_DCNTCAP		(*(RwReg *)0x200B1044UL)

#else
#define REG_CRC1_DCNTCAP		(0x200B1044) /**< \brief (CRC1) CRC1 Data Count Capture Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_RESULT_FIN : (32) CRC1 CRC Final Result Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_RESULT_FIN_Type;
#define REG_CRC1_RESULT_FIN		(*(RwReg *)0x200B104CUL)

#else
#define REG_CRC1_RESULT_FIN		(0x200B104C) /**< \brief (CRC1) CRC1 CRC Final Result Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- CRC1_RESULT_CUR : (32) CRC1 CRC Current Result Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} CRC1_RESULT_CUR_Type;
#define REG_CRC1_RESULT_CUR		(*(RwReg *)0x200B1050UL)

#else
#define REG_CRC1_RESULT_CUR		(0x200B1050) /**< \brief (CRC1) CRC1 CRC Current Result Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO CRC1_CTL_Type		CTL;		/**< \brief CRC1 Control Register */
	__IO CRC1_DCNT_Type		DCNT;		/**< \brief CRC1 Data Word Count Register */
	__IO CRC1_DCNTRLD_Type		DCNTRLD;		/**< \brief CRC1 Data Word Count Reload Register */
		 RoReg8		Reserved1[0x08];		
	__IO CRC1_COMP_Type		COMP;		/**< \brief CRC1 Data Compare Register */
	__IO CRC1_FILLVAL_Type		FILLVAL;		/**< \brief CRC1 Fill Value Register */
	__IO CRC1_DFIFO_Type		DFIFO;		/**< \brief CRC1 Data FIFO Register */
	__IO CRC1_INEN_Type		INEN;		/**< \brief CRC1 Interrupt Enable Register */
	__IO CRC1_INEN_SET_Type		INEN_SET;		/**< \brief CRC1 Interrupt Enable Set Register */
	__IO CRC1_INEN_CLR_Type		INEN_CLR;		/**< \brief CRC1 Interrupt Enable Clear Register */
	__IO CRC1_POLY_Type		POLY;		/**< \brief CRC1 Polynomial Register */
		 RoReg8		Reserved2[0x10];		
	__IO CRC1_STAT_Type		STAT;		/**< \brief CRC1 Status Register */
	__IO CRC1_DCNTCAP_Type		DCNTCAP;		/**< \brief CRC1 Data Count Capture Register */
		 RoReg8		Reserved3[0x04];		
	__IO CRC1_RESULT_FIN_Type		RESULT_FIN;		/**< \brief CRC1 CRC Final Result Register */
	__IO CRC1_RESULT_CUR_Type		RESULT_CUR;		/**< \brief CRC1 CRC Current Result Register */
} Crc1;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- DMC0_PHY_CTL1 : (32) DMC0 PHY Control 1 Register ----- */
typedef union {
	struct {
		uint32_t :19;			/*!< bit	0..18	Reserved	*/
		uint32_t BYPODTEN:1;			/*!< bit	19	Bypass ODTEN for DQ and DQS	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMC0_PHY_CTL1_Type;
#define REG_DMC0_PHY_CTL1		(*(RwReg *)0x200C1004UL)

#else
#define REG_DMC0_PHY_CTL1		(0x200C1004) /**< \brief (DMC0) DMC0 PHY Control 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMC0_PHY_CTL3 : (32) DMC0 PHY Control 3 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMC0_PHY_CTL3_Type;
#define REG_DMC0_PHY_CTL3		(*(RwReg *)0x200C100CUL)

#else
#define REG_DMC0_PHY_CTL3		(0x200C100C) /**< \brief (DMC0) DMC0 PHY Control 3 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMC0_PHY_CTL4 : (32) DMC0 PHY Control 4 Register ----- */
typedef union {
	struct {
		uint32_t DDRMODE:2;			/*!< bit	0..1	DDR2/DDR3/LPDDR Mode Select	*/
		uint32_t CLKDIS:1;			/*!< bit	2	Disable DDR CLK	*/
		uint32_t :29;			/*!< bit	3..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMC0_PHY_CTL4_Type;
#define REG_DMC0_PHY_CTL4		(*(RwReg *)0x200C1010UL)

#else
#define REG_DMC0_PHY_CTL4		(0x200C1010) /**< \brief (DMC0) DMC0 PHY Control 4 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMC0_PHY_STAT0 : (32) DMC0 PHY Status 0 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMC0_PHY_STAT0_Type;
#define REG_DMC0_PHY_STAT0		(*(RwReg *)0x200C101CUL)

#else
#define REG_DMC0_PHY_STAT0		(0x200C101C) /**< \brief (DMC0) DMC0 PHY Status 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMC0_CAL_PADCTL0 : (32) DMC0 CALIBRATION PAD CTL 0 Register ----- */
typedef union {
	struct {
		uint32_t :28;			/*!< bit	0..27	Reserved	*/
		uint32_t CALSTRT:1;			/*!< bit	28	Start New Calibration ( Hardware Cleared)	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
		uint32_t PUCALEN:1;			/*!< bit	29	PULLUP Calibration Enable	*/
		uint32_t PDCALEN:1;			/*!< bit	30	PULLDOWN Calibration Enable	*/
		uint32_t RTTCALEN:1;			/*!< bit	31	RTT Calibration Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMC0_CAL_PADCTL0_Type;
#define REG_DMC0_CAL_PADCTL0		(*(RwReg *)0x200C1034UL)

#else
#define REG_DMC0_CAL_PADCTL0		(0x200C1034) /**< \brief (DMC0) DMC0 CALIBRATION PAD CTL 0 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- DMC0_CAL_PADCTL2 : (32) DMC0 CALIBRATION PAD CTL2 Register ----- */
typedef union {
	struct {
		uint32_t IMPWRAD:8;			/*!< bit	0..7	Desired Drive Impedance for ADDR_CMD PADS	*/
		uint32_t IMPWRDQ:8;			/*!< bit	8..15	Desired Drive Impedance for DQ DQS CLK and DM pads	*/
		uint32_t IMPRTT:8;			/*!< bit	16..23	Desired RTT Value for DQ and DQS pads	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} DMC0_CAL_PADCTL2_Type;
#define REG_DMC0_CAL_PADCTL2		(*(RwReg *)0x200C103CUL)

#else
#define REG_DMC0_CAL_PADCTL2		(0x200C103C) /**< \brief (DMC0) DMC0 CALIBRATION PAD CTL2 Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO DMC0_PHY_CTL1_Type		PHY_CTL1;		/**< \brief DMC0 PHY Control 1 Register */
		 RoReg8		Reserved1[0x04];		
	__IO DMC0_PHY_CTL3_Type		PHY_CTL3;		/**< \brief DMC0 PHY Control 3 Register */
	__IO DMC0_PHY_CTL4_Type		PHY_CTL4;		/**< \brief DMC0 PHY Control 4 Register */
		 RoReg8		Reserved2[0x08];		
	__IO DMC0_PHY_STAT0_Type		PHY_STAT0;		/**< \brief DMC0 PHY Status 0 Register */
		 RoReg8		Reserved3[0x14];		
	__IO DMC0_CAL_PADCTL0_Type		CAL_PADCTL0;		/**< \brief DMC0 CALIBRATION PAD CTL 0 Register */
		 RoReg8		Reserved4[0x04];		
	__IO DMC0_CAL_PADCTL2_Type		CAL_PADCTL2;		/**< \brief DMC0 CALIBRATION PAD CTL2 Register */
} Dmc0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- USB0_FADDR : (8) USB0 Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FADDR_Type;
#define REG_USB0_FADDR		(*(RwReg *)0x200D0000UL)

#else
#define REG_USB0_FADDR		(0x200D0000) /**< \brief (USB0) USB0 Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_POWER : (8) USB0 Power and Device Control Register ----- */
typedef union {
	struct {
		uint32_t SUSEN:1;			/*!< bit	0	SUSPENDM Output Enable	*/
		uint32_t SUSPEND:1;			/*!< bit	1	Suspend Mode	*/
		uint32_t RESUME:1;			/*!< bit	2	Resume Mode	*/
		uint32_t RESET:1;			/*!< bit	3	Reset USB	*/
		uint32_t HSMODE:1;			/*!< bit	4	High Speed Mode	*/
		uint32_t HSEN:1;			/*!< bit	5	High Speed Mode Enable	*/
		uint32_t SOFTCONN:1;			/*!< bit	6	Soft Connect/Disconnect Enable	*/
		uint32_t ISOUPDT:1;			/*!< bit	7	ISO Update Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_POWER_Type;
#define REG_USB0_POWER		(*(RwReg *)0x200D0001UL)

#else
#define REG_USB0_POWER		(0x200D0001) /**< \brief (USB0) USB0 Power and Device Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_INTRTX : (16) USB0 Transmit Interrupt Register ----- */
typedef union {
	struct {
		uint32_t EP0:1;			/*!< bit	0	End Point 0 Tx Interrupt	*/
		uint32_t EP1:1;			/*!< bit	1	End Point 1 Tx Interrupt	*/
		uint32_t EP2:1;			/*!< bit	2	End Point 2 Tx Interrupt	*/
		uint32_t EP3:1;			/*!< bit	3	End Point 3 Tx Interrupt	*/
		uint32_t EP4:1;			/*!< bit	4	End Point 4 Tx Interrupt	*/
		uint32_t EP5:1;			/*!< bit	5	End Point 5 Tx Interrupt	*/
		uint32_t EP6:1;			/*!< bit	6	End Point 6 Tx Interrupt	*/
		uint32_t EP7:1;			/*!< bit	7	End Point 7 Tx Interrupt	*/
		uint32_t EP8:1;			/*!< bit	8	End Point 8 Tx Interrupt	*/
		uint32_t EP9:1;			/*!< bit	9	End Point 9 Tx Interrupt	*/
		uint32_t EP10:1;			/*!< bit	10	End Point 10 Tx Interrupt	*/
		uint32_t EP11:1;			/*!< bit	11	End Point 11 Tx Interrupt	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_INTRTX_Type;
#define REG_USB0_INTRTX		(*(RwReg *)0x200D0002UL)

#else
#define REG_USB0_INTRTX		(0x200D0002) /**< \brief (USB0) USB0 Transmit Interrupt Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_INTRRX : (16) USB0 Receive Interrupt Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t EP1:1;			/*!< bit	1	End Point 1 Rx Interrupt.	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t EP2:1;			/*!< bit	2	End Point 2 Rx Interrupt.	*/
		uint32_t EP3:1;			/*!< bit	3	End Point 3 Rx Interrupt.	*/
		uint32_t EP4:1;			/*!< bit	4	End Point 4 Rx Interrupt.	*/
		uint32_t EP5:1;			/*!< bit	5	End Point 5 Rx Interrupt.	*/
		uint32_t EP6:1;			/*!< bit	6	End Point 6 Rx Interrupt.	*/
		uint32_t EP7:1;			/*!< bit	7	End Point 7 Rx Interrupt.	*/
		uint32_t EP8:1;			/*!< bit	8	End Point 8 Rx Interrupt.	*/
		uint32_t EP9:1;			/*!< bit	9	End Point 9 Rx Interrupt.	*/
		uint32_t EP10:1;			/*!< bit	10	End Point 10 Rx Interrupt.	*/
		uint32_t EP11:1;			/*!< bit	11	End Point 11 Rx Interrupt.	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_INTRRX_Type;
#define REG_USB0_INTRRX		(*(RwReg *)0x200D0004UL)

#else
#define REG_USB0_INTRRX		(0x200D0004) /**< \brief (USB0) USB0 Receive Interrupt Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_INTRTXE : (16) USB0 Transmit Interrupt Enable Register ----- */
typedef union {
	struct {
		uint32_t EP0:1;			/*!< bit	0	End Point 0 Tx Interrupt Enable	*/
		uint32_t EP1:1;			/*!< bit	1	End Point 1 Tx Interrupt Enable	*/
		uint32_t EP2:1;			/*!< bit	2	End Point 2 Tx Interrupt Enable	*/
		uint32_t EP3:1;			/*!< bit	3	End Point 3 Tx Interrupt Enable	*/
		uint32_t EP4:1;			/*!< bit	4	End Point 4 Tx Interrupt Enable	*/
		uint32_t EP5:1;			/*!< bit	5	End Point 5 Tx Interrupt Enable	*/
		uint32_t EP6:1;			/*!< bit	6	End Point 6 Tx Interrupt Enable	*/
		uint32_t EP7:1;			/*!< bit	7	End Point 7 Tx Interrupt Enable	*/
		uint32_t EP8:1;			/*!< bit	8	End Point 8 Tx Interrupt Enable	*/
		uint32_t EP9:1;			/*!< bit	9	End Point 9 Tx Interrupt Enable	*/
		uint32_t EP10:1;			/*!< bit	10	End Point 10 Tx Interrupt Enable	*/
		uint32_t EP11:1;			/*!< bit	11	End Point 11 Tx Interrupt Enable	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_INTRTXE_Type;
#define REG_USB0_INTRTXE		(*(RwReg *)0x200D0006UL)

#else
#define REG_USB0_INTRTXE		(0x200D0006) /**< \brief (USB0) USB0 Transmit Interrupt Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_INTRRXE : (16) USB0 Receive Interrupt Enable Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t EP1:1;			/*!< bit	1	End Point 1 Rx Interrupt Enable	*/
		uint32_t :15;			/*!< bit	1..15	Reserved	*/
		uint32_t EP2:1;			/*!< bit	2	End Point 2 Rx Interrupt Enable	*/
		uint32_t EP3:1;			/*!< bit	3	End Point 3 Rx Interrupt Enable	*/
		uint32_t EP4:1;			/*!< bit	4	End Point 4 Rx Interrupt Enable	*/
		uint32_t EP5:1;			/*!< bit	5	End Point 5 Rx Interrupt Enable	*/
		uint32_t EP6:1;			/*!< bit	6	End Point 6 Rx Interrupt Enable	*/
		uint32_t EP7:1;			/*!< bit	7	End Point 7 Rx Interrupt Enable	*/
		uint32_t EP8:1;			/*!< bit	8	End Point 8 Rx Interrupt Enable	*/
		uint32_t EP9:1;			/*!< bit	9	End Point 9 Rx Interrupt Enable	*/
		uint32_t EP10:1;			/*!< bit	10	End Point 10 Rx Interrupt Enable	*/
		uint32_t EP11:1;			/*!< bit	11	End Point 11 Rx Interrupt Enable	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_INTRRXE_Type;
#define REG_USB0_INTRRXE		(*(RwReg *)0x200D0008UL)

#else
#define REG_USB0_INTRRXE		(0x200D0008) /**< \brief (USB0) USB0 Receive Interrupt Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_IRQ : (8) USB0 Common Interrupts Register ----- */
typedef union {
	struct {
		uint32_t SUSPEND:1;			/*!< bit	0	Suspend Indicator	*/
		uint32_t RESUME:1;			/*!< bit	1	Resume Indicator	*/
		uint32_t RSTBABBLE:1;			/*!< bit	2	Reset/Babble Indicator	*/
		uint32_t SOF:1;			/*!< bit	3	Start-of-frame Indicator	*/
		uint32_t CON:1;			/*!< bit	4	Connection Indicator	*/
		uint32_t DISCON:1;			/*!< bit	5	Disconnect Indicator	*/
		uint32_t SESSREQ:1;			/*!< bit	6	Session Request Indicator	*/
		uint32_t VBUSERR:1;			/*!< bit	7	VBUS Threshold Indicator	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_IRQ_Type;
#define REG_USB0_IRQ		(*(RwReg *)0x200D000AUL)

#else
#define REG_USB0_IRQ		(0x200D000A) /**< \brief (USB0) USB0 Common Interrupts Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_IEN : (8) USB0 Common Interrupts Enable Register ----- */
typedef union {
	struct {
		uint32_t SUSPEND:1;			/*!< bit	0	Suspend Indicator Interrupt Enable	*/
		uint32_t RESUME:1;			/*!< bit	1	Resume Indicator Interrupt Enable	*/
		uint32_t RSTBABBLE:1;			/*!< bit	2	Reset/Babble Indicator Interrupt Enable	*/
		uint32_t SOF:1;			/*!< bit	3	Start-of-frame Indicator Interrupt Enable	*/
		uint32_t CON:1;			/*!< bit	4	Connection Indicator Interrupt Enable	*/
		uint32_t DISCON:1;			/*!< bit	5	Disconnect Indicator Interrupt Enable	*/
		uint32_t SESSREQ:1;			/*!< bit	6	Session Request Indicator Interrupt Enable	*/
		uint32_t VBUSERR:1;			/*!< bit	7	VBUS Threshold Indicator Interrupt Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_IEN_Type;
#define REG_USB0_IEN		(*(RwReg *)0x200D000BUL)

#else
#define REG_USB0_IEN		(0x200D000B) /**< \brief (USB0) USB0 Common Interrupts Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FRAME : (16) USB0 Frame Number Register ----- */
typedef union {
	struct {
		uint32_t VALUE:11;			/*!< bit	0..10	Frame Number Value	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FRAME_Type;
#define REG_USB0_FRAME		(*(RwReg *)0x200D000CUL)

#else
#define REG_USB0_FRAME		(0x200D000C) /**< \brief (USB0) USB0 Frame Number Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_INDEX : (8) USB0 Index Register ----- */
typedef union {
	struct {
		uint32_t EP:4;			/*!< bit	0..3	Endpoint Index	*/
		uint32_t :4;			/*!< bit	4..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_INDEX_Type;
#define REG_USB0_INDEX		(*(RwReg *)0x200D000EUL)

#else
#define REG_USB0_INDEX		(0x200D000E) /**< \brief (USB0) USB0 Index Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_TESTMODE : (8) USB0 Testmode Register ----- */
typedef union {
	struct {
		uint32_t TESTSE0NAK:1;			/*!< bit	0	Test SE0 NAK	*/
		uint32_t TESTJ:1;			/*!< bit	1	Test_J Mode	*/
		uint32_t TESTK:1;			/*!< bit	2	Test_K Mode	*/
		uint32_t TESTPACKET:1;			/*!< bit	3	Test_Packet Mode	*/
		uint32_t :2;			/*!< bit	4..5	Reserved	*/
		uint32_t FIFOACCESS:1;			/*!< bit	6	FIFO Access	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_TESTMODE_Type;
#define REG_USB0_TESTMODE		(*(RwReg *)0x200D000FUL)

#else
#define REG_USB0_TESTMODE		(0x200D000F) /**< \brief (USB0) USB0 Testmode Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_TXMAXP0 : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_TXMAXP0_Type;
#define REG_USB0_EPI_TXMAXP0		(*(RwReg *)0x200D0010UL)

#else
#define REG_USB0_EPI_TXMAXP0		(0x200D0010) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_TXCSR_P0 : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_TXCSR_P0_Type;
#define REG_USB0_EPI_TXCSR_P0		(*(RwReg *)0x200D0012UL)

#else
#define REG_USB0_EPI_TXCSR_P0		(0x200D0012) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_TXCSR_H0 : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_TXCSR_H0_Type;
#define REG_USB0_EPI_TXCSR_H0		(*(RwReg *)0x200D0012UL)

#else
#define REG_USB0_EPI_TXCSR_H0		(0x200D0012) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0I_CSR0_P : (16) USB0 EP0 Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t TXPKTRDY:1;			/*!< bit	1	Tx Packet Ready	*/
		uint32_t SENTSTALL:1;			/*!< bit	2	Sent Stall	*/
		uint32_t DATAEND:1;			/*!< bit	3	Data End	*/
		uint32_t SETUPEND:1;			/*!< bit	4	Setup End	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send Stall	*/
		uint32_t SPKTRDY:1;			/*!< bit	6	Service Rx Packet Ready	*/
		uint32_t SSETUPEND:1;			/*!< bit	7	Service Setup End	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	8	Flush Endpoint FIFO	*/
		uint32_t :7;			/*!< bit	9..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0I_CSR0_P_Type;
#define REG_USB0_EP0I_CSR0_P		(*(RwReg *)0x200D0012UL)

#else
#define REG_USB0_EP0I_CSR0_P		(0x200D0012) /**< \brief (USB0) USB0 EP0 Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0I_CSR0_H : (16) USB0 EP0 Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t TXPKTRDY:1;			/*!< bit	1	Tx Packet Ready	*/
		uint32_t RXSTALL:1;			/*!< bit	2	Rx Stall	*/
		uint32_t SETUPPKT:1;			/*!< bit	3	Setup Packet	*/
		uint32_t TOERR:1;			/*!< bit	4	Timeout Error	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t STATUSPKT:1;			/*!< bit	6	Status Packet	*/
		uint32_t NAKTO:1;			/*!< bit	7	NAK Timeout	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	8	Flush Endpoint FIFO	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DISPING:1;			/*!< bit	11	Disable Ping	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0I_CSR0_H_Type;
#define REG_USB0_EP0I_CSR0_H		(*(RwReg *)0x200D0012UL)

#else
#define REG_USB0_EP0I_CSR0_H		(0x200D0012) /**< \brief (USB0) USB0 EP0 Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_RXMAXP0 : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_RXMAXP0_Type;
#define REG_USB0_EPI_RXMAXP0		(*(RwReg *)0x200D0014UL)

#else
#define REG_USB0_EPI_RXMAXP0		(0x200D0014) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_RXCSR_H0 : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_RXCSR_H0_Type;
#define REG_USB0_EPI_RXCSR_H0		(*(RwReg *)0x200D0016UL)

#else
#define REG_USB0_EPI_RXCSR_H0		(0x200D0016) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_RXCSR_P0 : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_RXCSR_P0_Type;
#define REG_USB0_EPI_RXCSR_P0		(*(RwReg *)0x200D0016UL)

#else
#define REG_USB0_EPI_RXCSR_P0		(0x200D0016) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0I_CNT0 : (16) USB0 EP0 Number of Received Bytes Register ----- */
typedef union {
	struct {
		uint32_t RXCNT:7;			/*!< bit	0..6	Rx Byte Count Value	*/
		uint32_t :9;			/*!< bit	7..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0I_CNT0_Type;
#define REG_USB0_EP0I_CNT0		(*(RwReg *)0x200D0018UL)

#else
#define REG_USB0_EP0I_CNT0		(0x200D0018) /**< \brief (USB0) USB0 EP0 Number of Received Bytes Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_RXCNT0 : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_RXCNT0_Type;
#define REG_USB0_EPI_RXCNT0		(*(RwReg *)0x200D0018UL)

#else
#define REG_USB0_EPI_RXCNT0		(0x200D0018) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_TXTYPE0 : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_TXTYPE0_Type;
#define REG_USB0_EPI_TXTYPE0		(*(RwReg *)0x200D001AUL)

#else
#define REG_USB0_EPI_TXTYPE0		(0x200D001A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0I_TYPE0 : (8) USB0 EP0 Connection Type Register ----- */
typedef union {
	struct {
		uint32_t SPEED:2;			/*!< bit	0..1	Speed of Operation Value	*/
		uint32_t :6;			/*!< bit	2..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0I_TYPE0_Type;
#define REG_USB0_EP0I_TYPE0		(*(RwReg *)0x200D001AUL)

#else
#define REG_USB0_EP0I_TYPE0		(0x200D001A) /**< \brief (USB0) USB0 EP0 Connection Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_TXINTERVAL0 : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_TXINTERVAL0_Type;
#define REG_USB0_EPI_TXINTERVAL0		(*(RwReg *)0x200D001BUL)

#else
#define REG_USB0_EPI_TXINTERVAL0		(0x200D001B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0I_NAKLIMIT0 : (8) USB0 EP0 NAK Limit Register ----- */
typedef union {
	struct {
		uint32_t VALUE:5;			/*!< bit	0..4	Endpoint 0 Timeout Value (in Frames)	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0I_NAKLIMIT0_Type;
#define REG_USB0_EP0I_NAKLIMIT0		(*(RwReg *)0x200D001BUL)

#else
#define REG_USB0_EP0I_NAKLIMIT0		(0x200D001B) /**< \brief (USB0) USB0 EP0 NAK Limit Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_RXTYPE0 : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_RXTYPE0_Type;
#define REG_USB0_EPI_RXTYPE0		(*(RwReg *)0x200D001CUL)

#else
#define REG_USB0_EPI_RXTYPE0		(0x200D001C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPI_RXINTERVAL0 : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPI_RXINTERVAL0_Type;
#define REG_USB0_EPI_RXINTERVAL0		(*(RwReg *)0x200D001DUL)

#else
#define REG_USB0_EPI_RXINTERVAL0		(0x200D001D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0I_CFGDATA0 : (8) USB0 EP0 Configuration Information Register ----- */
typedef union {
	struct {
		uint32_t UTMIWID:1;			/*!< bit	0	UTMI Data Width	*/
		uint32_t SOFTCON:1;			/*!< bit	1	Soft Connect Enable	*/
		uint32_t DYNFIFO:1;			/*!< bit	2	Dynamic FIFO Size Enable	*/
		uint32_t HBTX:1;			/*!< bit	3	High Bandwidth Tx Enable	*/
		uint32_t HBRX:1;			/*!< bit	4	High Bandwidth Rx Enable	*/
		uint32_t BIGEND:1;			/*!< bit	5	Big Endian Data	*/
		uint32_t MPTX:1;			/*!< bit	6	Multi-Packet Split for Tx Enable	*/
		uint32_t MPRX:1;			/*!< bit	7	Multi-Packet Aggregate for Rx Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0I_CFGDATA0_Type;
#define REG_USB0_EP0I_CFGDATA0		(*(RwReg *)0x200D001FUL)

#else
#define REG_USB0_EP0I_CFGDATA0		(0x200D001F) /**< \brief (USB0) USB0 EP0 Configuration Information Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB0 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB0_Type;
#define REG_USB0_FIFOB0		(*(RwReg *)0x200D0020UL)

#else
#define REG_USB0_FIFOB0		(0x200D0020) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB1 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB1_Type;
#define REG_USB0_FIFOB1		(*(RwReg *)0x200D0024UL)

#else
#define REG_USB0_FIFOB1		(0x200D0024) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB2 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB2_Type;
#define REG_USB0_FIFOB2		(*(RwReg *)0x200D0028UL)

#else
#define REG_USB0_FIFOB2		(0x200D0028) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB3 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB3_Type;
#define REG_USB0_FIFOB3		(*(RwReg *)0x200D002CUL)

#else
#define REG_USB0_FIFOB3		(0x200D002C) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB4 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB4_Type;
#define REG_USB0_FIFOB4		(*(RwReg *)0x200D0030UL)

#else
#define REG_USB0_FIFOB4		(0x200D0030) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB5 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB5_Type;
#define REG_USB0_FIFOB5		(*(RwReg *)0x200D0034UL)

#else
#define REG_USB0_FIFOB5		(0x200D0034) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB6 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB6_Type;
#define REG_USB0_FIFOB6		(*(RwReg *)0x200D0038UL)

#else
#define REG_USB0_FIFOB6		(0x200D0038) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB7 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB7_Type;
#define REG_USB0_FIFOB7		(*(RwReg *)0x200D003CUL)

#else
#define REG_USB0_FIFOB7		(0x200D003C) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB8 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB8_Type;
#define REG_USB0_FIFOB8		(*(RwReg *)0x200D0040UL)

#else
#define REG_USB0_FIFOB8		(0x200D0040) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB9 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB9_Type;
#define REG_USB0_FIFOB9		(*(RwReg *)0x200D0044UL)

#else
#define REG_USB0_FIFOB9		(0x200D0044) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB10 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB10_Type;
#define REG_USB0_FIFOB10		(*(RwReg *)0x200D0048UL)

#else
#define REG_USB0_FIFOB10		(0x200D0048) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOB11 : (8) USB0 FIFO Byte (8-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOB11_Type;
#define REG_USB0_FIFOB11		(*(RwReg *)0x200D004CUL)

#else
#define REG_USB0_FIFOB11		(0x200D004C) /**< \brief (USB0) USB0 FIFO Byte (8-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH0 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH0_Type;
#define REG_USB0_FIFOH0		(*(RwReg *)0x200D0020UL)

#else
#define REG_USB0_FIFOH0		(0x200D0020) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH1 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH1_Type;
#define REG_USB0_FIFOH1		(*(RwReg *)0x200D0024UL)

#else
#define REG_USB0_FIFOH1		(0x200D0024) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH2 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH2_Type;
#define REG_USB0_FIFOH2		(*(RwReg *)0x200D0028UL)

#else
#define REG_USB0_FIFOH2		(0x200D0028) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH3 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH3_Type;
#define REG_USB0_FIFOH3		(*(RwReg *)0x200D002CUL)

#else
#define REG_USB0_FIFOH3		(0x200D002C) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH4 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH4_Type;
#define REG_USB0_FIFOH4		(*(RwReg *)0x200D0030UL)

#else
#define REG_USB0_FIFOH4		(0x200D0030) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH5 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH5_Type;
#define REG_USB0_FIFOH5		(*(RwReg *)0x200D0034UL)

#else
#define REG_USB0_FIFOH5		(0x200D0034) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH6 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH6_Type;
#define REG_USB0_FIFOH6		(*(RwReg *)0x200D0038UL)

#else
#define REG_USB0_FIFOH6		(0x200D0038) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH7 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH7_Type;
#define REG_USB0_FIFOH7		(*(RwReg *)0x200D003CUL)

#else
#define REG_USB0_FIFOH7		(0x200D003C) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH8 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH8_Type;
#define REG_USB0_FIFOH8		(*(RwReg *)0x200D0040UL)

#else
#define REG_USB0_FIFOH8		(0x200D0040) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH9 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH9_Type;
#define REG_USB0_FIFOH9		(*(RwReg *)0x200D0044UL)

#else
#define REG_USB0_FIFOH9		(0x200D0044) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH10 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH10_Type;
#define REG_USB0_FIFOH10		(*(RwReg *)0x200D0048UL)

#else
#define REG_USB0_FIFOH10		(0x200D0048) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFOH11 : (16) USB0 FIFO Half-Word (16-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFOH11_Type;
#define REG_USB0_FIFOH11		(*(RwReg *)0x200D004CUL)

#else
#define REG_USB0_FIFOH11		(0x200D004C) /**< \brief (USB0) USB0 FIFO Half-Word (16-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO0 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO0_Type;
#define REG_USB0_FIFO0		(*(RwReg *)0x200D0020UL)

#else
#define REG_USB0_FIFO0		(0x200D0020) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO1 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO1_Type;
#define REG_USB0_FIFO1		(*(RwReg *)0x200D0024UL)

#else
#define REG_USB0_FIFO1		(0x200D0024) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO2 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO2_Type;
#define REG_USB0_FIFO2		(*(RwReg *)0x200D0028UL)

#else
#define REG_USB0_FIFO2		(0x200D0028) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO3 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO3_Type;
#define REG_USB0_FIFO3		(*(RwReg *)0x200D002CUL)

#else
#define REG_USB0_FIFO3		(0x200D002C) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO4 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO4_Type;
#define REG_USB0_FIFO4		(*(RwReg *)0x200D0030UL)

#else
#define REG_USB0_FIFO4		(0x200D0030) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO5 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO5_Type;
#define REG_USB0_FIFO5		(*(RwReg *)0x200D0034UL)

#else
#define REG_USB0_FIFO5		(0x200D0034) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO6 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO6_Type;
#define REG_USB0_FIFO6		(*(RwReg *)0x200D0038UL)

#else
#define REG_USB0_FIFO6		(0x200D0038) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO7 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO7_Type;
#define REG_USB0_FIFO7		(*(RwReg *)0x200D003CUL)

#else
#define REG_USB0_FIFO7		(0x200D003C) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO8 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO8_Type;
#define REG_USB0_FIFO8		(*(RwReg *)0x200D0040UL)

#else
#define REG_USB0_FIFO8		(0x200D0040) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO9 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO9_Type;
#define REG_USB0_FIFO9		(*(RwReg *)0x200D0044UL)

#else
#define REG_USB0_FIFO9		(0x200D0044) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO10 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO10_Type;
#define REG_USB0_FIFO10		(*(RwReg *)0x200D0048UL)

#else
#define REG_USB0_FIFO10		(0x200D0048) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FIFO11 : (32) USB0 FIFO Word (32-Bit) Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FIFO11_Type;
#define REG_USB0_FIFO11		(*(RwReg *)0x200D004CUL)

#else
#define REG_USB0_FIFO11		(0x200D004C) /**< \brief (USB0) USB0 FIFO Word (32-Bit) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DEV_CTL : (8) USB0 Device Control Register ----- */
typedef union {
	struct {
		uint32_t SESSION:1;			/*!< bit	0	Session Indicator	*/
		uint32_t HOSTREQ:1;			/*!< bit	1	Host Negotiation Request	*/
		uint32_t HOSTMODE:1;			/*!< bit	2	Host Mode Indicator	*/
		uint32_t VBUS:2;			/*!< bit	3..4	VBUS Level Indicator	*/
		uint32_t LSDEV:1;			/*!< bit	5	Low-Speed Indicator	*/
		uint32_t FSDEV:1;			/*!< bit	6	Full or High-Speed Indicator	*/
		uint32_t BDEVICE:1;			/*!< bit	7	A or B Devices Indicator	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DEV_CTL_Type;
#define REG_USB0_DEV_CTL		(*(RwReg *)0x200D0060UL)

#else
#define REG_USB0_DEV_CTL		(0x200D0060) /**< \brief (USB0) USB0 Device Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_TXFIFOSZ : (8) USB0 Transmit FIFO Size Register ----- */
typedef union {
	struct {
		uint32_t SZ:4;			/*!< bit	0..3	Maximum Packet Size	*/
		uint32_t DPB:1;			/*!< bit	4	Double Packet Buffering Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_TXFIFOSZ_Type;
#define REG_USB0_TXFIFOSZ		(*(RwReg *)0x200D0062UL)

#else
#define REG_USB0_TXFIFOSZ		(0x200D0062) /**< \brief (USB0) USB0 Transmit FIFO Size Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RXFIFOSZ : (8) USB0 Receive FIFO Size Register ----- */
typedef union {
	struct {
		uint32_t SZ:4;			/*!< bit	0..3	Maximum Packet Size	*/
		uint32_t DPB:1;			/*!< bit	4	Double Packet Buffering Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RXFIFOSZ_Type;
#define REG_USB0_RXFIFOSZ		(*(RwReg *)0x200D0063UL)

#else
#define REG_USB0_RXFIFOSZ		(0x200D0063) /**< \brief (USB0) USB0 Receive FIFO Size Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_TXFIFOADDR : (16) USB0 Transmit FIFO Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:13;			/*!< bit	0..12	Tx FIFO Start Address	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_TXFIFOADDR_Type;
#define REG_USB0_TXFIFOADDR		(*(RwReg *)0x200D0064UL)

#else
#define REG_USB0_TXFIFOADDR		(0x200D0064) /**< \brief (USB0) USB0 Transmit FIFO Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RXFIFOADDR : (16) USB0 Receive FIFO Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:12;			/*!< bit	0..11	Rx FIFO Start Address	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RXFIFOADDR_Type;
#define REG_USB0_RXFIFOADDR		(*(RwReg *)0x200D0066UL)

#else
#define REG_USB0_RXFIFOADDR		(0x200D0066) /**< \brief (USB0) USB0 Receive FIFO Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EPINFO : (8) USB0 Endpoint Information Register ----- */
typedef union {
	struct {
		uint32_t TXEP:4;			/*!< bit	0..3	Tx Endpoints	*/
		uint32_t RXEP:4;			/*!< bit	4..7	Rx Endpoints	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EPINFO_Type;
#define REG_USB0_EPINFO		(*(RwReg *)0x200D0078UL)

#else
#define REG_USB0_EPINFO		(0x200D0078) /**< \brief (USB0) USB0 Endpoint Information Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RAMINFO : (8) USB0 RAM Information Register ----- */
typedef union {
	struct {
		uint32_t RAMBITS:4;			/*!< bit	0..3	RAM Address Bits	*/
		uint32_t DMACHANS:4;			/*!< bit	4..7	DMA Channels	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RAMINFO_Type;
#define REG_USB0_RAMINFO		(*(RwReg *)0x200D0079UL)

#else
#define REG_USB0_RAMINFO		(0x200D0079) /**< \brief (USB0) USB0 RAM Information Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_LINKINFO : (8) USB0 Link Information Register ----- */
typedef union {
	struct {
		uint32_t WTID:4;			/*!< bit	0..3	Wait from ID Pull-up	*/
		uint32_t WTCON:4;			/*!< bit	4..7	Wait for Connect/Disconnect	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_LINKINFO_Type;
#define REG_USB0_LINKINFO		(*(RwReg *)0x200D007AUL)

#else
#define REG_USB0_LINKINFO		(0x200D007A) /**< \brief (USB0) USB0 Link Information Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_VPLEN : (8) USB0 VBUS Pulse Length Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_VPLEN_Type;
#define REG_USB0_VPLEN		(*(RwReg *)0x200D007BUL)

#else
#define REG_USB0_VPLEN		(0x200D007B) /**< \brief (USB0) USB0 VBUS Pulse Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_HS_EOF1 : (8) USB0 High-Speed EOF 1 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_HS_EOF1_Type;
#define REG_USB0_HS_EOF1		(*(RwReg *)0x200D007CUL)

#else
#define REG_USB0_HS_EOF1		(0x200D007C) /**< \brief (USB0) USB0 High-Speed EOF 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_FS_EOF1 : (8) USB0 Full-Speed EOF 1 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_FS_EOF1_Type;
#define REG_USB0_FS_EOF1		(*(RwReg *)0x200D007DUL)

#else
#define REG_USB0_FS_EOF1		(0x200D007D) /**< \brief (USB0) USB0 Full-Speed EOF 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_LS_EOF1 : (8) USB0 Low-Speed EOF 1 Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_LS_EOF1_Type;
#define REG_USB0_LS_EOF1		(*(RwReg *)0x200D007EUL)

#else
#define REG_USB0_LS_EOF1		(0x200D007E) /**< \brief (USB0) USB0 Low-Speed EOF 1 Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_SOFT_RST : (8) USB0 Software Reset Register ----- */
typedef union {
	struct {
		uint32_t RST:1;			/*!< bit	0	Reset USB CLK Domain	*/
		uint32_t RSTX:1;			/*!< bit	1	Reset USB XCLK Domain	*/
		uint32_t :6;			/*!< bit	2..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_SOFT_RST_Type;
#define REG_USB0_SOFT_RST		(*(RwReg *)0x200D007FUL)

#else
#define REG_USB0_SOFT_RST		(0x200D007F) /**< \brief (USB0) USB0 Software Reset Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP0_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP0_TXFUNCADDR_Type;
#define REG_USB0_MP0_TXFUNCADDR		(*(RwReg *)0x200D0080UL)

#else
#define REG_USB0_MP0_TXFUNCADDR		(0x200D0080) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP1_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP1_TXFUNCADDR_Type;
#define REG_USB0_MP1_TXFUNCADDR		(*(RwReg *)0x200D0088UL)

#else
#define REG_USB0_MP1_TXFUNCADDR		(0x200D0088) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP2_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP2_TXFUNCADDR_Type;
#define REG_USB0_MP2_TXFUNCADDR		(*(RwReg *)0x200D0090UL)

#else
#define REG_USB0_MP2_TXFUNCADDR		(0x200D0090) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP3_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP3_TXFUNCADDR_Type;
#define REG_USB0_MP3_TXFUNCADDR		(*(RwReg *)0x200D0098UL)

#else
#define REG_USB0_MP3_TXFUNCADDR		(0x200D0098) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP4_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP4_TXFUNCADDR_Type;
#define REG_USB0_MP4_TXFUNCADDR		(*(RwReg *)0x200D00A0UL)

#else
#define REG_USB0_MP4_TXFUNCADDR		(0x200D00A0) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP5_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP5_TXFUNCADDR_Type;
#define REG_USB0_MP5_TXFUNCADDR		(*(RwReg *)0x200D00A8UL)

#else
#define REG_USB0_MP5_TXFUNCADDR		(0x200D00A8) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP6_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP6_TXFUNCADDR_Type;
#define REG_USB0_MP6_TXFUNCADDR		(*(RwReg *)0x200D00B0UL)

#else
#define REG_USB0_MP6_TXFUNCADDR		(0x200D00B0) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP7_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP7_TXFUNCADDR_Type;
#define REG_USB0_MP7_TXFUNCADDR		(*(RwReg *)0x200D00B8UL)

#else
#define REG_USB0_MP7_TXFUNCADDR		(0x200D00B8) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP8_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP8_TXFUNCADDR_Type;
#define REG_USB0_MP8_TXFUNCADDR		(*(RwReg *)0x200D00C0UL)

#else
#define REG_USB0_MP8_TXFUNCADDR		(0x200D00C0) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP9_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP9_TXFUNCADDR_Type;
#define REG_USB0_MP9_TXFUNCADDR		(*(RwReg *)0x200D00C8UL)

#else
#define REG_USB0_MP9_TXFUNCADDR		(0x200D00C8) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP10_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP10_TXFUNCADDR_Type;
#define REG_USB0_MP10_TXFUNCADDR		(*(RwReg *)0x200D00D0UL)

#else
#define REG_USB0_MP10_TXFUNCADDR		(0x200D00D0) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP11_TXFUNCADDR : (8) USB0 MPn Transmit Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Tx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP11_TXFUNCADDR_Type;
#define REG_USB0_MP11_TXFUNCADDR		(*(RwReg *)0x200D00D8UL)

#else
#define REG_USB0_MP11_TXFUNCADDR		(0x200D00D8) /**< \brief (USB0) USB0 MPn Transmit Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP0_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP0_TXHUBADDR_Type;
#define REG_USB0_MP0_TXHUBADDR		(*(RwReg *)0x200D0082UL)

#else
#define REG_USB0_MP0_TXHUBADDR		(0x200D0082) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP1_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP1_TXHUBADDR_Type;
#define REG_USB0_MP1_TXHUBADDR		(*(RwReg *)0x200D008AUL)

#else
#define REG_USB0_MP1_TXHUBADDR		(0x200D008A) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP2_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP2_TXHUBADDR_Type;
#define REG_USB0_MP2_TXHUBADDR		(*(RwReg *)0x200D0092UL)

#else
#define REG_USB0_MP2_TXHUBADDR		(0x200D0092) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP3_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP3_TXHUBADDR_Type;
#define REG_USB0_MP3_TXHUBADDR		(*(RwReg *)0x200D009AUL)

#else
#define REG_USB0_MP3_TXHUBADDR		(0x200D009A) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP4_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP4_TXHUBADDR_Type;
#define REG_USB0_MP4_TXHUBADDR		(*(RwReg *)0x200D00A2UL)

#else
#define REG_USB0_MP4_TXHUBADDR		(0x200D00A2) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP5_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP5_TXHUBADDR_Type;
#define REG_USB0_MP5_TXHUBADDR		(*(RwReg *)0x200D00AAUL)

#else
#define REG_USB0_MP5_TXHUBADDR		(0x200D00AA) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP6_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP6_TXHUBADDR_Type;
#define REG_USB0_MP6_TXHUBADDR		(*(RwReg *)0x200D00B2UL)

#else
#define REG_USB0_MP6_TXHUBADDR		(0x200D00B2) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP7_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP7_TXHUBADDR_Type;
#define REG_USB0_MP7_TXHUBADDR		(*(RwReg *)0x200D00BAUL)

#else
#define REG_USB0_MP7_TXHUBADDR		(0x200D00BA) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP8_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP8_TXHUBADDR_Type;
#define REG_USB0_MP8_TXHUBADDR		(*(RwReg *)0x200D00C2UL)

#else
#define REG_USB0_MP8_TXHUBADDR		(0x200D00C2) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP9_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP9_TXHUBADDR_Type;
#define REG_USB0_MP9_TXHUBADDR		(*(RwReg *)0x200D00CAUL)

#else
#define REG_USB0_MP9_TXHUBADDR		(0x200D00CA) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP10_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP10_TXHUBADDR_Type;
#define REG_USB0_MP10_TXHUBADDR		(*(RwReg *)0x200D00D2UL)

#else
#define REG_USB0_MP10_TXHUBADDR		(0x200D00D2) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP11_TXHUBADDR : (8) USB0 MPn Transmit Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP11_TXHUBADDR_Type;
#define REG_USB0_MP11_TXHUBADDR		(*(RwReg *)0x200D00DAUL)

#else
#define REG_USB0_MP11_TXHUBADDR		(0x200D00DA) /**< \brief (USB0) USB0 MPn Transmit Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP0_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP0_TXHUBPORT_Type;
#define REG_USB0_MP0_TXHUBPORT		(*(RwReg *)0x200D0083UL)

#else
#define REG_USB0_MP0_TXHUBPORT		(0x200D0083) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP1_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP1_TXHUBPORT_Type;
#define REG_USB0_MP1_TXHUBPORT		(*(RwReg *)0x200D008BUL)

#else
#define REG_USB0_MP1_TXHUBPORT		(0x200D008B) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP2_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP2_TXHUBPORT_Type;
#define REG_USB0_MP2_TXHUBPORT		(*(RwReg *)0x200D0093UL)

#else
#define REG_USB0_MP2_TXHUBPORT		(0x200D0093) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP3_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP3_TXHUBPORT_Type;
#define REG_USB0_MP3_TXHUBPORT		(*(RwReg *)0x200D009BUL)

#else
#define REG_USB0_MP3_TXHUBPORT		(0x200D009B) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP4_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP4_TXHUBPORT_Type;
#define REG_USB0_MP4_TXHUBPORT		(*(RwReg *)0x200D00A3UL)

#else
#define REG_USB0_MP4_TXHUBPORT		(0x200D00A3) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP5_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP5_TXHUBPORT_Type;
#define REG_USB0_MP5_TXHUBPORT		(*(RwReg *)0x200D00ABUL)

#else
#define REG_USB0_MP5_TXHUBPORT		(0x200D00AB) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP6_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP6_TXHUBPORT_Type;
#define REG_USB0_MP6_TXHUBPORT		(*(RwReg *)0x200D00B3UL)

#else
#define REG_USB0_MP6_TXHUBPORT		(0x200D00B3) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP7_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP7_TXHUBPORT_Type;
#define REG_USB0_MP7_TXHUBPORT		(*(RwReg *)0x200D00BBUL)

#else
#define REG_USB0_MP7_TXHUBPORT		(0x200D00BB) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP8_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP8_TXHUBPORT_Type;
#define REG_USB0_MP8_TXHUBPORT		(*(RwReg *)0x200D00C3UL)

#else
#define REG_USB0_MP8_TXHUBPORT		(0x200D00C3) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP9_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP9_TXHUBPORT_Type;
#define REG_USB0_MP9_TXHUBPORT		(*(RwReg *)0x200D00CBUL)

#else
#define REG_USB0_MP9_TXHUBPORT		(0x200D00CB) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP10_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP10_TXHUBPORT_Type;
#define REG_USB0_MP10_TXHUBPORT		(*(RwReg *)0x200D00D3UL)

#else
#define REG_USB0_MP10_TXHUBPORT		(0x200D00D3) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP11_TXHUBPORT : (8) USB0 MPn Transmit Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP11_TXHUBPORT_Type;
#define REG_USB0_MP11_TXHUBPORT		(*(RwReg *)0x200D00DBUL)

#else
#define REG_USB0_MP11_TXHUBPORT		(0x200D00DB) /**< \brief (USB0) USB0 MPn Transmit Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP0_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP0_RXFUNCADDR_Type;
#define REG_USB0_MP0_RXFUNCADDR		(*(RwReg *)0x200D0084UL)

#else
#define REG_USB0_MP0_RXFUNCADDR		(0x200D0084) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP1_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP1_RXFUNCADDR_Type;
#define REG_USB0_MP1_RXFUNCADDR		(*(RwReg *)0x200D008CUL)

#else
#define REG_USB0_MP1_RXFUNCADDR		(0x200D008C) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP2_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP2_RXFUNCADDR_Type;
#define REG_USB0_MP2_RXFUNCADDR		(*(RwReg *)0x200D0094UL)

#else
#define REG_USB0_MP2_RXFUNCADDR		(0x200D0094) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP3_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP3_RXFUNCADDR_Type;
#define REG_USB0_MP3_RXFUNCADDR		(*(RwReg *)0x200D009CUL)

#else
#define REG_USB0_MP3_RXFUNCADDR		(0x200D009C) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP4_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP4_RXFUNCADDR_Type;
#define REG_USB0_MP4_RXFUNCADDR		(*(RwReg *)0x200D00A4UL)

#else
#define REG_USB0_MP4_RXFUNCADDR		(0x200D00A4) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP5_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP5_RXFUNCADDR_Type;
#define REG_USB0_MP5_RXFUNCADDR		(*(RwReg *)0x200D00ACUL)

#else
#define REG_USB0_MP5_RXFUNCADDR		(0x200D00AC) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP6_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP6_RXFUNCADDR_Type;
#define REG_USB0_MP6_RXFUNCADDR		(*(RwReg *)0x200D00B4UL)

#else
#define REG_USB0_MP6_RXFUNCADDR		(0x200D00B4) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP7_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP7_RXFUNCADDR_Type;
#define REG_USB0_MP7_RXFUNCADDR		(*(RwReg *)0x200D00BCUL)

#else
#define REG_USB0_MP7_RXFUNCADDR		(0x200D00BC) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP8_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP8_RXFUNCADDR_Type;
#define REG_USB0_MP8_RXFUNCADDR		(*(RwReg *)0x200D00C4UL)

#else
#define REG_USB0_MP8_RXFUNCADDR		(0x200D00C4) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP9_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP9_RXFUNCADDR_Type;
#define REG_USB0_MP9_RXFUNCADDR		(*(RwReg *)0x200D00CCUL)

#else
#define REG_USB0_MP9_RXFUNCADDR		(0x200D00CC) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP10_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP10_RXFUNCADDR_Type;
#define REG_USB0_MP10_RXFUNCADDR		(*(RwReg *)0x200D00D4UL)

#else
#define REG_USB0_MP10_RXFUNCADDR		(0x200D00D4) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP11_RXFUNCADDR : (8) USB0 MPn Receive Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Rx Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP11_RXFUNCADDR_Type;
#define REG_USB0_MP11_RXFUNCADDR		(*(RwReg *)0x200D00DCUL)

#else
#define REG_USB0_MP11_RXFUNCADDR		(0x200D00DC) /**< \brief (USB0) USB0 MPn Receive Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP0_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP0_RXHUBADDR_Type;
#define REG_USB0_MP0_RXHUBADDR		(*(RwReg *)0x200D0086UL)

#else
#define REG_USB0_MP0_RXHUBADDR		(0x200D0086) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP1_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP1_RXHUBADDR_Type;
#define REG_USB0_MP1_RXHUBADDR		(*(RwReg *)0x200D008EUL)

#else
#define REG_USB0_MP1_RXHUBADDR		(0x200D008E) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP2_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP2_RXHUBADDR_Type;
#define REG_USB0_MP2_RXHUBADDR		(*(RwReg *)0x200D0096UL)

#else
#define REG_USB0_MP2_RXHUBADDR		(0x200D0096) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP3_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP3_RXHUBADDR_Type;
#define REG_USB0_MP3_RXHUBADDR		(*(RwReg *)0x200D009EUL)

#else
#define REG_USB0_MP3_RXHUBADDR		(0x200D009E) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP4_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP4_RXHUBADDR_Type;
#define REG_USB0_MP4_RXHUBADDR		(*(RwReg *)0x200D00A6UL)

#else
#define REG_USB0_MP4_RXHUBADDR		(0x200D00A6) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP5_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP5_RXHUBADDR_Type;
#define REG_USB0_MP5_RXHUBADDR		(*(RwReg *)0x200D00AEUL)

#else
#define REG_USB0_MP5_RXHUBADDR		(0x200D00AE) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP6_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP6_RXHUBADDR_Type;
#define REG_USB0_MP6_RXHUBADDR		(*(RwReg *)0x200D00B6UL)

#else
#define REG_USB0_MP6_RXHUBADDR		(0x200D00B6) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP7_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP7_RXHUBADDR_Type;
#define REG_USB0_MP7_RXHUBADDR		(*(RwReg *)0x200D00BEUL)

#else
#define REG_USB0_MP7_RXHUBADDR		(0x200D00BE) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP8_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP8_RXHUBADDR_Type;
#define REG_USB0_MP8_RXHUBADDR		(*(RwReg *)0x200D00C6UL)

#else
#define REG_USB0_MP8_RXHUBADDR		(0x200D00C6) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP9_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP9_RXHUBADDR_Type;
#define REG_USB0_MP9_RXHUBADDR		(*(RwReg *)0x200D00CEUL)

#else
#define REG_USB0_MP9_RXHUBADDR		(0x200D00CE) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP10_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP10_RXHUBADDR_Type;
#define REG_USB0_MP10_RXHUBADDR		(*(RwReg *)0x200D00D6UL)

#else
#define REG_USB0_MP10_RXHUBADDR		(0x200D00D6) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP11_RXHUBADDR : (8) USB0 MPn Receive Hub Address Register ----- */
typedef union {
	struct {
		uint32_t ADDR:7;			/*!< bit	0..6	Hub Address Value	*/
		uint32_t MULTTRANS:1;			/*!< bit	7	Multiple Transaction Translators	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP11_RXHUBADDR_Type;
#define REG_USB0_MP11_RXHUBADDR		(*(RwReg *)0x200D00DEUL)

#else
#define REG_USB0_MP11_RXHUBADDR		(0x200D00DE) /**< \brief (USB0) USB0 MPn Receive Hub Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP0_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP0_RXHUBPORT_Type;
#define REG_USB0_MP0_RXHUBPORT		(*(RwReg *)0x200D0087UL)

#else
#define REG_USB0_MP0_RXHUBPORT		(0x200D0087) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP1_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP1_RXHUBPORT_Type;
#define REG_USB0_MP1_RXHUBPORT		(*(RwReg *)0x200D008FUL)

#else
#define REG_USB0_MP1_RXHUBPORT		(0x200D008F) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP2_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP2_RXHUBPORT_Type;
#define REG_USB0_MP2_RXHUBPORT		(*(RwReg *)0x200D0097UL)

#else
#define REG_USB0_MP2_RXHUBPORT		(0x200D0097) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP3_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP3_RXHUBPORT_Type;
#define REG_USB0_MP3_RXHUBPORT		(*(RwReg *)0x200D009FUL)

#else
#define REG_USB0_MP3_RXHUBPORT		(0x200D009F) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP4_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP4_RXHUBPORT_Type;
#define REG_USB0_MP4_RXHUBPORT		(*(RwReg *)0x200D00A7UL)

#else
#define REG_USB0_MP4_RXHUBPORT		(0x200D00A7) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP5_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP5_RXHUBPORT_Type;
#define REG_USB0_MP5_RXHUBPORT		(*(RwReg *)0x200D00AFUL)

#else
#define REG_USB0_MP5_RXHUBPORT		(0x200D00AF) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP6_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP6_RXHUBPORT_Type;
#define REG_USB0_MP6_RXHUBPORT		(*(RwReg *)0x200D00B7UL)

#else
#define REG_USB0_MP6_RXHUBPORT		(0x200D00B7) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP7_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP7_RXHUBPORT_Type;
#define REG_USB0_MP7_RXHUBPORT		(*(RwReg *)0x200D00BFUL)

#else
#define REG_USB0_MP7_RXHUBPORT		(0x200D00BF) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP8_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP8_RXHUBPORT_Type;
#define REG_USB0_MP8_RXHUBPORT		(*(RwReg *)0x200D00C7UL)

#else
#define REG_USB0_MP8_RXHUBPORT		(0x200D00C7) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP9_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP9_RXHUBPORT_Type;
#define REG_USB0_MP9_RXHUBPORT		(*(RwReg *)0x200D00CFUL)

#else
#define REG_USB0_MP9_RXHUBPORT		(0x200D00CF) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP10_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP10_RXHUBPORT_Type;
#define REG_USB0_MP10_RXHUBPORT		(*(RwReg *)0x200D00D7UL)

#else
#define REG_USB0_MP10_RXHUBPORT		(0x200D00D7) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_MP11_RXHUBPORT : (8) USB0 MPn Receive Hub Port Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Hub Port Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_MP11_RXHUBPORT_Type;
#define REG_USB0_MP11_RXHUBPORT		(*(RwReg *)0x200D00DFUL)

#else
#define REG_USB0_MP11_RXHUBPORT		(0x200D00DF) /**< \brief (USB0) USB0 MPn Receive Hub Port Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_TXMAXP_Type;
#define REG_USB0_EP0_TXMAXP		(*(RwReg *)0x200D0100UL)

#else
#define REG_USB0_EP0_TXMAXP		(0x200D0100) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_TXMAXP_Type;
#define REG_USB0_EP1_TXMAXP		(*(RwReg *)0x200D0110UL)

#else
#define REG_USB0_EP1_TXMAXP		(0x200D0110) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_TXMAXP_Type;
#define REG_USB0_EP2_TXMAXP		(*(RwReg *)0x200D0120UL)

#else
#define REG_USB0_EP2_TXMAXP		(0x200D0120) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_TXMAXP_Type;
#define REG_USB0_EP3_TXMAXP		(*(RwReg *)0x200D0130UL)

#else
#define REG_USB0_EP3_TXMAXP		(0x200D0130) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_TXMAXP_Type;
#define REG_USB0_EP4_TXMAXP		(*(RwReg *)0x200D0140UL)

#else
#define REG_USB0_EP4_TXMAXP		(0x200D0140) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_TXMAXP_Type;
#define REG_USB0_EP5_TXMAXP		(*(RwReg *)0x200D0150UL)

#else
#define REG_USB0_EP5_TXMAXP		(0x200D0150) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_TXMAXP_Type;
#define REG_USB0_EP6_TXMAXP		(*(RwReg *)0x200D0160UL)

#else
#define REG_USB0_EP6_TXMAXP		(0x200D0160) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_TXMAXP_Type;
#define REG_USB0_EP7_TXMAXP		(*(RwReg *)0x200D0170UL)

#else
#define REG_USB0_EP7_TXMAXP		(0x200D0170) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_TXMAXP_Type;
#define REG_USB0_EP8_TXMAXP		(*(RwReg *)0x200D0180UL)

#else
#define REG_USB0_EP8_TXMAXP		(0x200D0180) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_TXMAXP_Type;
#define REG_USB0_EP9_TXMAXP		(*(RwReg *)0x200D0190UL)

#else
#define REG_USB0_EP9_TXMAXP		(0x200D0190) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_TXMAXP_Type;
#define REG_USB0_EP10_TXMAXP		(*(RwReg *)0x200D01A0UL)

#else
#define REG_USB0_EP10_TXMAXP		(0x200D01A0) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_TXMAXP : (16) USB0 EPn Transmit Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_TXMAXP_Type;
#define REG_USB0_EP11_TXMAXP		(*(RwReg *)0x200D01B0UL)

#else
#define REG_USB0_EP11_TXMAXP		(0x200D01B0) /**< \brief (USB0) USB0 EPn Transmit Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_CSR0_H : (16) USB0 EP0 Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t TXPKTRDY:1;			/*!< bit	1	Tx Packet Ready	*/
		uint32_t RXSTALL:1;			/*!< bit	2	Rx Stall	*/
		uint32_t SETUPPKT:1;			/*!< bit	3	Setup Packet	*/
		uint32_t TOERR:1;			/*!< bit	4	Timeout Error	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t STATUSPKT:1;			/*!< bit	6	Status Packet	*/
		uint32_t NAKTO:1;			/*!< bit	7	NAK Timeout	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	8	Flush Endpoint FIFO	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DISPING:1;			/*!< bit	11	Disable Ping	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_CSR0_H_Type;
#define REG_USB0_EP0_CSR0_H		(*(RwReg *)0x200D0102UL)

#else
#define REG_USB0_EP0_CSR0_H		(0x200D0102) /**< \brief (USB0) USB0 EP0 Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_TXCSR_H_Type;
#define REG_USB0_EP0_TXCSR_H		(*(RwReg *)0x200D0102UL)

#else
#define REG_USB0_EP0_TXCSR_H		(0x200D0102) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_TXCSR_H_Type;
#define REG_USB0_EP1_TXCSR_H		(*(RwReg *)0x200D0112UL)

#else
#define REG_USB0_EP1_TXCSR_H		(0x200D0112) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_TXCSR_H_Type;
#define REG_USB0_EP2_TXCSR_H		(*(RwReg *)0x200D0122UL)

#else
#define REG_USB0_EP2_TXCSR_H		(0x200D0122) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_TXCSR_H_Type;
#define REG_USB0_EP3_TXCSR_H		(*(RwReg *)0x200D0132UL)

#else
#define REG_USB0_EP3_TXCSR_H		(0x200D0132) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_TXCSR_H_Type;
#define REG_USB0_EP4_TXCSR_H		(*(RwReg *)0x200D0142UL)

#else
#define REG_USB0_EP4_TXCSR_H		(0x200D0142) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_TXCSR_H_Type;
#define REG_USB0_EP5_TXCSR_H		(*(RwReg *)0x200D0152UL)

#else
#define REG_USB0_EP5_TXCSR_H		(0x200D0152) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_TXCSR_H_Type;
#define REG_USB0_EP6_TXCSR_H		(*(RwReg *)0x200D0162UL)

#else
#define REG_USB0_EP6_TXCSR_H		(0x200D0162) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_TXCSR_H_Type;
#define REG_USB0_EP7_TXCSR_H		(*(RwReg *)0x200D0172UL)

#else
#define REG_USB0_EP7_TXCSR_H		(0x200D0172) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_TXCSR_H_Type;
#define REG_USB0_EP8_TXCSR_H		(*(RwReg *)0x200D0182UL)

#else
#define REG_USB0_EP8_TXCSR_H		(0x200D0182) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_TXCSR_H_Type;
#define REG_USB0_EP9_TXCSR_H		(*(RwReg *)0x200D0192UL)

#else
#define REG_USB0_EP9_TXCSR_H		(0x200D0192) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_TXCSR_H_Type;
#define REG_USB0_EP10_TXCSR_H		(*(RwReg *)0x200D01A2UL)

#else
#define REG_USB0_EP10_TXCSR_H		(0x200D01A2) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_TXCSR_H : (16) USB0 EPn Transmit Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t TXTOERR:1;			/*!< bit	2	Tx Timeout Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SETUPPKT:1;			/*!< bit	4	Setup Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	5	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t NAKTOINCMP:1;			/*!< bit	7	NAK Timeout Incomplete	*/
		uint32_t DATGL:1;			/*!< bit	8	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	9	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_TXCSR_H_Type;
#define REG_USB0_EP11_TXCSR_H		(*(RwReg *)0x200D01B2UL)

#else
#define REG_USB0_EP11_TXCSR_H		(0x200D01B2) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_CSR0_P : (16) USB0 EP0 Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t TXPKTRDY:1;			/*!< bit	1	Tx Packet Ready	*/
		uint32_t SENTSTALL:1;			/*!< bit	2	Sent Stall	*/
		uint32_t DATAEND:1;			/*!< bit	3	Data End	*/
		uint32_t SETUPEND:1;			/*!< bit	4	Setup End	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send Stall	*/
		uint32_t SPKTRDY:1;			/*!< bit	6	Service Rx Packet Ready	*/
		uint32_t SSETUPEND:1;			/*!< bit	7	Service Setup End	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	8	Flush Endpoint FIFO	*/
		uint32_t :7;			/*!< bit	9..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_CSR0_P_Type;
#define REG_USB0_EP0_CSR0_P		(*(RwReg *)0x200D0102UL)

#else
#define REG_USB0_EP0_CSR0_P		(0x200D0102) /**< \brief (USB0) USB0 EP0 Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_TXCSR_P_Type;
#define REG_USB0_EP0_TXCSR_P		(*(RwReg *)0x200D0102UL)

#else
#define REG_USB0_EP0_TXCSR_P		(0x200D0102) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_TXCSR_P_Type;
#define REG_USB0_EP1_TXCSR_P		(*(RwReg *)0x200D0112UL)

#else
#define REG_USB0_EP1_TXCSR_P		(0x200D0112) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_TXCSR_P_Type;
#define REG_USB0_EP2_TXCSR_P		(*(RwReg *)0x200D0122UL)

#else
#define REG_USB0_EP2_TXCSR_P		(0x200D0122) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_TXCSR_P_Type;
#define REG_USB0_EP3_TXCSR_P		(*(RwReg *)0x200D0132UL)

#else
#define REG_USB0_EP3_TXCSR_P		(0x200D0132) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_TXCSR_P_Type;
#define REG_USB0_EP4_TXCSR_P		(*(RwReg *)0x200D0142UL)

#else
#define REG_USB0_EP4_TXCSR_P		(0x200D0142) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_TXCSR_P_Type;
#define REG_USB0_EP5_TXCSR_P		(*(RwReg *)0x200D0152UL)

#else
#define REG_USB0_EP5_TXCSR_P		(0x200D0152) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_TXCSR_P_Type;
#define REG_USB0_EP6_TXCSR_P		(*(RwReg *)0x200D0162UL)

#else
#define REG_USB0_EP6_TXCSR_P		(0x200D0162) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_TXCSR_P_Type;
#define REG_USB0_EP7_TXCSR_P		(*(RwReg *)0x200D0172UL)

#else
#define REG_USB0_EP7_TXCSR_P		(0x200D0172) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_TXCSR_P_Type;
#define REG_USB0_EP8_TXCSR_P		(*(RwReg *)0x200D0182UL)

#else
#define REG_USB0_EP8_TXCSR_P		(0x200D0182) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_TXCSR_P_Type;
#define REG_USB0_EP9_TXCSR_P		(*(RwReg *)0x200D0192UL)

#else
#define REG_USB0_EP9_TXCSR_P		(0x200D0192) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_TXCSR_P_Type;
#define REG_USB0_EP10_TXCSR_P		(*(RwReg *)0x200D01A2UL)

#else
#define REG_USB0_EP10_TXCSR_P		(0x200D01A2) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_TXCSR_P : (16) USB0 EPn Transmit Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t TXPKTRDY:1;			/*!< bit	0	Tx Packet Ready	*/
		uint32_t NEFIFO:1;			/*!< bit	1	Not Empty FIFO	*/
		uint32_t URUNERR:1;			/*!< bit	2	Underrun Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	3	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	4	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	5	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	6	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPTX:1;			/*!< bit	7	Incomplete Tx	*/
		uint32_t :2;			/*!< bit	8..9	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	10	DMA Mode Select	*/
		uint32_t FRCDATATGL:1;			/*!< bit	11	Force Data Toggle	*/
		uint32_t DMAREQEN:1;			/*!< bit	12	DMA Request Enable Tx EP	*/
		uint32_t :1;			/*!< bit	13	Reserved	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers Enable	*/
		uint32_t AUTOSET:1;			/*!< bit	15	TxPkRdy Autoset Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_TXCSR_P_Type;
#define REG_USB0_EP11_TXCSR_P		(*(RwReg *)0x200D01B2UL)

#else
#define REG_USB0_EP11_TXCSR_P		(0x200D01B2) /**< \brief (USB0) USB0 EPn Transmit Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_RXMAXP_Type;
#define REG_USB0_EP0_RXMAXP		(*(RwReg *)0x200D0104UL)

#else
#define REG_USB0_EP0_RXMAXP		(0x200D0104) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_RXMAXP_Type;
#define REG_USB0_EP1_RXMAXP		(*(RwReg *)0x200D0114UL)

#else
#define REG_USB0_EP1_RXMAXP		(0x200D0114) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_RXMAXP_Type;
#define REG_USB0_EP2_RXMAXP		(*(RwReg *)0x200D0124UL)

#else
#define REG_USB0_EP2_RXMAXP		(0x200D0124) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_RXMAXP_Type;
#define REG_USB0_EP3_RXMAXP		(*(RwReg *)0x200D0134UL)

#else
#define REG_USB0_EP3_RXMAXP		(0x200D0134) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_RXMAXP_Type;
#define REG_USB0_EP4_RXMAXP		(*(RwReg *)0x200D0144UL)

#else
#define REG_USB0_EP4_RXMAXP		(0x200D0144) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_RXMAXP_Type;
#define REG_USB0_EP5_RXMAXP		(*(RwReg *)0x200D0154UL)

#else
#define REG_USB0_EP5_RXMAXP		(0x200D0154) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_RXMAXP_Type;
#define REG_USB0_EP6_RXMAXP		(*(RwReg *)0x200D0164UL)

#else
#define REG_USB0_EP6_RXMAXP		(0x200D0164) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_RXMAXP_Type;
#define REG_USB0_EP7_RXMAXP		(*(RwReg *)0x200D0174UL)

#else
#define REG_USB0_EP7_RXMAXP		(0x200D0174) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_RXMAXP_Type;
#define REG_USB0_EP8_RXMAXP		(*(RwReg *)0x200D0184UL)

#else
#define REG_USB0_EP8_RXMAXP		(0x200D0184) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_RXMAXP_Type;
#define REG_USB0_EP9_RXMAXP		(*(RwReg *)0x200D0194UL)

#else
#define REG_USB0_EP9_RXMAXP		(0x200D0194) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_RXMAXP_Type;
#define REG_USB0_EP10_RXMAXP		(*(RwReg *)0x200D01A4UL)

#else
#define REG_USB0_EP10_RXMAXP		(0x200D01A4) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_RXMAXP : (16) USB0 EPn Receive Maximum Packet Length Register ----- */
typedef union {
	struct {
		uint32_t MAXPAY:11;			/*!< bit	0..10	Maximum Payload	*/
		uint32_t MULTM1:2;			/*!< bit	11..12	Multi-Packets per Micro-frame	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_RXMAXP_Type;
#define REG_USB0_EP11_RXMAXP		(*(RwReg *)0x200D01B4UL)

#else
#define REG_USB0_EP11_RXMAXP		(0x200D01B4) /**< \brief (USB0) USB0 EPn Receive Maximum Packet Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_RXCSR_H_Type;
#define REG_USB0_EP0_RXCSR_H		(*(RwReg *)0x200D0106UL)

#else
#define REG_USB0_EP0_RXCSR_H		(0x200D0106) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_RXCSR_H_Type;
#define REG_USB0_EP1_RXCSR_H		(*(RwReg *)0x200D0116UL)

#else
#define REG_USB0_EP1_RXCSR_H		(0x200D0116) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_RXCSR_H_Type;
#define REG_USB0_EP2_RXCSR_H		(*(RwReg *)0x200D0126UL)

#else
#define REG_USB0_EP2_RXCSR_H		(0x200D0126) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_RXCSR_H_Type;
#define REG_USB0_EP3_RXCSR_H		(*(RwReg *)0x200D0136UL)

#else
#define REG_USB0_EP3_RXCSR_H		(0x200D0136) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_RXCSR_H_Type;
#define REG_USB0_EP4_RXCSR_H		(*(RwReg *)0x200D0146UL)

#else
#define REG_USB0_EP4_RXCSR_H		(0x200D0146) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_RXCSR_H_Type;
#define REG_USB0_EP5_RXCSR_H		(*(RwReg *)0x200D0156UL)

#else
#define REG_USB0_EP5_RXCSR_H		(0x200D0156) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_RXCSR_H_Type;
#define REG_USB0_EP6_RXCSR_H		(*(RwReg *)0x200D0166UL)

#else
#define REG_USB0_EP6_RXCSR_H		(0x200D0166) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_RXCSR_H_Type;
#define REG_USB0_EP7_RXCSR_H		(*(RwReg *)0x200D0176UL)

#else
#define REG_USB0_EP7_RXCSR_H		(0x200D0176) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_RXCSR_H_Type;
#define REG_USB0_EP8_RXCSR_H		(*(RwReg *)0x200D0186UL)

#else
#define REG_USB0_EP8_RXCSR_H		(0x200D0186) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_RXCSR_H_Type;
#define REG_USB0_EP9_RXCSR_H		(*(RwReg *)0x200D0196UL)

#else
#define REG_USB0_EP9_RXCSR_H		(0x200D0196) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_RXCSR_H_Type;
#define REG_USB0_EP10_RXCSR_H		(*(RwReg *)0x200D01A6UL)

#else
#define REG_USB0_EP10_RXCSR_H		(0x200D01A6) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_RXCSR_H : (16) USB0 EPn Receive Configuration and Status (Host) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t RXTOERR:1;			/*!< bit	2	Rx Timeout Error	*/
		uint32_t NAKTODERR:1;			/*!< bit	3	NAK Timeout Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t REQPKT:1;			/*!< bit	5	Request Packet	*/
		uint32_t RXSTALL:1;			/*!< bit	6	Rx STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t DATGL:1;			/*!< bit	9	Data Toggle	*/
		uint32_t DATGLEN:1;			/*!< bit	10	Data Toggle Write Enable	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t PIDERR:1;			/*!< bit	12	Packet ID Error	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t AUTOREQ:1;			/*!< bit	14	Auto Request Clear Enable	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_RXCSR_H_Type;
#define REG_USB0_EP11_RXCSR_H		(*(RwReg *)0x200D01B6UL)

#else
#define REG_USB0_EP11_RXCSR_H		(0x200D01B6) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Host) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_RXCSR_P_Type;
#define REG_USB0_EP0_RXCSR_P		(*(RwReg *)0x200D0106UL)

#else
#define REG_USB0_EP0_RXCSR_P		(0x200D0106) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_RXCSR_P_Type;
#define REG_USB0_EP1_RXCSR_P		(*(RwReg *)0x200D0116UL)

#else
#define REG_USB0_EP1_RXCSR_P		(0x200D0116) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_RXCSR_P_Type;
#define REG_USB0_EP2_RXCSR_P		(*(RwReg *)0x200D0126UL)

#else
#define REG_USB0_EP2_RXCSR_P		(0x200D0126) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_RXCSR_P_Type;
#define REG_USB0_EP3_RXCSR_P		(*(RwReg *)0x200D0136UL)

#else
#define REG_USB0_EP3_RXCSR_P		(0x200D0136) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_RXCSR_P_Type;
#define REG_USB0_EP4_RXCSR_P		(*(RwReg *)0x200D0146UL)

#else
#define REG_USB0_EP4_RXCSR_P		(0x200D0146) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_RXCSR_P_Type;
#define REG_USB0_EP5_RXCSR_P		(*(RwReg *)0x200D0156UL)

#else
#define REG_USB0_EP5_RXCSR_P		(0x200D0156) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_RXCSR_P_Type;
#define REG_USB0_EP6_RXCSR_P		(*(RwReg *)0x200D0166UL)

#else
#define REG_USB0_EP6_RXCSR_P		(0x200D0166) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_RXCSR_P_Type;
#define REG_USB0_EP7_RXCSR_P		(*(RwReg *)0x200D0176UL)

#else
#define REG_USB0_EP7_RXCSR_P		(0x200D0176) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_RXCSR_P_Type;
#define REG_USB0_EP8_RXCSR_P		(*(RwReg *)0x200D0186UL)

#else
#define REG_USB0_EP8_RXCSR_P		(0x200D0186) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_RXCSR_P_Type;
#define REG_USB0_EP9_RXCSR_P		(*(RwReg *)0x200D0196UL)

#else
#define REG_USB0_EP9_RXCSR_P		(0x200D0196) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_RXCSR_P_Type;
#define REG_USB0_EP10_RXCSR_P		(*(RwReg *)0x200D01A6UL)

#else
#define REG_USB0_EP10_RXCSR_P		(0x200D01A6) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_RXCSR_P : (16) USB0 EPn Receive Configuration and Status (Peripheral) Register ----- */
typedef union {
	struct {
		uint32_t RXPKTRDY:1;			/*!< bit	0	Rx Packet Ready	*/
		uint32_t FIFOFULL:1;			/*!< bit	1	FIFO Full	*/
		uint32_t ORUNERR:1;			/*!< bit	2	OUT Run Error	*/
		uint32_t DATAERR:1;			/*!< bit	3	Data Error	*/
		uint32_t FLUSHFIFO:1;			/*!< bit	4	Flush Endpoint FIFO	*/
		uint32_t SENDSTALL:1;			/*!< bit	5	Send STALL	*/
		uint32_t SENTSTALL:1;			/*!< bit	6	Sent STALL	*/
		uint32_t CLRDATATGL:1;			/*!< bit	7	Clear Endpoint Data Toggle	*/
		uint32_t INCOMPRX:1;			/*!< bit	8	Incomplete Rx	*/
		uint32_t :2;			/*!< bit	9..10	Reserved	*/
		uint32_t DMAREQMODE:1;			/*!< bit	11	DMA Mode Select	*/
		uint32_t DNYETPERR:1;			/*!< bit	12	Disable NYET Handshake	*/
		uint32_t DMAREQEN:1;			/*!< bit	13	DMA Request Enable Rx EP	*/
		uint32_t ISO:1;			/*!< bit	14	Isochronous Transfers	*/
		uint32_t AUTOCLR:1;			/*!< bit	15	Auto Clear Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_RXCSR_P_Type;
#define REG_USB0_EP11_RXCSR_P		(*(RwReg *)0x200D01B6UL)

#else
#define REG_USB0_EP11_RXCSR_P		(0x200D01B6) /**< \brief (USB0) USB0 EPn Receive Configuration and Status (Peripheral) Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_CNT0 : (16) USB0 EP0 Number of Received Bytes Register ----- */
typedef union {
	struct {
		uint32_t RXCNT:7;			/*!< bit	0..6	Rx Byte Count Value	*/
		uint32_t :9;			/*!< bit	7..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_CNT0_Type;
#define REG_USB0_EP0_CNT0		(*(RwReg *)0x200D0108UL)

#else
#define REG_USB0_EP0_CNT0		(0x200D0108) /**< \brief (USB0) USB0 EP0 Number of Received Bytes Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_RXCNT_Type;
#define REG_USB0_EP0_RXCNT		(*(RwReg *)0x200D0108UL)

#else
#define REG_USB0_EP0_RXCNT		(0x200D0108) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_RXCNT_Type;
#define REG_USB0_EP1_RXCNT		(*(RwReg *)0x200D0118UL)

#else
#define REG_USB0_EP1_RXCNT		(0x200D0118) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_RXCNT_Type;
#define REG_USB0_EP2_RXCNT		(*(RwReg *)0x200D0128UL)

#else
#define REG_USB0_EP2_RXCNT		(0x200D0128) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_RXCNT_Type;
#define REG_USB0_EP3_RXCNT		(*(RwReg *)0x200D0138UL)

#else
#define REG_USB0_EP3_RXCNT		(0x200D0138) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_RXCNT_Type;
#define REG_USB0_EP4_RXCNT		(*(RwReg *)0x200D0148UL)

#else
#define REG_USB0_EP4_RXCNT		(0x200D0148) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_RXCNT_Type;
#define REG_USB0_EP5_RXCNT		(*(RwReg *)0x200D0158UL)

#else
#define REG_USB0_EP5_RXCNT		(0x200D0158) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_RXCNT_Type;
#define REG_USB0_EP6_RXCNT		(*(RwReg *)0x200D0168UL)

#else
#define REG_USB0_EP6_RXCNT		(0x200D0168) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_RXCNT_Type;
#define REG_USB0_EP7_RXCNT		(*(RwReg *)0x200D0178UL)

#else
#define REG_USB0_EP7_RXCNT		(0x200D0178) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_RXCNT_Type;
#define REG_USB0_EP8_RXCNT		(*(RwReg *)0x200D0188UL)

#else
#define REG_USB0_EP8_RXCNT		(0x200D0188) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_RXCNT_Type;
#define REG_USB0_EP9_RXCNT		(*(RwReg *)0x200D0198UL)

#else
#define REG_USB0_EP9_RXCNT		(0x200D0198) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_RXCNT_Type;
#define REG_USB0_EP10_RXCNT		(*(RwReg *)0x200D01A8UL)

#else
#define REG_USB0_EP10_RXCNT		(0x200D01A8) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_RXCNT : (16) USB0 EPn Number of Bytes Received Register ----- */
typedef union {
	struct {
		uint32_t EPRXCNT:14;			/*!< bit	0..13	EP Rx Count	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_RXCNT_Type;
#define REG_USB0_EP11_RXCNT		(*(RwReg *)0x200D01B8UL)

#else
#define REG_USB0_EP11_RXCNT		(0x200D01B8) /**< \brief (USB0) USB0 EPn Number of Bytes Received Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_TYPE0 : (8) USB0 EP0 Connection Type Register ----- */
typedef union {
	struct {
		uint32_t SPEED:2;			/*!< bit	0..1	Speed of Operation Value	*/
		uint32_t :6;			/*!< bit	2..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_TYPE0_Type;
#define REG_USB0_EP0_TYPE0		(*(RwReg *)0x200D010AUL)

#else
#define REG_USB0_EP0_TYPE0		(0x200D010A) /**< \brief (USB0) USB0 EP0 Connection Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_TXTYPE_Type;
#define REG_USB0_EP0_TXTYPE		(*(RwReg *)0x200D010AUL)

#else
#define REG_USB0_EP0_TXTYPE		(0x200D010A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_TXTYPE_Type;
#define REG_USB0_EP1_TXTYPE		(*(RwReg *)0x200D011AUL)

#else
#define REG_USB0_EP1_TXTYPE		(0x200D011A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_TXTYPE_Type;
#define REG_USB0_EP2_TXTYPE		(*(RwReg *)0x200D012AUL)

#else
#define REG_USB0_EP2_TXTYPE		(0x200D012A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_TXTYPE_Type;
#define REG_USB0_EP3_TXTYPE		(*(RwReg *)0x200D013AUL)

#else
#define REG_USB0_EP3_TXTYPE		(0x200D013A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_TXTYPE_Type;
#define REG_USB0_EP4_TXTYPE		(*(RwReg *)0x200D014AUL)

#else
#define REG_USB0_EP4_TXTYPE		(0x200D014A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_TXTYPE_Type;
#define REG_USB0_EP5_TXTYPE		(*(RwReg *)0x200D015AUL)

#else
#define REG_USB0_EP5_TXTYPE		(0x200D015A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_TXTYPE_Type;
#define REG_USB0_EP6_TXTYPE		(*(RwReg *)0x200D016AUL)

#else
#define REG_USB0_EP6_TXTYPE		(0x200D016A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_TXTYPE_Type;
#define REG_USB0_EP7_TXTYPE		(*(RwReg *)0x200D017AUL)

#else
#define REG_USB0_EP7_TXTYPE		(0x200D017A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_TXTYPE_Type;
#define REG_USB0_EP8_TXTYPE		(*(RwReg *)0x200D018AUL)

#else
#define REG_USB0_EP8_TXTYPE		(0x200D018A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_TXTYPE_Type;
#define REG_USB0_EP9_TXTYPE		(*(RwReg *)0x200D019AUL)

#else
#define REG_USB0_EP9_TXTYPE		(0x200D019A) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_TXTYPE_Type;
#define REG_USB0_EP10_TXTYPE		(*(RwReg *)0x200D01AAUL)

#else
#define REG_USB0_EP10_TXTYPE		(0x200D01AA) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_TXTYPE : (8) USB0 EPn Transmit Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_TXTYPE_Type;
#define REG_USB0_EP11_TXTYPE		(*(RwReg *)0x200D01BAUL)

#else
#define REG_USB0_EP11_TXTYPE		(0x200D01BA) /**< \brief (USB0) USB0 EPn Transmit Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_NAKLIMIT0 : (8) USB0 EP0 NAK Limit Register ----- */
typedef union {
	struct {
		uint32_t VALUE:5;			/*!< bit	0..4	Endpoint 0 Timeout Value (in Frames)	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_NAKLIMIT0_Type;
#define REG_USB0_EP0_NAKLIMIT0		(*(RwReg *)0x200D010BUL)

#else
#define REG_USB0_EP0_NAKLIMIT0		(0x200D010B) /**< \brief (USB0) USB0 EP0 NAK Limit Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_TXINTERVAL_Type;
#define REG_USB0_EP0_TXINTERVAL		(*(RwReg *)0x200D010BUL)

#else
#define REG_USB0_EP0_TXINTERVAL		(0x200D010B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_TXINTERVAL_Type;
#define REG_USB0_EP1_TXINTERVAL		(*(RwReg *)0x200D011BUL)

#else
#define REG_USB0_EP1_TXINTERVAL		(0x200D011B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_TXINTERVAL_Type;
#define REG_USB0_EP2_TXINTERVAL		(*(RwReg *)0x200D012BUL)

#else
#define REG_USB0_EP2_TXINTERVAL		(0x200D012B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_TXINTERVAL_Type;
#define REG_USB0_EP3_TXINTERVAL		(*(RwReg *)0x200D013BUL)

#else
#define REG_USB0_EP3_TXINTERVAL		(0x200D013B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_TXINTERVAL_Type;
#define REG_USB0_EP4_TXINTERVAL		(*(RwReg *)0x200D014BUL)

#else
#define REG_USB0_EP4_TXINTERVAL		(0x200D014B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_TXINTERVAL_Type;
#define REG_USB0_EP5_TXINTERVAL		(*(RwReg *)0x200D015BUL)

#else
#define REG_USB0_EP5_TXINTERVAL		(0x200D015B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_TXINTERVAL_Type;
#define REG_USB0_EP6_TXINTERVAL		(*(RwReg *)0x200D016BUL)

#else
#define REG_USB0_EP6_TXINTERVAL		(0x200D016B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_TXINTERVAL_Type;
#define REG_USB0_EP7_TXINTERVAL		(*(RwReg *)0x200D017BUL)

#else
#define REG_USB0_EP7_TXINTERVAL		(0x200D017B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_TXINTERVAL_Type;
#define REG_USB0_EP8_TXINTERVAL		(*(RwReg *)0x200D018BUL)

#else
#define REG_USB0_EP8_TXINTERVAL		(0x200D018B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_TXINTERVAL_Type;
#define REG_USB0_EP9_TXINTERVAL		(*(RwReg *)0x200D019BUL)

#else
#define REG_USB0_EP9_TXINTERVAL		(0x200D019B) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_TXINTERVAL_Type;
#define REG_USB0_EP10_TXINTERVAL		(*(RwReg *)0x200D01ABUL)

#else
#define REG_USB0_EP10_TXINTERVAL		(0x200D01AB) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_TXINTERVAL : (8) USB0 EPn Transmit Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_TXINTERVAL_Type;
#define REG_USB0_EP11_TXINTERVAL		(*(RwReg *)0x200D01BBUL)

#else
#define REG_USB0_EP11_TXINTERVAL		(0x200D01BB) /**< \brief (USB0) USB0 EPn Transmit Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_RXTYPE_Type;
#define REG_USB0_EP0_RXTYPE		(*(RwReg *)0x200D010CUL)

#else
#define REG_USB0_EP0_RXTYPE		(0x200D010C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_RXTYPE_Type;
#define REG_USB0_EP1_RXTYPE		(*(RwReg *)0x200D011CUL)

#else
#define REG_USB0_EP1_RXTYPE		(0x200D011C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_RXTYPE_Type;
#define REG_USB0_EP2_RXTYPE		(*(RwReg *)0x200D012CUL)

#else
#define REG_USB0_EP2_RXTYPE		(0x200D012C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_RXTYPE_Type;
#define REG_USB0_EP3_RXTYPE		(*(RwReg *)0x200D013CUL)

#else
#define REG_USB0_EP3_RXTYPE		(0x200D013C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_RXTYPE_Type;
#define REG_USB0_EP4_RXTYPE		(*(RwReg *)0x200D014CUL)

#else
#define REG_USB0_EP4_RXTYPE		(0x200D014C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_RXTYPE_Type;
#define REG_USB0_EP5_RXTYPE		(*(RwReg *)0x200D015CUL)

#else
#define REG_USB0_EP5_RXTYPE		(0x200D015C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_RXTYPE_Type;
#define REG_USB0_EP6_RXTYPE		(*(RwReg *)0x200D016CUL)

#else
#define REG_USB0_EP6_RXTYPE		(0x200D016C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_RXTYPE_Type;
#define REG_USB0_EP7_RXTYPE		(*(RwReg *)0x200D017CUL)

#else
#define REG_USB0_EP7_RXTYPE		(0x200D017C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_RXTYPE_Type;
#define REG_USB0_EP8_RXTYPE		(*(RwReg *)0x200D018CUL)

#else
#define REG_USB0_EP8_RXTYPE		(0x200D018C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_RXTYPE_Type;
#define REG_USB0_EP9_RXTYPE		(*(RwReg *)0x200D019CUL)

#else
#define REG_USB0_EP9_RXTYPE		(0x200D019C) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_RXTYPE_Type;
#define REG_USB0_EP10_RXTYPE		(*(RwReg *)0x200D01ACUL)

#else
#define REG_USB0_EP10_RXTYPE		(0x200D01AC) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_RXTYPE : (8) USB0 EPn Receive Type Register ----- */
typedef union {
	struct {
		uint32_t TGTEP:4;			/*!< bit	0..3	Target Endpoint Number	*/
		uint32_t PROTOCOL:2;			/*!< bit	4..5	Protocol for Transfer	*/
		uint32_t SPEED:2;			/*!< bit	6..7	Speed of Operation Value	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_RXTYPE_Type;
#define REG_USB0_EP11_RXTYPE		(*(RwReg *)0x200D01BCUL)

#else
#define REG_USB0_EP11_RXTYPE		(0x200D01BC) /**< \brief (USB0) USB0 EPn Receive Type Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_RXINTERVAL_Type;
#define REG_USB0_EP0_RXINTERVAL		(*(RwReg *)0x200D010DUL)

#else
#define REG_USB0_EP0_RXINTERVAL		(0x200D010D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP1_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP1_RXINTERVAL_Type;
#define REG_USB0_EP1_RXINTERVAL		(*(RwReg *)0x200D011DUL)

#else
#define REG_USB0_EP1_RXINTERVAL		(0x200D011D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP2_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP2_RXINTERVAL_Type;
#define REG_USB0_EP2_RXINTERVAL		(*(RwReg *)0x200D012DUL)

#else
#define REG_USB0_EP2_RXINTERVAL		(0x200D012D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP3_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP3_RXINTERVAL_Type;
#define REG_USB0_EP3_RXINTERVAL		(*(RwReg *)0x200D013DUL)

#else
#define REG_USB0_EP3_RXINTERVAL		(0x200D013D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP4_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP4_RXINTERVAL_Type;
#define REG_USB0_EP4_RXINTERVAL		(*(RwReg *)0x200D014DUL)

#else
#define REG_USB0_EP4_RXINTERVAL		(0x200D014D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP5_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP5_RXINTERVAL_Type;
#define REG_USB0_EP5_RXINTERVAL		(*(RwReg *)0x200D015DUL)

#else
#define REG_USB0_EP5_RXINTERVAL		(0x200D015D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP6_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP6_RXINTERVAL_Type;
#define REG_USB0_EP6_RXINTERVAL		(*(RwReg *)0x200D016DUL)

#else
#define REG_USB0_EP6_RXINTERVAL		(0x200D016D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP7_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP7_RXINTERVAL_Type;
#define REG_USB0_EP7_RXINTERVAL		(*(RwReg *)0x200D017DUL)

#else
#define REG_USB0_EP7_RXINTERVAL		(0x200D017D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP8_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP8_RXINTERVAL_Type;
#define REG_USB0_EP8_RXINTERVAL		(*(RwReg *)0x200D018DUL)

#else
#define REG_USB0_EP8_RXINTERVAL		(0x200D018D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP9_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP9_RXINTERVAL_Type;
#define REG_USB0_EP9_RXINTERVAL		(*(RwReg *)0x200D019DUL)

#else
#define REG_USB0_EP9_RXINTERVAL		(0x200D019D) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP10_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP10_RXINTERVAL_Type;
#define REG_USB0_EP10_RXINTERVAL		(*(RwReg *)0x200D01ADUL)

#else
#define REG_USB0_EP10_RXINTERVAL		(0x200D01AD) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP11_RXINTERVAL : (8) USB0 EPn Receive Polling Interval Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP11_RXINTERVAL_Type;
#define REG_USB0_EP11_RXINTERVAL		(*(RwReg *)0x200D01BDUL)

#else
#define REG_USB0_EP11_RXINTERVAL		(0x200D01BD) /**< \brief (USB0) USB0 EPn Receive Polling Interval Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_EP0_CFGDATA0 : (8) USB0 EP0 Configuration Information Register ----- */
typedef union {
	struct {
		uint32_t UTMIWID:1;			/*!< bit	0	UTMI Data Width	*/
		uint32_t SOFTCON:1;			/*!< bit	1	Soft Connect Enable	*/
		uint32_t DYNFIFO:1;			/*!< bit	2	Dynamic FIFO Size Enable	*/
		uint32_t HBTX:1;			/*!< bit	3	High Bandwidth Tx Enable	*/
		uint32_t HBRX:1;			/*!< bit	4	High Bandwidth Rx Enable	*/
		uint32_t BIGEND:1;			/*!< bit	5	Big Endian Data	*/
		uint32_t MPTX:1;			/*!< bit	6	Multi-Packet Split for Tx Enable	*/
		uint32_t MPRX:1;			/*!< bit	7	Multi-Packet Aggregate for Rx Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_EP0_CFGDATA0_Type;
#define REG_USB0_EP0_CFGDATA0		(*(RwReg *)0x200D010FUL)

#else
#define REG_USB0_EP0_CFGDATA0		(0x200D010F) /**< \brief (USB0) USB0 EP0 Configuration Information Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA_IRQ : (8) USB0 DMA Interrupt Register ----- */
typedef union {
	struct {
		uint32_t D0:1;			/*!< bit	0	DMA 0 Interrupt Pending Status	*/
		uint32_t D1:1;			/*!< bit	1	DMA 1 Interrupt Pending Status	*/
		uint32_t D2:1;			/*!< bit	2	DMA 2 Interrupt Pending Status	*/
		uint32_t D3:1;			/*!< bit	3	DMA 3 Interrupt Pending Status	*/
		uint32_t D4:1;			/*!< bit	4	DMA 4 Interrupt Pending Status	*/
		uint32_t D5:1;			/*!< bit	5	DMA 5 Interrupt Pending Status	*/
		uint32_t D6:1;			/*!< bit	6	DMA 6 Interrupt Pending Status	*/
		uint32_t D7:1;			/*!< bit	7	DMA 7 Interrupt Pending Status	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA_IRQ_Type;
#define REG_USB0_DMA_IRQ		(*(RwReg *)0x200D0200UL)

#else
#define REG_USB0_DMA_IRQ		(0x200D0200) /**< \brief (USB0) USB0 DMA Interrupt Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA0_CTL : (16) USB0 DMA Channel n Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Enable	*/
		uint32_t DIR:1;			/*!< bit	1	DMA Transfer Direction	*/
		uint32_t MODE:1;			/*!< bit	2	DMA Mode	*/
		uint32_t IE:1;			/*!< bit	3	DMA Interrupt Enable	*/
		uint32_t EP:4;			/*!< bit	4..7	DMA Channel Endpoint Assignment	*/
		uint32_t ERR:1;			/*!< bit	8	Bus Error	*/
		uint32_t BRSTM:2;			/*!< bit	9..10	Burst Mode	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA0_CTL_Type;
#define REG_USB0_DMA0_CTL		(*(RwReg *)0x200D0204UL)

#else
#define REG_USB0_DMA0_CTL		(0x200D0204) /**< \brief (USB0) USB0 DMA Channel n Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA1_CTL : (16) USB0 DMA Channel n Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Enable	*/
		uint32_t DIR:1;			/*!< bit	1	DMA Transfer Direction	*/
		uint32_t MODE:1;			/*!< bit	2	DMA Mode	*/
		uint32_t IE:1;			/*!< bit	3	DMA Interrupt Enable	*/
		uint32_t EP:4;			/*!< bit	4..7	DMA Channel Endpoint Assignment	*/
		uint32_t ERR:1;			/*!< bit	8	Bus Error	*/
		uint32_t BRSTM:2;			/*!< bit	9..10	Burst Mode	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA1_CTL_Type;
#define REG_USB0_DMA1_CTL		(*(RwReg *)0x200D0214UL)

#else
#define REG_USB0_DMA1_CTL		(0x200D0214) /**< \brief (USB0) USB0 DMA Channel n Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA2_CTL : (16) USB0 DMA Channel n Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Enable	*/
		uint32_t DIR:1;			/*!< bit	1	DMA Transfer Direction	*/
		uint32_t MODE:1;			/*!< bit	2	DMA Mode	*/
		uint32_t IE:1;			/*!< bit	3	DMA Interrupt Enable	*/
		uint32_t EP:4;			/*!< bit	4..7	DMA Channel Endpoint Assignment	*/
		uint32_t ERR:1;			/*!< bit	8	Bus Error	*/
		uint32_t BRSTM:2;			/*!< bit	9..10	Burst Mode	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA2_CTL_Type;
#define REG_USB0_DMA2_CTL		(*(RwReg *)0x200D0224UL)

#else
#define REG_USB0_DMA2_CTL		(0x200D0224) /**< \brief (USB0) USB0 DMA Channel n Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA3_CTL : (16) USB0 DMA Channel n Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Enable	*/
		uint32_t DIR:1;			/*!< bit	1	DMA Transfer Direction	*/
		uint32_t MODE:1;			/*!< bit	2	DMA Mode	*/
		uint32_t IE:1;			/*!< bit	3	DMA Interrupt Enable	*/
		uint32_t EP:4;			/*!< bit	4..7	DMA Channel Endpoint Assignment	*/
		uint32_t ERR:1;			/*!< bit	8	Bus Error	*/
		uint32_t BRSTM:2;			/*!< bit	9..10	Burst Mode	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA3_CTL_Type;
#define REG_USB0_DMA3_CTL		(*(RwReg *)0x200D0234UL)

#else
#define REG_USB0_DMA3_CTL		(0x200D0234) /**< \brief (USB0) USB0 DMA Channel n Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA4_CTL : (16) USB0 DMA Channel n Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Enable	*/
		uint32_t DIR:1;			/*!< bit	1	DMA Transfer Direction	*/
		uint32_t MODE:1;			/*!< bit	2	DMA Mode	*/
		uint32_t IE:1;			/*!< bit	3	DMA Interrupt Enable	*/
		uint32_t EP:4;			/*!< bit	4..7	DMA Channel Endpoint Assignment	*/
		uint32_t ERR:1;			/*!< bit	8	Bus Error	*/
		uint32_t BRSTM:2;			/*!< bit	9..10	Burst Mode	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA4_CTL_Type;
#define REG_USB0_DMA4_CTL		(*(RwReg *)0x200D0244UL)

#else
#define REG_USB0_DMA4_CTL		(0x200D0244) /**< \brief (USB0) USB0 DMA Channel n Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA5_CTL : (16) USB0 DMA Channel n Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Enable	*/
		uint32_t DIR:1;			/*!< bit	1	DMA Transfer Direction	*/
		uint32_t MODE:1;			/*!< bit	2	DMA Mode	*/
		uint32_t IE:1;			/*!< bit	3	DMA Interrupt Enable	*/
		uint32_t EP:4;			/*!< bit	4..7	DMA Channel Endpoint Assignment	*/
		uint32_t ERR:1;			/*!< bit	8	Bus Error	*/
		uint32_t BRSTM:2;			/*!< bit	9..10	Burst Mode	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA5_CTL_Type;
#define REG_USB0_DMA5_CTL		(*(RwReg *)0x200D0254UL)

#else
#define REG_USB0_DMA5_CTL		(0x200D0254) /**< \brief (USB0) USB0 DMA Channel n Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA6_CTL : (16) USB0 DMA Channel n Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Enable	*/
		uint32_t DIR:1;			/*!< bit	1	DMA Transfer Direction	*/
		uint32_t MODE:1;			/*!< bit	2	DMA Mode	*/
		uint32_t IE:1;			/*!< bit	3	DMA Interrupt Enable	*/
		uint32_t EP:4;			/*!< bit	4..7	DMA Channel Endpoint Assignment	*/
		uint32_t ERR:1;			/*!< bit	8	Bus Error	*/
		uint32_t BRSTM:2;			/*!< bit	9..10	Burst Mode	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA6_CTL_Type;
#define REG_USB0_DMA6_CTL		(*(RwReg *)0x200D0264UL)

#else
#define REG_USB0_DMA6_CTL		(0x200D0264) /**< \brief (USB0) USB0 DMA Channel n Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA7_CTL : (16) USB0 DMA Channel n Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	DMA Enable	*/
		uint32_t DIR:1;			/*!< bit	1	DMA Transfer Direction	*/
		uint32_t MODE:1;			/*!< bit	2	DMA Mode	*/
		uint32_t IE:1;			/*!< bit	3	DMA Interrupt Enable	*/
		uint32_t EP:4;			/*!< bit	4..7	DMA Channel Endpoint Assignment	*/
		uint32_t ERR:1;			/*!< bit	8	Bus Error	*/
		uint32_t BRSTM:2;			/*!< bit	9..10	Burst Mode	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA7_CTL_Type;
#define REG_USB0_DMA7_CTL		(*(RwReg *)0x200D0274UL)

#else
#define REG_USB0_DMA7_CTL		(0x200D0274) /**< \brief (USB0) USB0 DMA Channel n Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA0_ADDR : (32) USB0 DMA Channel n Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA0_ADDR_Type;
#define REG_USB0_DMA0_ADDR		(*(RwReg *)0x200D0208UL)

#else
#define REG_USB0_DMA0_ADDR		(0x200D0208) /**< \brief (USB0) USB0 DMA Channel n Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA1_ADDR : (32) USB0 DMA Channel n Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA1_ADDR_Type;
#define REG_USB0_DMA1_ADDR		(*(RwReg *)0x200D0218UL)

#else
#define REG_USB0_DMA1_ADDR		(0x200D0218) /**< \brief (USB0) USB0 DMA Channel n Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA2_ADDR : (32) USB0 DMA Channel n Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA2_ADDR_Type;
#define REG_USB0_DMA2_ADDR		(*(RwReg *)0x200D0228UL)

#else
#define REG_USB0_DMA2_ADDR		(0x200D0228) /**< \brief (USB0) USB0 DMA Channel n Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA3_ADDR : (32) USB0 DMA Channel n Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA3_ADDR_Type;
#define REG_USB0_DMA3_ADDR		(*(RwReg *)0x200D0238UL)

#else
#define REG_USB0_DMA3_ADDR		(0x200D0238) /**< \brief (USB0) USB0 DMA Channel n Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA4_ADDR : (32) USB0 DMA Channel n Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA4_ADDR_Type;
#define REG_USB0_DMA4_ADDR		(*(RwReg *)0x200D0248UL)

#else
#define REG_USB0_DMA4_ADDR		(0x200D0248) /**< \brief (USB0) USB0 DMA Channel n Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA5_ADDR : (32) USB0 DMA Channel n Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA5_ADDR_Type;
#define REG_USB0_DMA5_ADDR		(*(RwReg *)0x200D0258UL)

#else
#define REG_USB0_DMA5_ADDR		(0x200D0258) /**< \brief (USB0) USB0 DMA Channel n Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA6_ADDR : (32) USB0 DMA Channel n Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA6_ADDR_Type;
#define REG_USB0_DMA6_ADDR		(*(RwReg *)0x200D0268UL)

#else
#define REG_USB0_DMA6_ADDR		(0x200D0268) /**< \brief (USB0) USB0 DMA Channel n Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA7_ADDR : (32) USB0 DMA Channel n Address Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA7_ADDR_Type;
#define REG_USB0_DMA7_ADDR		(*(RwReg *)0x200D0278UL)

#else
#define REG_USB0_DMA7_ADDR		(0x200D0278) /**< \brief (USB0) USB0 DMA Channel n Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA0_CNT : (32) USB0 DMA Channel n Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA0_CNT_Type;
#define REG_USB0_DMA0_CNT		(*(RwReg *)0x200D020CUL)

#else
#define REG_USB0_DMA0_CNT		(0x200D020C) /**< \brief (USB0) USB0 DMA Channel n Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA1_CNT : (32) USB0 DMA Channel n Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA1_CNT_Type;
#define REG_USB0_DMA1_CNT		(*(RwReg *)0x200D021CUL)

#else
#define REG_USB0_DMA1_CNT		(0x200D021C) /**< \brief (USB0) USB0 DMA Channel n Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA2_CNT : (32) USB0 DMA Channel n Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA2_CNT_Type;
#define REG_USB0_DMA2_CNT		(*(RwReg *)0x200D022CUL)

#else
#define REG_USB0_DMA2_CNT		(0x200D022C) /**< \brief (USB0) USB0 DMA Channel n Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA3_CNT : (32) USB0 DMA Channel n Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA3_CNT_Type;
#define REG_USB0_DMA3_CNT		(*(RwReg *)0x200D023CUL)

#else
#define REG_USB0_DMA3_CNT		(0x200D023C) /**< \brief (USB0) USB0 DMA Channel n Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA4_CNT : (32) USB0 DMA Channel n Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA4_CNT_Type;
#define REG_USB0_DMA4_CNT		(*(RwReg *)0x200D024CUL)

#else
#define REG_USB0_DMA4_CNT		(0x200D024C) /**< \brief (USB0) USB0 DMA Channel n Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA5_CNT : (32) USB0 DMA Channel n Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA5_CNT_Type;
#define REG_USB0_DMA5_CNT		(*(RwReg *)0x200D025CUL)

#else
#define REG_USB0_DMA5_CNT		(0x200D025C) /**< \brief (USB0) USB0 DMA Channel n Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA6_CNT : (32) USB0 DMA Channel n Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA6_CNT_Type;
#define REG_USB0_DMA6_CNT		(*(RwReg *)0x200D026CUL)

#else
#define REG_USB0_DMA6_CNT		(0x200D026C) /**< \brief (USB0) USB0 DMA Channel n Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_DMA7_CNT : (32) USB0 DMA Channel n Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_DMA7_CNT_Type;
#define REG_USB0_DMA7_CNT		(*(RwReg *)0x200D027CUL)

#else
#define REG_USB0_DMA7_CNT		(0x200D027C) /**< \brief (USB0) USB0 DMA Channel n Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT0 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT0_Type;
#define REG_USB0_RQPKTCNT0		(*(RwReg *)0x200D0300UL)

#else
#define REG_USB0_RQPKTCNT0		(0x200D0300) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT1 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT1_Type;
#define REG_USB0_RQPKTCNT1		(*(RwReg *)0x200D0304UL)

#else
#define REG_USB0_RQPKTCNT1		(0x200D0304) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT2 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT2_Type;
#define REG_USB0_RQPKTCNT2		(*(RwReg *)0x200D0308UL)

#else
#define REG_USB0_RQPKTCNT2		(0x200D0308) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT3 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT3_Type;
#define REG_USB0_RQPKTCNT3		(*(RwReg *)0x200D030CUL)

#else
#define REG_USB0_RQPKTCNT3		(0x200D030C) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT4 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT4_Type;
#define REG_USB0_RQPKTCNT4		(*(RwReg *)0x200D0310UL)

#else
#define REG_USB0_RQPKTCNT4		(0x200D0310) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT5 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT5_Type;
#define REG_USB0_RQPKTCNT5		(*(RwReg *)0x200D0314UL)

#else
#define REG_USB0_RQPKTCNT5		(0x200D0314) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT6 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT6_Type;
#define REG_USB0_RQPKTCNT6		(*(RwReg *)0x200D0318UL)

#else
#define REG_USB0_RQPKTCNT6		(0x200D0318) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT7 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT7_Type;
#define REG_USB0_RQPKTCNT7		(*(RwReg *)0x200D031CUL)

#else
#define REG_USB0_RQPKTCNT7		(0x200D031C) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT8 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT8_Type;
#define REG_USB0_RQPKTCNT8		(*(RwReg *)0x200D0320UL)

#else
#define REG_USB0_RQPKTCNT8		(0x200D0320) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT9 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT9_Type;
#define REG_USB0_RQPKTCNT9		(*(RwReg *)0x200D0324UL)

#else
#define REG_USB0_RQPKTCNT9		(0x200D0324) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_RQPKTCNT10 : (16) USB0 EPn Request Packet Count Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_RQPKTCNT10_Type;
#define REG_USB0_RQPKTCNT10		(*(RwReg *)0x200D0328UL)

#else
#define REG_USB0_RQPKTCNT10		(0x200D0328) /**< \brief (USB0) USB0 EPn Request Packet Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_CT_UCH : (16) USB0 Chirp Timeout Register ----- */
typedef union {
	struct {
		uint32_t VALUE:15;			/*!< bit	0..14	Chirp Timeout Value	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_CT_UCH_Type;
#define REG_USB0_CT_UCH		(*(RwReg *)0x200D0344UL)

#else
#define REG_USB0_CT_UCH		(0x200D0344) /**< \brief (USB0) USB0 Chirp Timeout Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_CT_HHSRTN : (16) USB0 Host High Speed Return to Normal Register ----- */
typedef union {
	struct {
		uint32_t VALUE:15;			/*!< bit	0..14	Host High Speed Return to Normal Value	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_CT_HHSRTN_Type;
#define REG_USB0_CT_HHSRTN		(*(RwReg *)0x200D0346UL)

#else
#define REG_USB0_CT_HHSRTN		(0x200D0346) /**< \brief (USB0) USB0 Host High Speed Return to Normal Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_CT_HSBT : (16) USB0 High Speed Timeout Register ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	HS Timeout Adder	*/
		uint32_t :12;			/*!< bit	4..15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_CT_HSBT_Type;
#define REG_USB0_CT_HSBT		(*(RwReg *)0x200D0348UL)

#else
#define REG_USB0_CT_HSBT		(0x200D0348) /**< \brief (USB0) USB0 High Speed Timeout Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_LPM_ATTR : (16) USB0 LPM Attribute Register ----- */
typedef union {
	struct {
		uint32_t LINKSTATE:4;			/*!< bit	0..3	Link State	*/
		uint32_t HIRD:4;			/*!< bit	4..7	Host Initiated Resume Duration	*/
		uint32_t RMTWAK:1;			/*!< bit	8	Remote Wakeup Enable	*/
		uint32_t :3;			/*!< bit	9..11	Reserved	*/
		uint32_t EP:4;			/*!< bit	12..15	Endpoint	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_LPM_ATTR_Type;
#define REG_USB0_LPM_ATTR		(*(RwReg *)0x200D0360UL)

#else
#define REG_USB0_LPM_ATTR		(0x200D0360) /**< \brief (USB0) USB0 LPM Attribute Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_LPM_CTL : (8) USB0 LPM Control Register ----- */
typedef union {
	struct {
		uint32_t TX:1;			/*!< bit	0	LPM Transmit	*/
		uint32_t RESUME:1;			/*!< bit	1	LPM Resume (Remote Wakeup)	*/
		uint32_t EN:2;			/*!< bit	2..3	LPM Enable	*/
		uint32_t NAK:1;			/*!< bit	4	LPM NAK Enable	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_LPM_CTL_Type;
#define REG_USB0_LPM_CTL		(*(RwReg *)0x200D0362UL)

#else
#define REG_USB0_LPM_CTL		(0x200D0362) /**< \brief (USB0) USB0 LPM Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_LPM_IEN : (8) USB0 LPM Interrupt Enable Register ----- */
typedef union {
	struct {
		uint32_t LPMST:1;			/*!< bit	0	LPM STALL Interrupt Enable	*/
		uint32_t LPMNY:1;			/*!< bit	1	LPM NYET Interrupt Enable	*/
		uint32_t LPMACK:1;			/*!< bit	2	LPM ACK Interrupt Enable	*/
		uint32_t LPMNC:1;			/*!< bit	3	LPM NYET Control Interrupt Enable	*/
		uint32_t LPMRES:1;			/*!< bit	4	LPM Resume Interrupt Enable	*/
		uint32_t LPMERR:1;			/*!< bit	5	LPM Error Interrupt Enable	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_LPM_IEN_Type;
#define REG_USB0_LPM_IEN		(*(RwReg *)0x200D0363UL)

#else
#define REG_USB0_LPM_IEN		(0x200D0363) /**< \brief (USB0) USB0 LPM Interrupt Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_LPM_IRQ : (8) USB0 LPM Interrupt Status Register ----- */
typedef union {
	struct {
		uint32_t LPMST:1;			/*!< bit	0	LPM STALL Interrupt	*/
		uint32_t LPMNY:1;			/*!< bit	1	LPM NYET Interrupt	*/
		uint32_t LPMACK:1;			/*!< bit	2	LPM ACK Interrupt	*/
		uint32_t LPMNC:1;			/*!< bit	3	LPM NYET Control Interrupt	*/
		uint32_t LPMRES:1;			/*!< bit	4	LPM Resume Interrupt	*/
		uint32_t LPMERR:1;			/*!< bit	5	LPM Error Interrupt	*/
		uint32_t :2;			/*!< bit	6..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_LPM_IRQ_Type;
#define REG_USB0_LPM_IRQ		(*(RwReg *)0x200D0364UL)

#else
#define REG_USB0_LPM_IRQ		(0x200D0364) /**< \brief (USB0) USB0 LPM Interrupt Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_LPM_FADDR : (8) USB0 LPM Function Address Register ----- */
typedef union {
	struct {
		uint32_t VALUE:7;			/*!< bit	0..6	Function Address Value	*/
		uint32_t :1;			/*!< bit	7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_LPM_FADDR_Type;
#define REG_USB0_LPM_FADDR		(*(RwReg *)0x200D0365UL)

#else
#define REG_USB0_LPM_FADDR		(0x200D0365) /**< \brief (USB0) USB0 LPM Function Address Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_VBUS_CTL : (8) USB0 VBUS Control Register ----- */
typedef union {
	struct {
		uint32_t INVDRV:1;			/*!< bit	0	VBUS Invert Drive	*/
		uint32_t DRVOD:1;			/*!< bit	1	VBUS Drive Open Drain	*/
		uint32_t DRVIEN:1;			/*!< bit	2	VBUS Drive Interrupt Enable	*/
		uint32_t DRVINT:1;			/*!< bit	3	VBUS Drive Interrupt	*/
		uint32_t DRV:1;			/*!< bit	4	VBUS Drive	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_VBUS_CTL_Type;
#define REG_USB0_VBUS_CTL		(*(RwReg *)0x200D0380UL)

#else
#define REG_USB0_VBUS_CTL		(0x200D0380) /**< \brief (USB0) USB0 VBUS Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_BAT_CHG : (8) USB0 Battery Charging Control Register ----- */
typedef union {
	struct {
		uint32_t SNSCONDET:1;			/*!< bit	0	Sense Connection Detection	*/
		uint32_t CONDET:1;			/*!< bit	1	Connected Detected	*/
		uint32_t SNSCHGDET:1;			/*!< bit	2	Sense Charger Detection	*/
		uint32_t CHGDET:1;			/*!< bit	3	Charging Port Detected	*/
		uint32_t DEDCHG:1;			/*!< bit	4	Dedicated Charging Port	*/
		uint32_t :3;			/*!< bit	5..7	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_BAT_CHG_Type;
#define REG_USB0_BAT_CHG		(*(RwReg *)0x200D0381UL)

#else
#define REG_USB0_BAT_CHG		(0x200D0381) /**< \brief (USB0) USB0 Battery Charging Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_PHY_CTL : (8) USB0 PHY Control Register ----- */
typedef union {
	struct {
		uint32_t HIBER:1;			/*!< bit	0	Hibernate	*/
		uint32_t RESTORE:1;			/*!< bit	1	Restore from Hibernate	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t DIS:1;			/*!< bit	4	Disable PHY	*/
		uint32_t :2;			/*!< bit	5..6	Reserved	*/
		uint32_t EN:1;			/*!< bit	7	PHY Enable	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_PHY_CTL_Type;
#define REG_USB0_PHY_CTL		(*(RwReg *)0x200D0394UL)

#else
#define REG_USB0_PHY_CTL		(0x200D0394) /**< \brief (USB0) USB0 PHY Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- USB0_PLL_OSC : (16) USB0 PLL and Oscillator Control Register ----- */
typedef union {
	struct {
		uint32_t DIVCLKIN:1;			/*!< bit	0	Divide CLKIN	*/
		uint32_t PLLM:6;			/*!< bit	1..6	PLL Multiplier Value	*/
		uint32_t PLLMSEL:1;			/*!< bit	7	PLL Multiplier Select	*/
		uint32_t :6;			/*!< bit	8..13	Reserved	*/
		uint32_t PLLSTABLE:1;			/*!< bit	14	PLL Stable	*/
		uint32_t :1;			/*!< bit	15	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} USB0_PLL_OSC_Type;
#define REG_USB0_PLL_OSC		(*(RwReg *)0x200D0398UL)

#else
#define REG_USB0_PLL_OSC		(0x200D0398) /**< \brief (USB0) USB0 PLL and Oscillator Control Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO USB0_FADDR_Type		FADDR;		/**< \brief USB0 Function Address Register */
	__IO USB0_POWER_Type		POWER;		/**< \brief USB0 Power and Device Control Register */
	__IO USB0_INTRTX_Type		INTRTX;		/**< \brief USB0 Transmit Interrupt Register */
	__IO USB0_INTRRX_Type		INTRRX;		/**< \brief USB0 Receive Interrupt Register */
	__IO USB0_INTRTXE_Type		INTRTXE;		/**< \brief USB0 Transmit Interrupt Enable Register */
	__IO USB0_INTRRXE_Type		INTRRXE;		/**< \brief USB0 Receive Interrupt Enable Register */
	__IO USB0_IRQ_Type		IRQ;		/**< \brief USB0 Common Interrupts Register */
	__IO USB0_IEN_Type		IEN;		/**< \brief USB0 Common Interrupts Enable Register */
	__IO USB0_FRAME_Type		FRAME;		/**< \brief USB0 Frame Number Register */
	__IO USB0_INDEX_Type		INDEX;		/**< \brief USB0 Index Register */
	__IO USB0_TESTMODE_Type		TESTMODE;		/**< \brief USB0 Testmode Register */
	__IO USB0_EPI_TXMAXP0_Type		EPI_TXMAXP0;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP0I_CSR0_H_Type		EP0I_CSR0_H;		/**< \brief USB0 EP0 Configuration and Status (Host) Register */
	__IO USB0_EP0I_CSR0_P_Type		EP0I_CSR0_P;		/**< \brief USB0 EP0 Configuration and Status (Peripheral) Register */
	__IO USB0_EPI_TXCSR_H0_Type		EPI_TXCSR_H0;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EPI_TXCSR_P0_Type		EPI_TXCSR_P0;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EPI_RXMAXP0_Type		EPI_RXMAXP0;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EPI_RXCSR_P0_Type		EPI_RXCSR_P0;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EPI_RXCSR_H0_Type		EPI_RXCSR_H0;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP0I_CNT0_Type		EP0I_CNT0;		/**< \brief USB0 EP0 Number of Received Bytes Register */
	__IO USB0_EPI_RXCNT0_Type		EPI_RXCNT0;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP0I_TYPE0_Type		EP0I_TYPE0;		/**< \brief USB0 EP0 Connection Type Register */
	__IO USB0_EPI_TXTYPE0_Type		EPI_TXTYPE0;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EPI_TXINTERVAL0_Type		EPI_TXINTERVAL0;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP0I_NAKLIMIT0_Type		EP0I_NAKLIMIT0;		/**< \brief USB0 EP0 NAK Limit Register */
	__IO USB0_EPI_RXTYPE0_Type		EPI_RXTYPE0;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EPI_RXINTERVAL0_Type		EPI_RXINTERVAL0;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved1[0x01];		
	__IO USB0_EP0I_CFGDATA0_Type		EP0I_CFGDATA0;		/**< \brief USB0 EP0 Configuration Information Register */
	__IO USB0_FIFO0_Type		FIFO0;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOB0_Type		FIFOB0;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFOH0_Type		FIFOH0;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
		 RoReg8		Reserved6[0x01];		
		 RoReg8		Reserved4[0x02];		
	__IO USB0_FIFOH1_Type		FIFOH1;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
	__IO USB0_FIFO1_Type		FIFO1;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOB1_Type		FIFOB1;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
		 RoReg8		Reserved15[0x01];		
		 RoReg8		Reserved7[0x02];		
	__IO USB0_FIFOB2_Type		FIFOB2;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFO2_Type		FIFO2;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOH2_Type		FIFOH2;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
		 RoReg8		Reserved5[0x01];		
		 RoReg8		Reserved2[0x02];		
	__IO USB0_FIFO3_Type		FIFO3;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOH3_Type		FIFOH3;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
	__IO USB0_FIFOB3_Type		FIFOB3;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
		 RoReg8		Reserved8[0x01];		
		 RoReg8		Reserved3[0x02];		
	__IO USB0_FIFOH4_Type		FIFOH4;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
	__IO USB0_FIFOB4_Type		FIFOB4;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFO4_Type		FIFO4;		/**< \brief USB0 FIFO Word (32-Bit) Register */
		 RoReg8		Reserved9[0x03];		
	__IO USB0_FIFOH5_Type		FIFOH5;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
	__IO USB0_FIFO5_Type		FIFO5;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOB5_Type		FIFOB5;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
		 RoReg8		Reserved16[0x01];		
		 RoReg8		Reserved10[0x02];		
	__IO USB0_FIFO6_Type		FIFO6;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOB6_Type		FIFOB6;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFOH6_Type		FIFOH6;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
		 RoReg8		Reserved11[0x03];		
	__IO USB0_FIFOH7_Type		FIFOH7;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
	__IO USB0_FIFOB7_Type		FIFOB7;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFO7_Type		FIFO7;		/**< \brief USB0 FIFO Word (32-Bit) Register */
		 RoReg8		Reserved12[0x03];		
	__IO USB0_FIFOB8_Type		FIFOB8;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFO8_Type		FIFO8;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOH8_Type		FIFOH8;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
		 RoReg8		Reserved13[0x03];		
	__IO USB0_FIFO9_Type		FIFO9;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOB9_Type		FIFOB9;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFOH9_Type		FIFOH9;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
		 RoReg8		Reserved19[0x01];		
		 RoReg8		Reserved14[0x02];		
	__IO USB0_FIFOB10_Type		FIFOB10;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFO10_Type		FIFO10;		/**< \brief USB0 FIFO Word (32-Bit) Register */
	__IO USB0_FIFOH10_Type		FIFOH10;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
		 RoReg8		Reserved22[0x01];		
		 RoReg8		Reserved20[0x02];		
	__IO USB0_FIFOB11_Type		FIFOB11;		/**< \brief USB0 FIFO Byte (8-Bit) Register */
	__IO USB0_FIFOH11_Type		FIFOH11;		/**< \brief USB0 FIFO Half-Word (16-Bit) Register */
	__IO USB0_FIFO11_Type		FIFO11;		/**< \brief USB0 FIFO Word (32-Bit) Register */
		 RoReg8		Reserved17[0x13];		
	__IO USB0_DEV_CTL_Type		DEV_CTL;		/**< \brief USB0 Device Control Register */
		 RoReg8		Reserved18[0x01];		
	__IO USB0_TXFIFOSZ_Type		TXFIFOSZ;		/**< \brief USB0 Transmit FIFO Size Register */
	__IO USB0_RXFIFOSZ_Type		RXFIFOSZ;		/**< \brief USB0 Receive FIFO Size Register */
	__IO USB0_TXFIFOADDR_Type		TXFIFOADDR;		/**< \brief USB0 Transmit FIFO Address Register */
	__IO USB0_RXFIFOADDR_Type		RXFIFOADDR;		/**< \brief USB0 Receive FIFO Address Register */
		 RoReg8		Reserved21[0x10];		
	__IO USB0_EPINFO_Type		EPINFO;		/**< \brief USB0 Endpoint Information Register */
	__IO USB0_RAMINFO_Type		RAMINFO;		/**< \brief USB0 RAM Information Register */
	__IO USB0_LINKINFO_Type		LINKINFO;		/**< \brief USB0 Link Information Register */
	__IO USB0_VPLEN_Type		VPLEN;		/**< \brief USB0 VBUS Pulse Length Register */
	__IO USB0_HS_EOF1_Type		HS_EOF1;		/**< \brief USB0 High-Speed EOF 1 Register */
	__IO USB0_FS_EOF1_Type		FS_EOF1;		/**< \brief USB0 Full-Speed EOF 1 Register */
	__IO USB0_LS_EOF1_Type		LS_EOF1;		/**< \brief USB0 Low-Speed EOF 1 Register */
	__IO USB0_SOFT_RST_Type		SOFT_RST;		/**< \brief USB0 Software Reset Register */
	__IO USB0_MP0_TXFUNCADDR_Type		MP0_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved23[0x01];		
	__IO USB0_MP0_TXHUBADDR_Type		MP0_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP0_TXHUBPORT_Type		MP0_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP0_RXFUNCADDR_Type		MP0_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved24[0x01];		
	__IO USB0_MP0_RXHUBADDR_Type		MP0_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP0_RXHUBPORT_Type		MP0_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP1_TXFUNCADDR_Type		MP1_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved25[0x01];		
	__IO USB0_MP1_TXHUBADDR_Type		MP1_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP1_TXHUBPORT_Type		MP1_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP1_RXFUNCADDR_Type		MP1_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved26[0x01];		
	__IO USB0_MP1_RXHUBADDR_Type		MP1_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP1_RXHUBPORT_Type		MP1_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP2_TXFUNCADDR_Type		MP2_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved27[0x01];		
	__IO USB0_MP2_TXHUBADDR_Type		MP2_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP2_TXHUBPORT_Type		MP2_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP2_RXFUNCADDR_Type		MP2_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved28[0x01];		
	__IO USB0_MP2_RXHUBADDR_Type		MP2_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP2_RXHUBPORT_Type		MP2_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP3_TXFUNCADDR_Type		MP3_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved29[0x01];		
	__IO USB0_MP3_TXHUBADDR_Type		MP3_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP3_TXHUBPORT_Type		MP3_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP3_RXFUNCADDR_Type		MP3_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved30[0x01];		
	__IO USB0_MP3_RXHUBADDR_Type		MP3_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP3_RXHUBPORT_Type		MP3_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP4_TXFUNCADDR_Type		MP4_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved31[0x01];		
	__IO USB0_MP4_TXHUBADDR_Type		MP4_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP4_TXHUBPORT_Type		MP4_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP4_RXFUNCADDR_Type		MP4_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved32[0x01];		
	__IO USB0_MP4_RXHUBADDR_Type		MP4_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP4_RXHUBPORT_Type		MP4_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP5_TXFUNCADDR_Type		MP5_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved33[0x01];		
	__IO USB0_MP5_TXHUBADDR_Type		MP5_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP5_TXHUBPORT_Type		MP5_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP5_RXFUNCADDR_Type		MP5_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved34[0x01];		
	__IO USB0_MP5_RXHUBADDR_Type		MP5_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP5_RXHUBPORT_Type		MP5_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP6_TXFUNCADDR_Type		MP6_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved35[0x01];		
	__IO USB0_MP6_TXHUBADDR_Type		MP6_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP6_TXHUBPORT_Type		MP6_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP6_RXFUNCADDR_Type		MP6_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved36[0x01];		
	__IO USB0_MP6_RXHUBADDR_Type		MP6_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP6_RXHUBPORT_Type		MP6_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP7_TXFUNCADDR_Type		MP7_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved37[0x01];		
	__IO USB0_MP7_TXHUBADDR_Type		MP7_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP7_TXHUBPORT_Type		MP7_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP7_RXFUNCADDR_Type		MP7_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved38[0x01];		
	__IO USB0_MP7_RXHUBADDR_Type		MP7_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP7_RXHUBPORT_Type		MP7_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP8_TXFUNCADDR_Type		MP8_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved39[0x01];		
	__IO USB0_MP8_TXHUBADDR_Type		MP8_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP8_TXHUBPORT_Type		MP8_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP8_RXFUNCADDR_Type		MP8_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved40[0x01];		
	__IO USB0_MP8_RXHUBADDR_Type		MP8_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP8_RXHUBPORT_Type		MP8_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP9_TXFUNCADDR_Type		MP9_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved41[0x01];		
	__IO USB0_MP9_TXHUBADDR_Type		MP9_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP9_TXHUBPORT_Type		MP9_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP9_RXFUNCADDR_Type		MP9_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved42[0x01];		
	__IO USB0_MP9_RXHUBADDR_Type		MP9_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP9_RXHUBPORT_Type		MP9_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP10_TXFUNCADDR_Type		MP10_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved43[0x01];		
	__IO USB0_MP10_TXHUBADDR_Type		MP10_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP10_TXHUBPORT_Type		MP10_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP10_RXFUNCADDR_Type		MP10_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved44[0x01];		
	__IO USB0_MP10_RXHUBADDR_Type		MP10_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP10_RXHUBPORT_Type		MP10_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
	__IO USB0_MP11_TXFUNCADDR_Type		MP11_TXFUNCADDR;		/**< \brief USB0 MPn Transmit Function Address Register */
		 RoReg8		Reserved45[0x01];		
	__IO USB0_MP11_TXHUBADDR_Type		MP11_TXHUBADDR;		/**< \brief USB0 MPn Transmit Hub Address Register */
	__IO USB0_MP11_TXHUBPORT_Type		MP11_TXHUBPORT;		/**< \brief USB0 MPn Transmit Hub Port Register */
	__IO USB0_MP11_RXFUNCADDR_Type		MP11_RXFUNCADDR;		/**< \brief USB0 MPn Receive Function Address Register */
		 RoReg8		Reserved46[0x01];		
	__IO USB0_MP11_RXHUBADDR_Type		MP11_RXHUBADDR;		/**< \brief USB0 MPn Receive Hub Address Register */
	__IO USB0_MP11_RXHUBPORT_Type		MP11_RXHUBPORT;		/**< \brief USB0 MPn Receive Hub Port Register */
		 RoReg8		Reserved47[0x20];		
	__IO USB0_EP0_TXMAXP_Type		EP0_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP0_TXCSR_H_Type		EP0_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP0_CSR0_H_Type		EP0_CSR0_H;		/**< \brief USB0 EP0 Configuration and Status (Host) Register */
	__IO USB0_EP0_CSR0_P_Type		EP0_CSR0_P;		/**< \brief USB0 EP0 Configuration and Status (Peripheral) Register */
	__IO USB0_EP0_TXCSR_P_Type		EP0_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP0_RXMAXP_Type		EP0_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP0_RXCSR_H_Type		EP0_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP0_RXCSR_P_Type		EP0_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP0_RXCNT_Type		EP0_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP0_CNT0_Type		EP0_CNT0;		/**< \brief USB0 EP0 Number of Received Bytes Register */
	__IO USB0_EP0_TXTYPE_Type		EP0_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP0_TYPE0_Type		EP0_TYPE0;		/**< \brief USB0 EP0 Connection Type Register */
	__IO USB0_EP0_TXINTERVAL_Type		EP0_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP0_NAKLIMIT0_Type		EP0_NAKLIMIT0;		/**< \brief USB0 EP0 NAK Limit Register */
	__IO USB0_EP0_RXTYPE_Type		EP0_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP0_RXINTERVAL_Type		EP0_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved48[0x01];		
	__IO USB0_EP0_CFGDATA0_Type		EP0_CFGDATA0;		/**< \brief USB0 EP0 Configuration Information Register */
	__IO USB0_EP1_TXMAXP_Type		EP1_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP1_TXCSR_H_Type		EP1_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP1_TXCSR_P_Type		EP1_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP1_RXMAXP_Type		EP1_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP1_RXCSR_H_Type		EP1_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP1_RXCSR_P_Type		EP1_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP1_RXCNT_Type		EP1_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP1_TXTYPE_Type		EP1_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP1_TXINTERVAL_Type		EP1_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP1_RXTYPE_Type		EP1_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP1_RXINTERVAL_Type		EP1_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved49[0x02];		
	__IO USB0_EP2_TXMAXP_Type		EP2_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP2_TXCSR_H_Type		EP2_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP2_TXCSR_P_Type		EP2_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP2_RXMAXP_Type		EP2_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP2_RXCSR_P_Type		EP2_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP2_RXCSR_H_Type		EP2_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP2_RXCNT_Type		EP2_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP2_TXTYPE_Type		EP2_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP2_TXINTERVAL_Type		EP2_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP2_RXTYPE_Type		EP2_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP2_RXINTERVAL_Type		EP2_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved50[0x02];		
	__IO USB0_EP3_TXMAXP_Type		EP3_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP3_TXCSR_P_Type		EP3_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP3_TXCSR_H_Type		EP3_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP3_RXMAXP_Type		EP3_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP3_RXCSR_P_Type		EP3_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP3_RXCSR_H_Type		EP3_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP3_RXCNT_Type		EP3_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP3_TXTYPE_Type		EP3_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP3_TXINTERVAL_Type		EP3_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP3_RXTYPE_Type		EP3_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP3_RXINTERVAL_Type		EP3_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved51[0x02];		
	__IO USB0_EP4_TXMAXP_Type		EP4_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP4_TXCSR_H_Type		EP4_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP4_TXCSR_P_Type		EP4_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP4_RXMAXP_Type		EP4_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP4_RXCSR_H_Type		EP4_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP4_RXCSR_P_Type		EP4_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP4_RXCNT_Type		EP4_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP4_TXTYPE_Type		EP4_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP4_TXINTERVAL_Type		EP4_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP4_RXTYPE_Type		EP4_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP4_RXINTERVAL_Type		EP4_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved52[0x02];		
	__IO USB0_EP5_TXMAXP_Type		EP5_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP5_TXCSR_P_Type		EP5_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP5_TXCSR_H_Type		EP5_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP5_RXMAXP_Type		EP5_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP5_RXCSR_P_Type		EP5_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP5_RXCSR_H_Type		EP5_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP5_RXCNT_Type		EP5_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP5_TXTYPE_Type		EP5_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP5_TXINTERVAL_Type		EP5_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP5_RXTYPE_Type		EP5_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP5_RXINTERVAL_Type		EP5_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved53[0x02];		
	__IO USB0_EP6_TXMAXP_Type		EP6_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP6_TXCSR_P_Type		EP6_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP6_TXCSR_H_Type		EP6_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP6_RXMAXP_Type		EP6_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP6_RXCSR_H_Type		EP6_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP6_RXCSR_P_Type		EP6_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP6_RXCNT_Type		EP6_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP6_TXTYPE_Type		EP6_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP6_TXINTERVAL_Type		EP6_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP6_RXTYPE_Type		EP6_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP6_RXINTERVAL_Type		EP6_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved54[0x02];		
	__IO USB0_EP7_TXMAXP_Type		EP7_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP7_TXCSR_H_Type		EP7_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP7_TXCSR_P_Type		EP7_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP7_RXMAXP_Type		EP7_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP7_RXCSR_P_Type		EP7_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP7_RXCSR_H_Type		EP7_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP7_RXCNT_Type		EP7_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP7_TXTYPE_Type		EP7_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP7_TXINTERVAL_Type		EP7_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP7_RXTYPE_Type		EP7_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP7_RXINTERVAL_Type		EP7_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved55[0x02];		
	__IO USB0_EP8_TXMAXP_Type		EP8_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP8_TXCSR_P_Type		EP8_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP8_TXCSR_H_Type		EP8_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP8_RXMAXP_Type		EP8_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP8_RXCSR_P_Type		EP8_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP8_RXCSR_H_Type		EP8_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP8_RXCNT_Type		EP8_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP8_TXTYPE_Type		EP8_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP8_TXINTERVAL_Type		EP8_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP8_RXTYPE_Type		EP8_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP8_RXINTERVAL_Type		EP8_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved56[0x02];		
	__IO USB0_EP9_TXMAXP_Type		EP9_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP9_TXCSR_P_Type		EP9_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP9_TXCSR_H_Type		EP9_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP9_RXMAXP_Type		EP9_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP9_RXCSR_H_Type		EP9_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP9_RXCSR_P_Type		EP9_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP9_RXCNT_Type		EP9_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP9_TXTYPE_Type		EP9_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP9_TXINTERVAL_Type		EP9_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP9_RXTYPE_Type		EP9_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP9_RXINTERVAL_Type		EP9_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved57[0x02];		
	__IO USB0_EP10_TXMAXP_Type		EP10_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP10_TXCSR_H_Type		EP10_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP10_TXCSR_P_Type		EP10_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP10_RXMAXP_Type		EP10_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP10_RXCSR_P_Type		EP10_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP10_RXCSR_H_Type		EP10_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP10_RXCNT_Type		EP10_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP10_TXTYPE_Type		EP10_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP10_TXINTERVAL_Type		EP10_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP10_RXTYPE_Type		EP10_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP10_RXINTERVAL_Type		EP10_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved58[0x02];		
	__IO USB0_EP11_TXMAXP_Type		EP11_TXMAXP;		/**< \brief USB0 EPn Transmit Maximum Packet Length Register */
	__IO USB0_EP11_TXCSR_P_Type		EP11_TXCSR_P;		/**< \brief USB0 EPn Transmit Configuration and Status (Peripheral) Register */
	__IO USB0_EP11_TXCSR_H_Type		EP11_TXCSR_H;		/**< \brief USB0 EPn Transmit Configuration and Status (Host) Register */
	__IO USB0_EP11_RXMAXP_Type		EP11_RXMAXP;		/**< \brief USB0 EPn Receive Maximum Packet Length Register */
	__IO USB0_EP11_RXCSR_P_Type		EP11_RXCSR_P;		/**< \brief USB0 EPn Receive Configuration and Status (Peripheral) Register */
	__IO USB0_EP11_RXCSR_H_Type		EP11_RXCSR_H;		/**< \brief USB0 EPn Receive Configuration and Status (Host) Register */
	__IO USB0_EP11_RXCNT_Type		EP11_RXCNT;		/**< \brief USB0 EPn Number of Bytes Received Register */
	__IO USB0_EP11_TXTYPE_Type		EP11_TXTYPE;		/**< \brief USB0 EPn Transmit Type Register */
	__IO USB0_EP11_TXINTERVAL_Type		EP11_TXINTERVAL;		/**< \brief USB0 EPn Transmit Polling Interval Register */
	__IO USB0_EP11_RXTYPE_Type		EP11_RXTYPE;		/**< \brief USB0 EPn Receive Type Register */
	__IO USB0_EP11_RXINTERVAL_Type		EP11_RXINTERVAL;		/**< \brief USB0 EPn Receive Polling Interval Register */
		 RoReg8		Reserved59[0x42];		
	__IO USB0_DMA_IRQ_Type		DMA_IRQ;		/**< \brief USB0 DMA Interrupt Register */
		 RoReg8		Reserved60[0x03];		
	__IO USB0_DMA0_CTL_Type		DMA0_CTL;		/**< \brief USB0 DMA Channel n Control Register */
		 RoReg8		Reserved61[0x02];		
	__IO USB0_DMA0_ADDR_Type		DMA0_ADDR;		/**< \brief USB0 DMA Channel n Address Register */
	__IO USB0_DMA0_CNT_Type		DMA0_CNT;		/**< \brief USB0 DMA Channel n Count Register */
		 RoReg8		Reserved62[0x04];		
	__IO USB0_DMA1_CTL_Type		DMA1_CTL;		/**< \brief USB0 DMA Channel n Control Register */
		 RoReg8		Reserved63[0x02];		
	__IO USB0_DMA1_ADDR_Type		DMA1_ADDR;		/**< \brief USB0 DMA Channel n Address Register */
	__IO USB0_DMA1_CNT_Type		DMA1_CNT;		/**< \brief USB0 DMA Channel n Count Register */
		 RoReg8		Reserved64[0x04];		
	__IO USB0_DMA2_CTL_Type		DMA2_CTL;		/**< \brief USB0 DMA Channel n Control Register */
		 RoReg8		Reserved65[0x02];		
	__IO USB0_DMA2_ADDR_Type		DMA2_ADDR;		/**< \brief USB0 DMA Channel n Address Register */
	__IO USB0_DMA2_CNT_Type		DMA2_CNT;		/**< \brief USB0 DMA Channel n Count Register */
		 RoReg8		Reserved66[0x04];		
	__IO USB0_DMA3_CTL_Type		DMA3_CTL;		/**< \brief USB0 DMA Channel n Control Register */
		 RoReg8		Reserved67[0x02];		
	__IO USB0_DMA3_ADDR_Type		DMA3_ADDR;		/**< \brief USB0 DMA Channel n Address Register */
	__IO USB0_DMA3_CNT_Type		DMA3_CNT;		/**< \brief USB0 DMA Channel n Count Register */
		 RoReg8		Reserved68[0x04];		
	__IO USB0_DMA4_CTL_Type		DMA4_CTL;		/**< \brief USB0 DMA Channel n Control Register */
		 RoReg8		Reserved69[0x02];		
	__IO USB0_DMA4_ADDR_Type		DMA4_ADDR;		/**< \brief USB0 DMA Channel n Address Register */
	__IO USB0_DMA4_CNT_Type		DMA4_CNT;		/**< \brief USB0 DMA Channel n Count Register */
		 RoReg8		Reserved70[0x04];		
	__IO USB0_DMA5_CTL_Type		DMA5_CTL;		/**< \brief USB0 DMA Channel n Control Register */
		 RoReg8		Reserved71[0x02];		
	__IO USB0_DMA5_ADDR_Type		DMA5_ADDR;		/**< \brief USB0 DMA Channel n Address Register */
	__IO USB0_DMA5_CNT_Type		DMA5_CNT;		/**< \brief USB0 DMA Channel n Count Register */
		 RoReg8		Reserved72[0x04];		
	__IO USB0_DMA6_CTL_Type		DMA6_CTL;		/**< \brief USB0 DMA Channel n Control Register */
		 RoReg8		Reserved73[0x02];		
	__IO USB0_DMA6_ADDR_Type		DMA6_ADDR;		/**< \brief USB0 DMA Channel n Address Register */
	__IO USB0_DMA6_CNT_Type		DMA6_CNT;		/**< \brief USB0 DMA Channel n Count Register */
		 RoReg8		Reserved74[0x04];		
	__IO USB0_DMA7_CTL_Type		DMA7_CTL;		/**< \brief USB0 DMA Channel n Control Register */
		 RoReg8		Reserved75[0x02];		
	__IO USB0_DMA7_ADDR_Type		DMA7_ADDR;		/**< \brief USB0 DMA Channel n Address Register */
	__IO USB0_DMA7_CNT_Type		DMA7_CNT;		/**< \brief USB0 DMA Channel n Count Register */
		 RoReg8		Reserved76[0x80];		
	__IO USB0_RQPKTCNT0_Type		RQPKTCNT0;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved77[0x02];		
	__IO USB0_RQPKTCNT1_Type		RQPKTCNT1;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved78[0x02];		
	__IO USB0_RQPKTCNT2_Type		RQPKTCNT2;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved79[0x02];		
	__IO USB0_RQPKTCNT3_Type		RQPKTCNT3;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved80[0x02];		
	__IO USB0_RQPKTCNT4_Type		RQPKTCNT4;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved81[0x02];		
	__IO USB0_RQPKTCNT5_Type		RQPKTCNT5;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved82[0x02];		
	__IO USB0_RQPKTCNT6_Type		RQPKTCNT6;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved83[0x02];		
	__IO USB0_RQPKTCNT7_Type		RQPKTCNT7;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved84[0x02];		
	__IO USB0_RQPKTCNT8_Type		RQPKTCNT8;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved85[0x02];		
	__IO USB0_RQPKTCNT9_Type		RQPKTCNT9;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved86[0x02];		
	__IO USB0_RQPKTCNT10_Type		RQPKTCNT10;		/**< \brief USB0 EPn Request Packet Count Register */
		 RoReg8		Reserved87[0x1a];		
	__IO USB0_CT_UCH_Type		CT_UCH;		/**< \brief USB0 Chirp Timeout Register */
	__IO USB0_CT_HHSRTN_Type		CT_HHSRTN;		/**< \brief USB0 Host High Speed Return to Normal Register */
	__IO USB0_CT_HSBT_Type		CT_HSBT;		/**< \brief USB0 High Speed Timeout Register */
		 RoReg8		Reserved88[0x16];		
	__IO USB0_LPM_ATTR_Type		LPM_ATTR;		/**< \brief USB0 LPM Attribute Register */
	__IO USB0_LPM_CTL_Type		LPM_CTL;		/**< \brief USB0 LPM Control Register */
	__IO USB0_LPM_IEN_Type		LPM_IEN;		/**< \brief USB0 LPM Interrupt Enable Register */
	__IO USB0_LPM_IRQ_Type		LPM_IRQ;		/**< \brief USB0 LPM Interrupt Status Register */
	__IO USB0_LPM_FADDR_Type		LPM_FADDR;		/**< \brief USB0 LPM Function Address Register */
		 RoReg8		Reserved89[0x1a];		
	__IO USB0_VBUS_CTL_Type		VBUS_CTL;		/**< \brief USB0 VBUS Control Register */
	__IO USB0_BAT_CHG_Type		BAT_CHG;		/**< \brief USB0 Battery Charging Control Register */
		 RoReg8		Reserved90[0x12];		
	__IO USB0_PHY_CTL_Type		PHY_CTL;		/**< \brief USB0 PHY Control Register */
		 RoReg8		Reserved91[0x03];		
	__IO USB0_PLL_OSC_Type		PLL_OSC;		/**< \brief USB0 PLL and Oscillator Control Register */
} Usb0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- RTC0_CLK : (32) RTC0 RTC Clock register ----- */
typedef union {
	struct {
		uint32_t SEC:6;			/*!< bit	0..5	Second Count	*/
		uint32_t MIN:6;			/*!< bit	6..11	Minute Count	*/
		uint32_t HOUR:5;			/*!< bit	12..16	Hour Count	*/
		uint32_t DAY:15;			/*!< bit	17..31	Day Count	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RTC0_CLK_Type;
#define REG_RTC0_CLK		(*(RwReg *)0x200D1280UL)

#else
#define REG_RTC0_CLK		(0x200D1280) /**< \brief (RTC0) RTC0 RTC Clock register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RTC0_ALM : (32) RTC0 RTC Alarm register ----- */
typedef union {
	struct {
		uint32_t SEC:6;			/*!< bit	0..5	Alarm Second	*/
		uint32_t MIN:6;			/*!< bit	6..11	Alarm Minute	*/
		uint32_t HOUR:5;			/*!< bit	12..16	Alarm Hour	*/
		uint32_t DAY:15;			/*!< bit	17..31	Alarm Day	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RTC0_ALM_Type;
#define REG_RTC0_ALM		(*(RwReg *)0x200D1284UL)

#else
#define REG_RTC0_ALM		(0x200D1284) /**< \brief (RTC0) RTC0 RTC Alarm register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RTC0_IEN : (32) RTC0 RTC Interrupt Enable Register ----- */
typedef union {
	struct {
		uint32_t WRDONE:1;			/*!< bit	0	Register Write Done interrupt enable	*/
		uint32_t SEC:1;			/*!< bit	1	Seconds Interrupt Enable	*/
		uint32_t MIN:1;			/*!< bit	2	Minutes Interrupt enable	*/
		uint32_t HOUR:1;			/*!< bit	3	Hours Interrupt Enable	*/
		uint32_t DAY:1;			/*!< bit	4	Days Interrupt Enable	*/
		uint32_t ALM:1;			/*!< bit	5	Alarm Interrupt Enable (Hour,Minute,Sec)	*/
		uint32_t DAYALM:1;			/*!< bit	6	Day Alarm Interrupt Enable (Day,Hour,Minute,Sec)	*/
		uint32_t SW:1;			/*!< bit	7	Stopwatch Interrupt Enable	*/
		uint32_t CLKFAIL:1;			/*!< bit	8	RTC 1Hz clock fail interrupt enable	*/
		uint32_t EMUDIS:1;			/*!< bit	9	Disables / Enables RTC interrupts in emulation mode	*/
		uint32_t :22;			/*!< bit	10..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RTC0_IEN_Type;
#define REG_RTC0_IEN		(*(RwReg *)0x200D1288UL)

#else
#define REG_RTC0_IEN		(0x200D1288) /**< \brief (RTC0) RTC0 RTC Interrupt Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RTC0_STAT : (32) RTC0 RTC Status Register ----- */
typedef union {
	struct {
		uint32_t WRPEND:1;			/*!< bit	0	Write Pending	*/
		uint32_t WRDONE:1;			/*!< bit	1	Write Done	*/
		uint32_t SEC:1;			/*!< bit	2	Second event	*/
		uint32_t MIN:1;			/*!< bit	3	Minute event	*/
		uint32_t HOUR:1;			/*!< bit	4	Hour event	*/
		uint32_t DAY:1;			/*!< bit	5	Day event	*/
		uint32_t ALM:1;			/*!< bit	6	Alarm Flag	*/
		uint32_t DAYALM:1;			/*!< bit	7	Day Alarm	*/
		uint32_t SWEXP:1;			/*!< bit	8	Stop Watch Expiry	*/
		uint32_t CLKFAIL:1;			/*!< bit	9	RTC Clock fail	*/
		uint32_t WRZONE:1;			/*!< bit	10	Write to RTC	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RTC0_STAT_Type;
#define REG_RTC0_STAT		(*(RwReg *)0x200D128CUL)

#else
#define REG_RTC0_STAT		(0x200D128C) /**< \brief (RTC0) RTC0 RTC Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RTC0_STPWTCH : (32) RTC0 RTC Stop Watch Register ----- */
typedef union {
	struct {
		uint32_t VALUE:16;			/*!< bit	0..15	Stop watch value	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RTC0_STPWTCH_Type;
#define REG_RTC0_STPWTCH		(*(RwReg *)0x200D1290UL)

#else
#define REG_RTC0_STPWTCH		(0x200D1290) /**< \brief (RTC0) RTC0 RTC Stop Watch Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RTC0_INIT : (32) RTC0 RTC Initialization Register ----- */
typedef union {
	struct {
		uint32_t CAL:4;			/*!< bit	0..3	Time Calibration	*/
		uint32_t PWDN:1;			/*!< bit	4	RTC Power Down	*/
		uint32_t RDEN:1;			/*!< bit	5	Enable output bus	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RTC0_INIT_Type;
#define REG_RTC0_INIT		(*(RwReg *)0x200D1298UL)

#else
#define REG_RTC0_INIT		(0x200D1298) /**< \brief (RTC0) RTC0 RTC Initialization Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- RTC0_INITSTAT : (32) RTC0 RTC Initialization Status Register ----- */
typedef union {
	struct {
		uint32_t ALMPND:1;			/*!< bit	0	Alarm Pending	*/
		uint32_t DAYALMPND:1;			/*!< bit	1	Day Alarm Pending	*/
		uint32_t PWDN:1;			/*!< bit	2	Status of Power Down	*/
		uint32_t CAL:4;			/*!< bit	3..6	Calibration Status	*/
		uint32_t :25;			/*!< bit	7..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} RTC0_INITSTAT_Type;
#define REG_RTC0_INITSTAT		(*(RwReg *)0x200D129CUL)

#else
#define REG_RTC0_INITSTAT		(0x200D129C) /**< \brief (RTC0) RTC0 RTC Initialization Status Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO RTC0_CLK_Type		CLK;		/**< \brief RTC0 RTC Clock register */
	__IO RTC0_ALM_Type		ALM;		/**< \brief RTC0 RTC Alarm register */
	__IO RTC0_IEN_Type		IEN;		/**< \brief RTC0 RTC Interrupt Enable Register */
	__IO RTC0_STAT_Type		STAT;		/**< \brief RTC0 RTC Status Register */
	__IO RTC0_STPWTCH_Type		STPWTCH;		/**< \brief RTC0 RTC Stop Watch Register */
		 RoReg8		Reserved1[0x04];		
	__IO RTC0_INIT_Type		INIT;		/**< \brief RTC0 RTC Initialization Register */
	__IO RTC0_INITSTAT_Type		INITSTAT;		/**< \brief RTC0 RTC Initialization Status Register */
} Rtc0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_CTL_STAT : (32) PKTE0 Packet Engine Control Register ----- */
typedef union {
	struct {
		uint32_t HOSTRDY:1;			/*!< bit	0	Host Ready	*/
		uint32_t PERDY:1;			/*!< bit	1	Pe Ready	*/
		uint32_t :2;			/*!< bit	2..3	Reserved	*/
		uint32_t HASHFINAL:1;			/*!< bit	4	Hash Final	*/
		uint32_t :1;			/*!< bit	5	Reserved	*/
		uint32_t PRNGMD:2;			/*!< bit	6..7	Prng Mode	*/
		uint32_t PADVAL:8;			/*!< bit	8..15	Pad Value	*/
		uint32_t AUTHERR:1;			/*!< bit	16	Auth Err	*/
		uint32_t PADERR:1;			/*!< bit	17	Pad Err	*/
		uint32_t SQNMERR:1;			/*!< bit	18	Seqnum Err	*/
		uint32_t EXTERR:1;			/*!< bit	19	Ext Err	*/
		uint32_t EXTERRCD:4;			/*!< bit	20..23	Ext Err Code	*/
		uint32_t PADCTLSTAT:8;			/*!< bit	24..31	Pad Ctrl  Pad Stat	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_CTL_STAT_Type;
#define REG_PKTE0_CTL_STAT		(*(RwReg *)0x200E0000UL)

#else
#define REG_PKTE0_CTL_STAT		(0x200E0000) /**< \brief (PKTE0) PKTE0 Packet Engine Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SRC_ADDR : (32) PKTE0 Packet Engine Source Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SRC_ADDR_Type;
#define REG_PKTE0_SRC_ADDR		(*(RwReg *)0x200E0004UL)

#else
#define REG_PKTE0_SRC_ADDR		(0x200E0004) /**< \brief (PKTE0) PKTE0 Packet Engine Source Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_DEST_ADDR : (32) PKTE0 Packet Engine Destination Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_DEST_ADDR_Type;
#define REG_PKTE0_DEST_ADDR		(*(RwReg *)0x200E0008UL)

#else
#define REG_PKTE0_DEST_ADDR		(0x200E0008) /**< \brief (PKTE0) PKTE0 Packet Engine Destination Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ADDR : (32) PKTE0 Packet Engine SA Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ADDR_Type;
#define REG_PKTE0_SA_ADDR		(*(RwReg *)0x200E000CUL)

#else
#define REG_PKTE0_SA_ADDR		(0x200E000C) /**< \brief (PKTE0) PKTE0 Packet Engine SA Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_ADDR : (32) PKTE0 Packet Engine State Record Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_ADDR_Type;
#define REG_PKTE0_STATE_ADDR		(*(RwReg *)0x200E0010UL)

#else
#define REG_PKTE0_STATE_ADDR		(0x200E0010) /**< \brief (PKTE0) PKTE0 Packet Engine State Record Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_USERID : (32) PKTE0 Packet Engine User ID ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_USERID_Type;
#define REG_PKTE0_USERID		(*(RwReg *)0x200E0018UL)

#else
#define REG_PKTE0_USERID		(0x200E0018) /**< \brief (PKTE0) PKTE0 Packet Engine User ID */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_LEN : (32) PKTE0 Packet Engine Length Register ----- */
typedef union {
	struct {
		uint32_t TOTLEN:20;			/*!< bit	0..19	field	*/
		uint32_t :2;			/*!< bit	20..21	Reserved	*/
		uint32_t HSTRDY:1;			/*!< bit	22	Host Ready	*/
		uint32_t PEDONE:1;			/*!< bit	23	PE Done	*/
		uint32_t BYPASS:8;			/*!< bit	24..31	field	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_LEN_Type;
#define REG_PKTE0_LEN		(*(RwReg *)0x200E001CUL)

#else
#define REG_PKTE0_LEN		(0x200E001C) /**< \brief (PKTE0) PKTE0 Packet Engine Length Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_CDRBASE_ADDR : (32) PKTE0 PE Command Descriptor Ring Base Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_CDRBASE_ADDR_Type;
#define REG_PKTE0_CDRBASE_ADDR		(*(RwReg *)0x200E0080UL)

#else
#define REG_PKTE0_CDRBASE_ADDR		(0x200E0080) /**< \brief (PKTE0) PKTE0 PE Command Descriptor Ring Base Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_RDRBASE_ADDR : (32) PKTE0 PE Result Descriptor Ring Base Address ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_RDRBASE_ADDR_Type;
#define REG_PKTE0_RDRBASE_ADDR		(*(RwReg *)0x200E0084UL)

#else
#define REG_PKTE0_RDRBASE_ADDR		(0x200E0084) /**< \brief (PKTE0) PKTE0 PE Result Descriptor Ring Base Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_RING_CFG : (32) PKTE0 PE Ring Configuration ----- */
typedef union {
	struct {
		uint32_t RINGSZ:10;			/*!< bit	0..9	Ring Size	*/
		uint32_t :21;			/*!< bit	10..30	Reserved	*/
		uint32_t ENEXTTRIG:1;			/*!< bit	31	Enable  External Trigger	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_RING_CFG_Type;
#define REG_PKTE0_RING_CFG		(*(RwReg *)0x200E0088UL)

#else
#define REG_PKTE0_RING_CFG		(0x200E0088) /**< \brief (PKTE0) PKTE0 PE Ring Configuration */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_RING_THRESH : (32) PKTE0 PE Ring Threshold Registers ----- */
typedef union {
	struct {
		uint32_t CDRTHRSH:10;			/*!< bit	0..9	Cdr Thresh	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t RDRTHRSH:10;			/*!< bit	16..25	Rdr Thresh	*/
		uint32_t RDTO:4;			/*!< bit	26..29	Rd Timeout	*/
		uint32_t :1;			/*!< bit	30	Reserved	*/
		uint32_t TOEN:1;			/*!< bit	31	Timeout En	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_RING_THRESH_Type;
#define REG_PKTE0_RING_THRESH		(*(RwReg *)0x200E008CUL)

#else
#define REG_PKTE0_RING_THRESH		(0x200E008C) /**< \brief (PKTE0) PKTE0 PE Ring Threshold Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_CDSC_CNT : (32) PKTE0 PE Command Descriptor Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:11;			/*!< bit	0..10	Command Descriptor Count	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_CDSC_CNT_Type;
#define REG_PKTE0_CDSC_CNT		(*(RwReg *)0x200E0090UL)

#else
#define REG_PKTE0_CDSC_CNT		(0x200E0090) /**< \brief (PKTE0) PKTE0 PE Command Descriptor Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_CDSC_INCR : (32) PKTE0 PE Command Descriptor Count Increment Register ----- */
typedef union {
	struct {
		uint32_t VALUE:8;			/*!< bit	0..7	Cd Count Incr	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_CDSC_INCR_Type;
#define REG_PKTE0_CDSC_INCR		(*(RwReg *)0x200E0090UL)

#else
#define REG_PKTE0_CDSC_INCR		(0x200E0090) /**< \brief (PKTE0) PKTE0 PE Command Descriptor Count Increment Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_RDSC_DECR : (32) PKTE0 PE Result Descriptor Count Decrement Registers ----- */
typedef union {
	struct {
		uint32_t VALUE:8;			/*!< bit	0..7	Read Count Decrement	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_RDSC_DECR_Type;
#define REG_PKTE0_RDSC_DECR		(*(RwReg *)0x200E0094UL)

#else
#define REG_PKTE0_RDSC_DECR		(0x200E0094) /**< \brief (PKTE0) PKTE0 PE Result Descriptor Count Decrement Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_RDSC_CNT : (32) PKTE0 PE Result Descriptor Count Registers ----- */
typedef union {
	struct {
		uint32_t VALUE:11;			/*!< bit	0..10	Result Descriptor Count	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_RDSC_CNT_Type;
#define REG_PKTE0_RDSC_CNT		(*(RwReg *)0x200E0094UL)

#else
#define REG_PKTE0_RDSC_CNT		(0x200E0094) /**< \brief (PKTE0) PKTE0 PE Result Descriptor Count Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_RING_PTR : (32) PKTE0 PE Ring Pointer Status ----- */
typedef union {
	struct {
		uint32_t CDRPTR:10;			/*!< bit	0..9	Cdr Pntr	*/
		uint32_t :6;			/*!< bit	10..15	Reserved	*/
		uint32_t RDRPTR:10;			/*!< bit	16..25	Rdr Pntr	*/
		uint32_t :6;			/*!< bit	26..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_RING_PTR_Type;
#define REG_PKTE0_RING_PTR		(*(RwReg *)0x200E0098UL)

#else
#define REG_PKTE0_RING_PTR		(0x200E0098) /**< \brief (PKTE0) PKTE0 PE Ring Pointer Status */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_RING_STAT : (32) PKTE0 PE Ring Status ----- */
typedef union {
	struct {
		uint32_t CDROVFL:1;			/*!< bit	0	Cdr Overflow	*/
		uint32_t RDRUNFL:1;			/*!< bit	1	Rdr Underflow	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_RING_STAT_Type;
#define REG_PKTE0_RING_STAT		(*(RwReg *)0x200E009CUL)

#else
#define REG_PKTE0_RING_STAT		(0x200E009C) /**< \brief (PKTE0) PKTE0 PE Ring Status */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_CFG : (32) PKTE0 PE Configuration Register ----- */
typedef union {
	struct {
		uint32_t RSTPE:1;			/*!< bit	0	Rst Pe	*/
		uint32_t RSTRING:1;			/*!< bit	1	Rst Ring	*/
		uint32_t :6;			/*!< bit	2..7	Reserved	*/
		uint32_t MODE:2;			/*!< bit	8..9	Pe Mode	*/
		uint32_t ENCDRUPDT:1;			/*!< bit	10	En Cdr Update	*/
		uint32_t :5;			/*!< bit	11..15	Reserved	*/
		uint32_t SWPCDRD:1;			/*!< bit	16	Swap Cd Rd	*/
		uint32_t SWPSA:1;			/*!< bit	17	Swap Sa	*/
		uint32_t SWPDAT:1;			/*!< bit	18	Swap Data	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_CFG_Type;
#define REG_PKTE0_CFG		(*(RwReg *)0x200E0100UL)

#else
#define REG_PKTE0_CFG		(0x200E0100) /**< \brief (PKTE0) PKTE0 PE Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STAT : (32) PKTE0 PE Status Register ----- */
typedef union {
	struct {
		uint32_t INPTDN:1;			/*!< bit	0	PE Input Done	*/
		uint32_t OUTPTDN:1;			/*!< bit	1	PE Output Done	*/
		uint32_t ENCRYPTDN:1;			/*!< bit	2	Encrypt Done	*/
		uint32_t INHSHDN:1;			/*!< bit	3	Inner Hash Done	*/
		uint32_t OUTHSHDN:1;			/*!< bit	4	Outer Hash Done	*/
		uint32_t AUTHERR:1;			/*!< bit	5	Auth Error	*/
		uint32_t PADERR:1;			/*!< bit	6	Pad Error	*/
		uint32_t SNUMERR:1;			/*!< bit	7	Seqnum Error	*/
		uint32_t EXTERR:1;			/*!< bit	8	Ext Error	*/
		uint32_t OPDN:1;			/*!< bit	9	Operation Done	*/
		uint32_t IBUFREQ:1;			/*!< bit	10	Inbuf Req	*/
		uint32_t OBUFREQ:1;			/*!< bit	11	Outbuf Req	*/
		uint32_t IBUFEMPTYCNT:10;			/*!< bit	12..21	Inbuf Empty Count	*/
		uint32_t OBUFFULLCNT:10;			/*!< bit	22..31	Outbuf Full Count	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STAT_Type;
#define REG_PKTE0_STAT		(*(RwReg *)0x200E0104UL)

#else
#define REG_PKTE0_STAT		(0x200E0104) /**< \brief (PKTE0) PKTE0 PE Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_BUF_THRESH : (32) PKTE0 PE Buffer Threshold Register ----- */
typedef union {
	struct {
		uint32_t INBUF:8;			/*!< bit	0..7	Inbuf Threshold	*/
		uint32_t :8;			/*!< bit	8..15	Reserved	*/
		uint32_t OUTBUF:8;			/*!< bit	16..23	Outbuf Threshold	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_BUF_THRESH_Type;
#define REG_PKTE0_BUF_THRESH		(*(RwReg *)0x200E010CUL)

#else
#define REG_PKTE0_BUF_THRESH		(0x200E010C) /**< \brief (PKTE0) PKTE0 PE Buffer Threshold Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_INBUF_CNT : (32) PKTE0 Packet Engine Input Buffer Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:9;			/*!< bit	0..8	Inbuf Count	*/
		uint32_t :23;			/*!< bit	9..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_INBUF_CNT_Type;
#define REG_PKTE0_INBUF_CNT		(*(RwReg *)0x200E0110UL)

#else
#define REG_PKTE0_INBUF_CNT		(0x200E0110) /**< \brief (PKTE0) PKTE0 Packet Engine Input Buffer Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_INBUF_INCR : (32) PKTE0 Packet Engine Input Buffer Count Increment Register ----- */
typedef union {
	struct {
		uint32_t VALUE:9;			/*!< bit	0..8	Inbuf Count Incr	*/
		uint32_t :23;			/*!< bit	9..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_INBUF_INCR_Type;
#define REG_PKTE0_INBUF_INCR		(*(RwReg *)0x200E0110UL)

#else
#define REG_PKTE0_INBUF_INCR		(0x200E0110) /**< \brief (PKTE0) PKTE0 Packet Engine Input Buffer Count Increment Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_OUTBUF_CNT : (32) PKTE0 Packet Engine Output Buffer Count Register ----- */
typedef union {
	struct {
		uint32_t VALUE:9;			/*!< bit	0..8	Outbuf Count	*/
		uint32_t :23;			/*!< bit	9..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_OUTBUF_CNT_Type;
#define REG_PKTE0_OUTBUF_CNT		(*(RwReg *)0x200E0114UL)

#else
#define REG_PKTE0_OUTBUF_CNT		(0x200E0114) /**< \brief (PKTE0) PKTE0 Packet Engine Output Buffer Count Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_OUTBUF_DECR : (32) PKTE0 Packet Engine Output Buffer Count Decrement Register ----- */
typedef union {
	struct {
		uint32_t VALUE:9;			/*!< bit	0..8	Outbuf Count Decr	*/
		uint32_t :23;			/*!< bit	9..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_OUTBUF_DECR_Type;
#define REG_PKTE0_OUTBUF_DECR		(*(RwReg *)0x200E0114UL)

#else
#define REG_PKTE0_OUTBUF_DECR		(0x200E0114) /**< \brief (PKTE0) PKTE0 Packet Engine Output Buffer Count Decrement Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_BUF_PTR : (32) PKTE0 Packet Engine Buffer Pointer Register ----- */
typedef union {
	struct {
		uint32_t INBUF:8;			/*!< bit	0..7	Inbuf Pntr	*/
		uint32_t :8;			/*!< bit	8..15	Reserved	*/
		uint32_t OUTBUF:8;			/*!< bit	16..23	Outbuf Pntr	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_BUF_PTR_Type;
#define REG_PKTE0_BUF_PTR		(*(RwReg *)0x200E0118UL)

#else
#define REG_PKTE0_BUF_PTR		(0x200E0118) /**< \brief (PKTE0) PKTE0 Packet Engine Buffer Pointer Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_DMA_CFG : (32) PKTE0 Packet Engine DMA Configuration Register ----- */
typedef union {
	struct {
		uint32_t MXBRSTSZ:4;			/*!< bit	0..3	Max Burst Size	*/
		uint32_t :12;			/*!< bit	4..15	Reserved	*/
		uint32_t MSTRBIGEND:1;			/*!< bit	16	Master Bigend	*/
		uint32_t :2;			/*!< bit	17..18	Reserved	*/
		uint32_t INCR:1;			/*!< bit	19	Incr Enable	*/
		uint32_t IDLE:1;			/*!< bit	20	Idle Enable	*/
		uint32_t :11;			/*!< bit	21..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_DMA_CFG_Type;
#define REG_PKTE0_DMA_CFG		(*(RwReg *)0x200E0120UL)

#else
#define REG_PKTE0_DMA_CFG		(0x200E0120) /**< \brief (PKTE0) PKTE0 Packet Engine DMA Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_ENDIAN_CFG : (32) PKTE0 Packet Engine Endian Configuration Register ----- */
typedef union {
	struct {
		uint32_t MSTRBSWP:8;			/*!< bit	0..7	Master Byte Swap	*/
		uint32_t :8;			/*!< bit	8..15	Reserved	*/
		uint32_t TGTBSWP:8;			/*!< bit	16..23	Target Byte Swap	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_ENDIAN_CFG_Type;
#define REG_PKTE0_ENDIAN_CFG		(*(RwReg *)0x200E01D0UL)

#else
#define REG_PKTE0_ENDIAN_CFG		(0x200E01D0) /**< \brief (PKTE0) PKTE0 Packet Engine Endian Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_HLT_CTL : (32) PKTE0 PE Halt Control Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	En Halt Mode	*/
		uint32_t RDCD:1;			/*!< bit	1	Halt On Rd Cd	*/
		uint32_t RDSA:1;			/*!< bit	2	Halt On Read Sa	*/
		uint32_t HWRDAT:1;			/*!< bit	3	Halt On Wr Data	*/
		uint32_t WRSA:1;			/*!< bit	4	Halt On Wr Sa	*/
		uint32_t WRRD:1;			/*!< bit	5	Halt On Wr Rd	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_HLT_CTL_Type;
#define REG_PKTE0_HLT_CTL		(*(RwReg *)0x200E01E0UL)

#else
#define REG_PKTE0_HLT_CTL		(0x200E01E0) /**< \brief (PKTE0) PKTE0 PE Halt Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_HLT_STAT : (32) PKTE0 PE Halt Status Register ----- */
typedef union {
	struct {
		uint32_t EN:1;			/*!< bit	0	En Halt Mode	*/
		uint32_t RDCD:1;			/*!< bit	1	Halt On Rd Cd	*/
		uint32_t RDSA:1;			/*!< bit	2	Halt On Rd Sa	*/
		uint32_t WRDAT:1;			/*!< bit	3	Halt On Wr Data	*/
		uint32_t WRSA:1;			/*!< bit	4	Halt On Wr Sa	*/
		uint32_t WRRD:1;			/*!< bit	5	Halt On Wr Rd	*/
		uint32_t :10;			/*!< bit	6..15	Reserved	*/
		uint32_t MNSTATE:4;			/*!< bit	16..19	Main State	*/
		uint32_t RDSASTATE:4;			/*!< bit	20..23	Read Sa State	*/
		uint32_t DATSTATE:3;			/*!< bit	24..26	Data State	*/
		uint32_t :5;			/*!< bit	27..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_HLT_STAT_Type;
#define REG_PKTE0_HLT_STAT		(*(RwReg *)0x200E01E0UL)

#else
#define REG_PKTE0_HLT_STAT		(0x200E01E0) /**< \brief (PKTE0) PKTE0 PE Halt Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_CONT : (32) PKTE0 PE Continue Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_CONT_Type;
#define REG_PKTE0_CONT		(*(RwReg *)0x200E01E4UL)

#else
#define REG_PKTE0_CONT		(0x200E01E4) /**< \brief (PKTE0) PKTE0 PE Continue Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_CLK_CTL : (32) PKTE0 PE Clock Control Register ----- */
typedef union {
	struct {
		uint32_t ENPECLK:1;			/*!< bit	0	En Pe Clk	*/
		uint32_t ENDESCLK:1;			/*!< bit	1	En Des Clk	*/
		uint32_t ENAESCLK:1;			/*!< bit	2	En Aes Clk	*/
		uint32_t :1;			/*!< bit	3	Reserved	*/
		uint32_t ENHSHCLK:1;			/*!< bit	4	En Hash Clk	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_CLK_CTL_Type;
#define REG_PKTE0_CLK_CTL		(*(RwReg *)0x200E01E8UL)

#else
#define REG_PKTE0_CLK_CTL		(0x200E01E8) /**< \brief (PKTE0) PKTE0 PE Clock Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_IUMSK_STAT : (32) PKTE0 Interrupt Unmasked Status Register ----- */
typedef union {
	struct {
		uint32_t CDRTHRSH:1;			/*!< bit	0	CDR Threshold	*/
		uint32_t RDRTHRSH:1;			/*!< bit	1	RDR Threshold	*/
		uint32_t :7;			/*!< bit	2..8	Reserved	*/
		uint32_t OPDN:1;			/*!< bit	9	Operation Done	*/
		uint32_t IBUFTHRSH:1;			/*!< bit	10	Input Buffer Threshold	*/
		uint32_t OBUFTHRSH:1;			/*!< bit	11	Output Buffer Threshold	*/
		uint32_t :3;			/*!< bit	12..14	Reserved	*/
		uint32_t HLT:1;			/*!< bit	15	Halt	*/
		uint32_t RINGERR:1;			/*!< bit	16	PE Ring Error	*/
		uint32_t PROCERR:1;			/*!< bit	17	PE Proc Error	*/
		uint32_t IFERR:1;			/*!< bit	18	Interface Error	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_IUMSK_STAT_Type;
#define REG_PKTE0_IUMSK_STAT		(*(RwReg *)0x200E0200UL)

#else
#define REG_PKTE0_IUMSK_STAT		(0x200E0200) /**< \brief (PKTE0) PKTE0 Interrupt Unmasked Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_IMSK_STAT : (32) PKTE0 Interrupt Masked Status Register ----- */
typedef union {
	struct {
		uint32_t CDRTHRSH:1;			/*!< bit	0	CDR Threshold	*/
		uint32_t RDRTHRSH:1;			/*!< bit	1	RDR Threshold	*/
		uint32_t :7;			/*!< bit	2..8	Reserved	*/
		uint32_t OPDN:1;			/*!< bit	9	Operation Done	*/
		uint32_t IBUFTHRSH:1;			/*!< bit	10	Input Buffer Threshold	*/
		uint32_t OBUFTHRSH:1;			/*!< bit	11	Output Buffer Threshold	*/
		uint32_t :3;			/*!< bit	12..14	Reserved	*/
		uint32_t HLT:1;			/*!< bit	15	Halt	*/
		uint32_t RINGERR:1;			/*!< bit	16	PE Ring Error	*/
		uint32_t PROCERR:1;			/*!< bit	17	PE Proc Error	*/
		uint32_t IFERR:1;			/*!< bit	18	Interface Error	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_IMSK_STAT_Type;
#define REG_PKTE0_IMSK_STAT		(*(RwReg *)0x200E0204UL)

#else
#define REG_PKTE0_IMSK_STAT		(0x200E0204) /**< \brief (PKTE0) PKTE0 Interrupt Masked Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_INT_CLR : (32) PKTE0 Interrupt Clear Register ----- */
typedef union {
	struct {
		uint32_t CDRTHRSH:1;			/*!< bit	0	CDR Threshold	*/
		uint32_t RDRTHRSH:1;			/*!< bit	1	RDR Threshold	*/
		uint32_t :7;			/*!< bit	2..8	Reserved	*/
		uint32_t OPDN:1;			/*!< bit	9	Operation Done	*/
		uint32_t IBUFTHRSH:1;			/*!< bit	10	Input Buffer Threshold	*/
		uint32_t OBUFTHRSH:1;			/*!< bit	11	Output Buffer Threshold	*/
		uint32_t :3;			/*!< bit	12..14	Reserved	*/
		uint32_t HLT:1;			/*!< bit	15	Halt	*/
		uint32_t RINGERR:1;			/*!< bit	16	PE Ring Error	*/
		uint32_t PROCERR:1;			/*!< bit	17	PE Proc Error	*/
		uint32_t IFERR:1;			/*!< bit	18	Interface Error	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_INT_CLR_Type;
#define REG_PKTE0_INT_CLR		(*(RwReg *)0x200E0204UL)

#else
#define REG_PKTE0_INT_CLR		(0x200E0204) /**< \brief (PKTE0) PKTE0 Interrupt Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_INT_EN : (32) PKTE0 Interrupt Enable Register ----- */
typedef union {
	struct {
		uint32_t CDRTHRSH:1;			/*!< bit	0	CDR Threshold	*/
		uint32_t RDRTHRSH:1;			/*!< bit	1	RDR Threshold	*/
		uint32_t :7;			/*!< bit	2..8	Reserved	*/
		uint32_t OPDN:1;			/*!< bit	9	Operation Done	*/
		uint32_t IBUFTHRSH:1;			/*!< bit	10	Input Buffer Threshold	*/
		uint32_t OBUFTHRSH:1;			/*!< bit	11	Output Buffer Threshold	*/
		uint32_t :3;			/*!< bit	12..14	Reserved	*/
		uint32_t HLT:1;			/*!< bit	15	Halt	*/
		uint32_t RINGERR:1;			/*!< bit	16	PE Ring Error	*/
		uint32_t PROCERR:1;			/*!< bit	17	PE Proc Error	*/
		uint32_t IFERR:1;			/*!< bit	18	Interface Error	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_INT_EN_Type;
#define REG_PKTE0_INT_EN		(*(RwReg *)0x200E0208UL)

#else
#define REG_PKTE0_INT_EN		(0x200E0208) /**< \brief (PKTE0) PKTE0 Interrupt Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_INT_CFG : (32) PKTE0 Interrupt Configuration Register ----- */
typedef union {
	struct {
		uint32_t TYPE:1;			/*!< bit	0	Int Type	*/
		uint32_t PULSECLR:1;			/*!< bit	1	Int Pulse Clr	*/
		uint32_t :30;			/*!< bit	2..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_INT_CFG_Type;
#define REG_PKTE0_INT_CFG		(*(RwReg *)0x200E020CUL)

#else
#define REG_PKTE0_INT_CFG		(0x200E020C) /**< \brief (PKTE0) PKTE0 Interrupt Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_IMSK_EN : (32) PKTE0 Interrupt Mask Enable Register ----- */
typedef union {
	struct {
		uint32_t CDRTHRSH:1;			/*!< bit	0	CDR Threshold	*/
		uint32_t RDRTHRSH:1;			/*!< bit	1	RDR Threshold	*/
		uint32_t :7;			/*!< bit	2..8	Reserved	*/
		uint32_t OPDN:1;			/*!< bit	9	Operation Done	*/
		uint32_t IBUFTHRSH:1;			/*!< bit	10	Input Buffer Threshold	*/
		uint32_t OBUFTHRSH:1;			/*!< bit	11	Output Buffer Threshold	*/
		uint32_t :3;			/*!< bit	12..14	Reserved	*/
		uint32_t HLT:1;			/*!< bit	15	Halt	*/
		uint32_t RINGERR:1;			/*!< bit	16	PE Ring Error	*/
		uint32_t PROCERR:1;			/*!< bit	17	PE Proc Error	*/
		uint32_t IFERR:1;			/*!< bit	18	Interface Error	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_IMSK_EN_Type;
#define REG_PKTE0_IMSK_EN		(*(RwReg *)0x200E0210UL)

#else
#define REG_PKTE0_IMSK_EN		(0x200E0210) /**< \brief (PKTE0) PKTE0 Interrupt Mask Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_IMSK_DIS : (32) PKTE0 Interrupt Mask Disable Register ----- */
typedef union {
	struct {
		uint32_t CDRTHRSH:1;			/*!< bit	0	CDR Threshold	*/
		uint32_t RDRTHRSH:1;			/*!< bit	1	RDR Threshold	*/
		uint32_t :7;			/*!< bit	2..8	Reserved	*/
		uint32_t OPDN:1;			/*!< bit	9	Operation Done	*/
		uint32_t IBUFTHRSH:1;			/*!< bit	10	Input Buffer Threshold	*/
		uint32_t OBUFTHRSH:1;			/*!< bit	11	Output Buffer Threshold	*/
		uint32_t :3;			/*!< bit	12..14	Reserved	*/
		uint32_t HLT:1;			/*!< bit	15	Halt	*/
		uint32_t RINGERR:1;			/*!< bit	16	PE Ring Error	*/
		uint32_t PROCERR:1;			/*!< bit	17	PE Proc Error	*/
		uint32_t IFERR:1;			/*!< bit	18	Interface Error	*/
		uint32_t :13;			/*!< bit	19..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_IMSK_DIS_Type;
#define REG_PKTE0_IMSK_DIS		(*(RwReg *)0x200E0214UL)

#else
#define REG_PKTE0_IMSK_DIS		(0x200E0214) /**< \brief (PKTE0) PKTE0 Interrupt Mask Disable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_CMD0 : (32) PKTE0 SA Command 0 ----- */
typedef union {
	struct {
		uint32_t OPCD:3;			/*!< bit	0..2	Op Code	*/
		uint32_t DIR:1;			/*!< bit	3	Direction	*/
		uint32_t OPGRP:2;			/*!< bit	4..5	Op Group	*/
		uint32_t PADTYPE:2;			/*!< bit	6..7	Pad Type	*/
		uint32_t CIPHER:4;			/*!< bit	8..11	Cipher Algorithm Select	*/
		uint32_t HASH:4;			/*!< bit	12..15	Hash Algorithm Select	*/
		uint32_t :1;			/*!< bit	16	Reserved	*/
		uint32_t SCPAD:1;			/*!< bit	17	Stream Cipher Padding	*/
		uint32_t EXTPAD:1;			/*!< bit	18	Ext Pad	*/
		uint32_t HDRPROC:1;			/*!< bit	19	Hdr Proc	*/
		uint32_t DIGESTLEN:4;			/*!< bit	20..23	Digest Length	*/
		uint32_t IVSRC:2;			/*!< bit	24..25	Iv Source	*/
		uint32_t HASHSRC:2;			/*!< bit	26..27	Hash Source	*/
		uint32_t SVIV:1;			/*!< bit	28	Save Iv	*/
		uint32_t SVHASH:1;			/*!< bit	29	Save Hash	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_CMD0_Type;
#define REG_PKTE0_SA_CMD0		(*(RwReg *)0x200E0400UL)

#else
#define REG_PKTE0_SA_CMD0		(0x200E0400) /**< \brief (PKTE0) PKTE0 SA Command 0 */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_CMD1 : (32) PKTE0 SA Command 1 ----- */
typedef union {
	struct {
		uint32_t CPYDGST:1;			/*!< bit	0	Copy Digest	*/
		uint32_t CPYHDR:1;			/*!< bit	1	Copy Header	*/
		uint32_t CPYPAYLD:1;			/*!< bit	2	Copy Payload	*/
		uint32_t CPYPAD:1;			/*!< bit	3	Copy Pad	*/
		uint32_t :4;			/*!< bit	4..7	Reserved	*/
		uint32_t CIPHERMD:2;			/*!< bit	8..9	Cipher Mode	*/
		uint32_t :2;			/*!< bit	10..11	Reserved	*/
		uint32_t HMAC:1;			/*!< bit	12	Keyed-Hash SSL Message Authentication Code	*/
		uint32_t BYTEOFFST:1;			/*!< bit	13	Byte Offset	*/
		uint32_t :2;			/*!< bit	14..15	Reserved	*/
		uint32_t HSHCOFFST:8;			/*!< bit	16..23	Hash Crypt Offset	*/
		uint32_t AESKEYLEN:3;			/*!< bit	24..26	Aes Key Length	*/
		uint32_t :1;			/*!< bit	27	Reserved	*/
		uint32_t AESDECKEY:1;			/*!< bit	28	Aes Dec Key	*/
		uint32_t ENSQNCHK:1;			/*!< bit	29	En Seqnum Chk	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_CMD1_Type;
#define REG_PKTE0_SA_CMD1		(*(RwReg *)0x200E0404UL)

#else
#define REG_PKTE0_SA_CMD1		(0x200E0404) /**< \brief (PKTE0) PKTE0 SA Command 1 */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_KEY0 : (32) PKTE0 SA Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_KEY0_Type;
#define REG_PKTE0_SA_KEY0		(*(RwReg *)0x200E0408UL)

#else
#define REG_PKTE0_SA_KEY0		(0x200E0408) /**< \brief (PKTE0) PKTE0 SA Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_KEY1 : (32) PKTE0 SA Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_KEY1_Type;
#define REG_PKTE0_SA_KEY1		(*(RwReg *)0x200E040CUL)

#else
#define REG_PKTE0_SA_KEY1		(0x200E040C) /**< \brief (PKTE0) PKTE0 SA Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_KEY2 : (32) PKTE0 SA Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_KEY2_Type;
#define REG_PKTE0_SA_KEY2		(*(RwReg *)0x200E0410UL)

#else
#define REG_PKTE0_SA_KEY2		(0x200E0410) /**< \brief (PKTE0) PKTE0 SA Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_KEY3 : (32) PKTE0 SA Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_KEY3_Type;
#define REG_PKTE0_SA_KEY3		(*(RwReg *)0x200E0414UL)

#else
#define REG_PKTE0_SA_KEY3		(0x200E0414) /**< \brief (PKTE0) PKTE0 SA Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_KEY4 : (32) PKTE0 SA Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_KEY4_Type;
#define REG_PKTE0_SA_KEY4		(*(RwReg *)0x200E0418UL)

#else
#define REG_PKTE0_SA_KEY4		(0x200E0418) /**< \brief (PKTE0) PKTE0 SA Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_KEY5 : (32) PKTE0 SA Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_KEY5_Type;
#define REG_PKTE0_SA_KEY5		(*(RwReg *)0x200E041CUL)

#else
#define REG_PKTE0_SA_KEY5		(0x200E041C) /**< \brief (PKTE0) PKTE0 SA Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_KEY6 : (32) PKTE0 SA Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_KEY6_Type;
#define REG_PKTE0_SA_KEY6		(*(RwReg *)0x200E0420UL)

#else
#define REG_PKTE0_SA_KEY6		(0x200E0420) /**< \brief (PKTE0) PKTE0 SA Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_KEY7 : (32) PKTE0 SA Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_KEY7_Type;
#define REG_PKTE0_SA_KEY7		(*(RwReg *)0x200E0424UL)

#else
#define REG_PKTE0_SA_KEY7		(0x200E0424) /**< \brief (PKTE0) PKTE0 SA Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_IDIGEST0 : (32) PKTE0 SA Inner Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_IDIGEST0_Type;
#define REG_PKTE0_SA_IDIGEST0		(*(RwReg *)0x200E0428UL)

#else
#define REG_PKTE0_SA_IDIGEST0		(0x200E0428) /**< \brief (PKTE0) PKTE0 SA Inner Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_IDIGEST1 : (32) PKTE0 SA Inner Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_IDIGEST1_Type;
#define REG_PKTE0_SA_IDIGEST1		(*(RwReg *)0x200E042CUL)

#else
#define REG_PKTE0_SA_IDIGEST1		(0x200E042C) /**< \brief (PKTE0) PKTE0 SA Inner Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_IDIGEST2 : (32) PKTE0 SA Inner Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_IDIGEST2_Type;
#define REG_PKTE0_SA_IDIGEST2		(*(RwReg *)0x200E0430UL)

#else
#define REG_PKTE0_SA_IDIGEST2		(0x200E0430) /**< \brief (PKTE0) PKTE0 SA Inner Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_IDIGEST3 : (32) PKTE0 SA Inner Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_IDIGEST3_Type;
#define REG_PKTE0_SA_IDIGEST3		(*(RwReg *)0x200E0434UL)

#else
#define REG_PKTE0_SA_IDIGEST3		(0x200E0434) /**< \brief (PKTE0) PKTE0 SA Inner Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_IDIGEST4 : (32) PKTE0 SA Inner Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_IDIGEST4_Type;
#define REG_PKTE0_SA_IDIGEST4		(*(RwReg *)0x200E0438UL)

#else
#define REG_PKTE0_SA_IDIGEST4		(0x200E0438) /**< \brief (PKTE0) PKTE0 SA Inner Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_IDIGEST5 : (32) PKTE0 SA Inner Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_IDIGEST5_Type;
#define REG_PKTE0_SA_IDIGEST5		(*(RwReg *)0x200E043CUL)

#else
#define REG_PKTE0_SA_IDIGEST5		(0x200E043C) /**< \brief (PKTE0) PKTE0 SA Inner Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_IDIGEST6 : (32) PKTE0 SA Inner Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_IDIGEST6_Type;
#define REG_PKTE0_SA_IDIGEST6		(*(RwReg *)0x200E0440UL)

#else
#define REG_PKTE0_SA_IDIGEST6		(0x200E0440) /**< \brief (PKTE0) PKTE0 SA Inner Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_IDIGEST7 : (32) PKTE0 SA Inner Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_IDIGEST7_Type;
#define REG_PKTE0_SA_IDIGEST7		(*(RwReg *)0x200E0444UL)

#else
#define REG_PKTE0_SA_IDIGEST7		(0x200E0444) /**< \brief (PKTE0) PKTE0 SA Inner Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ODIGEST0 : (32) PKTE0 SA Outer Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ODIGEST0_Type;
#define REG_PKTE0_SA_ODIGEST0		(*(RwReg *)0x200E0448UL)

#else
#define REG_PKTE0_SA_ODIGEST0		(0x200E0448) /**< \brief (PKTE0) PKTE0 SA Outer Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ODIGEST1 : (32) PKTE0 SA Outer Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ODIGEST1_Type;
#define REG_PKTE0_SA_ODIGEST1		(*(RwReg *)0x200E044CUL)

#else
#define REG_PKTE0_SA_ODIGEST1		(0x200E044C) /**< \brief (PKTE0) PKTE0 SA Outer Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ODIGEST2 : (32) PKTE0 SA Outer Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ODIGEST2_Type;
#define REG_PKTE0_SA_ODIGEST2		(*(RwReg *)0x200E0450UL)

#else
#define REG_PKTE0_SA_ODIGEST2		(0x200E0450) /**< \brief (PKTE0) PKTE0 SA Outer Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ODIGEST3 : (32) PKTE0 SA Outer Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ODIGEST3_Type;
#define REG_PKTE0_SA_ODIGEST3		(*(RwReg *)0x200E0454UL)

#else
#define REG_PKTE0_SA_ODIGEST3		(0x200E0454) /**< \brief (PKTE0) PKTE0 SA Outer Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ODIGEST4 : (32) PKTE0 SA Outer Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ODIGEST4_Type;
#define REG_PKTE0_SA_ODIGEST4		(*(RwReg *)0x200E0458UL)

#else
#define REG_PKTE0_SA_ODIGEST4		(0x200E0458) /**< \brief (PKTE0) PKTE0 SA Outer Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ODIGEST5 : (32) PKTE0 SA Outer Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ODIGEST5_Type;
#define REG_PKTE0_SA_ODIGEST5		(*(RwReg *)0x200E045CUL)

#else
#define REG_PKTE0_SA_ODIGEST5		(0x200E045C) /**< \brief (PKTE0) PKTE0 SA Outer Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ODIGEST6 : (32) PKTE0 SA Outer Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ODIGEST6_Type;
#define REG_PKTE0_SA_ODIGEST6		(*(RwReg *)0x200E0460UL)

#else
#define REG_PKTE0_SA_ODIGEST6		(0x200E0460) /**< \brief (PKTE0) PKTE0 SA Outer Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_ODIGEST7 : (32) PKTE0 SA Outer Hash Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_ODIGEST7_Type;
#define REG_PKTE0_SA_ODIGEST7		(*(RwReg *)0x200E0464UL)

#else
#define REG_PKTE0_SA_ODIGEST7		(0x200E0464) /**< \brief (PKTE0) PKTE0 SA Outer Hash Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_SPI : (32) PKTE0 SA SPI Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_SPI_Type;
#define REG_PKTE0_SA_SPI		(*(RwReg *)0x200E0468UL)

#else
#define REG_PKTE0_SA_SPI		(0x200E0468) /**< \brief (PKTE0) PKTE0 SA SPI Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_SEQNUM0 : (32) PKTE0 SA Sequence Number Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_SEQNUM0_Type;
#define REG_PKTE0_SA_SEQNUM0		(*(RwReg *)0x200E046CUL)

#else
#define REG_PKTE0_SA_SEQNUM0		(0x200E046C) /**< \brief (PKTE0) PKTE0 SA Sequence Number Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_SEQNUM1 : (32) PKTE0 SA Sequence Number Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_SEQNUM1_Type;
#define REG_PKTE0_SA_SEQNUM1		(*(RwReg *)0x200E0470UL)

#else
#define REG_PKTE0_SA_SEQNUM1		(0x200E0470) /**< \brief (PKTE0) PKTE0 SA Sequence Number Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_SEQNUM_MSK0 : (32) PKTE0 SA Sequence Number Mask Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_SEQNUM_MSK0_Type;
#define REG_PKTE0_SA_SEQNUM_MSK0		(*(RwReg *)0x200E0474UL)

#else
#define REG_PKTE0_SA_SEQNUM_MSK0		(0x200E0474) /**< \brief (PKTE0) PKTE0 SA Sequence Number Mask Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_SEQNUM_MSK1 : (32) PKTE0 SA Sequence Number Mask Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_SEQNUM_MSK1_Type;
#define REG_PKTE0_SA_SEQNUM_MSK1		(*(RwReg *)0x200E0478UL)

#else
#define REG_PKTE0_SA_SEQNUM_MSK1		(0x200E0478) /**< \brief (PKTE0) PKTE0 SA Sequence Number Mask Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_RDY : (32) PKTE0 SA Ready Indicator ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_RDY_Type;
#define REG_PKTE0_SA_RDY		(*(RwReg *)0x200E047CUL)

#else
#define REG_PKTE0_SA_RDY		(0x200E047C) /**< \brief (PKTE0) PKTE0 SA Ready Indicator */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_SA_NONCE : (32) PKTE0 SA Initialization Vector Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_SA_NONCE_Type;
#define REG_PKTE0_SA_NONCE		(*(RwReg *)0x200E047CUL)

#else
#define REG_PKTE0_SA_NONCE		(0x200E047C) /**< \brief (PKTE0) PKTE0 SA Initialization Vector Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IV0 : (32) PKTE0 State Initialization Vector Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IV0_Type;
#define REG_PKTE0_STATE_IV0		(*(RwReg *)0x200E0500UL)

#else
#define REG_PKTE0_STATE_IV0		(0x200E0500) /**< \brief (PKTE0) PKTE0 State Initialization Vector Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IV1 : (32) PKTE0 State Initialization Vector Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IV1_Type;
#define REG_PKTE0_STATE_IV1		(*(RwReg *)0x200E0504UL)

#else
#define REG_PKTE0_STATE_IV1		(0x200E0504) /**< \brief (PKTE0) PKTE0 State Initialization Vector Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IV2 : (32) PKTE0 State Initialization Vector Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IV2_Type;
#define REG_PKTE0_STATE_IV2		(*(RwReg *)0x200E0508UL)

#else
#define REG_PKTE0_STATE_IV2		(0x200E0508) /**< \brief (PKTE0) PKTE0 State Initialization Vector Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IV3 : (32) PKTE0 State Initialization Vector Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IV3_Type;
#define REG_PKTE0_STATE_IV3		(*(RwReg *)0x200E050CUL)

#else
#define REG_PKTE0_STATE_IV3		(0x200E050C) /**< \brief (PKTE0) PKTE0 State Initialization Vector Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_BYTE_CNT0 : (32) PKTE0 State Hash Byte Count Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_BYTE_CNT0_Type;
#define REG_PKTE0_STATE_BYTE_CNT0		(*(RwReg *)0x200E0510UL)

#else
#define REG_PKTE0_STATE_BYTE_CNT0		(0x200E0510) /**< \brief (PKTE0) PKTE0 State Hash Byte Count Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_BYTE_CNT1 : (32) PKTE0 State Hash Byte Count Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_BYTE_CNT1_Type;
#define REG_PKTE0_STATE_BYTE_CNT1		(*(RwReg *)0x200E0514UL)

#else
#define REG_PKTE0_STATE_BYTE_CNT1		(0x200E0514) /**< \brief (PKTE0) PKTE0 State Hash Byte Count Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IDIGEST0 : (32) PKTE0 State Inner Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IDIGEST0_Type;
#define REG_PKTE0_STATE_IDIGEST0		(*(RwReg *)0x200E0518UL)

#else
#define REG_PKTE0_STATE_IDIGEST0		(0x200E0518) /**< \brief (PKTE0) PKTE0 State Inner Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IDIGEST1 : (32) PKTE0 State Inner Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IDIGEST1_Type;
#define REG_PKTE0_STATE_IDIGEST1		(*(RwReg *)0x200E051CUL)

#else
#define REG_PKTE0_STATE_IDIGEST1		(0x200E051C) /**< \brief (PKTE0) PKTE0 State Inner Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IDIGEST2 : (32) PKTE0 State Inner Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IDIGEST2_Type;
#define REG_PKTE0_STATE_IDIGEST2		(*(RwReg *)0x200E0520UL)

#else
#define REG_PKTE0_STATE_IDIGEST2		(0x200E0520) /**< \brief (PKTE0) PKTE0 State Inner Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IDIGEST3 : (32) PKTE0 State Inner Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IDIGEST3_Type;
#define REG_PKTE0_STATE_IDIGEST3		(*(RwReg *)0x200E0524UL)

#else
#define REG_PKTE0_STATE_IDIGEST3		(0x200E0524) /**< \brief (PKTE0) PKTE0 State Inner Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IDIGEST4 : (32) PKTE0 State Inner Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IDIGEST4_Type;
#define REG_PKTE0_STATE_IDIGEST4		(*(RwReg *)0x200E0528UL)

#else
#define REG_PKTE0_STATE_IDIGEST4		(0x200E0528) /**< \brief (PKTE0) PKTE0 State Inner Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IDIGEST5 : (32) PKTE0 State Inner Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IDIGEST5_Type;
#define REG_PKTE0_STATE_IDIGEST5		(*(RwReg *)0x200E052CUL)

#else
#define REG_PKTE0_STATE_IDIGEST5		(0x200E052C) /**< \brief (PKTE0) PKTE0 State Inner Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IDIGEST6 : (32) PKTE0 State Inner Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IDIGEST6_Type;
#define REG_PKTE0_STATE_IDIGEST6		(*(RwReg *)0x200E0530UL)

#else
#define REG_PKTE0_STATE_IDIGEST6		(0x200E0530) /**< \brief (PKTE0) PKTE0 State Inner Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_STATE_IDIGEST7 : (32) PKTE0 State Inner Digest Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_STATE_IDIGEST7_Type;
#define REG_PKTE0_STATE_IDIGEST7		(*(RwReg *)0x200E0534UL)

#else
#define REG_PKTE0_STATE_IDIGEST7		(0x200E0534) /**< \brief (PKTE0) PKTE0 State Inner Digest Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKTE0_DATAIO_BUF : (32) PKTE0 Starting Entry of 256-byte Data Input/Output Buffer ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKTE0_DATAIO_BUF_Type;
#define REG_PKTE0_DATAIO_BUF		(*(RwReg *)0x200E0800UL)

#else
#define REG_PKTE0_DATAIO_BUF		(0x200E0800) /**< \brief (PKTE0) PKTE0 Starting Entry of 256-byte Data Input/Output Buffer */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PKTE0_CTL_STAT_Type		CTL_STAT;		/**< \brief PKTE0 Packet Engine Control Register */
	__IO PKTE0_SRC_ADDR_Type		SRC_ADDR;		/**< \brief PKTE0 Packet Engine Source Address */
	__IO PKTE0_DEST_ADDR_Type		DEST_ADDR;		/**< \brief PKTE0 Packet Engine Destination Address */
	__IO PKTE0_SA_ADDR_Type		SA_ADDR;		/**< \brief PKTE0 Packet Engine SA Address */
	__IO PKTE0_STATE_ADDR_Type		STATE_ADDR;		/**< \brief PKTE0 Packet Engine State Record Address */
		 RoReg8		Reserved1[0x04];		
	__IO PKTE0_USERID_Type		USERID;		/**< \brief PKTE0 Packet Engine User ID */
	__IO PKTE0_LEN_Type		LEN;		/**< \brief PKTE0 Packet Engine Length Register */
		 RoReg8		Reserved2[0x60];		
	__IO PKTE0_CDRBASE_ADDR_Type		CDRBASE_ADDR;		/**< \brief PKTE0 PE Command Descriptor Ring Base Address */
	__IO PKTE0_RDRBASE_ADDR_Type		RDRBASE_ADDR;		/**< \brief PKTE0 PE Result Descriptor Ring Base Address */
	__IO PKTE0_RING_CFG_Type		RING_CFG;		/**< \brief PKTE0 PE Ring Configuration */
	__IO PKTE0_RING_THRESH_Type		RING_THRESH;		/**< \brief PKTE0 PE Ring Threshold Registers */
	__IO PKTE0_CDSC_INCR_Type		CDSC_INCR;		/**< \brief PKTE0 PE Command Descriptor Count Increment Register */
	__IO PKTE0_CDSC_CNT_Type		CDSC_CNT;		/**< \brief PKTE0 PE Command Descriptor Count Register */
	__IO PKTE0_RDSC_DECR_Type		RDSC_DECR;		/**< \brief PKTE0 PE Result Descriptor Count Decrement Registers */
	__IO PKTE0_RDSC_CNT_Type		RDSC_CNT;		/**< \brief PKTE0 PE Result Descriptor Count Registers */
	__IO PKTE0_RING_PTR_Type		RING_PTR;		/**< \brief PKTE0 PE Ring Pointer Status */
	__IO PKTE0_RING_STAT_Type		RING_STAT;		/**< \brief PKTE0 PE Ring Status */
		 RoReg8		Reserved3[0x60];		
	__IO PKTE0_CFG_Type		CFG;		/**< \brief PKTE0 PE Configuration Register */
	__IO PKTE0_STAT_Type		STAT;		/**< \brief PKTE0 PE Status Register */
		 RoReg8		Reserved4[0x04];		
	__IO PKTE0_BUF_THRESH_Type		BUF_THRESH;		/**< \brief PKTE0 PE Buffer Threshold Register */
	__IO PKTE0_INBUF_INCR_Type		INBUF_INCR;		/**< \brief PKTE0 Packet Engine Input Buffer Count Increment Register */
	__IO PKTE0_INBUF_CNT_Type		INBUF_CNT;		/**< \brief PKTE0 Packet Engine Input Buffer Count Register */
	__IO PKTE0_OUTBUF_CNT_Type		OUTBUF_CNT;		/**< \brief PKTE0 Packet Engine Output Buffer Count Register */
	__IO PKTE0_OUTBUF_DECR_Type		OUTBUF_DECR;		/**< \brief PKTE0 Packet Engine Output Buffer Count Decrement Register */
	__IO PKTE0_BUF_PTR_Type		BUF_PTR;		/**< \brief PKTE0 Packet Engine Buffer Pointer Register */
		 RoReg8		Reserved5[0x04];		
	__IO PKTE0_DMA_CFG_Type		DMA_CFG;		/**< \brief PKTE0 Packet Engine DMA Configuration Register */
		 RoReg8		Reserved6[0xac];		
	__IO PKTE0_ENDIAN_CFG_Type		ENDIAN_CFG;		/**< \brief PKTE0 Packet Engine Endian Configuration Register */
		 RoReg8		Reserved7[0x0c];		
	__IO PKTE0_HLT_STAT_Type		HLT_STAT;		/**< \brief PKTE0 PE Halt Status Register */
	__IO PKTE0_HLT_CTL_Type		HLT_CTL;		/**< \brief PKTE0 PE Halt Control Register */
	__IO PKTE0_CONT_Type		CONT;		/**< \brief PKTE0 PE Continue Register */
	__IO PKTE0_CLK_CTL_Type		CLK_CTL;		/**< \brief PKTE0 PE Clock Control Register */
		 RoReg8		Reserved8[0x14];		
	__IO PKTE0_IUMSK_STAT_Type		IUMSK_STAT;		/**< \brief PKTE0 Interrupt Unmasked Status Register */
	__IO PKTE0_IMSK_STAT_Type		IMSK_STAT;		/**< \brief PKTE0 Interrupt Masked Status Register */
	__IO PKTE0_INT_CLR_Type		INT_CLR;		/**< \brief PKTE0 Interrupt Clear Register */
	__IO PKTE0_INT_EN_Type		INT_EN;		/**< \brief PKTE0 Interrupt Enable Register */
	__IO PKTE0_INT_CFG_Type		INT_CFG;		/**< \brief PKTE0 Interrupt Configuration Register */
	__IO PKTE0_IMSK_EN_Type		IMSK_EN;		/**< \brief PKTE0 Interrupt Mask Enable Register */
	__IO PKTE0_IMSK_DIS_Type		IMSK_DIS;		/**< \brief PKTE0 Interrupt Mask Disable Register */
		 RoReg8		Reserved9[0x1e8];		
	__IO PKTE0_SA_CMD0_Type		SA_CMD0;		/**< \brief PKTE0 SA Command 0 */
	__IO PKTE0_SA_CMD1_Type		SA_CMD1;		/**< \brief PKTE0 SA Command 1 */
	__IO PKTE0_SA_KEY0_Type		SA_KEY0;		/**< \brief PKTE0 SA Key Registers */
	__IO PKTE0_SA_KEY1_Type		SA_KEY1;		/**< \brief PKTE0 SA Key Registers */
	__IO PKTE0_SA_KEY2_Type		SA_KEY2;		/**< \brief PKTE0 SA Key Registers */
	__IO PKTE0_SA_KEY3_Type		SA_KEY3;		/**< \brief PKTE0 SA Key Registers */
	__IO PKTE0_SA_KEY4_Type		SA_KEY4;		/**< \brief PKTE0 SA Key Registers */
	__IO PKTE0_SA_KEY5_Type		SA_KEY5;		/**< \brief PKTE0 SA Key Registers */
	__IO PKTE0_SA_KEY6_Type		SA_KEY6;		/**< \brief PKTE0 SA Key Registers */
	__IO PKTE0_SA_KEY7_Type		SA_KEY7;		/**< \brief PKTE0 SA Key Registers */
	__IO PKTE0_SA_IDIGEST0_Type		SA_IDIGEST0;		/**< \brief PKTE0 SA Inner Hash Digest Registers */
	__IO PKTE0_SA_IDIGEST1_Type		SA_IDIGEST1;		/**< \brief PKTE0 SA Inner Hash Digest Registers */
	__IO PKTE0_SA_IDIGEST2_Type		SA_IDIGEST2;		/**< \brief PKTE0 SA Inner Hash Digest Registers */
	__IO PKTE0_SA_IDIGEST3_Type		SA_IDIGEST3;		/**< \brief PKTE0 SA Inner Hash Digest Registers */
	__IO PKTE0_SA_IDIGEST4_Type		SA_IDIGEST4;		/**< \brief PKTE0 SA Inner Hash Digest Registers */
	__IO PKTE0_SA_IDIGEST5_Type		SA_IDIGEST5;		/**< \brief PKTE0 SA Inner Hash Digest Registers */
	__IO PKTE0_SA_IDIGEST6_Type		SA_IDIGEST6;		/**< \brief PKTE0 SA Inner Hash Digest Registers */
	__IO PKTE0_SA_IDIGEST7_Type		SA_IDIGEST7;		/**< \brief PKTE0 SA Inner Hash Digest Registers */
	__IO PKTE0_SA_ODIGEST0_Type		SA_ODIGEST0;		/**< \brief PKTE0 SA Outer Hash Digest Registers */
	__IO PKTE0_SA_ODIGEST1_Type		SA_ODIGEST1;		/**< \brief PKTE0 SA Outer Hash Digest Registers */
	__IO PKTE0_SA_ODIGEST2_Type		SA_ODIGEST2;		/**< \brief PKTE0 SA Outer Hash Digest Registers */
	__IO PKTE0_SA_ODIGEST3_Type		SA_ODIGEST3;		/**< \brief PKTE0 SA Outer Hash Digest Registers */
	__IO PKTE0_SA_ODIGEST4_Type		SA_ODIGEST4;		/**< \brief PKTE0 SA Outer Hash Digest Registers */
	__IO PKTE0_SA_ODIGEST5_Type		SA_ODIGEST5;		/**< \brief PKTE0 SA Outer Hash Digest Registers */
	__IO PKTE0_SA_ODIGEST6_Type		SA_ODIGEST6;		/**< \brief PKTE0 SA Outer Hash Digest Registers */
	__IO PKTE0_SA_ODIGEST7_Type		SA_ODIGEST7;		/**< \brief PKTE0 SA Outer Hash Digest Registers */
	__IO PKTE0_SA_SPI_Type		SA_SPI;		/**< \brief PKTE0 SA SPI Register */
	__IO PKTE0_SA_SEQNUM0_Type		SA_SEQNUM0;		/**< \brief PKTE0 SA Sequence Number Register */
	__IO PKTE0_SA_SEQNUM1_Type		SA_SEQNUM1;		/**< \brief PKTE0 SA Sequence Number Register */
	__IO PKTE0_SA_SEQNUM_MSK0_Type		SA_SEQNUM_MSK0;		/**< \brief PKTE0 SA Sequence Number Mask Registers */
	__IO PKTE0_SA_SEQNUM_MSK1_Type		SA_SEQNUM_MSK1;		/**< \brief PKTE0 SA Sequence Number Mask Registers */
	__IO PKTE0_SA_RDY_Type		SA_RDY;		/**< \brief PKTE0 SA Ready Indicator */
	__IO PKTE0_SA_NONCE_Type		SA_NONCE;		/**< \brief PKTE0 SA Initialization Vector Register */
		 RoReg8		Reserved10[0x80];		
	__IO PKTE0_STATE_IV0_Type		STATE_IV0;		/**< \brief PKTE0 State Initialization Vector Registers */
	__IO PKTE0_STATE_IV1_Type		STATE_IV1;		/**< \brief PKTE0 State Initialization Vector Registers */
	__IO PKTE0_STATE_IV2_Type		STATE_IV2;		/**< \brief PKTE0 State Initialization Vector Registers */
	__IO PKTE0_STATE_IV3_Type		STATE_IV3;		/**< \brief PKTE0 State Initialization Vector Registers */
	__IO PKTE0_STATE_BYTE_CNT0_Type		STATE_BYTE_CNT0;		/**< \brief PKTE0 State Hash Byte Count Registers */
	__IO PKTE0_STATE_BYTE_CNT1_Type		STATE_BYTE_CNT1;		/**< \brief PKTE0 State Hash Byte Count Registers */
	__IO PKTE0_STATE_IDIGEST0_Type		STATE_IDIGEST0;		/**< \brief PKTE0 State Inner Digest Registers */
	__IO PKTE0_STATE_IDIGEST1_Type		STATE_IDIGEST1;		/**< \brief PKTE0 State Inner Digest Registers */
	__IO PKTE0_STATE_IDIGEST2_Type		STATE_IDIGEST2;		/**< \brief PKTE0 State Inner Digest Registers */
	__IO PKTE0_STATE_IDIGEST3_Type		STATE_IDIGEST3;		/**< \brief PKTE0 State Inner Digest Registers */
	__IO PKTE0_STATE_IDIGEST4_Type		STATE_IDIGEST4;		/**< \brief PKTE0 State Inner Digest Registers */
	__IO PKTE0_STATE_IDIGEST5_Type		STATE_IDIGEST5;		/**< \brief PKTE0 State Inner Digest Registers */
	__IO PKTE0_STATE_IDIGEST6_Type		STATE_IDIGEST6;		/**< \brief PKTE0 State Inner Digest Registers */
	__IO PKTE0_STATE_IDIGEST7_Type		STATE_IDIGEST7;		/**< \brief PKTE0 State Inner Digest Registers */
		 RoReg8		Reserved11[0x2c8];		
	__IO PKTE0_DATAIO_BUF_Type		DATAIO_BUF;		/**< \brief PKTE0 Starting Entry of 256-byte Data Input/Output Buffer */
} Pkte0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_OUTPUT0 : (32) TRNG0 TRNG Output Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_OUTPUT0_Type;
#define REG_TRNG0_OUTPUT0		(*(RwReg *)0x200F0000UL)

#else
#define REG_TRNG0_OUTPUT0		(0x200F0000) /**< \brief (TRNG0) TRNG0 TRNG Output Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_OUTPUT1 : (32) TRNG0 TRNG Output Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_OUTPUT1_Type;
#define REG_TRNG0_OUTPUT1		(*(RwReg *)0x200F0004UL)

#else
#define REG_TRNG0_OUTPUT1		(0x200F0004) /**< \brief (TRNG0) TRNG0 TRNG Output Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_OUTPUT2 : (32) TRNG0 TRNG Output Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_OUTPUT2_Type;
#define REG_TRNG0_OUTPUT2		(*(RwReg *)0x200F0008UL)

#else
#define REG_TRNG0_OUTPUT2		(0x200F0008) /**< \brief (TRNG0) TRNG0 TRNG Output Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_OUTPUT3 : (32) TRNG0 TRNG Output Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_OUTPUT3_Type;
#define REG_TRNG0_OUTPUT3		(*(RwReg *)0x200F000CUL)

#else
#define REG_TRNG0_OUTPUT3		(0x200F000C) /**< \brief (TRNG0) TRNG0 TRNG Output Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_INPUT0 : (32) TRNG0 TRNG Input Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_INPUT0_Type;
#define REG_TRNG0_INPUT0		(*(RwReg *)0x200F0000UL)

#else
#define REG_TRNG0_INPUT0		(0x200F0000) /**< \brief (TRNG0) TRNG0 TRNG Input Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_INPUT1 : (32) TRNG0 TRNG Input Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_INPUT1_Type;
#define REG_TRNG0_INPUT1		(*(RwReg *)0x200F0004UL)

#else
#define REG_TRNG0_INPUT1		(0x200F0004) /**< \brief (TRNG0) TRNG0 TRNG Input Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_INTACK : (32) TRNG0 TRNG Interrupt Acknowledge Register ----- */
typedef union {
	struct {
		uint32_t OPENRDGATE:8;			/*!< bit	0..7	Open Read Gate	*/
		uint32_t RDY:1;			/*!< bit	0	Ready Ack	*/
		uint32_t SHDNOVR:1;			/*!< bit	1	Shutdown Oflo  Br Ack	*/
		uint32_t STUCKOUT:1;			/*!< bit	2	Stuck Out Ack	*/
		uint32_t NOISEFAIL:1;			/*!< bit	3	Noise Fail Ack	*/
		uint32_t RUNFAIL:1;			/*!< bit	4	Run Fail Ack	*/
		uint32_t LRUNFAIL:1;			/*!< bit	5	Long Run Fail  Br Ack	*/
		uint32_t PKRFAIL:1;			/*!< bit	6	Poker Fail Ack	*/
		uint32_t MBITFAIL:1;			/*!< bit	7	Monobit Fail  Br Ack	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_INTACK_Type;
#define REG_TRNG0_INTACK		(*(RwReg *)0x200F0010UL)

#else
#define REG_TRNG0_INTACK		(0x200F0010) /**< \brief (TRNG0) TRNG0 TRNG Interrupt Acknowledge Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_STAT : (32) TRNG0 TRNG Status Register ----- */
typedef union {
	struct {
		uint32_t RDY:1;			/*!< bit	0	Ready Ack	*/
		uint32_t SHDNOVR:1;			/*!< bit	1	Shutdown Oflo  Br Ack	*/
		uint32_t STUCKOUT:1;			/*!< bit	2	Stuck Out Ack	*/
		uint32_t NOISEFAIL:1;			/*!< bit	3	Noise Fail Ack	*/
		uint32_t RUNFAIL:1;			/*!< bit	4	Run Fail Ack	*/
		uint32_t LRUNFAIL:1;			/*!< bit	5	Long Run Fail  Br Ack	*/
		uint32_t PKRFAIL:1;			/*!< bit	6	Poker Fail Ack	*/
		uint32_t MBITFAIL:1;			/*!< bit	7	Monobit Fail  Br Ack	*/
		uint32_t TSTRDY:1;			/*!< bit	8	Test Ready	*/
		uint32_t :7;			/*!< bit	9..15	Reserved	*/
		uint32_t BLKAVAIL:8;			/*!< bit	16..23	Blocks Available	*/
		uint32_t NEEDCLK:1;			/*!< bit	24	Need Clock	*/
		uint32_t :7;			/*!< bit	25..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_STAT_Type;
#define REG_TRNG0_STAT		(*(RwReg *)0x200F0010UL)

#else
#define REG_TRNG0_STAT		(0x200F0010) /**< \brief (TRNG0) TRNG0 TRNG Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_CTL : (32) TRNG0 TRNG Control Register ----- */
typedef union {
	struct {
		uint32_t RDYMSK:1;			/*!< bit	0	Ready Mask	*/
		uint32_t SHDNOVRMSK:1;			/*!< bit	1	Shutdown Oflo  Br Mask	*/
		uint32_t STUCKOUTMSK:1;			/*!< bit	2	Stuck Out Mask	*/
		uint32_t NOISEFAILMSK:1;			/*!< bit	3	Noise Fail Mask	*/
		uint32_t RUNFAILMSK:1;			/*!< bit	4	Run Fail Mask	*/
		uint32_t LRUNFAILMSK:1;			/*!< bit	5	Long Run Fail  Br Mask	*/
		uint32_t PKRFAILMSK:1;			/*!< bit	6	Poker Fail Mask	*/
		uint32_t MBITFAILMSK:1;			/*!< bit	7	Monobit Fail  Br Mask	*/
		uint32_t TSTMODE:1;			/*!< bit	8	Test Mode	*/
		uint32_t :1;			/*!< bit	9	Reserved	*/
		uint32_t TRNGEN:1;			/*!< bit	10	Enable Trng	*/
		uint32_t :1;			/*!< bit	11	Reserved	*/
		uint32_t PPROCEN:1;			/*!< bit	12	Post Proc En	*/
		uint32_t :2;			/*!< bit	13..14	Reserved	*/
		uint32_t RESEED:1;			/*!< bit	15	Reseed	*/
		uint32_t STARTUPCYC:16;			/*!< bit	16..31	Startup Cycles	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_CTL_Type;
#define REG_TRNG0_CTL		(*(RwReg *)0x200F0014UL)

#else
#define REG_TRNG0_CTL		(0x200F0014) /**< \brief (TRNG0) TRNG0 TRNG Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_CFG : (32) TRNG0 TRNG Configuration Register ----- */
typedef union {
	struct {
		uint32_t MINREFCYC:8;			/*!< bit	0..7	Min Refill Cycles	*/
		uint32_t SAMPLEDIV:4;			/*!< bit	8..11	Sample Div	*/
		uint32_t RDTIMEOUT:4;			/*!< bit	12..15	Read Timeout	*/
		uint32_t MAXREFCYC:16;			/*!< bit	16..31	Max Refill  Br Cycles	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_CFG_Type;
#define REG_TRNG0_CFG		(*(RwReg *)0x200F0018UL)

#else
#define REG_TRNG0_CFG		(0x200F0018) /**< \brief (TRNG0) TRNG0 TRNG Configuration Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_ALMCNT : (32) TRNG0 TRNG Alarm Counter Register ----- */
typedef union {
	struct {
		uint32_t ALMTHRESH:8;			/*!< bit	0..7	Alarm Threshold	*/
		uint32_t :7;			/*!< bit	8..14	Reserved	*/
		uint32_t STALLRUNPKR:1;			/*!< bit	15	Stall Run Poker	*/
		uint32_t SHDNTHRESH:5;			/*!< bit	16..20	Shutdown  Br Threshold	*/
		uint32_t :2;			/*!< bit	21..22	Reserved	*/
		uint32_t SHDNFATAL:1;			/*!< bit	23	Shutdown Fatal	*/
		uint32_t SHDNCNT:6;			/*!< bit	24..29	Shutdown Count	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_ALMCNT_Type;
#define REG_TRNG0_ALMCNT		(*(RwReg *)0x200F001CUL)

#else
#define REG_TRNG0_ALMCNT		(0x200F001C) /**< \brief (TRNG0) TRNG0 TRNG Alarm Counter Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_FROEN : (32) TRNG0 TRNG FRO Enable Register ----- */
typedef union {
	struct {
		uint32_t FROS:8;			/*!< bit	0..7	Enable Free-Running Oscillators	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_FROEN_Type;
#define REG_TRNG0_FROEN		(*(RwReg *)0x200F0020UL)

#else
#define REG_TRNG0_FROEN		(0x200F0020) /**< \brief (TRNG0) TRNG0 TRNG FRO Enable Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_FRODETUNE : (32) TRNG0 TRNG FRO De-tune Register ----- */
typedef union {
	struct {
		uint32_t FROS:8;			/*!< bit	0..7	Fro Detunes	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_FRODETUNE_Type;
#define REG_TRNG0_FRODETUNE		(*(RwReg *)0x200F0024UL)

#else
#define REG_TRNG0_FRODETUNE		(0x200F0024) /**< \brief (TRNG0) TRNG0 TRNG FRO De-tune Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_ALMMSK : (32) TRNG0 TRNG Alarm Mask Register ----- */
typedef union {
	struct {
		uint32_t FROS:8;			/*!< bit	0..7	FRO Alarm Mask	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_ALMMSK_Type;
#define REG_TRNG0_ALMMSK		(*(RwReg *)0x200F0028UL)

#else
#define REG_TRNG0_ALMMSK		(0x200F0028) /**< \brief (TRNG0) TRNG0 TRNG Alarm Mask Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_ALMSTP : (32) TRNG0 TRNG Alarm Stop Register ----- */
typedef union {
	struct {
		uint32_t FROS:8;			/*!< bit	0..7	Fro Alarm Stops	*/
		uint32_t :24;			/*!< bit	8..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_ALMSTP_Type;
#define REG_TRNG0_ALMSTP		(*(RwReg *)0x200F002CUL)

#else
#define REG_TRNG0_ALMSTP		(0x200F002C) /**< \brief (TRNG0) TRNG0 TRNG Alarm Stop Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_LFSR_L : (32) TRNG0 TRNG LFSR Access Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_LFSR_L_Type;
#define REG_TRNG0_LFSR_L		(*(RwReg *)0x200F0030UL)

#else
#define REG_TRNG0_LFSR_L		(0x200F0030) /**< \brief (TRNG0) TRNG0 TRNG LFSR Access Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_LFSR_M : (32) TRNG0 TRNG LFSR Access Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_LFSR_M_Type;
#define REG_TRNG0_LFSR_M		(*(RwReg *)0x200F0034UL)

#else
#define REG_TRNG0_LFSR_M		(0x200F0034) /**< \brief (TRNG0) TRNG0 TRNG LFSR Access Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_LFSR_H : (32) TRNG0 TRNG LFSR Access Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_LFSR_H_Type;
#define REG_TRNG0_LFSR_H		(*(RwReg *)0x200F0038UL)

#else
#define REG_TRNG0_LFSR_H		(0x200F0038) /**< \brief (TRNG0) TRNG0 TRNG LFSR Access Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_CNT : (32) TRNG0 TRNG Counter Access Register ----- */
typedef union {
	struct {
		uint32_t VALUE:24;			/*!< bit	0..23	Sample Counter	*/
		uint32_t :8;			/*!< bit	24..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_CNT_Type;
#define REG_TRNG0_CNT		(*(RwReg *)0x200F003CUL)

#else
#define REG_TRNG0_CNT		(0x200F003C) /**< \brief (TRNG0) TRNG0 TRNG Counter Access Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_KEY0 : (32) TRNG0 Post-Process Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_KEY0_Type;
#define REG_TRNG0_KEY0		(*(RwReg *)0x200F0040UL)

#else
#define REG_TRNG0_KEY0		(0x200F0040) /**< \brief (TRNG0) TRNG0 Post-Process Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_KEY1 : (32) TRNG0 Post-Process Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_KEY1_Type;
#define REG_TRNG0_KEY1		(*(RwReg *)0x200F0044UL)

#else
#define REG_TRNG0_KEY1		(0x200F0044) /**< \brief (TRNG0) TRNG0 Post-Process Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_KEY2 : (32) TRNG0 Post-Process Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_KEY2_Type;
#define REG_TRNG0_KEY2		(*(RwReg *)0x200F0048UL)

#else
#define REG_TRNG0_KEY2		(0x200F0048) /**< \brief (TRNG0) TRNG0 Post-Process Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_KEY3 : (32) TRNG0 Post-Process Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_KEY3_Type;
#define REG_TRNG0_KEY3		(*(RwReg *)0x200F004CUL)

#else
#define REG_TRNG0_KEY3		(0x200F004C) /**< \brief (TRNG0) TRNG0 Post-Process Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_KEY4 : (32) TRNG0 Post-Process Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_KEY4_Type;
#define REG_TRNG0_KEY4		(*(RwReg *)0x200F0050UL)

#else
#define REG_TRNG0_KEY4		(0x200F0050) /**< \brief (TRNG0) TRNG0 Post-Process Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_KEY5 : (32) TRNG0 Post-Process Key Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_KEY5_Type;
#define REG_TRNG0_KEY5		(*(RwReg *)0x200F0054UL)

#else
#define REG_TRNG0_KEY5		(0x200F0054) /**< \brief (TRNG0) TRNG0 Post-Process Key Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_RUNCNT : (32) TRNG0 TRNG Run Test State and Result Registers ----- */
typedef union {
	struct {
		uint32_t TSTCNT:15;			/*!< bit	0..14	Run Test Count	*/
		uint32_t STATE:1;			/*!< bit	15	Run State	*/
		uint32_t LENCNT:6;			/*!< bit	16..21	Run Length  Br Count	*/
		uint32_t :2;			/*!< bit	22..23	Reserved	*/
		uint32_t LENMAX:6;			/*!< bit	24..29	Run Length Max	*/
		uint32_t :2;			/*!< bit	30..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_RUNCNT_Type;
#define REG_TRNG0_RUNCNT		(*(RwReg *)0x200F0040UL)

#else
#define REG_TRNG0_RUNCNT		(0x200F0040) /**< \brief (TRNG0) TRNG0 TRNG Run Test State and Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_RUN1 : (32) TRNG0 TRNG Run Test State and Result Registers ----- */
typedef union {
	struct {
		uint32_t CNTZEROS:12;			/*!< bit	0..11	Run Count of n bit runs of zeros	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t CNTONES:12;			/*!< bit	16..27	Run Count of n bit runs of ones	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_RUN1_Type;
#define REG_TRNG0_RUN1		(*(RwReg *)0x200F0044UL)

#else
#define REG_TRNG0_RUN1		(0x200F0044) /**< \brief (TRNG0) TRNG0 TRNG Run Test State and Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_RUN2 : (32) TRNG0 TRNG Run Test State and Result Registers ----- */
typedef union {
	struct {
		uint32_t CNTZEROS:12;			/*!< bit	0..11	Run Count of n bit runs of zeros	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t CNTONES:12;			/*!< bit	16..27	Run Count of n bit runs of ones	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_RUN2_Type;
#define REG_TRNG0_RUN2		(*(RwReg *)0x200F0048UL)

#else
#define REG_TRNG0_RUN2		(0x200F0048) /**< \brief (TRNG0) TRNG0 TRNG Run Test State and Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_RUN3 : (32) TRNG0 TRNG Run Test State and Result Registers ----- */
typedef union {
	struct {
		uint32_t CNTZEROS:12;			/*!< bit	0..11	Run Count of n bit runs of zeros	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t CNTONES:12;			/*!< bit	16..27	Run Count of n bit runs of ones	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_RUN3_Type;
#define REG_TRNG0_RUN3		(*(RwReg *)0x200F004CUL)

#else
#define REG_TRNG0_RUN3		(0x200F004C) /**< \brief (TRNG0) TRNG0 TRNG Run Test State and Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_RUN4 : (32) TRNG0 TRNG Run Test State and Result Registers ----- */
typedef union {
	struct {
		uint32_t CNTZEROS:12;			/*!< bit	0..11	Run Count of n bit runs of zeros	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t CNTONES:12;			/*!< bit	16..27	Run Count of n bit runs of ones	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_RUN4_Type;
#define REG_TRNG0_RUN4		(*(RwReg *)0x200F0050UL)

#else
#define REG_TRNG0_RUN4		(0x200F0050) /**< \brief (TRNG0) TRNG0 TRNG Run Test State and Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_RUN5 : (32) TRNG0 TRNG Run Test State and Result Registers ----- */
typedef union {
	struct {
		uint32_t CNTZEROS:12;			/*!< bit	0..11	Run Count of n bit runs of zeros	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t CNTONES:12;			/*!< bit	16..27	Run Count of n bit runs of ones	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_RUN5_Type;
#define REG_TRNG0_RUN5		(*(RwReg *)0x200F0054UL)

#else
#define REG_TRNG0_RUN5		(0x200F0054) /**< \brief (TRNG0) TRNG0 TRNG Run Test State and Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_RUN6 : (32) TRNG0 TRNG Run Test State and Result Registers ----- */
typedef union {
	struct {
		uint32_t CNTZEROS:12;			/*!< bit	0..11	Run Count of n bit runs of zeros	*/
		uint32_t :4;			/*!< bit	12..15	Reserved	*/
		uint32_t CNTONES:12;			/*!< bit	16..27	Run Count of n bit runs of ones	*/
		uint32_t :4;			/*!< bit	28..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_RUN6_Type;
#define REG_TRNG0_RUN6		(*(RwReg *)0x200F0058UL)

#else
#define REG_TRNG0_RUN6		(0x200F0058) /**< \brief (TRNG0) TRNG0 TRNG Run Test State and Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_MONOBITCNT : (32) TRNG0 TRNG Monobit Test Result Register ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_MONOBITCNT_Type;
#define REG_TRNG0_MONOBITCNT		(*(RwReg *)0x200F005CUL)

#else
#define REG_TRNG0_MONOBITCNT		(0x200F005C) /**< \brief (TRNG0) TRNG0 TRNG Monobit Test Result Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_V0 : (32) TRNG0 TRNG Post-Process aVa Value Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_V0_Type;
#define REG_TRNG0_V0		(*(RwReg *)0x200F0060UL)

#else
#define REG_TRNG0_V0		(0x200F0060) /**< \brief (TRNG0) TRNG0 TRNG Post-Process aVa Value Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_V1 : (32) TRNG0 TRNG Post-Process aVa Value Registers ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_V1_Type;
#define REG_TRNG0_V1		(*(RwReg *)0x200F0064UL)

#else
#define REG_TRNG0_V1		(0x200F0064) /**< \brief (TRNG0) TRNG0 TRNG Post-Process aVa Value Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_POKER0 : (32) TRNG0 TRNG Poker Test Result Registers ----- */
typedef union {
	struct {
		uint32_t CNT0:8;			/*!< bit	0..7	Poker Count n	*/
		uint32_t CNT1:8;			/*!< bit	8..15	Poker Count n + 1	*/
		uint32_t CNT2:8;			/*!< bit	16..23	Poker Count n + 2	*/
		uint32_t CNT3:8;			/*!< bit	24..31	Poker Count n + 3	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_POKER0_Type;
#define REG_TRNG0_POKER0		(*(RwReg *)0x200F0060UL)

#else
#define REG_TRNG0_POKER0		(0x200F0060) /**< \brief (TRNG0) TRNG0 TRNG Poker Test Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_POKER1 : (32) TRNG0 TRNG Poker Test Result Registers ----- */
typedef union {
	struct {
		uint32_t CNT0:8;			/*!< bit	0..7	Poker Count n	*/
		uint32_t CNT1:8;			/*!< bit	8..15	Poker Count n + 1	*/
		uint32_t CNT2:8;			/*!< bit	16..23	Poker Count n + 2	*/
		uint32_t CNT3:8;			/*!< bit	24..31	Poker Count n + 3	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_POKER1_Type;
#define REG_TRNG0_POKER1		(*(RwReg *)0x200F0064UL)

#else
#define REG_TRNG0_POKER1		(0x200F0064) /**< \brief (TRNG0) TRNG0 TRNG Poker Test Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_POKER2 : (32) TRNG0 TRNG Poker Test Result Registers ----- */
typedef union {
	struct {
		uint32_t CNT0:8;			/*!< bit	0..7	Poker Count n	*/
		uint32_t CNT1:8;			/*!< bit	8..15	Poker Count n + 1	*/
		uint32_t CNT2:8;			/*!< bit	16..23	Poker Count n + 2	*/
		uint32_t CNT3:8;			/*!< bit	24..31	Poker Count n + 3	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_POKER2_Type;
#define REG_TRNG0_POKER2		(*(RwReg *)0x200F0068UL)

#else
#define REG_TRNG0_POKER2		(0x200F0068) /**< \brief (TRNG0) TRNG0 TRNG Poker Test Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_POKER3 : (32) TRNG0 TRNG Poker Test Result Registers ----- */
typedef union {
	struct {
		uint32_t CNT0:8;			/*!< bit	0..7	Poker Count n	*/
		uint32_t CNT1:8;			/*!< bit	8..15	Poker Count n + 1	*/
		uint32_t CNT2:8;			/*!< bit	16..23	Poker Count n + 2	*/
		uint32_t CNT3:8;			/*!< bit	24..31	Poker Count n + 3	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_POKER3_Type;
#define REG_TRNG0_POKER3		(*(RwReg *)0x200F006CUL)

#else
#define REG_TRNG0_POKER3		(0x200F006C) /**< \brief (TRNG0) TRNG0 TRNG Poker Test Result Registers */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_TEST : (32) TRNG0 TRNG Test Register ----- */
typedef union {
	struct {
		uint32_t ENOUT:1;			/*!< bit	0	Test En Out	*/
		uint32_t PATTFRO:1;			/*!< bit	1	Test Patt Fro	*/
		uint32_t PATTDET:1;			/*!< bit	2	Test Patt Det	*/
		uint32_t NOLFSRFB:1;			/*!< bit	3	No Lfsr Fb	*/
		uint32_t CONTPKR:1;			/*!< bit	4	Cont Poker	*/
		uint32_t RUNPKR:1;			/*!< bit	5	Test Run Poker	*/
		uint32_t PPROC:1;			/*!< bit	6	Test Post Proc	*/
		uint32_t SP80090:1;			/*!< bit	7	Test Sp 800 90	*/
		uint32_t SEL:5;			/*!< bit	8..12	Test Select	*/
		uint32_t :3;			/*!< bit	13..15	Reserved	*/
		uint32_t PATTERN:12;			/*!< bit	16..27	Test Pattern	*/
		uint32_t :3;			/*!< bit	28..30	Reserved	*/
		uint32_t IRQ:1;			/*!< bit	31	Test Irq	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_TEST_Type;
#define REG_TRNG0_TEST		(*(RwReg *)0x200F0070UL)

#else
#define REG_TRNG0_TEST		(0x200F0070) /**< \brief (TRNG0) TRNG0 TRNG Test Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- TRNG0_BLKCNT : (32) TRNG0 TRNG Block Count Register ----- */
typedef union {
	struct {
		uint32_t :4;			/*!< bit	0..3	Reserved	*/
		uint32_t VALUE:28;			/*!< bit	4..31	Block Count	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} TRNG0_BLKCNT_Type;
#define REG_TRNG0_BLKCNT		(*(RwReg *)0x200F0074UL)

#else
#define REG_TRNG0_BLKCNT		(0x200F0074) /**< \brief (TRNG0) TRNG0 TRNG Block Count Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO TRNG0_OUTPUT0_Type		OUTPUT0;		/**< \brief TRNG0 TRNG Output Registers */
	__IO TRNG0_INPUT0_Type		INPUT0;		/**< \brief TRNG0 TRNG Input Registers */
	__IO TRNG0_OUTPUT1_Type		OUTPUT1;		/**< \brief TRNG0 TRNG Output Registers */
	__IO TRNG0_INPUT1_Type		INPUT1;		/**< \brief TRNG0 TRNG Input Registers */
	__IO TRNG0_OUTPUT2_Type		OUTPUT2;		/**< \brief TRNG0 TRNG Output Registers */
	__IO TRNG0_OUTPUT3_Type		OUTPUT3;		/**< \brief TRNG0 TRNG Output Registers */
	__IO TRNG0_INTACK_Type		INTACK;		/**< \brief TRNG0 TRNG Interrupt Acknowledge Register */
	__IO TRNG0_STAT_Type		STAT;		/**< \brief TRNG0 TRNG Status Register */
	__IO TRNG0_CTL_Type		CTL;		/**< \brief TRNG0 TRNG Control Register */
	__IO TRNG0_CFG_Type		CFG;		/**< \brief TRNG0 TRNG Configuration Register */
	__IO TRNG0_ALMCNT_Type		ALMCNT;		/**< \brief TRNG0 TRNG Alarm Counter Register */
	__IO TRNG0_FROEN_Type		FROEN;		/**< \brief TRNG0 TRNG FRO Enable Register */
	__IO TRNG0_FRODETUNE_Type		FRODETUNE;		/**< \brief TRNG0 TRNG FRO De-tune Register */
	__IO TRNG0_ALMMSK_Type		ALMMSK;		/**< \brief TRNG0 TRNG Alarm Mask Register */
	__IO TRNG0_ALMSTP_Type		ALMSTP;		/**< \brief TRNG0 TRNG Alarm Stop Register */
	__IO TRNG0_LFSR_L_Type		LFSR_L;		/**< \brief TRNG0 TRNG LFSR Access Registers */
	__IO TRNG0_LFSR_M_Type		LFSR_M;		/**< \brief TRNG0 TRNG LFSR Access Registers */
	__IO TRNG0_LFSR_H_Type		LFSR_H;		/**< \brief TRNG0 TRNG LFSR Access Registers */
	__IO TRNG0_CNT_Type		CNT;		/**< \brief TRNG0 TRNG Counter Access Register */
	__IO TRNG0_KEY0_Type		KEY0;		/**< \brief TRNG0 Post-Process Key Registers */
	__IO TRNG0_RUNCNT_Type		RUNCNT;		/**< \brief TRNG0 TRNG Run Test State and Result Registers */
	__IO TRNG0_RUN1_Type		RUN1;		/**< \brief TRNG0 TRNG Run Test State and Result Registers */
	__IO TRNG0_KEY1_Type		KEY1;		/**< \brief TRNG0 Post-Process Key Registers */
	__IO TRNG0_KEY2_Type		KEY2;		/**< \brief TRNG0 Post-Process Key Registers */
	__IO TRNG0_RUN2_Type		RUN2;		/**< \brief TRNG0 TRNG Run Test State and Result Registers */
	__IO TRNG0_KEY3_Type		KEY3;		/**< \brief TRNG0 Post-Process Key Registers */
	__IO TRNG0_RUN3_Type		RUN3;		/**< \brief TRNG0 TRNG Run Test State and Result Registers */
	__IO TRNG0_KEY4_Type		KEY4;		/**< \brief TRNG0 Post-Process Key Registers */
	__IO TRNG0_RUN4_Type		RUN4;		/**< \brief TRNG0 TRNG Run Test State and Result Registers */
	__IO TRNG0_KEY5_Type		KEY5;		/**< \brief TRNG0 Post-Process Key Registers */
	__IO TRNG0_RUN5_Type		RUN5;		/**< \brief TRNG0 TRNG Run Test State and Result Registers */
	__IO TRNG0_RUN6_Type		RUN6;		/**< \brief TRNG0 TRNG Run Test State and Result Registers */
	__IO TRNG0_MONOBITCNT_Type		MONOBITCNT;		/**< \brief TRNG0 TRNG Monobit Test Result Register */
	__IO TRNG0_V0_Type		V0;		/**< \brief TRNG0 TRNG Post-Process aVa Value Registers */
	__IO TRNG0_POKER0_Type		POKER0;		/**< \brief TRNG0 TRNG Poker Test Result Registers */
	__IO TRNG0_V1_Type		V1;		/**< \brief TRNG0 TRNG Post-Process aVa Value Registers */
	__IO TRNG0_POKER1_Type		POKER1;		/**< \brief TRNG0 TRNG Poker Test Result Registers */
	__IO TRNG0_POKER2_Type		POKER2;		/**< \brief TRNG0 TRNG Poker Test Result Registers */
	__IO TRNG0_POKER3_Type		POKER3;		/**< \brief TRNG0 TRNG Poker Test Result Registers */
	__IO TRNG0_TEST_Type		TEST;		/**< \brief TRNG0 TRNG Test Register */
	__IO TRNG0_BLKCNT_Type		BLKCNT;		/**< \brief TRNG0 TRNG Block Count Register */
} Trng0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- PKA0_APTR : (32) PKA0 PKA Vector_A Address ----- */
typedef union {
	struct {
		uint32_t VALUE:11;			/*!< bit	0..10	Pointer to Vector A	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_APTR_Type;
#define REG_PKA0_APTR		(*(RwReg *)0x200F4000UL)

#else
#define REG_PKA0_APTR		(0x200F4000) /**< \brief (PKA0) PKA0 PKA Vector_A Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_BPTR : (32) PKA0 PKA Vector_B Address ----- */
typedef union {
	struct {
		uint32_t VALUE:11;			/*!< bit	0..10	Pointer to Vector B	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_BPTR_Type;
#define REG_PKA0_BPTR		(*(RwReg *)0x200F4004UL)

#else
#define REG_PKA0_BPTR		(0x200F4004) /**< \brief (PKA0) PKA0 PKA Vector_B Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_CPTR : (32) PKA0 PKA Vector_C Address ----- */
typedef union {
	struct {
		uint32_t CPTR:11;			/*!< bit	0..10	Pointer to Vector C	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_CPTR_Type;
#define REG_PKA0_CPTR		(*(RwReg *)0x200F4008UL)

#else
#define REG_PKA0_CPTR		(0x200F4008) /**< \brief (PKA0) PKA0 PKA Vector_C Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_DPTR : (32) PKA0 PKA Vector_D Address ----- */
typedef union {
	struct {
		uint32_t VALUE:11;			/*!< bit	0..10	Pointer to Vector D	*/
		uint32_t :21;			/*!< bit	11..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_DPTR_Type;
#define REG_PKA0_DPTR		(*(RwReg *)0x200F400CUL)

#else
#define REG_PKA0_DPTR		(0x200F400C) /**< \brief (PKA0) PKA0 PKA Vector_D Address */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_ALEN : (32) PKA0 PKA Vector_A Length ----- */
typedef union {
	struct {
		uint32_t VALUE:9;			/*!< bit	0..8	Length of Vector A	*/
		uint32_t :23;			/*!< bit	9..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_ALEN_Type;
#define REG_PKA0_ALEN		(*(RwReg *)0x200F4010UL)

#else
#define REG_PKA0_ALEN		(0x200F4010) /**< \brief (PKA0) PKA0 PKA Vector_A Length */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_BLEN : (32) PKA0 PKA Vector_B Length ----- */
typedef union {
	struct {
		uint32_t VALUE:9;			/*!< bit	0..8	Length of Vector B	*/
		uint32_t :23;			/*!< bit	9..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_BLEN_Type;
#define REG_PKA0_BLEN		(*(RwReg *)0x200F4014UL)

#else
#define REG_PKA0_BLEN		(0x200F4014) /**< \brief (PKA0) PKA0 PKA Vector_B Length */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_SHIFT : (32) PKA0 PKA Bit Shift Value ----- */
typedef union {
	struct {
		uint32_t VALUE:5;			/*!< bit	0..4	Bits To Shift	*/
		uint32_t :27;			/*!< bit	5..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_SHIFT_Type;
#define REG_PKA0_SHIFT		(*(RwReg *)0x200F4018UL)

#else
#define REG_PKA0_SHIFT		(0x200F4018) /**< \brief (PKA0) PKA0 PKA Bit Shift Value */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_FUNC : (32) PKA0 PKA Function ----- */
typedef union {
	struct {
		uint32_t MULT:1;			/*!< bit	0	field	*/
		uint32_t ADDSUB:1;			/*!< bit	1	field	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t MSONE:1;			/*!< bit	3	Ms One	*/
		uint32_t ADD:1;			/*!< bit	4	field	*/
		uint32_t SUB:1;			/*!< bit	5	field	*/
		uint32_t RSHFT:1;			/*!< bit	6	field	*/
		uint32_t LSHFT:1;			/*!< bit	7	field	*/
		uint32_t DIV:1;			/*!< bit	8	field	*/
		uint32_t MODULO:1;			/*!< bit	9	field	*/
		uint32_t CMP:1;			/*!< bit	10	field	*/
		uint32_t CPY:1;			/*!< bit	11	field	*/
		uint32_t SEQOPS:3;			/*!< bit	12..14	Sequencer Br Operations	*/
		uint32_t RUN:1;			/*!< bit	15	field	*/
		uint32_t :8;			/*!< bit	16..23	Reserved	*/
		uint32_t STALLRSLT:1;			/*!< bit	24	Stall Result	*/
		uint32_t :7;			/*!< bit	25..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_FUNC_Type;
#define REG_PKA0_FUNC		(*(RwReg *)0x200F401CUL)

#else
#define REG_PKA0_FUNC		(0x200F401C) /**< \brief (PKA0) PKA0 PKA Function */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_COMPARE : (32) PKA0 PKA Compare Result ----- */
typedef union {
	struct {
		uint32_t AEQB:1;			/*!< bit	0	Vector A is equal to Vector B	*/
		uint32_t ALTB:1;			/*!< bit	1	Vector A is Less Than Vector B	*/
		uint32_t AGTB:1;			/*!< bit	2	Vector A is Greater Than Vector B	*/
		uint32_t :29;			/*!< bit	3..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_COMPARE_Type;
#define REG_PKA0_COMPARE		(*(RwReg *)0x200F4020UL)

#else
#define REG_PKA0_COMPARE		(0x200F4020) /**< \brief (PKA0) PKA0 PKA Compare Result */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_RESULTMSW : (32) PKA0 PKA Most-Significant-Word of Result Vector ----- */
typedef union {
	struct {
		uint32_t ADDR:11;			/*!< bit	0..10	Address of most-significant nonzero word of the result vector in PKA RAM	*/
		uint32_t :4;			/*!< bit	11..14	Reserved	*/
		uint32_t ZERO:1;			/*!< bit	15	Result Is Zero; ignore ADDR	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_RESULTMSW_Type;
#define REG_PKA0_RESULTMSW		(*(RwReg *)0x200F4024UL)

#else
#define REG_PKA0_RESULTMSW		(0x200F4024) /**< \brief (PKA0) PKA0 PKA Most-Significant-Word of Result Vector */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_DIVMSW : (32) PKA0 PKA Most-Significant-Word of Divide Remainder ----- */
typedef union {
	struct {
		uint32_t ADDR:11;			/*!< bit	0..10	Address of most-significant nonzero word of the Remainder result vector in PKA RAM	*/
		uint32_t :4;			/*!< bit	11..14	Reserved	*/
		uint32_t ZERO:1;			/*!< bit	15	Remainder result vector is zeroes; ignore ADDR	*/
		uint32_t :16;			/*!< bit	16..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_DIVMSW_Type;
#define REG_PKA0_DIVMSW		(*(RwReg *)0x200F4028UL)

#else
#define REG_PKA0_DIVMSW		(0x200F4028) /**< \brief (PKA0) PKA0 PKA Most-Significant-Word of Divide Remainder */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKA0_RAM : (32) PKA0 Starting Entry of 4KB RAM space ----- */
typedef union {
	struct {
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKA0_RAM_Type;
#define REG_PKA0_RAM		(*(RwReg *)0x200F6000UL)

#else
#define REG_PKA0_RAM		(0x200F6000) /**< \brief (PKA0) PKA0 Starting Entry of 4KB RAM space */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PKA0_APTR_Type		APTR;		/**< \brief PKA0 PKA Vector_A Address */
	__IO PKA0_BPTR_Type		BPTR;		/**< \brief PKA0 PKA Vector_B Address */
	__IO PKA0_CPTR_Type		CPTR;		/**< \brief PKA0 PKA Vector_C Address */
	__IO PKA0_DPTR_Type		DPTR;		/**< \brief PKA0 PKA Vector_D Address */
	__IO PKA0_ALEN_Type		ALEN;		/**< \brief PKA0 PKA Vector_A Length */
	__IO PKA0_BLEN_Type		BLEN;		/**< \brief PKA0 PKA Vector_B Length */
	__IO PKA0_SHIFT_Type		SHIFT;		/**< \brief PKA0 PKA Bit Shift Value */
	__IO PKA0_FUNC_Type		FUNC;		/**< \brief PKA0 PKA Function */
	__IO PKA0_COMPARE_Type		COMPARE;		/**< \brief PKA0 PKA Compare Result */
	__IO PKA0_RESULTMSW_Type		RESULTMSW;		/**< \brief PKA0 PKA Most-Significant-Word of Result Vector */
	__IO PKA0_DIVMSW_Type		DIVMSW;		/**< \brief PKA0 PKA Most-Significant-Word of Divide Remainder */
		 RoReg8		Reserved1[0x1fd4];		
	__IO PKA0_RAM_Type		RAM;		/**< \brief PKA0 Starting Entry of 4KB RAM space */
} Pka0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- PKIC0_POL_CTL : (32) PKIC0 Polarity Control Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t PKAINT1:1;			/*!< bit	1	PKA Int 1	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t TRNGINT:1;			/*!< bit	3	TRNG Irq	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t SLERRINT:1;			/*!< bit	5	Sl Err Int	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKIC0_POL_CTL_Type;
#define REG_PKIC0_POL_CTL		(*(RwReg *)0x200F8000UL)

#else
#define REG_PKIC0_POL_CTL		(0x200F8000) /**< \brief (PKIC0) PKIC0 Polarity Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKIC0_TYPE_CTL : (32) PKIC0 Type Control Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t PKAINT1:1;			/*!< bit	1	PKA Int 1	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t TRNGINT:1;			/*!< bit	3	TRNG Irq	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t SLERRINT:1;			/*!< bit	5	Sl Err Int	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKIC0_TYPE_CTL_Type;
#define REG_PKIC0_TYPE_CTL		(*(RwReg *)0x200F8004UL)

#else
#define REG_PKIC0_TYPE_CTL		(0x200F8004) /**< \brief (PKIC0) PKIC0 Type Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKIC0_EN_CTL : (32) PKIC0 Enable Control Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t PKAINT1:1;			/*!< bit	1	PKA Int 1	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t TRNGINT:1;			/*!< bit	3	TRNG Irq	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t SLERRINT:1;			/*!< bit	5	Sl Err Int	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKIC0_EN_CTL_Type;
#define REG_PKIC0_EN_CTL		(*(RwReg *)0x200F8008UL)

#else
#define REG_PKIC0_EN_CTL		(0x200F8008) /**< \brief (PKIC0) PKIC0 Enable Control Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKIC0_RAW_STAT : (32) PKIC0 Raw Status Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t PKAINT1:1;			/*!< bit	1	Pka Int 1	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t TRNGINT:1;			/*!< bit	3	Trng Irq	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t SLERRINT:1;			/*!< bit	5	Sl Err Int	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKIC0_RAW_STAT_Type;
#define REG_PKIC0_RAW_STAT		(*(RwReg *)0x200F800CUL)

#else
#define REG_PKIC0_RAW_STAT		(0x200F800C) /**< \brief (PKIC0) PKIC0 Raw Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKIC0_EN_SET : (32) PKIC0 Enable Set Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t PKAINT1:1;			/*!< bit	1	Pka Int 1	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t TRNGINT:1;			/*!< bit	3	Trng Irq	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t SLERRINT:1;			/*!< bit	5	Sl Err Int	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKIC0_EN_SET_Type;
#define REG_PKIC0_EN_SET		(*(RwReg *)0x200F800CUL)

#else
#define REG_PKIC0_EN_SET		(0x200F800C) /**< \brief (PKIC0) PKIC0 Enable Set Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKIC0_EN_STAT : (32) PKIC0 Enabled Status Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t PKAINT1:1;			/*!< bit	1	Pka Int 1	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t TRNGINT:1;			/*!< bit	3	Trng Irq	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t SLERRINT:1;			/*!< bit	5	Sl Err Int	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKIC0_EN_STAT_Type;
#define REG_PKIC0_EN_STAT		(*(RwReg *)0x200F8010UL)

#else
#define REG_PKIC0_EN_STAT		(0x200F8010) /**< \brief (PKIC0) PKIC0 Enabled Status Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKIC0_ACK : (32) PKIC0 Acknowledge Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t PKAINT1:1;			/*!< bit	1	Pka Int 1	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t TRNGINT:1;			/*!< bit	3	Trng Irq	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t SLERRINT:1;			/*!< bit	5	Sl Err Int	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKIC0_ACK_Type;
#define REG_PKIC0_ACK		(*(RwReg *)0x200F8010UL)

#else
#define REG_PKIC0_ACK		(0x200F8010) /**< \brief (PKIC0) PKIC0 Acknowledge Register */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- PKIC0_EN_CLR : (32) PKIC0 Enable Clear Register ----- */
typedef union {
	struct {
		uint32_t :1;			/*!< bit	0	Reserved	*/
		uint32_t PKAINT1:1;			/*!< bit	1	Pka Int 1	*/
		uint32_t :1;			/*!< bit	2	Reserved	*/
		uint32_t TRNGINT:1;			/*!< bit	3	Trng Irq	*/
		uint32_t :1;			/*!< bit	4	Reserved	*/
		uint32_t SLERRINT:1;			/*!< bit	5	Sl Err Int	*/
		uint32_t :26;			/*!< bit	6..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} PKIC0_EN_CLR_Type;
#define REG_PKIC0_EN_CLR		(*(RwReg *)0x200F8014UL)

#else
#define REG_PKIC0_EN_CLR		(0x200F8014) /**< \brief (PKIC0) PKIC0 Enable Clear Register */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO PKIC0_POL_CTL_Type		POL_CTL;		/**< \brief PKIC0 Polarity Control Register */
	__IO PKIC0_TYPE_CTL_Type		TYPE_CTL;		/**< \brief PKIC0 Type Control Register */
	__IO PKIC0_EN_CTL_Type		EN_CTL;		/**< \brief PKIC0 Enable Control Register */
	__IO PKIC0_RAW_STAT_Type		RAW_STAT;		/**< \brief PKIC0 Raw Status Register */
	__IO PKIC0_EN_SET_Type		EN_SET;		/**< \brief PKIC0 Enable Set Register */
	__IO PKIC0_EN_STAT_Type		EN_STAT;		/**< \brief PKIC0 Enabled Status Register */
	__IO PKIC0_ACK_Type		ACK;		/**< \brief PKIC0 Acknowledge Register */
	__IO PKIC0_EN_CLR_Type		EN_CLR;		/**< \brief PKIC0 Enable Clear Register */
} Pkic0;
#endif
#if !(defined(__ASSEMBLY__))
/* ----- SCB0_IB7_SYNC : (32) SCB0 DDR Interface Block Sync Mode ----- */
typedef union {
	struct {
		uint32_t VALUE:3;			/*!< bit	0..2	Sync Mode	*/
		uint32_t :29;			/*!< bit	3..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_IB7_SYNC_Type;
#define REG_SCB0_IB7_SYNC		(*(RwReg *)0x20205020UL)

#else
#define REG_SCB0_IB7_SYNC		(0x20205020) /**< \brief (SCB0) SCB0 DDR Interface Block Sync Mode */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST00_RQOS : (32) SCB0 DDE0 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST00_RQOS_Type;
#define REG_SCB0_MST00_RQOS		(*(RwReg *)0x20242100UL)

#else
#define REG_SCB0_MST00_RQOS		(0x20242100) /**< \brief (SCB0) SCB0 DDE0 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST00_WQOS : (32) SCB0 DDE0 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST00_WQOS_Type;
#define REG_SCB0_MST00_WQOS		(*(RwReg *)0x20242104UL)

#else
#define REG_SCB0_MST00_WQOS		(0x20242104) /**< \brief (SCB0) SCB0 DDE0 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST01_RQOS : (32) SCB0 DDE1 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST01_RQOS_Type;
#define REG_SCB0_MST01_RQOS		(*(RwReg *)0x20243100UL)

#else
#define REG_SCB0_MST01_RQOS		(0x20243100) /**< \brief (SCB0) SCB0 DDE1 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST01_WQOS : (32) SCB0 DDE1 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST01_WQOS_Type;
#define REG_SCB0_MST01_WQOS		(*(RwReg *)0x20243104UL)

#else
#define REG_SCB0_MST01_WQOS		(0x20243104) /**< \brief (SCB0) SCB0 DDE1 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST02_RQOS : (32) SCB0 DDE2 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST02_RQOS_Type;
#define REG_SCB0_MST02_RQOS		(*(RwReg *)0x20244100UL)

#else
#define REG_SCB0_MST02_RQOS		(0x20244100) /**< \brief (SCB0) SCB0 DDE2 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST02_WQOS : (32) SCB0 DDE2 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST02_WQOS_Type;
#define REG_SCB0_MST02_WQOS		(*(RwReg *)0x20244104UL)

#else
#define REG_SCB0_MST02_WQOS		(0x20244104) /**< \brief (SCB0) SCB0 DDE2 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST03_RQOS : (32) SCB0 DDE3 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST03_RQOS_Type;
#define REG_SCB0_MST03_RQOS		(*(RwReg *)0x20245100UL)

#else
#define REG_SCB0_MST03_RQOS		(0x20245100) /**< \brief (SCB0) SCB0 DDE3 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST03_WQOS : (32) SCB0 DDE3 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST03_WQOS_Type;
#define REG_SCB0_MST03_WQOS		(*(RwReg *)0x20245104UL)

#else
#define REG_SCB0_MST03_WQOS		(0x20245104) /**< \brief (SCB0) SCB0 DDE3 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST04_RQOS : (32) SCB0 DDE4 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST04_RQOS_Type;
#define REG_SCB0_MST04_RQOS		(*(RwReg *)0x20246100UL)

#else
#define REG_SCB0_MST04_RQOS		(0x20246100) /**< \brief (SCB0) SCB0 DDE4 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST04_WQOS : (32) SCB0 DDE4 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST04_WQOS_Type;
#define REG_SCB0_MST04_WQOS		(*(RwReg *)0x20246104UL)

#else
#define REG_SCB0_MST04_WQOS		(0x20246104) /**< \brief (SCB0) SCB0 DDE4 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST05_RQOS : (32) SCB0 DDE5 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST05_RQOS_Type;
#define REG_SCB0_MST05_RQOS		(*(RwReg *)0x20247100UL)

#else
#define REG_SCB0_MST05_RQOS		(0x20247100) /**< \brief (SCB0) SCB0 DDE5 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST05_WQOS : (32) SCB0 DDE5 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST05_WQOS_Type;
#define REG_SCB0_MST05_WQOS		(*(RwReg *)0x20247104UL)

#else
#define REG_SCB0_MST05_WQOS		(0x20247104) /**< \brief (SCB0) SCB0 DDE5 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST06_RQOS : (32) SCB0 DDE6 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST06_RQOS_Type;
#define REG_SCB0_MST06_RQOS		(*(RwReg *)0x20248100UL)

#else
#define REG_SCB0_MST06_RQOS		(0x20248100) /**< \brief (SCB0) SCB0 DDE6 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST06_WQOS : (32) SCB0 DDE6 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST06_WQOS_Type;
#define REG_SCB0_MST06_WQOS		(*(RwReg *)0x20248104UL)

#else
#define REG_SCB0_MST06_WQOS		(0x20248104) /**< \brief (SCB0) SCB0 DDE6 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST07_RQOS : (32) SCB0 DDE7 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST07_RQOS_Type;
#define REG_SCB0_MST07_RQOS		(*(RwReg *)0x20249100UL)

#else
#define REG_SCB0_MST07_RQOS		(0x20249100) /**< \brief (SCB0) SCB0 DDE7 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST07_WQOS : (32) SCB0 DDE7 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST07_WQOS_Type;
#define REG_SCB0_MST07_WQOS		(*(RwReg *)0x20249104UL)

#else
#define REG_SCB0_MST07_WQOS		(0x20249104) /**< \brief (SCB0) SCB0 DDE7 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST08_RQOS : (32) SCB0 DDE8 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST08_RQOS_Type;
#define REG_SCB0_MST08_RQOS		(*(RwReg *)0x2024A100UL)

#else
#define REG_SCB0_MST08_RQOS		(0x2024A100) /**< \brief (SCB0) SCB0 DDE8 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST08_WQOS : (32) SCB0 DDE8 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST08_WQOS_Type;
#define REG_SCB0_MST08_WQOS		(*(RwReg *)0x2024A104UL)

#else
#define REG_SCB0_MST08_WQOS		(0x2024A104) /**< \brief (SCB0) SCB0 DDE8 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST09_RQOS : (32) SCB0 DDE9 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST09_RQOS_Type;
#define REG_SCB0_MST09_RQOS		(*(RwReg *)0x2024B100UL)

#else
#define REG_SCB0_MST09_RQOS		(0x2024B100) /**< \brief (SCB0) SCB0 DDE9 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST09_WQOS : (32) SCB0 DDE9 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST09_WQOS_Type;
#define REG_SCB0_MST09_WQOS		(*(RwReg *)0x2024B104UL)

#else
#define REG_SCB0_MST09_WQOS		(0x2024B104) /**< \brief (SCB0) SCB0 DDE9 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST10_RQOS : (32) SCB0 DDE10 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST10_RQOS_Type;
#define REG_SCB0_MST10_RQOS		(*(RwReg *)0x2024C100UL)

#else
#define REG_SCB0_MST10_RQOS		(0x2024C100) /**< \brief (SCB0) SCB0 DDE10 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST10_WQOS : (32) SCB0 DDE10 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST10_WQOS_Type;
#define REG_SCB0_MST10_WQOS		(*(RwReg *)0x2024C104UL)

#else
#define REG_SCB0_MST10_WQOS		(0x2024C104) /**< \brief (SCB0) SCB0 DDE10 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST11_RQOS : (32) SCB0 DDE11 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST11_RQOS_Type;
#define REG_SCB0_MST11_RQOS		(*(RwReg *)0x2024D100UL)

#else
#define REG_SCB0_MST11_RQOS		(0x2024D100) /**< \brief (SCB0) SCB0 DDE11 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST11_WQOS : (32) SCB0 DDE11 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST11_WQOS_Type;
#define REG_SCB0_MST11_WQOS		(*(RwReg *)0x2024D104UL)

#else
#define REG_SCB0_MST11_WQOS		(0x2024D104) /**< \brief (SCB0) SCB0 DDE11 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST12_RQOS : (32) SCB0 DDE12 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST12_RQOS_Type;
#define REG_SCB0_MST12_RQOS		(*(RwReg *)0x2024E100UL)

#else
#define REG_SCB0_MST12_RQOS		(0x2024E100) /**< \brief (SCB0) SCB0 DDE12 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST12_WQOS : (32) SCB0 DDE12 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST12_WQOS_Type;
#define REG_SCB0_MST12_WQOS		(*(RwReg *)0x2024E104UL)

#else
#define REG_SCB0_MST12_WQOS		(0x2024E104) /**< \brief (SCB0) SCB0 DDE12 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST13_RQOS : (32) SCB0 DDE13 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST13_RQOS_Type;
#define REG_SCB0_MST13_RQOS		(*(RwReg *)0x2024F100UL)

#else
#define REG_SCB0_MST13_RQOS		(0x2024F100) /**< \brief (SCB0) SCB0 DDE13 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST13_WQOS : (32) SCB0 DDE13 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST13_WQOS_Type;
#define REG_SCB0_MST13_WQOS		(*(RwReg *)0x2024F104UL)

#else
#define REG_SCB0_MST13_WQOS		(0x2024F104) /**< \brief (SCB0) SCB0 DDE13 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST14_RQOS : (32) SCB0 DDE14 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST14_RQOS_Type;
#define REG_SCB0_MST14_RQOS		(*(RwReg *)0x20250100UL)

#else
#define REG_SCB0_MST14_RQOS		(0x20250100) /**< \brief (SCB0) SCB0 DDE14 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST14_WQOS : (32) SCB0 DDE14 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST14_WQOS_Type;
#define REG_SCB0_MST14_WQOS		(*(RwReg *)0x20250104UL)

#else
#define REG_SCB0_MST14_WQOS		(0x20250104) /**< \brief (SCB0) SCB0 DDE14 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST15_RQOS : (32) SCB0 DDE15 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST15_RQOS_Type;
#define REG_SCB0_MST15_RQOS		(*(RwReg *)0x20251100UL)

#else
#define REG_SCB0_MST15_RQOS		(0x20251100) /**< \brief (SCB0) SCB0 DDE15 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST15_WQOS : (32) SCB0 DDE15 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST15_WQOS_Type;
#define REG_SCB0_MST15_WQOS		(*(RwReg *)0x20251104UL)

#else
#define REG_SCB0_MST15_WQOS		(0x20251104) /**< \brief (SCB0) SCB0 DDE15 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST16_RQOS : (32) SCB0 DDE16 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST16_RQOS_Type;
#define REG_SCB0_MST16_RQOS		(*(RwReg *)0x20252100UL)

#else
#define REG_SCB0_MST16_RQOS		(0x20252100) /**< \brief (SCB0) SCB0 DDE16 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST16_WQOS : (32) SCB0 DDE16 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST16_WQOS_Type;
#define REG_SCB0_MST16_WQOS		(*(RwReg *)0x20252104UL)

#else
#define REG_SCB0_MST16_WQOS		(0x20252104) /**< \brief (SCB0) SCB0 DDE16 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST17_RQOS : (32) SCB0 DDE17 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST17_RQOS_Type;
#define REG_SCB0_MST17_RQOS		(*(RwReg *)0x20253100UL)

#else
#define REG_SCB0_MST17_RQOS		(0x20253100) /**< \brief (SCB0) SCB0 DDE17 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST17_WQOS : (32) SCB0 DDE17 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST17_WQOS_Type;
#define REG_SCB0_MST17_WQOS		(*(RwReg *)0x20253104UL)

#else
#define REG_SCB0_MST17_WQOS		(0x20253104) /**< \brief (SCB0) SCB0 DDE17 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST22_RQOS : (32) SCB0 USB0 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST22_RQOS_Type;
#define REG_SCB0_MST22_RQOS		(*(RwReg *)0x20254100UL)

#else
#define REG_SCB0_MST22_RQOS		(0x20254100) /**< \brief (SCB0) SCB0 USB0 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST22_WQOS : (32) SCB0 USB0 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST22_WQOS_Type;
#define REG_SCB0_MST22_WQOS		(*(RwReg *)0x20254104UL)

#else
#define REG_SCB0_MST22_WQOS		(0x20254104) /**< \brief (SCB0) SCB0 USB0 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST25_RQOS : (32) SCB0 MSI0 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST25_RQOS_Type;
#define REG_SCB0_MST25_RQOS		(*(RwReg *)0x20255100UL)

#else
#define REG_SCB0_MST25_RQOS		(0x20255100) /**< \brief (SCB0) SCB0 MSI0 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST25_WQOS : (32) SCB0 MSI0 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST25_WQOS_Type;
#define REG_SCB0_MST25_WQOS		(*(RwReg *)0x20255104UL)

#else
#define REG_SCB0_MST25_WQOS		(0x20255104) /**< \brief (SCB0) SCB0 MSI0 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_IB6_SYNC : (32) SCB0 Crypto Modules Sync Mode ----- */
typedef union {
	struct {
		uint32_t VALUE:3;			/*!< bit	0..2	Sync Mode	*/
		uint32_t :29;			/*!< bit	3..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_IB6_SYNC_Type;
#define REG_SCB0_IB6_SYNC		(*(RwReg *)0x20256020UL)

#else
#define REG_SCB0_IB6_SYNC		(0x20256020) /**< \brief (SCB0) SCB0 Crypto Modules Sync Mode */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST26_RQOS : (32) SCB0 Crypto Modules Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST26_RQOS_Type;
#define REG_SCB0_MST26_RQOS		(*(RwReg *)0x20256100UL)

#else
#define REG_SCB0_MST26_RQOS		(0x20256100) /**< \brief (SCB0) SCB0 Crypto Modules Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST26_WQOS : (32) SCB0 Crypto Modules Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST26_WQOS_Type;
#define REG_SCB0_MST26_WQOS		(*(RwReg *)0x20256104UL)

#else
#define REG_SCB0_MST26_WQOS		(0x20256104) /**< \brief (SCB0) SCB0 Crypto Modules Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST23_RQOS : (32) SCB0 Memory Interface Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST23_RQOS_Type;
#define REG_SCB0_MST23_RQOS		(*(RwReg *)0x20257100UL)

#else
#define REG_SCB0_MST23_RQOS		(0x20257100) /**< \brief (SCB0) SCB0 Memory Interface Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST23_WQOS : (32) SCB0 Memory Interface Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST23_WQOS_Type;
#define REG_SCB0_MST23_WQOS		(*(RwReg *)0x20257104UL)

#else
#define REG_SCB0_MST23_WQOS		(0x20257104) /**< \brief (SCB0) SCB0 Memory Interface Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST24_RQOS : (32) SCB0 MMR Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST24_RQOS_Type;
#define REG_SCB0_MST24_RQOS		(*(RwReg *)0x20258100UL)

#else
#define REG_SCB0_MST24_RQOS		(0x20258100) /**< \brief (SCB0) SCB0 MMR Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST24_WQOS : (32) SCB0 MMR Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST24_WQOS_Type;
#define REG_SCB0_MST24_WQOS		(*(RwReg *)0x20258104UL)

#else
#define REG_SCB0_MST24_WQOS		(0x20258104) /**< \brief (SCB0) SCB0 MMR Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST18_RQOS : (32) SCB0 DDE18 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST18_RQOS_Type;
#define REG_SCB0_MST18_RQOS		(*(RwReg *)0x20259100UL)

#else
#define REG_SCB0_MST18_RQOS		(0x20259100) /**< \brief (SCB0) SCB0 DDE18 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST18_WQOS : (32) SCB0 DDE18 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST18_WQOS_Type;
#define REG_SCB0_MST18_WQOS		(*(RwReg *)0x20259104UL)

#else
#define REG_SCB0_MST18_WQOS		(0x20259104) /**< \brief (SCB0) SCB0 DDE18 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST19_RQOS : (32) SCB0 DDE19 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST19_RQOS_Type;
#define REG_SCB0_MST19_RQOS		(*(RwReg *)0x2025A100UL)

#else
#define REG_SCB0_MST19_RQOS		(0x2025A100) /**< \brief (SCB0) SCB0 DDE19 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST19_WQOS : (32) SCB0 DDE19 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST19_WQOS_Type;
#define REG_SCB0_MST19_WQOS		(*(RwReg *)0x2025A104UL)

#else
#define REG_SCB0_MST19_WQOS		(0x2025A104) /**< \brief (SCB0) SCB0 DDE19 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST20_RQOS : (32) SCB0 DDE20 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST20_RQOS_Type;
#define REG_SCB0_MST20_RQOS		(*(RwReg *)0x2025B100UL)

#else
#define REG_SCB0_MST20_RQOS		(0x2025B100) /**< \brief (SCB0) SCB0 DDE20 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST20_WQOS : (32) SCB0 DDE20 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST20_WQOS_Type;
#define REG_SCB0_MST20_WQOS		(*(RwReg *)0x2025B104UL)

#else
#define REG_SCB0_MST20_WQOS		(0x2025B104) /**< \brief (SCB0) SCB0 DDE20 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST21_RQOS : (32) SCB0 DDE21 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST21_RQOS_Type;
#define REG_SCB0_MST21_RQOS		(*(RwReg *)0x2025C100UL)

#else
#define REG_SCB0_MST21_RQOS		(0x2025C100) /**< \brief (SCB0) SCB0 DDE21 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST21_WQOS : (32) SCB0 DDE21 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST21_WQOS_Type;
#define REG_SCB0_MST21_WQOS		(*(RwReg *)0x2025C104UL)

#else
#define REG_SCB0_MST21_WQOS		(0x2025C104) /**< \brief (SCB0) SCB0 DDE21 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST27_RQOS : (32) SCB0 ETR Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST27_RQOS_Type;
#define REG_SCB0_MST27_RQOS		(*(RwReg *)0x2025D100UL)

#else
#define REG_SCB0_MST27_RQOS		(0x2025D100) /**< \brief (SCB0) SCB0 ETR Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST27_WQOS : (32) SCB0 ETR Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST27_WQOS_Type;
#define REG_SCB0_MST27_WQOS		(*(RwReg *)0x2025D104UL)

#else
#define REG_SCB0_MST27_WQOS		(0x2025D104) /**< \brief (SCB0) SCB0 ETR Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST28_RQOS : (32) SCB0 SPIHP0 Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST28_RQOS_Type;
#define REG_SCB0_MST28_RQOS		(*(RwReg *)0x2025E100UL)

#else
#define REG_SCB0_MST28_RQOS		(0x2025E100) /**< \brief (SCB0) SCB0 SPIHP0 Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST28_WQOS : (32) SCB0 SPIHP0 Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST28_WQOS_Type;
#define REG_SCB0_MST28_WQOS		(*(RwReg *)0x2025E104UL)

#else
#define REG_SCB0_MST28_WQOS		(0x2025E104) /**< \brief (SCB0) SCB0 SPIHP0 Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST29_RQOS : (32) SCB0 DAP Read Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Ar Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST29_RQOS_Type;
#define REG_SCB0_MST29_RQOS		(*(RwReg *)0x2025F100UL)

#else
#define REG_SCB0_MST29_RQOS		(0x2025F100) /**< \brief (SCB0) SCB0 DAP Read Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST29_WQOS : (32) SCB0 DAP Write Quality of Service ----- */
typedef union {
	struct {
		uint32_t VALUE:4;			/*!< bit	0..3	Aw Qos	*/
		uint32_t :28;			/*!< bit	4..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST29_WQOS_Type;
#define REG_SCB0_MST29_WQOS		(*(RwReg *)0x2025F104UL)

#else
#define REG_SCB0_MST29_WQOS		(0x2025F104) /**< \brief (SCB0) SCB0 DAP Write Quality of Service */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST30_SYNC : (32) SCB0 Interface Block IB4 Sync Mode ----- */
typedef union {
	struct {
		uint32_t VALUE:3;			/*!< bit	0..2	Sync Mode	*/
		uint32_t :29;			/*!< bit	3..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST30_SYNC_Type;
#define REG_SCB0_MST30_SYNC		(*(RwReg *)0x202C2020UL)

#else
#define REG_SCB0_MST30_SYNC		(0x202C2020) /**< \brief (SCB0) SCB0 Interface Block IB4 Sync Mode */
#endif

#if !(defined(__ASSEMBLY__))
/* ----- SCB0_MST31_SYNC : (32) SCB0 Interface Block IB5 Sync Mode ----- */
typedef union {
	struct {
		uint32_t VALUE:3;			/*!< bit	0..2	Sync Mode	*/
		uint32_t :29;			/*!< bit	3..31	Reserved	*/
	} bit;		/*!< Structure	used for bit access		*/
	uint32_t reg;		/*!< Type	used for bit access		*/
} SCB0_MST31_SYNC_Type;
#define REG_SCB0_MST31_SYNC		(*(RwReg *)0x202C3020UL)

#else
#define REG_SCB0_MST31_SYNC		(0x202C3020) /**< \brief (SCB0) SCB0 Interface Block IB5 Sync Mode */
#endif

#if !(defined(__ASSEMBLY__))
typedef struct {
	__IO SCB0_IB7_SYNC_Type		IB7_SYNC;		/**< \brief SCB0 DDR Interface Block Sync Mode */
		 RoReg8		Reserved1[0x3d0dc];		
	__IO SCB0_MST00_RQOS_Type		MST00_RQOS;		/**< \brief SCB0 DDE0 Read Quality of Service */
	__IO SCB0_MST00_WQOS_Type		MST00_WQOS;		/**< \brief SCB0 DDE0 Write Quality of Service */
		 RoReg8		Reserved2[0xff8];		
	__IO SCB0_MST01_RQOS_Type		MST01_RQOS;		/**< \brief SCB0 DDE1 Read Quality of Service */
	__IO SCB0_MST01_WQOS_Type		MST01_WQOS;		/**< \brief SCB0 DDE1 Write Quality of Service */
		 RoReg8		Reserved3[0xff8];		
	__IO SCB0_MST02_RQOS_Type		MST02_RQOS;		/**< \brief SCB0 DDE2 Read Quality of Service */
	__IO SCB0_MST02_WQOS_Type		MST02_WQOS;		/**< \brief SCB0 DDE2 Write Quality of Service */
		 RoReg8		Reserved4[0xff8];		
	__IO SCB0_MST03_RQOS_Type		MST03_RQOS;		/**< \brief SCB0 DDE3 Read Quality of Service */
	__IO SCB0_MST03_WQOS_Type		MST03_WQOS;		/**< \brief SCB0 DDE3 Write Quality of Service */
		 RoReg8		Reserved5[0xff8];		
	__IO SCB0_MST04_RQOS_Type		MST04_RQOS;		/**< \brief SCB0 DDE4 Read Quality of Service */
	__IO SCB0_MST04_WQOS_Type		MST04_WQOS;		/**< \brief SCB0 DDE4 Write Quality of Service */
		 RoReg8		Reserved6[0xff8];		
	__IO SCB0_MST05_RQOS_Type		MST05_RQOS;		/**< \brief SCB0 DDE5 Read Quality of Service */
	__IO SCB0_MST05_WQOS_Type		MST05_WQOS;		/**< \brief SCB0 DDE5 Write Quality of Service */
		 RoReg8		Reserved7[0xff8];		
	__IO SCB0_MST06_RQOS_Type		MST06_RQOS;		/**< \brief SCB0 DDE6 Read Quality of Service */
	__IO SCB0_MST06_WQOS_Type		MST06_WQOS;		/**< \brief SCB0 DDE6 Write Quality of Service */
		 RoReg8		Reserved8[0xff8];		
	__IO SCB0_MST07_RQOS_Type		MST07_RQOS;		/**< \brief SCB0 DDE7 Read Quality of Service */
	__IO SCB0_MST07_WQOS_Type		MST07_WQOS;		/**< \brief SCB0 DDE7 Write Quality of Service */
		 RoReg8		Reserved9[0xff8];		
	__IO SCB0_MST08_RQOS_Type		MST08_RQOS;		/**< \brief SCB0 DDE8 Read Quality of Service */
	__IO SCB0_MST08_WQOS_Type		MST08_WQOS;		/**< \brief SCB0 DDE8 Write Quality of Service */
		 RoReg8		Reserved10[0xff8];		
	__IO SCB0_MST09_RQOS_Type		MST09_RQOS;		/**< \brief SCB0 DDE9 Read Quality of Service */
	__IO SCB0_MST09_WQOS_Type		MST09_WQOS;		/**< \brief SCB0 DDE9 Write Quality of Service */
		 RoReg8		Reserved11[0xff8];		
	__IO SCB0_MST10_RQOS_Type		MST10_RQOS;		/**< \brief SCB0 DDE10 Read Quality of Service */
	__IO SCB0_MST10_WQOS_Type		MST10_WQOS;		/**< \brief SCB0 DDE10 Write Quality of Service */
		 RoReg8		Reserved12[0xff8];		
	__IO SCB0_MST11_RQOS_Type		MST11_RQOS;		/**< \brief SCB0 DDE11 Read Quality of Service */
	__IO SCB0_MST11_WQOS_Type		MST11_WQOS;		/**< \brief SCB0 DDE11 Write Quality of Service */
		 RoReg8		Reserved13[0xff8];		
	__IO SCB0_MST12_RQOS_Type		MST12_RQOS;		/**< \brief SCB0 DDE12 Read Quality of Service */
	__IO SCB0_MST12_WQOS_Type		MST12_WQOS;		/**< \brief SCB0 DDE12 Write Quality of Service */
		 RoReg8		Reserved14[0xff8];		
	__IO SCB0_MST13_RQOS_Type		MST13_RQOS;		/**< \brief SCB0 DDE13 Read Quality of Service */
	__IO SCB0_MST13_WQOS_Type		MST13_WQOS;		/**< \brief SCB0 DDE13 Write Quality of Service */
		 RoReg8		Reserved15[0xff8];		
	__IO SCB0_MST14_RQOS_Type		MST14_RQOS;		/**< \brief SCB0 DDE14 Read Quality of Service */
	__IO SCB0_MST14_WQOS_Type		MST14_WQOS;		/**< \brief SCB0 DDE14 Write Quality of Service */
		 RoReg8		Reserved16[0xff8];		
	__IO SCB0_MST15_RQOS_Type		MST15_RQOS;		/**< \brief SCB0 DDE15 Read Quality of Service */
	__IO SCB0_MST15_WQOS_Type		MST15_WQOS;		/**< \brief SCB0 DDE15 Write Quality of Service */
		 RoReg8		Reserved17[0xff8];		
	__IO SCB0_MST16_RQOS_Type		MST16_RQOS;		/**< \brief SCB0 DDE16 Read Quality of Service */
	__IO SCB0_MST16_WQOS_Type		MST16_WQOS;		/**< \brief SCB0 DDE16 Write Quality of Service */
		 RoReg8		Reserved18[0xff8];		
	__IO SCB0_MST17_RQOS_Type		MST17_RQOS;		/**< \brief SCB0 DDE17 Read Quality of Service */
	__IO SCB0_MST17_WQOS_Type		MST17_WQOS;		/**< \brief SCB0 DDE17 Write Quality of Service */
		 RoReg8		Reserved19[0xff8];		
	__IO SCB0_MST22_RQOS_Type		MST22_RQOS;		/**< \brief SCB0 USB0 Read Quality of Service */
	__IO SCB0_MST22_WQOS_Type		MST22_WQOS;		/**< \brief SCB0 USB0 Write Quality of Service */
		 RoReg8		Reserved20[0xff8];		
	__IO SCB0_MST25_RQOS_Type		MST25_RQOS;		/**< \brief SCB0 MSI0 Read Quality of Service */
	__IO SCB0_MST25_WQOS_Type		MST25_WQOS;		/**< \brief SCB0 MSI0 Write Quality of Service */
		 RoReg8		Reserved21[0xf18];		
	__IO SCB0_IB6_SYNC_Type		IB6_SYNC;		/**< \brief SCB0 Crypto Modules Sync Mode */
		 RoReg8		Reserved22[0xdc];		
	__IO SCB0_MST26_RQOS_Type		MST26_RQOS;		/**< \brief SCB0 Crypto Modules Read Quality of Service */
	__IO SCB0_MST26_WQOS_Type		MST26_WQOS;		/**< \brief SCB0 Crypto Modules Write Quality of Service */
		 RoReg8		Reserved23[0xff8];		
	__IO SCB0_MST23_RQOS_Type		MST23_RQOS;		/**< \brief SCB0 Memory Interface Read Quality of Service */
	__IO SCB0_MST23_WQOS_Type		MST23_WQOS;		/**< \brief SCB0 Memory Interface Write Quality of Service */
		 RoReg8		Reserved24[0xff8];		
	__IO SCB0_MST24_RQOS_Type		MST24_RQOS;		/**< \brief SCB0 MMR Read Quality of Service */
	__IO SCB0_MST24_WQOS_Type		MST24_WQOS;		/**< \brief SCB0 MMR Write Quality of Service */
		 RoReg8		Reserved25[0xff8];		
	__IO SCB0_MST18_RQOS_Type		MST18_RQOS;		/**< \brief SCB0 DDE18 Read Quality of Service */
	__IO SCB0_MST18_WQOS_Type		MST18_WQOS;		/**< \brief SCB0 DDE18 Write Quality of Service */
		 RoReg8		Reserved26[0xff8];		
	__IO SCB0_MST19_RQOS_Type		MST19_RQOS;		/**< \brief SCB0 DDE19 Read Quality of Service */
	__IO SCB0_MST19_WQOS_Type		MST19_WQOS;		/**< \brief SCB0 DDE19 Write Quality of Service */
		 RoReg8		Reserved27[0xff8];		
	__IO SCB0_MST20_RQOS_Type		MST20_RQOS;		/**< \brief SCB0 DDE20 Read Quality of Service */
	__IO SCB0_MST20_WQOS_Type		MST20_WQOS;		/**< \brief SCB0 DDE20 Write Quality of Service */
		 RoReg8		Reserved28[0xff8];		
	__IO SCB0_MST21_RQOS_Type		MST21_RQOS;		/**< \brief SCB0 DDE21 Read Quality of Service */
	__IO SCB0_MST21_WQOS_Type		MST21_WQOS;		/**< \brief SCB0 DDE21 Write Quality of Service */
		 RoReg8		Reserved29[0xff8];		
	__IO SCB0_MST27_RQOS_Type		MST27_RQOS;		/**< \brief SCB0 ETR Read Quality of Service */
	__IO SCB0_MST27_WQOS_Type		MST27_WQOS;		/**< \brief SCB0 ETR Write Quality of Service */
		 RoReg8		Reserved30[0xff8];		
	__IO SCB0_MST28_RQOS_Type		MST28_RQOS;		/**< \brief SCB0 SPIHP0 Read Quality of Service */
	__IO SCB0_MST28_WQOS_Type		MST28_WQOS;		/**< \brief SCB0 SPIHP0 Write Quality of Service */
		 RoReg8		Reserved31[0xff8];		
	__IO SCB0_MST29_RQOS_Type		MST29_RQOS;		/**< \brief SCB0 DAP Read Quality of Service */
	__IO SCB0_MST29_WQOS_Type		MST29_WQOS;		/**< \brief SCB0 DAP Write Quality of Service */
		 RoReg8		Reserved32[0x62f18];		
	__IO SCB0_MST30_SYNC_Type		MST30_SYNC;		/**< \brief SCB0 Interface Block IB4 Sync Mode */
		 RoReg8		Reserved33[0xffc];		
	__IO SCB0_MST31_SYNC_Type		MST31_SYNC;		/**< \brief SCB0 Interface Block IB5 Sync Mode */
} Scb0;
#endif


 /*------- INSTANCES -------*/

#if (defined(__ASSEMBLY__))
#define L1DM			(0x1FC00000)
#define L1IM			(0x1FC01004)
#define ICU			(0x1FC02000)
#define TMR			(0x1FC03000)
#define DBG			(0x1FC05000)
#define WP			(0x1FC07000)
#define PF			(0x1FC08000)
#define OPT			(0x1FC09000)
#define BP			(0x1FC0A000)
#define RCU0			(0x20000000)
#define TRU0			(0x20001000)
#define CGU0			(0x20002000)
#define DPM0			(0x20003000)
#define SCI			(0x20004400)
#define SFI			(0x20004010)
#define SEC_Global			(0x20004000)
#define SSI			(0x20004800)
#define SPU0			(0x20005000)
#define SMPU0			(0x20006000)
#define SMPU1			(0x200C8000)
#define L2CTL0			(0x20008000)
#define SWU0			(0x2000C000)
#define SWU1			(0x2000E000)
#define SWU2			(0x2000F000)
#define SWU3			(0x2000D000)
#define SWU4			(0x200CC000)
#define SWU5			(0x20077000)
#define SWU6			(0x20078000)
#define SWU7			(0x20079000)
#define PORTA			(0x20040000)
#define PORTB			(0x20040080)
#define PORTC			(0x20040100)
#define PADS0			(0x20040404)
#define PINT0			(0x20041000)
#define PINT1			(0x20041100)
#define PINT2			(0x20041200)
#define TIMER0			(0x20043004)
#define WDOG0			(0x20046000)
#define TAPC0			(0x20048000)
#define TWI0			(0x2004A000)
#define SPORT0			(0x2004D000)
#define SPORT1			(0x2004E000)
#define SPI0			(0x20055004)
#define SPI1			(0x20056004)
#define SPI2			(0x20057004)
#define SPIHP0			(0x20058000)
#define SMC0			(0x2005D00C)
#define UART0			(0x2005F004)
#define UART1			(0x2005F404)
#define EPPI0			(0x20063000)
#define CAN0			(0x2006C200)
#define CAN1			(0x2006D200)
#define CNT0			(0x20070000)
#define OTPC0			(0x20075004)
#define MSI0			(0x20076000)
#define DMA0			(0x2007C000)
#define DMA1			(0x2007D000)
#define DMA2			(0x2007E000)
#define DMA3			(0x2007F000)
#define DMA4			(0x20080000)
#define DMA5			(0x20081000)
#define DMA6			(0x20082000)
#define DMA7			(0x20083000)
#define DMA8			(0x20084000)
#define DMA9			(0x20085000)
#define DMA10			(0x20086000)
#define DMA11			(0x20087000)
#define DMA12			(0x20088000)
#define DMA13			(0x20089000)
#define DMA14			(0x2008A000)
#define DMA15			(0x2008B000)
#define DMA16			(0x2008C000)
#define DMA17			(0x2008D000)
#define DMA18			(0x200A0000)
#define DMA19			(0x200A1000)
#define DMA20			(0x200A2000)
#define DMA21			(0x200A3000)
#define CRC0			(0x200B0000)
#define CRC1			(0x200B1000)
#define DMC0			(0x200C1004)
#define USB0			(0x200D0000)
#define RTC0			(0x200D1280)
#define PKTE0			(0x200E0000)
#define TRNG0			(0x200F0000)
#define PKA0			(0x200F4000)
#define PKIC0			(0x200F8000)
#define SCB0			(0x20205020)
#else
#define L1DM			((L1Dm		*)0x1FC00000UL)
#define L1IM			((L1Im		*)0x1FC01004UL)
#define ICU			((Icu		*)0x1FC02000UL)
#define TMR			((Tmr		*)0x1FC03000UL)
#define DBG			((Dbg		*)0x1FC05000UL)
#define WP			((Wp		*)0x1FC07000UL)
#define PF			((Pf		*)0x1FC08000UL)
#define OPT			((Opt		*)0x1FC09000UL)
#define BP			((Bp		*)0x1FC0A000UL)
#define RCU0			((Rcu0		*)0x20000000UL)
#define TRU0			((Tru0		*)0x20001000UL)
#define CGU0			((Cgu0		*)0x20002000UL)
#define DPM0			((Dpm0		*)0x20003000UL)
#define SCI			((Sci		*)0x20004400UL)
#define SFI			((Sfi		*)0x20004010UL)
#define SEC_Global			((Sec_Global		*)0x20004000UL)
#define SSI			((Ssi		*)0x20004800UL)
#define SPU0			((Spu0		*)0x20005000UL)
#define SMPU0			((Smpu0		*)0x20006000UL)
#define SMPU1			((Smpu1		*)0x200C8000UL)
#define L2CTL0			((L2Ctl0		*)0x20008000UL)
#define SWU0			((Swu0		*)0x2000C000UL)
#define SWU1			((Swu1		*)0x2000E000UL)
#define SWU2			((Swu2		*)0x2000F000UL)
#define SWU3			((Swu3		*)0x2000D000UL)
#define SWU4			((Swu4		*)0x200CC000UL)
#define SWU5			((Swu5		*)0x20077000UL)
#define SWU6			((Swu6		*)0x20078000UL)
#define SWU7			((Swu7		*)0x20079000UL)
#define PORTA			((Portgroup		*)0x20040000UL)
#define PORTB			((Portgroup		*)0x20040080UL)
#define PORTC			((Portgroup		*)0x20040100UL)
#define PADS0			((Pads0		*)0x20040404UL)
#define PINT0			((Pint0		*)0x20041000UL)
#define PINT1			((Pint1		*)0x20041100UL)
#define PINT2			((Pint2		*)0x20041200UL)
#define TIMER0			((Timer0		*)0x20043004UL)
#define WDOG0			((Wdog0		*)0x20046000UL)
#define TAPC0			((Tapc0		*)0x20048000UL)
#define TWI0			((Twi0		*)0x2004A000UL)
#define SPORT0			((Sportgroup		*)0x2004D000UL)
#define SPORT1			((Sportgroup		*)0x2004E000UL)
#define SPI0			((Spigroup		*)0x20055004UL)
#define SPI1			((Spigroup		*)0x20056004UL)
#define SPI2			((Spigroup		*)0x20057004UL)
#define SPIHP0			((Spihp0		*)0x20058000UL)
#define SMC0			((Smc0		*)0x2005D00CUL)
#define UART0			((Uartgroup		*)0x2005F004UL)
#define UART1			((Uartgroup		*)0x2005F404UL)
#define EPPI0			((Eppi0		*)0x20063000UL)
#define CAN0			((Cangroup		*)0x2006C200UL)
#define CAN1			((Cangroup		*)0x2006D200UL)
#define CNT0			((Cnt0		*)0x20070000UL)
#define OTPC0			((Otpc0		*)0x20075004UL)
#define MSI0			((Msi0		*)0x20076000UL)
#define DMA0			((Dmagroup		*)0x2007C000UL)
#define DMA1			((Dmagroup		*)0x2007D000UL)
#define DMA2			((Dmagroup		*)0x2007E000UL)
#define DMA3			((Dmagroup		*)0x2007F000UL)
#define DMA4			((Dmagroup		*)0x20080000UL)
#define DMA5			((Dmagroup		*)0x20081000UL)
#define DMA6			((Dmagroup		*)0x20082000UL)
#define DMA7			((Dmagroup		*)0x20083000UL)
#define DMA8			((Dmagroup		*)0x20084000UL)
#define DMA9			((Dmagroup		*)0x20085000UL)
#define DMA10			((Dmagroup		*)0x20086000UL)
#define DMA11			((Dmagroup		*)0x20087000UL)
#define DMA12			((Dmagroup		*)0x20088000UL)
#define DMA13			((Dmagroup		*)0x20089000UL)
#define DMA14			((Dmagroup		*)0x2008A000UL)
#define DMA15			((Dmagroup		*)0x2008B000UL)
#define DMA16			((Dmagroup		*)0x2008C000UL)
#define DMA17			((Dmagroup		*)0x2008D000UL)
#define DMA18			((Dmagroup		*)0x200A0000UL)
#define DMA19			((Dmagroup		*)0x200A1000UL)
#define DMA20			((Dmagroup		*)0x200A2000UL)
#define DMA21			((Dmagroup		*)0x200A3000UL)
#define CRC0			((Crc0		*)0x200B0000UL)
#define CRC1			((Crc1		*)0x200B1000UL)
#define DMC0			((Dmc0		*)0x200C1004UL)
#define USB0			((Usb0		*)0x200D0000UL)
#define RTC0			((Rtc0		*)0x200D1280UL)
#define PKTE0			((Pkte0		*)0x200E0000UL)
#define TRNG0			((Trng0		*)0x200F0000UL)
#define PKA0			((Pka0		*)0x200F4000UL)
#define PKIC0			((Pkic0		*)0x200F8000UL)
#define SCB0			((Scb0		*)0x20205020UL)

#define DMA_NUM	22
#define DMA_INSTS	{DMA0,DMA1,DMA2,DMA3,DMA4,DMA5,DMA6,DMA7,DMA8,DMA9,DMA10,DMA11,DMA12,DMA13,DMA14,DMA15,DMA16,DMA17,DMA18,DMA19,DMA20,DMA21}
#define UART_NUM	2
#define UART_INSTS	{UART0,UART1}
#define SPI_NUM	3
#define SPI_INSTS	{SPI0,SPI1,SPI2}
#define CAN_NUM	2
#define CAN_INSTS	{CAN0,CAN1}
#define SPORT_NUM	2
#define SPORT_INSTS	{SPORT0,SPORT1}
#define PORT_NUM	3
#define PORT_INSTS	{PORTA,PORTB,PORTC}
#endif


#ifdef __cplusplus
}
#endif	 


#endif